
MeasurementPCB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c12c  0800c280  0800c280  0001c280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080283ac  080283ac  000401e4  2**0
                  CONTENTS
  4 .ARM          00000008  080283ac  080283ac  000383ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080283b4  080283b4  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080283b4  080283b4  000383b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080283b8  080283b8  000383b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080283bc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039bc  200001e4  080285a0  000401e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ba0  080285a0  00043ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bbd  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004482  00000000  00000000  00061dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00066258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001880  00000000  00000000  00067cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018411  00000000  00000000  00069538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000901c  00000000  00000000  00081949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c0  00000000  00000000  0008a965  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008370  00000000  00000000  0008aa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000506  00000000  00000000  00092d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c264 	.word	0x0800c264

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800c264 	.word	0x0800c264

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  //Initialize DSP functions
  arm_rfft_fast_init_f32(&S, FFT_SIZE);
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_FREERTOS_Init+0x20>)
 8001042:	f006 fb15 	bl	8007670 <arm_rfft_fast_init_f32>
  /* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
  arm_cfft_radix4_init_f32(&L, FFT_SIZE, 0, 1);
 8001046:	2301      	movs	r3, #1
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <MX_FREERTOS_Init+0x24>)
 8001050:	f006 fb92 	bl	8007778 <arm_cfft_radix4_init_f32>
  */

/**
  * @}
  */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000200 	.word	0x20000200
 800105c:	20000218 	.word	0x20000218

08001060 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <MX_GPIO_Init+0x194>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a5d      	ldr	r2, [pc, #372]	; (80011f4 <MX_GPIO_Init+0x194>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <MX_GPIO_Init+0x194>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b57      	ldr	r3, [pc, #348]	; (80011f4 <MX_GPIO_Init+0x194>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a56      	ldr	r2, [pc, #344]	; (80011f4 <MX_GPIO_Init+0x194>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a41      	ldr	r2, [pc, #260]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <MX_GPIO_Init+0x194>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thermistorSwitch_Pin|CS_Pin|RTS_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f640 0111 	movw	r1, #2065	; 0x811
 8001108:	483b      	ldr	r0, [pc, #236]	; (80011f8 <MX_GPIO_Init+0x198>)
 800110a:	f001 f999 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800110e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001112:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001114:	2303      	movs	r3, #3
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4836      	ldr	r0, [pc, #216]	; (80011fc <MX_GPIO_Init+0x19c>)
 8001124:	f001 f810 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = thermistorSwitch_Pin;
 8001128:	2301      	movs	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(thermistorSwitch_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	482e      	ldr	r0, [pc, #184]	; (80011f8 <MX_GPIO_Init+0x198>)
 8001140:	f001 f802 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8001144:	f241 030e 	movw	r3, #4110	; 0x100e
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4827      	ldr	r0, [pc, #156]	; (80011f8 <MX_GPIO_Init+0x198>)
 800115a:	f000 fff5 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800115e:	2310      	movs	r3, #16
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4820      	ldr	r0, [pc, #128]	; (80011f8 <MX_GPIO_Init+0x198>)
 8001176:	f000 ffe7 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800117a:	f24f 7327 	movw	r3, #63271	; 0xf727
 800117e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	481c      	ldr	r0, [pc, #112]	; (8001200 <MX_GPIO_Init+0x1a0>)
 8001190:	f000 ffda 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_GPIO_Init+0x198>)
 80011b2:	f000 ffc9 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTS_Pin;
 80011b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTS_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	480a      	ldr	r0, [pc, #40]	; (80011f8 <MX_GPIO_Init+0x198>)
 80011d0:	f000 ffba 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d4:	2304      	movs	r3, #4
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_GPIO_Init+0x1a4>)
 80011e8:	f000 ffae 	bl	8002148 <HAL_GPIO_Init>

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020400 	.word	0x40020400
 8001204:	40020c00 	.word	0x40020c00

08001208 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f001 f915 	bl	8002474 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 fb7c 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000022c 	.word	0x2000022c
 800125c:	40005400 	.word	0x40005400
 8001260:	00061a80 	.word	0x00061a80

08001264 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_I2C_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12b      	bne.n	80012de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_I2C_MspInit+0x88>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_I2C_MspInit+0x88>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_I2C_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a2:	23c0      	movs	r3, #192	; 0xc0
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a6:	2312      	movs	r3, #18
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b2:	2304      	movs	r3, #4
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <HAL_I2C_MspInit+0x8c>)
 80012be:	f000 ff43 	bl	8002148 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_I2C_MspInit+0x88>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_I2C_MspInit+0x88>)
 80012cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_I2C_MspInit+0x88>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 80012fa:	4bb6      	ldr	r3, [pc, #728]	; (80015d4 <main+0x2e0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <main+0x2c>
	  ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001302:	4bb5      	ldr	r3, [pc, #724]	; (80015d8 <main+0x2e4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4ab4      	ldr	r2, [pc, #720]	; (80015d8 <main+0x2e4>)
 8001308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800130c:	6013      	str	r3, [r2, #0]
	  ARM_CM_DWT_CYCCNT  = 0;
 800130e:	4bb3      	ldr	r3, [pc, #716]	; (80015dc <main+0x2e8>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
	  ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8001314:	4baf      	ldr	r3, [pc, #700]	; (80015d4 <main+0x2e0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4aae      	ldr	r2, [pc, #696]	; (80015d4 <main+0x2e0>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 fdca 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 fa8e 	bl	8001844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f7ff fe9a 	bl	8001060 <MX_GPIO_Init>
  MX_I2C1_Init();
 800132c:	f7ff ff6c 	bl	8001208 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001330:	f000 fb12 	bl	8001958 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001334:	f000 fd24 	bl	8001d80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*initialize humidity module (I2C)*/
  //Check if device is connected
  if((ret = HAL_I2C_IsDeviceReady(&hi2c1, SHT31_ADDR, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	2201      	movs	r2, #1
 800133e:	2188      	movs	r1, #136	; 0x88
 8001340:	48a7      	ldr	r0, [pc, #668]	; (80015e0 <main+0x2ec>)
 8001342:	f001 fad9 	bl	80028f8 <HAL_I2C_IsDeviceReady>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4ba6      	ldr	r3, [pc, #664]	; (80015e4 <main+0x2f0>)
 800134c:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Disable heater
  I2C_trans[0] = SHT31_HEATER_First;
 800134e:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <main+0x2f4>)
 8001350:	2230      	movs	r2, #48	; 0x30
 8001352:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = SHT31_HEATER_Second;
 8001354:	4ba4      	ldr	r3, [pc, #656]	; (80015e8 <main+0x2f4>)
 8001356:	2266      	movs	r2, #102	; 0x66
 8001358:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2302      	movs	r3, #2
 8001362:	4aa1      	ldr	r2, [pc, #644]	; (80015e8 <main+0x2f4>)
 8001364:	2188      	movs	r1, #136	; 0x88
 8001366:	489e      	ldr	r0, [pc, #632]	; (80015e0 <main+0x2ec>)
 8001368:	f001 f9c8 	bl	80026fc <HAL_I2C_Master_Transmit>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b9c      	ldr	r3, [pc, #624]	; (80015e4 <main+0x2f0>)
 8001372:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  /*Initialize accelerometer module (I2C)*/
  //check if device is connected
  if((ret = HAL_I2C_IsDeviceReady(&hi2c1, LIS2_ADDR, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	2201      	movs	r2, #1
 800137a:	213a      	movs	r1, #58	; 0x3a
 800137c:	4898      	ldr	r0, [pc, #608]	; (80015e0 <main+0x2ec>)
 800137e:	f001 fabb 	bl	80028f8 <HAL_I2C_IsDeviceReady>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b97      	ldr	r3, [pc, #604]	; (80015e4 <main+0x2f0>)
 8001388:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Write setting to control register 1
  I2C_trans[0] = LIS2_CTRL1_ADDR;
 800138a:	4b97      	ldr	r3, [pc, #604]	; (80015e8 <main+0x2f4>)
 800138c:	2220      	movs	r2, #32
 800138e:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = LIS2_CTRL1_Write;
 8001390:	4b95      	ldr	r3, [pc, #596]	; (80015e8 <main+0x2f4>)
 8001392:	2278      	movs	r2, #120	; 0x78
 8001394:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2302      	movs	r3, #2
 800139e:	4a92      	ldr	r2, [pc, #584]	; (80015e8 <main+0x2f4>)
 80013a0:	213a      	movs	r1, #58	; 0x3a
 80013a2:	488f      	ldr	r0, [pc, #572]	; (80015e0 <main+0x2ec>)
 80013a4:	f001 f9aa 	bl	80026fc <HAL_I2C_Master_Transmit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b8d      	ldr	r3, [pc, #564]	; (80015e4 <main+0x2f0>)
 80013ae:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Write setting to FIFO register
  I2C_trans[0] = LIS2_FIFO_ADDR;
 80013b0:	4b8d      	ldr	r3, [pc, #564]	; (80015e8 <main+0x2f4>)
 80013b2:	2225      	movs	r2, #37	; 0x25
 80013b4:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = LIS2_FIFO_Write;
 80013b6:	4b8c      	ldr	r3, [pc, #560]	; (80015e8 <main+0x2f4>)
 80013b8:	22c0      	movs	r2, #192	; 0xc0
 80013ba:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2302      	movs	r3, #2
 80013c4:	4a88      	ldr	r2, [pc, #544]	; (80015e8 <main+0x2f4>)
 80013c6:	213a      	movs	r1, #58	; 0x3a
 80013c8:	4885      	ldr	r0, [pc, #532]	; (80015e0 <main+0x2ec>)
 80013ca:	f001 f997 	bl	80026fc <HAL_I2C_Master_Transmit>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b84      	ldr	r3, [pc, #528]	; (80015e4 <main+0x2f0>)
 80013d4:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  /*Initialize Temp module (SPI)*/
  //Reset command
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2110      	movs	r1, #16
 80013da:	4884      	ldr	r0, [pc, #528]	; (80015ec <main+0x2f8>)
 80013dc:	f001 f830 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_CMD_RESET;
 80013e0:	4b83      	ldr	r3, [pc, #524]	; (80015f0 <main+0x2fc>)
 80013e2:	227c      	movs	r2, #124	; 0x7c
 80013e4:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	2201      	movs	r2, #1
 80013ec:	4980      	ldr	r1, [pc, #512]	; (80015f0 <main+0x2fc>)
 80013ee:	4881      	ldr	r0, [pc, #516]	; (80015f4 <main+0x300>)
 80013f0:	f002 fb41 	bl	8003a76 <HAL_SPI_Transmit>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <main+0x2f0>)
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <main+0x2f0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d000      	beq.n	8001406 <main+0x112>
	  //error handler
	  while(1);
 8001404:	e7fe      	b.n	8001404 <main+0x110>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2110      	movs	r1, #16
 800140a:	4878      	ldr	r0, [pc, #480]	; (80015ec <main+0x2f8>)
 800140c:	f001 f818 	bl	8002440 <HAL_GPIO_WritePin>
  //Setup MUX
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2110      	movs	r1, #16
 8001414:	4875      	ldr	r0, [pc, #468]	; (80015ec <main+0x2f8>)
 8001416:	f001 f813 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_MUX | MCP_WRITE;
 800141a:	4b75      	ldr	r3, [pc, #468]	; (80015f0 <main+0x2fc>)
 800141c:	225a      	movs	r2, #90	; 0x5a
 800141e:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x01;
 8001420:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <main+0x2fc>)
 8001422:	2201      	movs	r2, #1
 8001424:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	2202      	movs	r2, #2
 800142c:	4970      	ldr	r1, [pc, #448]	; (80015f0 <main+0x2fc>)
 800142e:	4871      	ldr	r0, [pc, #452]	; (80015f4 <main+0x300>)
 8001430:	f002 fb21 	bl	8003a76 <HAL_SPI_Transmit>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <main+0x2f0>)
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	4b69      	ldr	r3, [pc, #420]	; (80015e4 <main+0x2f0>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d000      	beq.n	8001446 <main+0x152>
	  //error handler
	  while(1);
 8001444:	e7fe      	b.n	8001444 <main+0x150>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2110      	movs	r1, #16
 800144a:	4868      	ldr	r0, [pc, #416]	; (80015ec <main+0x2f8>)
 800144c:	f000 fff8 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2110      	movs	r1, #16
 8001454:	4865      	ldr	r0, [pc, #404]	; (80015ec <main+0x2f8>)
 8001456:	f000 fff3 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_MUX | MCP_STATICREAD;
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <main+0x2fc>)
 800145c:	2259      	movs	r2, #89	; 0x59
 800145e:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	2201      	movs	r2, #1
 8001466:	4962      	ldr	r1, [pc, #392]	; (80015f0 <main+0x2fc>)
 8001468:	4862      	ldr	r0, [pc, #392]	; (80015f4 <main+0x300>)
 800146a:	f002 fb04 	bl	8003a76 <HAL_SPI_Transmit>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <main+0x2f0>)
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <main+0x2f0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d000      	beq.n	8001480 <main+0x18c>
	  //error handler
	  while(1);
 800147e:	e7fe      	b.n	800147e <main+0x18a>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	2201      	movs	r2, #1
 8001486:	495c      	ldr	r1, [pc, #368]	; (80015f8 <main+0x304>)
 8001488:	485a      	ldr	r0, [pc, #360]	; (80015f4 <main+0x300>)
 800148a:	f002 fc30 	bl	8003cee <HAL_SPI_Receive>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b54      	ldr	r3, [pc, #336]	; (80015e4 <main+0x2f0>)
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <main+0x2f0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d000      	beq.n	80014a0 <main+0x1ac>
	  //error handler
	  while(1);
 800149e:	e7fe      	b.n	800149e <main+0x1aa>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2110      	movs	r1, #16
 80014a4:	4851      	ldr	r0, [pc, #324]	; (80015ec <main+0x2f8>)
 80014a6:	f000 ffcb 	bl	8002440 <HAL_GPIO_WritePin>
  //Write settings to config register 0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2110      	movs	r1, #16
 80014ae:	484f      	ldr	r0, [pc, #316]	; (80015ec <main+0x2f8>)
 80014b0:	f000 ffc6 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF0 | MCP_WRITE;
 80014b4:	4b4e      	ldr	r3, [pc, #312]	; (80015f0 <main+0x2fc>)
 80014b6:	2246      	movs	r2, #70	; 0x46
 80014b8:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xC3;
 80014ba:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <main+0x2fc>)
 80014bc:	22c3      	movs	r2, #195	; 0xc3
 80014be:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	2202      	movs	r2, #2
 80014c6:	494a      	ldr	r1, [pc, #296]	; (80015f0 <main+0x2fc>)
 80014c8:	484a      	ldr	r0, [pc, #296]	; (80015f4 <main+0x300>)
 80014ca:	f002 fad4 	bl	8003a76 <HAL_SPI_Transmit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <main+0x2f0>)
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <main+0x2f0>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d000      	beq.n	80014e0 <main+0x1ec>
	  //error handler
	  while(1);
 80014de:	e7fe      	b.n	80014de <main+0x1ea>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2110      	movs	r1, #16
 80014e4:	4841      	ldr	r0, [pc, #260]	; (80015ec <main+0x2f8>)
 80014e6:	f000 ffab 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2110      	movs	r1, #16
 80014ee:	483f      	ldr	r0, [pc, #252]	; (80015ec <main+0x2f8>)
 80014f0:	f000 ffa6 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF0 | MCP_STATICREAD;	//01000101
 80014f4:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <main+0x2fc>)
 80014f6:	2245      	movs	r2, #69	; 0x45
 80014f8:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	2201      	movs	r2, #1
 8001500:	493b      	ldr	r1, [pc, #236]	; (80015f0 <main+0x2fc>)
 8001502:	483c      	ldr	r0, [pc, #240]	; (80015f4 <main+0x300>)
 8001504:	f002 fab7 	bl	8003a76 <HAL_SPI_Transmit>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <main+0x2f0>)
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <main+0x2f0>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d000      	beq.n	800151a <main+0x226>
	  //error handler
	  while(1);
 8001518:	e7fe      	b.n	8001518 <main+0x224>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	2201      	movs	r2, #1
 8001520:	4935      	ldr	r1, [pc, #212]	; (80015f8 <main+0x304>)
 8001522:	4834      	ldr	r0, [pc, #208]	; (80015f4 <main+0x300>)
 8001524:	f002 fbe3 	bl	8003cee <HAL_SPI_Receive>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <main+0x2f0>)
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <main+0x2f0>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d000      	beq.n	800153a <main+0x246>
	  //error handler
	  while(1);
 8001538:	e7fe      	b.n	8001538 <main+0x244>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2110      	movs	r1, #16
 800153e:	482b      	ldr	r0, [pc, #172]	; (80015ec <main+0x2f8>)
 8001540:	f000 ff7e 	bl	8002440 <HAL_GPIO_WritePin>
  //Write settings to config register 1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2110      	movs	r1, #16
 8001548:	4828      	ldr	r0, [pc, #160]	; (80015ec <main+0x2f8>)
 800154a:	f000 ff79 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF1 | MCP_WRITE;
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <main+0x2fc>)
 8001550:	224a      	movs	r2, #74	; 0x4a
 8001552:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xCC; //F0 for diff CC for single
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <main+0x2fc>)
 8001556:	22cc      	movs	r2, #204	; 0xcc
 8001558:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2202      	movs	r2, #2
 8001560:	4923      	ldr	r1, [pc, #140]	; (80015f0 <main+0x2fc>)
 8001562:	4824      	ldr	r0, [pc, #144]	; (80015f4 <main+0x300>)
 8001564:	f002 fa87 	bl	8003a76 <HAL_SPI_Transmit>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <main+0x2f0>)
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <main+0x2f0>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d000      	beq.n	800157a <main+0x286>
	  //error handler
	  while(1);
 8001578:	e7fe      	b.n	8001578 <main+0x284>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2110      	movs	r1, #16
 800157e:	481b      	ldr	r0, [pc, #108]	; (80015ec <main+0x2f8>)
 8001580:	f000 ff5e 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <main+0x2f8>)
 800158a:	f000 ff59 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF1 | MCP_STATICREAD;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <main+0x2fc>)
 8001590:	2249      	movs	r2, #73	; 0x49
 8001592:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	2201      	movs	r2, #1
 800159a:	4915      	ldr	r1, [pc, #84]	; (80015f0 <main+0x2fc>)
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <main+0x300>)
 800159e:	f002 fa6a 	bl	8003a76 <HAL_SPI_Transmit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <main+0x2f0>)
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <main+0x2f0>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d000      	beq.n	80015b4 <main+0x2c0>
	  //error handler
	  while(1);
 80015b2:	e7fe      	b.n	80015b2 <main+0x2be>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	2201      	movs	r2, #1
 80015ba:	490f      	ldr	r1, [pc, #60]	; (80015f8 <main+0x304>)
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <main+0x300>)
 80015be:	f002 fb96 	bl	8003cee <HAL_SPI_Receive>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <main+0x2f0>)
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <main+0x2f0>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d014      	beq.n	80015fc <main+0x308>
	  //error handler
	  while(1);
 80015d2:	e7fe      	b.n	80015d2 <main+0x2de>
 80015d4:	e0001000 	.word	0xe0001000
 80015d8:	e000edfc 	.word	0xe000edfc
 80015dc:	e0001004 	.word	0xe0001004
 80015e0:	2000022c 	.word	0x2000022c
 80015e4:	20000280 	.word	0x20000280
 80015e8:	2000037c 	.word	0x2000037c
 80015ec:	40020000 	.word	0x40020000
 80015f0:	2000036c 	.word	0x2000036c
 80015f4:	20000284 	.word	0x20000284
 80015f8:	20000374 	.word	0x20000374
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2110      	movs	r1, #16
 8001600:	488b      	ldr	r0, [pc, #556]	; (8001830 <main+0x53c>)
 8001602:	f000 ff1d 	bl	8002440 <HAL_GPIO_WritePin>
  //Write settings to config register 2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2110      	movs	r1, #16
 800160a:	4889      	ldr	r0, [pc, #548]	; (8001830 <main+0x53c>)
 800160c:	f000 ff18 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF2 | MCP_WRITE;
 8001610:	4b88      	ldr	r3, [pc, #544]	; (8001834 <main+0x540>)
 8001612:	224e      	movs	r2, #78	; 0x4e
 8001614:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x0B;
 8001616:	4b87      	ldr	r3, [pc, #540]	; (8001834 <main+0x540>)
 8001618:	220b      	movs	r2, #11
 800161a:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	2202      	movs	r2, #2
 8001622:	4984      	ldr	r1, [pc, #528]	; (8001834 <main+0x540>)
 8001624:	4884      	ldr	r0, [pc, #528]	; (8001838 <main+0x544>)
 8001626:	f002 fa26 	bl	8003a76 <HAL_SPI_Transmit>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	4b83      	ldr	r3, [pc, #524]	; (800183c <main+0x548>)
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	4b82      	ldr	r3, [pc, #520]	; (800183c <main+0x548>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d000      	beq.n	800163c <main+0x348>
	  //error handler
	  while(1);
 800163a:	e7fe      	b.n	800163a <main+0x346>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2110      	movs	r1, #16
 8001640:	487b      	ldr	r0, [pc, #492]	; (8001830 <main+0x53c>)
 8001642:	f000 fefd 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2110      	movs	r1, #16
 800164a:	4879      	ldr	r0, [pc, #484]	; (8001830 <main+0x53c>)
 800164c:	f000 fef8 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF2 | MCP_STATICREAD;
 8001650:	4b78      	ldr	r3, [pc, #480]	; (8001834 <main+0x540>)
 8001652:	224d      	movs	r2, #77	; 0x4d
 8001654:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	2201      	movs	r2, #1
 800165c:	4975      	ldr	r1, [pc, #468]	; (8001834 <main+0x540>)
 800165e:	4876      	ldr	r0, [pc, #472]	; (8001838 <main+0x544>)
 8001660:	f002 fa09 	bl	8003a76 <HAL_SPI_Transmit>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b74      	ldr	r3, [pc, #464]	; (800183c <main+0x548>)
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	4b73      	ldr	r3, [pc, #460]	; (800183c <main+0x548>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d000      	beq.n	8001676 <main+0x382>
	  //error handler
	  while(1);
 8001674:	e7fe      	b.n	8001674 <main+0x380>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	2201      	movs	r2, #1
 800167c:	4970      	ldr	r1, [pc, #448]	; (8001840 <main+0x54c>)
 800167e:	486e      	ldr	r0, [pc, #440]	; (8001838 <main+0x544>)
 8001680:	f002 fb35 	bl	8003cee <HAL_SPI_Receive>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b6c      	ldr	r3, [pc, #432]	; (800183c <main+0x548>)
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	4b6b      	ldr	r3, [pc, #428]	; (800183c <main+0x548>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d000      	beq.n	8001696 <main+0x3a2>
	  //error handler
	  while(1);
 8001694:	e7fe      	b.n	8001694 <main+0x3a0>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2110      	movs	r1, #16
 800169a:	4865      	ldr	r0, [pc, #404]	; (8001830 <main+0x53c>)
 800169c:	f000 fed0 	bl	8002440 <HAL_GPIO_WritePin>
  //Write settings to config register 3
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2110      	movs	r1, #16
 80016a4:	4862      	ldr	r0, [pc, #392]	; (8001830 <main+0x53c>)
 80016a6:	f000 fecb 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF3 | MCP_WRITE;
 80016aa:	4b62      	ldr	r3, [pc, #392]	; (8001834 <main+0x540>)
 80016ac:	2252      	movs	r2, #82	; 0x52
 80016ae:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xC0;
 80016b0:	4b60      	ldr	r3, [pc, #384]	; (8001834 <main+0x540>)
 80016b2:	22c0      	movs	r2, #192	; 0xc0
 80016b4:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	2202      	movs	r2, #2
 80016bc:	495d      	ldr	r1, [pc, #372]	; (8001834 <main+0x540>)
 80016be:	485e      	ldr	r0, [pc, #376]	; (8001838 <main+0x544>)
 80016c0:	f002 f9d9 	bl	8003a76 <HAL_SPI_Transmit>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b5c      	ldr	r3, [pc, #368]	; (800183c <main+0x548>)
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <main+0x548>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d000      	beq.n	80016d6 <main+0x3e2>
	  //error handler
	  while(1);
 80016d4:	e7fe      	b.n	80016d4 <main+0x3e0>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2110      	movs	r1, #16
 80016da:	4855      	ldr	r0, [pc, #340]	; (8001830 <main+0x53c>)
 80016dc:	f000 feb0 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2110      	movs	r1, #16
 80016e4:	4852      	ldr	r0, [pc, #328]	; (8001830 <main+0x53c>)
 80016e6:	f000 feab 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF3 | MCP_STATICREAD;
 80016ea:	4b52      	ldr	r3, [pc, #328]	; (8001834 <main+0x540>)
 80016ec:	2251      	movs	r2, #81	; 0x51
 80016ee:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	2201      	movs	r2, #1
 80016f6:	494f      	ldr	r1, [pc, #316]	; (8001834 <main+0x540>)
 80016f8:	484f      	ldr	r0, [pc, #316]	; (8001838 <main+0x544>)
 80016fa:	f002 f9bc 	bl	8003a76 <HAL_SPI_Transmit>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b4e      	ldr	r3, [pc, #312]	; (800183c <main+0x548>)
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <main+0x548>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d000      	beq.n	8001710 <main+0x41c>
	  //error handler
	  while(1);
 800170e:	e7fe      	b.n	800170e <main+0x41a>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	2201      	movs	r2, #1
 8001716:	494a      	ldr	r1, [pc, #296]	; (8001840 <main+0x54c>)
 8001718:	4847      	ldr	r0, [pc, #284]	; (8001838 <main+0x544>)
 800171a:	f002 fae8 	bl	8003cee <HAL_SPI_Receive>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <main+0x548>)
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <main+0x548>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d000      	beq.n	8001730 <main+0x43c>
	  //error handler
	  while(1);
 800172e:	e7fe      	b.n	800172e <main+0x43a>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2110      	movs	r1, #16
 8001734:	483e      	ldr	r0, [pc, #248]	; (8001830 <main+0x53c>)
 8001736:	f000 fe83 	bl	8002440 <HAL_GPIO_WritePin>
  //Write settings to config IRQ
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2110      	movs	r1, #16
 800173e:	483c      	ldr	r0, [pc, #240]	; (8001830 <main+0x53c>)
 8001740:	f000 fe7e 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_IRQ | MCP_WRITE;
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <main+0x540>)
 8001746:	2256      	movs	r2, #86	; 0x56
 8001748:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x77;
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <main+0x540>)
 800174c:	2277      	movs	r2, #119	; 0x77
 800174e:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	2202      	movs	r2, #2
 8001756:	4937      	ldr	r1, [pc, #220]	; (8001834 <main+0x540>)
 8001758:	4837      	ldr	r0, [pc, #220]	; (8001838 <main+0x544>)
 800175a:	f002 f98c 	bl	8003a76 <HAL_SPI_Transmit>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <main+0x548>)
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	4b35      	ldr	r3, [pc, #212]	; (800183c <main+0x548>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d000      	beq.n	8001770 <main+0x47c>
	  while(1);
 800176e:	e7fe      	b.n	800176e <main+0x47a>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	482e      	ldr	r0, [pc, #184]	; (8001830 <main+0x53c>)
 8001776:	f000 fe63 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2110      	movs	r1, #16
 800177e:	482c      	ldr	r0, [pc, #176]	; (8001830 <main+0x53c>)
 8001780:	f000 fe5e 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_IRQ | MCP_STATICREAD;
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <main+0x540>)
 8001786:	2255      	movs	r2, #85	; 0x55
 8001788:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	2201      	movs	r2, #1
 8001790:	4928      	ldr	r1, [pc, #160]	; (8001834 <main+0x540>)
 8001792:	4829      	ldr	r0, [pc, #164]	; (8001838 <main+0x544>)
 8001794:	f002 f96f 	bl	8003a76 <HAL_SPI_Transmit>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <main+0x548>)
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <main+0x548>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d000      	beq.n	80017aa <main+0x4b6>
	  while(1);
 80017a8:	e7fe      	b.n	80017a8 <main+0x4b4>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	2201      	movs	r2, #1
 80017b0:	4923      	ldr	r1, [pc, #140]	; (8001840 <main+0x54c>)
 80017b2:	4821      	ldr	r0, [pc, #132]	; (8001838 <main+0x544>)
 80017b4:	f002 fa9b 	bl	8003cee <HAL_SPI_Receive>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <main+0x548>)
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <main+0x548>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d000      	beq.n	80017ca <main+0x4d6>
	  while(1);
 80017c8:	e7fe      	b.n	80017c8 <main+0x4d4>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2110      	movs	r1, #16
 80017ce:	4818      	ldr	r0, [pc, #96]	; (8001830 <main+0x53c>)
 80017d0:	f000 fe36 	bl	8002440 <HAL_GPIO_WritePin>

  //Conversion start thermistor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2110      	movs	r1, #16
 80017d8:	4815      	ldr	r0, [pc, #84]	; (8001830 <main+0x53c>)
 80017da:	f000 fe31 	bl	8002440 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_CMD_CONV;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <main+0x540>)
 80017e0:	2268      	movs	r2, #104	; 0x68
 80017e2:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	2201      	movs	r2, #1
 80017ea:	4912      	ldr	r1, [pc, #72]	; (8001834 <main+0x540>)
 80017ec:	4812      	ldr	r0, [pc, #72]	; (8001838 <main+0x544>)
 80017ee:	f002 f942 	bl	8003a76 <HAL_SPI_Transmit>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <main+0x548>)
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <main+0x548>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d000      	beq.n	8001804 <main+0x510>
	  while(1);
 8001802:	e7fe      	b.n	8001802 <main+0x50e>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2110      	movs	r1, #16
 8001808:	4809      	ldr	r0, [pc, #36]	; (8001830 <main+0x53c>)
 800180a:	f000 fe19 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2101      	movs	r1, #1
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <main+0x53c>)
 8001814:	f000 fe14 	bl	8002440 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800181c:	f000 fb8e 	bl	8001f3c <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001820:	f003 fbfc 	bl	800501c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001824:	f7ff fc08 	bl	8001038 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001828:	f003 fc1c 	bl	8005064 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800182c:	e7fe      	b.n	800182c <main+0x538>
 800182e:	bf00      	nop
 8001830:	40020000 	.word	0x40020000
 8001834:	2000036c 	.word	0x2000036c
 8001838:	20000284 	.word	0x20000284
 800183c:	20000280 	.word	0x20000280
 8001840:	20000374 	.word	0x20000374

08001844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	; 0x50
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	2234      	movs	r2, #52	; 0x34
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f006 f927 	bl	8007aa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <SystemClock_Config+0xdc>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <SystemClock_Config+0xdc>)
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <SystemClock_Config+0xdc>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001884:	2300      	movs	r3, #0
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <SystemClock_Config+0xe0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a25      	ldr	r2, [pc, #148]	; (8001924 <SystemClock_Config+0xe0>)
 800188e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <SystemClock_Config+0xe0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018aa:	2302      	movs	r3, #2
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018b4:	2310      	movs	r3, #16
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 256;
 80018b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018be:	2304      	movs	r3, #4
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fdc4 	bl	800345c <HAL_RCC_OscConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018da:	f000 f837 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	230f      	movs	r3, #15
 80018e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e2:	2302      	movs	r3, #2
 80018e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	2103      	movs	r1, #3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 fb34 	bl	8002f68 <HAL_RCC_ClockConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001906:	f000 f821 	bl	800194c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_5);
 800190a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800190e:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8001912:	2000      	movs	r0, #0
 8001914:	f001 fc0e 	bl	8003134 <HAL_RCC_MCOConfig>
}
 8001918:	bf00      	nop
 800191a:	3750      	adds	r7, #80	; 0x50
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193a:	f000 fadf 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40010000 	.word	0x40010000

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_SPI1_Init+0x64>)
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <MX_SPI1_Init+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_SPI1_Init+0x64>)
 8001964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_SPI1_Init+0x64>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_SPI1_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_SPI1_Init+0x64>)
 8001978:	2202      	movs	r2, #2
 800197a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_SPI1_Init+0x64>)
 800197e:	2201      	movs	r2, #1
 8001980:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_SPI1_Init+0x64>)
 8001984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001988:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_SPI1_Init+0x64>)
 800198c:	2210      	movs	r2, #16
 800198e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <MX_SPI1_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_SPI1_Init+0x64>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <MX_SPI1_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_SPI1_Init+0x64>)
 80019a4:	220a      	movs	r2, #10
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_SPI1_Init+0x64>)
 80019aa:	f001 ffdb 	bl	8003964 <HAL_SPI_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b4:	f7ff ffca 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000284 	.word	0x20000284
 80019c0:	40013000 	.word	0x40013000

080019c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_SPI_MspInit+0x84>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a1e:	23e0      	movs	r3, #224	; 0xe0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_SPI_MspInit+0x8c>)
 8001a3a:	f000 fb85 	bl	8002148 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40013000 	.word	0x40013000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	210f      	movs	r1, #15
 8001a96:	f06f 0001 	mvn.w	r0, #1
 8001a9a:	f000 fb2b 	bl	80020f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_InitTick+0xd0>)
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	4a2d      	ldr	r2, [pc, #180]	; (8001b7c <HAL_InitTick+0xd0>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6453      	str	r3, [r2, #68]	; 0x44
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_InitTick+0xd0>)
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ad8:	f107 020c 	add.w	r2, r7, #12
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fc88 	bl	80033f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ae8:	f001 fc72 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8001aec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <HAL_InitTick+0xd4>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	3b01      	subs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_InitTick+0xd8>)
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_InitTick+0xdc>)
 8001b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b22:	4818      	ldr	r0, [pc, #96]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b24:	f002 fcc6 	bl	80044b4 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11b      	bne.n	8001b6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b36:	4813      	ldr	r0, [pc, #76]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b38:	f002 fd16 	bl	8004568 <HAL_TIM_Base_Start_IT>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d111      	bne.n	8001b6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b4a:	2019      	movs	r0, #25
 8001b4c:	f000 faee 	bl	800212c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d808      	bhi.n	8001b68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b56:	2200      	movs	r2, #0
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	2019      	movs	r0, #25
 8001b5c:	f000 faca 	bl	80020f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_InitTick+0xe0>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e002      	b.n	8001b6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	431bde83 	.word	0x431bde83
 8001b84:	200002dc 	.word	0x200002dc
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bc2:	f002 fd41 	bl	8004648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200002dc 	.word	0x200002dc

08001bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:

int _kill(int pid, int sig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bea:	f005 fe2b 	bl	8007844 <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c12:	e7fe      	b.n	8001c12 <_exit+0x12>

08001c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
	}

return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e009      	b.n	8001c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbf1      	blt.n	8001c60 <_write+0x12>
	}
	return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_close>:

int _close(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_isatty>:

int _isatty(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f005 fd90 	bl	8007844 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20040000 	.word	0x20040000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20000324 	.word	0x20000324
 8001d58:	20003ba0 	.word	0x20003ba0

08001d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <MX_USART1_UART_Init+0x50>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_USART1_UART_Init+0x4c>)
 8001db8:	f002 fe2a 	bl	8004a10 <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dc2:	f7ff fdc3 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000328 	.word	0x20000328
 8001dd0:	40011000 	.word	0x40011000

08001dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_UART_MspInit+0x84>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12c      	bne.n	8001e50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e40:	2307      	movs	r3, #7
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_UART_MspInit+0x8c>)
 8001e4c:	f000 f97c 	bl	8002148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff ff65 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f005 fdd3 	bl	8007a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff fa2d 	bl	80012f4 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e9c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ea8:	080283bc 	.word	0x080283bc
  ldr r2, =_sbss
 8001eac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001eb0:	20003ba0 	.word	0x20003ba0

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f8fc 	bl	80020de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f7ff fde0 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fdb2 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000384 	.word	0x20000384

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000384 	.word	0x20000384

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff4c 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002106:	f7ff ff61 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 800210a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f7ff ffb1 	bl	8002078 <NVIC_EncodePriority>
 8002116:	4602      	mov	r2, r0
 8002118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff80 	bl	8002024 <__NVIC_SetPriority>
}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff54 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e153      	b.n	800240c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 8142 	bne.w	8002406 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	2b02      	cmp	r3, #2
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 809c 	beq.w	8002406 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b54      	ldr	r3, [pc, #336]	; (8002424 <HAL_GPIO_Init+0x2dc>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a53      	ldr	r2, [pc, #332]	; (8002424 <HAL_GPIO_Init+0x2dc>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b51      	ldr	r3, [pc, #324]	; (8002424 <HAL_GPIO_Init+0x2dc>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a46      	ldr	r2, [pc, #280]	; (800242c <HAL_GPIO_Init+0x2e4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x1f6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <HAL_GPIO_Init+0x2e8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1f2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_GPIO_Init+0x2ec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_GPIO_Init+0x2f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1ea>
 800232e:	2303      	movs	r3, #3
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 8002332:	2307      	movs	r3, #7
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 800233e:	2300      	movs	r3, #0
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002350:	4935      	ldr	r1, [pc, #212]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_GPIO_Init+0x2f4>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002382:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_GPIO_Init+0x2f4>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <HAL_GPIO_Init+0x2f4>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ac:	4a23      	ldr	r2, [pc, #140]	; (800243c <HAL_GPIO_Init+0x2f4>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_GPIO_Init+0x2f4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d6:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_GPIO_Init+0x2f4>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023dc:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_GPIO_Init+0x2f4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_GPIO_Init+0x2f4>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b0f      	cmp	r3, #15
 8002410:	f67f aea8 	bls.w	8002164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40013800 	.word	0x40013800
 800242c:	40020000 	.word	0x40020000
 8002430:	40020400 	.word	0x40020400
 8002434:	40020800 	.word	0x40020800
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e12b      	b.n	80026de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fee2 	bl	8001264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	; 0x24
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d8:	f000 ff66 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 80024dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a81      	ldr	r2, [pc, #516]	; (80026e8 <HAL_I2C_Init+0x274>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d807      	bhi.n	80024f8 <HAL_I2C_Init+0x84>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a80      	ldr	r2, [pc, #512]	; (80026ec <HAL_I2C_Init+0x278>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e006      	b.n	8002506 <HAL_I2C_Init+0x92>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a7d      	ldr	r2, [pc, #500]	; (80026f0 <HAL_I2C_Init+0x27c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0e7      	b.n	80026de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a78      	ldr	r2, [pc, #480]	; (80026f4 <HAL_I2C_Init+0x280>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_I2C_Init+0x274>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d802      	bhi.n	8002548 <HAL_I2C_Init+0xd4>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3301      	adds	r3, #1
 8002546:	e009      	b.n	800255c <HAL_I2C_Init+0xe8>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_I2C_Init+0x284>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800256e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	495c      	ldr	r1, [pc, #368]	; (80026e8 <HAL_I2C_Init+0x274>)
 8002578:	428b      	cmp	r3, r1
 800257a:	d819      	bhi.n	80025b0 <HAL_I2C_Init+0x13c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fbb1 f3f3 	udiv	r3, r1, r3
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002590:	400b      	ands	r3, r1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_I2C_Init+0x138>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e59      	subs	r1, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	e051      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e04f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <HAL_I2C_Init+0x168>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e012      	b.n	8002602 <HAL_I2C_Init+0x18e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	0099      	lsls	r1, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x196>
 8002606:	2301      	movs	r3, #1
 8002608:	e022      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10e      	bne.n	8002630 <HAL_I2C_Init+0x1bc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e58      	subs	r0, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	440b      	add	r3, r1
 8002620:	fbb0 f3f3 	udiv	r3, r0, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	e00f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	0099      	lsls	r1, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	6809      	ldr	r1, [r1, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800267e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6911      	ldr	r1, [r2, #16]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	000186a0 	.word	0x000186a0
 80026ec:	001e847f 	.word	0x001e847f
 80026f0:	003d08ff 	.word	0x003d08ff
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	461a      	mov	r2, r3
 8002708:	460b      	mov	r3, r1
 800270a:	817b      	strh	r3, [r7, #10]
 800270c:	4613      	mov	r3, r2
 800270e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff fc08 	bl	8001f24 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	f040 80e0 	bne.w	80028e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2319      	movs	r3, #25
 800272a:	2201      	movs	r2, #1
 800272c:	4970      	ldr	r1, [pc, #448]	; (80028f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa92 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	e0d3      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_I2C_Master_Transmit+0x50>
 8002748:	2302      	movs	r3, #2
 800274a:	e0cc      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002780:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2221      	movs	r2, #33	; 0x21
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	893a      	ldrh	r2, [r7, #8]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b4:	8979      	ldrh	r1, [r7, #10]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f9ca 	bl	8002b54 <I2C_MasterRequestWrite>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e08d      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027e0:	e066      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fb0c 	bl	8002e04 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d107      	bne.n	800280a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_I2C_Master_Transmit+0x188>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	6a39      	ldr	r1, [r7, #32]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fafc 	bl	8002e86 <I2C_WaitOnBTFFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2b04      	cmp	r3, #4
 800289a:	d107      	bne.n	80028ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e01a      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d194      	bne.n	80027e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	00100002 	.word	0x00100002
 80028f4:	ffff0000 	.word	0xffff0000

080028f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff fb0c 	bl	8001f24 <HAL_GetTick>
 800290c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b20      	cmp	r3, #32
 800291c:	f040 8111 	bne.w	8002b42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	4988      	ldr	r1, [pc, #544]	; (8002b4c <HAL_I2C_IsDeviceReady+0x254>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f994 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	e104      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2C_IsDeviceReady+0x50>
 8002944:	2302      	movs	r3, #2
 8002946:	e0fd      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d007      	beq.n	800296e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2224      	movs	r2, #36	; 0x24
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a70      	ldr	r2, [pc, #448]	; (8002b50 <HAL_I2C_IsDeviceReady+0x258>)
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f952 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c8:	d103      	bne.n	80029d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b6      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029e6:	f7ff fa9d 	bl	8001f24 <HAL_GetTick>
 80029ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	bf0c      	ite	eq
 8002a12:	2301      	moveq	r3, #1
 8002a14:	2300      	movne	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a1a:	e025      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a1c:	f7ff fa82 	bl	8001f24 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <HAL_I2C_IsDeviceReady+0x13a>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	22a0      	movs	r2, #160	; 0xa0
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2ba0      	cmp	r3, #160	; 0xa0
 8002a72:	d005      	beq.n	8002a80 <HAL_I2C_IsDeviceReady+0x188>
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_I2C_IsDeviceReady+0x188>
 8002a7a:	7dbb      	ldrb	r3, [r7, #22]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0cd      	beq.n	8002a1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d129      	bne.n	8002aea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2319      	movs	r3, #25
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4921      	ldr	r1, [pc, #132]	; (8002b4c <HAL_I2C_IsDeviceReady+0x254>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8c6 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e036      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e02c      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2319      	movs	r3, #25
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	490f      	ldr	r1, [pc, #60]	; (8002b4c <HAL_I2C_IsDeviceReady+0x254>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f8a2 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e012      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f4ff af32 	bcc.w	8002992 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	00100002 	.word	0x00100002
 8002b50:	ffff0000 	.word	0xffff0000

08002b54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	460b      	mov	r3, r1
 8002b62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d006      	beq.n	8002b7e <I2C_MasterRequestWrite+0x2a>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d003      	beq.n	8002b7e <I2C_MasterRequestWrite+0x2a>
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b7c:	d108      	bne.n	8002b90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e00b      	b.n	8002ba8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	2b12      	cmp	r3, #18
 8002b96:	d107      	bne.n	8002ba8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f84f 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00d      	beq.n	8002bdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bce:	d103      	bne.n	8002bd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e035      	b.n	8002c48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be4:	d108      	bne.n	8002bf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf4:	611a      	str	r2, [r3, #16]
 8002bf6:	e01b      	b.n	8002c30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bf8:	897b      	ldrh	r3, [r7, #10]
 8002bfa:	11db      	asrs	r3, r3, #7
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f003 0306 	and.w	r3, r3, #6
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f063 030f 	orn	r3, r3, #15
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	490e      	ldr	r1, [pc, #56]	; (8002c50 <I2C_MasterRequestWrite+0xfc>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f875 	bl	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e010      	b.n	8002c48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4907      	ldr	r1, [pc, #28]	; (8002c54 <I2C_MasterRequestWrite+0x100>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f865 	bl	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	00010008 	.word	0x00010008
 8002c54:	00010002 	.word	0x00010002

08002c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c68:	e025      	b.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7ff f957 	bl	8001f24 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e023      	b.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10d      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	e00c      	b.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d0b6      	beq.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d14:	e051      	b.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d24:	d123      	bne.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0204 	orr.w	r2, r3, #4
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e046      	b.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d021      	beq.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff f8d5 	bl	8001f24 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e020      	b.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10c      	bne.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e00b      	b.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	43da      	mvns	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4013      	ands	r3, r2
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d18d      	bne.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e10:	e02d      	b.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f878 	bl	8002f08 <I2C_IsAcknowledgeFailed>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e02d      	b.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d021      	beq.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7ff f87b 	bl	8001f24 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d116      	bne.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	d1ca      	bne.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e92:	e02d      	b.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f837 	bl	8002f08 <I2C_IsAcknowledgeFailed>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e02d      	b.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d021      	beq.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eac:	f7ff f83a 	bl	8001f24 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d302      	bcc.n	8002ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e007      	b.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d1ca      	bne.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d11b      	bne.n	8002f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f043 0204 	orr.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0cc      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b68      	ldr	r3, [pc, #416]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d90c      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b63      	ldr	r3, [pc, #396]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b8      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a52      	ldr	r2, [pc, #328]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	494d      	ldr	r1, [pc, #308]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d044      	beq.n	8003088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d119      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e07f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d003      	beq.n	8003026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003022:	2b03      	cmp	r3, #3
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e06f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e067      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4934      	ldr	r1, [pc, #208]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fe ff64 	bl	8001f24 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe ff60 	bl	8001f24 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e04f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d20c      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e032      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4916      	ldr	r1, [pc, #88]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	490e      	ldr	r1, [pc, #56]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ee:	f000 f889 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	490a      	ldr	r1, [pc, #40]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	5ccb      	ldrb	r3, [r1, r3]
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1c8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fccc 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00
 8003124:	40023800 	.word	0x40023800
 8003128:	0800c298 	.word	0x0800c298
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d129      	bne.n	800319a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	481f      	ldr	r0, [pc, #124]	; (80031fc <HAL_RCC_MCOConfig+0xc8>)
 8003180:	f7fe ffe2 	bl	8002148 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003184:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	430b      	orrs	r3, r1
 8003192:	4919      	ldr	r1, [pc, #100]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003198:	e029      	b.n	80031ee <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80031b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c0:	2303      	movs	r3, #3
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80031cc:	f107 031c 	add.w	r3, r7, #28
 80031d0:	4619      	mov	r1, r3
 80031d2:	480b      	ldr	r0, [pc, #44]	; (8003200 <HAL_RCC_MCOConfig+0xcc>)
 80031d4:	f7fe ffb8 	bl	8002148 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	00d9      	lsls	r1, r3, #3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	430b      	orrs	r3, r1
 80031e8:	4903      	ldr	r1, [pc, #12]	; (80031f8 <HAL_RCC_MCOConfig+0xc4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
}
 80031ee:	bf00      	nop
 80031f0:	3730      	adds	r7, #48	; 0x30
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40020800 	.word	0x40020800

08003204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003208:	b090      	sub	sp, #64	; 0x40
 800320a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
 8003210:	2300      	movs	r3, #0
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003214:	2300      	movs	r3, #0
 8003216:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321c:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b08      	cmp	r3, #8
 8003226:	d00d      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x40>
 8003228:	2b08      	cmp	r3, #8
 800322a:	f200 80a1 	bhi.w	8003370 <HAL_RCC_GetSysClockFreq+0x16c>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x34>
 8003232:	2b04      	cmp	r3, #4
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x3a>
 8003236:	e09b      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_GetSysClockFreq+0x184>)
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800323c:	e09b      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800323e:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_GetSysClockFreq+0x188>)
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003242:	e098      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003244:	4b4f      	ldr	r3, [pc, #316]	; (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324e:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d028      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	2200      	movs	r2, #0
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	627a      	str	r2, [r7, #36]	; 0x24
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800326c:	2100      	movs	r1, #0
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_GetSysClockFreq+0x188>)
 8003270:	fb03 f201 	mul.w	r2, r3, r1
 8003274:	2300      	movs	r3, #0
 8003276:	fb00 f303 	mul.w	r3, r0, r3
 800327a:	4413      	add	r3, r2
 800327c:	4a43      	ldr	r2, [pc, #268]	; (800338c <HAL_RCC_GetSysClockFreq+0x188>)
 800327e:	fba0 1202 	umull	r1, r2, r0, r2
 8003282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003284:	460a      	mov	r2, r1
 8003286:	62ba      	str	r2, [r7, #40]	; 0x28
 8003288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800328a:	4413      	add	r3, r2
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	2200      	movs	r2, #0
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	61fa      	str	r2, [r7, #28]
 8003296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800329a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800329e:	f7fd fd13 	bl	8000cc8 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4613      	mov	r3, r2
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032aa:	e053      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ac:	4b35      	ldr	r3, [pc, #212]	; (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	2200      	movs	r2, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	617a      	str	r2, [r7, #20]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032be:	f04f 0b00 	mov.w	fp, #0
 80032c2:	4652      	mov	r2, sl
 80032c4:	465b      	mov	r3, fp
 80032c6:	f04f 0000 	mov.w	r0, #0
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	0159      	lsls	r1, r3, #5
 80032d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d4:	0150      	lsls	r0, r2, #5
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	ebb2 080a 	subs.w	r8, r2, sl
 80032de:	eb63 090b 	sbc.w	r9, r3, fp
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032f6:	ebb2 0408 	subs.w	r4, r2, r8
 80032fa:	eb63 0509 	sbc.w	r5, r3, r9
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	00eb      	lsls	r3, r5, #3
 8003308:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330c:	00e2      	lsls	r2, r4, #3
 800330e:	4614      	mov	r4, r2
 8003310:	461d      	mov	r5, r3
 8003312:	eb14 030a 	adds.w	r3, r4, sl
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	eb45 030b 	adc.w	r3, r5, fp
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800332a:	4629      	mov	r1, r5
 800332c:	028b      	lsls	r3, r1, #10
 800332e:	4621      	mov	r1, r4
 8003330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003334:	4621      	mov	r1, r4
 8003336:	028a      	lsls	r2, r1, #10
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333e:	2200      	movs	r2, #0
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003348:	f7fd fcbe 	bl	8000cc8 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4613      	mov	r3, r2
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800336e:	e002      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetSysClockFreq+0x184>)
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003378:	4618      	mov	r0, r3
 800337a:	3740      	adds	r7, #64	; 0x40
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400
 800338c:	017d7840 	.word	0x017d7840

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ac:	f7ff fff0 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4903      	ldr	r1, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	0800c2a8 	.word	0x0800c2a8

080033d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033d4:	f7ff ffdc 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0b5b      	lsrs	r3, r3, #13
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4903      	ldr	r1, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	0800c2a8 	.word	0x0800c2a8

080033f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	220f      	movs	r2, #15
 8003406:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0203 	and.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCC_GetClockConfig+0x60>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0207 	and.w	r2, r3, #7
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40023c00 	.word	0x40023c00

0800345c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e273      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d075      	beq.n	8003566 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800347a:	4b88      	ldr	r3, [pc, #544]	; (800369c <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b04      	cmp	r3, #4
 8003484:	d00c      	beq.n	80034a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003486:	4b85      	ldr	r3, [pc, #532]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800348e:	2b08      	cmp	r3, #8
 8003490:	d112      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b82      	ldr	r3, [pc, #520]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349e:	d10b      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	4b7e      	ldr	r3, [pc, #504]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05b      	beq.n	8003564 <HAL_RCC_OscConfig+0x108>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d157      	bne.n	8003564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e24e      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x74>
 80034c2:	4b76      	ldr	r3, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a75      	ldr	r2, [pc, #468]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e01d      	b.n	800350c <HAL_RCC_OscConfig+0xb0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x98>
 80034da:	4b70      	ldr	r3, [pc, #448]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6f      	ldr	r2, [pc, #444]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b6d      	ldr	r3, [pc, #436]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6c      	ldr	r2, [pc, #432]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0xb0>
 80034f4:	4b69      	ldr	r3, [pc, #420]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a68      	ldr	r2, [pc, #416]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fd06 	bl	8001f24 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	f7fe fd02 	bl	8001f24 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e213      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b5b      	ldr	r3, [pc, #364]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0xc0>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe fcf2 	bl	8001f24 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003544:	f7fe fcee 	bl	8001f24 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1ff      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0xe8>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d063      	beq.n	800363a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003586:	2b08      	cmp	r3, #8
 8003588:	d11c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b44      	ldr	r3, [pc, #272]	; (800369c <HAL_RCC_OscConfig+0x240>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d116      	bne.n	80035c4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	4b41      	ldr	r3, [pc, #260]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x152>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e1d3      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	e03a      	b.n	800363a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035cc:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCC_OscConfig+0x244>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fe fca7 	bl	8001f24 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035da:	f7fe fca3 	bl	8001f24 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e1b4      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4925      	ldr	r1, [pc, #148]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCC_OscConfig+0x244>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fc86 	bl	8001f24 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361c:	f7fe fc82 	bl	8001f24 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e193      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d036      	beq.n	80036b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_RCC_OscConfig+0x248>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe fc66 	bl	8001f24 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365c:	f7fe fc62 	bl	8001f24 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e173      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x200>
 800367a:	e01b      	b.n	80036b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_OscConfig+0x248>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fe fc4f 	bl	8001f24 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003688:	e00e      	b.n	80036a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368a:	f7fe fc4b 	bl	8001f24 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d907      	bls.n	80036a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e15c      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
 800369c:	40023800 	.word	0x40023800
 80036a0:	42470000 	.word	0x42470000
 80036a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a8:	4b8a      	ldr	r3, [pc, #552]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80036aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1ea      	bne.n	800368a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8097 	beq.w	80037f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b83      	ldr	r3, [pc, #524]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b7c      	ldr	r3, [pc, #496]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f2:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <HAL_RCC_OscConfig+0x47c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d118      	bne.n	8003730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fe:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <HAL_RCC_OscConfig+0x47c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a75      	ldr	r2, [pc, #468]	; (80038d8 <HAL_RCC_OscConfig+0x47c>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370a:	f7fe fc0b 	bl	8001f24 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003712:	f7fe fc07 	bl	8001f24 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e118      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x47c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x2ea>
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a65      	ldr	r2, [pc, #404]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	e01c      	b.n	8003780 <HAL_RCC_OscConfig+0x324>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b05      	cmp	r3, #5
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x30c>
 800374e:	4b61      	ldr	r3, [pc, #388]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a60      	ldr	r2, [pc, #384]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	4b5e      	ldr	r3, [pc, #376]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a5d      	ldr	r2, [pc, #372]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0x324>
 8003768:	4b5a      	ldr	r3, [pc, #360]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	4a59      	ldr	r2, [pc, #356]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6713      	str	r3, [r2, #112]	; 0x70
 8003774:	4b57      	ldr	r3, [pc, #348]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a56      	ldr	r2, [pc, #344]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 800377a:	f023 0304 	bic.w	r3, r3, #4
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fe fbcc 	bl	8001f24 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fe fbc8 	bl	8001f24 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0d7      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ee      	beq.n	8003790 <HAL_RCC_OscConfig+0x334>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fe fbb6 	bl	8001f24 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fe fbb2 	bl	8001f24 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0c1      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d2:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ee      	bne.n	80037bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	4a3a      	ldr	r2, [pc, #232]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80ad 	beq.w	8003954 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037fa:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d060      	beq.n	80038c8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d145      	bne.n	800389a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b33      	ldr	r3, [pc, #204]	; (80038dc <HAL_RCC_OscConfig+0x480>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fb86 	bl	8001f24 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fe fb82 	bl	8001f24 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e093      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	071b      	lsls	r3, r3, #28
 8003866:	491b      	ldr	r1, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_RCC_OscConfig+0x480>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe fb57 	bl	8001f24 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f7fe fb53 	bl	8001f24 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e064      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x41e>
 8003898:	e05c      	b.n	8003954 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_RCC_OscConfig+0x480>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fb40 	bl	8001f24 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fb3c 	bl	8001f24 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04d      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x44c>
 80038c6:	e045      	b.n	8003954 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d107      	bne.n	80038e0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e040      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40007000 	.word	0x40007000
 80038dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e0:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <HAL_RCC_OscConfig+0x504>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d030      	beq.n	8003950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d129      	bne.n	8003950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d122      	bne.n	8003950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003910:	4013      	ands	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003918:	4293      	cmp	r3, r2
 800391a:	d119      	bne.n	8003950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	3b01      	subs	r3, #1
 800392a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d10f      	bne.n	8003950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07b      	b.n	8003a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003986:	d009      	beq.n	800399c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
 800398e:	e005      	b.n	800399c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fe f804 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0104 	and.w	r1, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f003 0210 	and.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b088      	sub	sp, #32
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_SPI_Transmit+0x22>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e126      	b.n	8003ce6 <HAL_SPI_Transmit+0x270>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aa0:	f7fe fa40 	bl	8001f24 <HAL_GetTick>
 8003aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aba:	e10b      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Transmit+0x52>
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003acc:	e102      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d10f      	bne.n	8003b36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d007      	beq.n	8003b54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5c:	d14b      	bne.n	8003bf6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_Transmit+0xf6>
 8003b66:	8afb      	ldrh	r3, [r7, #22]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d13e      	bne.n	8003bea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b90:	e02b      	b.n	8003bea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d112      	bne.n	8003bc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bc4:	e011      	b.n	8003bea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bc6:	f7fe f9ad 	bl	8001f24 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d803      	bhi.n	8003bde <HAL_SPI_Transmit+0x168>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d102      	bne.n	8003be4 <HAL_SPI_Transmit+0x16e>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003be8:	e074      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ce      	bne.n	8003b92 <HAL_SPI_Transmit+0x11c>
 8003bf4:	e04c      	b.n	8003c90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Transmit+0x18e>
 8003bfe:	8afb      	ldrh	r3, [r7, #22]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d140      	bne.n	8003c86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c2a:	e02c      	b.n	8003c86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d113      	bne.n	8003c62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c60:	e011      	b.n	8003c86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c62:	f7fe f95f 	bl	8001f24 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d803      	bhi.n	8003c7a <HAL_SPI_Transmit+0x204>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d102      	bne.n	8003c80 <HAL_SPI_Transmit+0x20a>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c84:	e026      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1cd      	bne.n	8003c2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fbcb 	bl	8004430 <SPI_EndRxTxTransaction>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e000      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003cd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ce4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b088      	sub	sp, #32
 8003cf2:	af02      	add	r7, sp, #8
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0a:	d112      	bne.n	8003d32 <HAL_SPI_Receive+0x44>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10e      	bne.n	8003d32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2204      	movs	r2, #4
 8003d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f8f1 	bl	8003f10 <HAL_SPI_TransmitReceive>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	e0ea      	b.n	8003f08 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_SPI_Receive+0x52>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e0e3      	b.n	8003f08 <HAL_SPI_Receive+0x21a>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d48:	f7fe f8ec 	bl	8001f24 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d002      	beq.n	8003d60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d5e:	e0ca      	b.n	8003ef6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Receive+0x7e>
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d70:	e0c1      	b.n	8003ef6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2204      	movs	r2, #4
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db8:	d10f      	bne.n	8003dda <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d007      	beq.n	8003df8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d162      	bne.n	8003ec6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e00:	e02e      	b.n	8003e60 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d115      	bne.n	8003e3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f103 020c 	add.w	r2, r3, #12
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3a:	e011      	b.n	8003e60 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3c:	f7fe f872 	bl	8001f24 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d803      	bhi.n	8003e54 <HAL_SPI_Receive+0x166>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Receive+0x16c>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e5e:	e04a      	b.n	8003ef6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1cb      	bne.n	8003e02 <HAL_SPI_Receive+0x114>
 8003e6a:	e031      	b.n	8003ed0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d113      	bne.n	8003ea2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	b292      	uxth	r2, r2
 8003e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea0:	e011      	b.n	8003ec6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea2:	f7fe f83f 	bl	8001f24 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d803      	bhi.n	8003eba <HAL_SPI_Receive+0x1cc>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d102      	bne.n	8003ec0 <HAL_SPI_Receive+0x1d2>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ec4:	e017      	b.n	8003ef6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1cd      	bne.n	8003e6c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fa45 	bl	8004364 <SPI_EndRxTransaction>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
 8003ef2:	e000      	b.n	8003ef6 <HAL_SPI_Receive+0x208>
  }

error :
 8003ef4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08c      	sub	sp, #48	; 0x30
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x26>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e18a      	b.n	800424c <HAL_SPI_TransmitReceive+0x33c>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f3e:	f7fd fff1 	bl	8001f24 <HAL_GetTick>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d00f      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x70>
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f66:	d107      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x68>
 8003f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d003      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f7e:	e15b      	b.n	8004238 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0x82>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0x82>
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f98:	e14e      	b.n	8004238 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d003      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2205      	movs	r2, #5
 8003faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	887a      	ldrh	r2, [r7, #2]
 8003fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d007      	beq.n	8004002 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400a:	d178      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_SPI_TransmitReceive+0x10a>
 8004014:	8b7b      	ldrh	r3, [r7, #26]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d166      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	881a      	ldrh	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403e:	e053      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d11b      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x176>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d016      	beq.n	8004086 <HAL_SPI_TransmitReceive+0x176>
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d113      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d119      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x1b8>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d014      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	b292      	uxth	r2, r2
 80040aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040c4:	2301      	movs	r3, #1
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040c8:	f7fd ff2c 	bl	8001f24 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d807      	bhi.n	80040e8 <HAL_SPI_TransmitReceive+0x1d8>
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d003      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040e6:	e0a7      	b.n	8004238 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1a6      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x130>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1a1      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x130>
 80040fc:	e07c      	b.n	80041f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_SPI_TransmitReceive+0x1fc>
 8004106:	8b7b      	ldrh	r3, [r7, #26]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d16b      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	7812      	ldrb	r2, [r2, #0]
 8004118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004132:	e057      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d11c      	bne.n	800417c <HAL_SPI_TransmitReceive+0x26c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d017      	beq.n	800417c <HAL_SPI_TransmitReceive+0x26c>
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d114      	bne.n	800417c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	7812      	ldrb	r2, [r2, #0]
 800415e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d119      	bne.n	80041be <HAL_SPI_TransmitReceive+0x2ae>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d014      	beq.n	80041be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041ba:	2301      	movs	r3, #1
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041be:	f7fd feb1 	bl	8001f24 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d803      	bhi.n	80041d6 <HAL_SPI_TransmitReceive+0x2c6>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d102      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x2cc>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041e2:	e029      	b.n	8004238 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1a2      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x224>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d19d      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f917 	bl	8004430 <SPI_EndRxTxTransaction>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004214:	e010      	b.n	8004238 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	e000      	b.n	8004238 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800424c:	4618      	mov	r0, r3
 800424e:	3730      	adds	r7, #48	; 0x30
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004264:	f7fd fe5e 	bl	8001f24 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4413      	add	r3, r2
 8004272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004274:	f7fd fe56 	bl	8001f24 <HAL_GetTick>
 8004278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	015b      	lsls	r3, r3, #5
 8004280:	0d1b      	lsrs	r3, r3, #20
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428a:	e054      	b.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d050      	beq.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004294:	f7fd fe46 	bl	8001f24 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d902      	bls.n	80042aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13d      	bne.n	8004326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c2:	d111      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d004      	beq.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d107      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	d10f      	bne.n	8004312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e017      	b.n	8004356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3b01      	subs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d19b      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000000 	.word	0x20000000

08004364 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004378:	d111      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d004      	beq.n	800438e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d107      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d12a      	bne.n	80043fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b0:	d012      	beq.n	80043d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ff49 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02d      	beq.n	8004424 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0220 	orr.w	r2, r3, #32
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e026      	b.n	8004426 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	2101      	movs	r1, #1
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff ff36 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01a      	beq.n	8004424 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e013      	b.n	8004426 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	2101      	movs	r1, #1
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff ff23 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e000      	b.n	8004426 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <SPI_EndRxTxTransaction+0x7c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <SPI_EndRxTxTransaction+0x80>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	0d5b      	lsrs	r3, r3, #21
 8004448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445a:	d112      	bne.n	8004482 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2200      	movs	r2, #0
 8004464:	2180      	movs	r1, #128	; 0x80
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fef4 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f043 0220 	orr.w	r2, r3, #32
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e00f      	b.n	80044a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	3b01      	subs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d0f2      	beq.n	8004482 <SPI_EndRxTxTransaction+0x52>
 800449c:	e000      	b.n	80044a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800449e:	bf00      	nop
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000
 80044b0:	165e9f81 	.word	0x165e9f81

080044b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e041      	b.n	800454a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f839 	bl	8004552 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f000 f9d8 	bl	80048a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e04e      	b.n	800461e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_TIM_Base_Start_IT+0xc4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d022      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045aa:	d01d      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <HAL_TIM_Base_Start_IT+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d018      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <HAL_TIM_Base_Start_IT+0xcc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d013      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1c      	ldr	r2, [pc, #112]	; (8004638 <HAL_TIM_Base_Start_IT+0xd0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00e      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_TIM_Base_Start_IT+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d009      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a19      	ldr	r2, [pc, #100]	; (8004640 <HAL_TIM_Base_Start_IT+0xd8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_TIM_Base_Start_IT+0xdc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d111      	bne.n	800460c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d010      	beq.n	800461c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460a:	e007      	b.n	800461c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010000 	.word	0x40010000
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40010400 	.word	0x40010400
 8004640:	40014000 	.word	0x40014000
 8004644:	40001800 	.word	0x40001800

08004648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d122      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d11b      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0202 	mvn.w	r2, #2
 8004674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8ee 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8e0 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8f1 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0204 	mvn.w	r2, #4
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8c4 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8b6 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8c7 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0208 	mvn.w	r2, #8
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2204      	movs	r2, #4
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f89a 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f88c 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f89d 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b10      	cmp	r3, #16
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0210 	mvn.w	r2, #16
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2208      	movs	r2, #8
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f870 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f862 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f873 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10e      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0201 	mvn.w	r2, #1
 80047c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd f8ae 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d10e      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f902 	bl	80049fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d10e      	bne.n	8004824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d107      	bne.n	8004824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f838 	bl	8004894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b20      	cmp	r3, #32
 8004830:	d10e      	bne.n	8004850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d107      	bne.n	8004850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0220 	mvn.w	r2, #32
 8004848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f8cc 	bl	80049e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a40      	ldr	r2, [pc, #256]	; (80049bc <TIM_Base_SetConfig+0x114>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d00f      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3d      	ldr	r2, [pc, #244]	; (80049c0 <TIM_Base_SetConfig+0x118>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00b      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <TIM_Base_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <TIM_Base_SetConfig+0x120>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a3a      	ldr	r2, [pc, #232]	; (80049cc <TIM_Base_SetConfig+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d108      	bne.n	80048fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <TIM_Base_SetConfig+0x114>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d02b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d027      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <TIM_Base_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d023      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2b      	ldr	r2, [pc, #172]	; (80049c4 <TIM_Base_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01f      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2a      	ldr	r2, [pc, #168]	; (80049c8 <TIM_Base_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a29      	ldr	r2, [pc, #164]	; (80049cc <TIM_Base_SetConfig+0x124>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d017      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a28      	ldr	r2, [pc, #160]	; (80049d0 <TIM_Base_SetConfig+0x128>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <TIM_Base_SetConfig+0x12c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00f      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <TIM_Base_SetConfig+0x130>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <TIM_Base_SetConfig+0x134>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <TIM_Base_SetConfig+0x138>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <TIM_Base_SetConfig+0x13c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d108      	bne.n	800496c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <TIM_Base_SetConfig+0x114>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0xf8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <TIM_Base_SetConfig+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d103      	bne.n	80049a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	615a      	str	r2, [r3, #20]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40010400 	.word	0x40010400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800
 80049dc:	40001800 	.word	0x40001800
 80049e0:	40001c00 	.word	0x40001c00
 80049e4:	40002000 	.word	0x40002000

080049e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e03f      	b.n	8004aa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd f9cc 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f829 	bl	8004aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab0:	b0c0      	sub	sp, #256	; 0x100
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	68d9      	ldr	r1, [r3, #12]
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	ea40 0301 	orr.w	r3, r0, r1
 8004ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b04:	f021 010c 	bic.w	r1, r1, #12
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b12:	430b      	orrs	r3, r1
 8004b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b26:	6999      	ldr	r1, [r3, #24]
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	ea40 0301 	orr.w	r3, r0, r1
 8004b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b8f      	ldr	r3, [pc, #572]	; (8004d78 <UART_SetConfig+0x2cc>)
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d005      	beq.n	8004b4c <UART_SetConfig+0xa0>
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b8d      	ldr	r3, [pc, #564]	; (8004d7c <UART_SetConfig+0x2d0>)
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d104      	bne.n	8004b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7fe fc40 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8004b50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b54:	e003      	b.n	8004b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b56:	f7fe fc27 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8004b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b68:	f040 810c 	bne.w	8004d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b7e:	4622      	mov	r2, r4
 8004b80:	462b      	mov	r3, r5
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b86:	415b      	adcs	r3, r3
 8004b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b8e:	4621      	mov	r1, r4
 8004b90:	eb12 0801 	adds.w	r8, r2, r1
 8004b94:	4629      	mov	r1, r5
 8004b96:	eb43 0901 	adc.w	r9, r3, r1
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bae:	4690      	mov	r8, r2
 8004bb0:	4699      	mov	r9, r3
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	eb18 0303 	adds.w	r3, r8, r3
 8004bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	eb49 0303 	adc.w	r3, r9, r3
 8004bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bda:	460b      	mov	r3, r1
 8004bdc:	18db      	adds	r3, r3, r3
 8004bde:	653b      	str	r3, [r7, #80]	; 0x50
 8004be0:	4613      	mov	r3, r2
 8004be2:	eb42 0303 	adc.w	r3, r2, r3
 8004be6:	657b      	str	r3, [r7, #84]	; 0x54
 8004be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bf0:	f7fc f86a 	bl	8000cc8 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4b61      	ldr	r3, [pc, #388]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	011c      	lsls	r4, r3, #4
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c24:	4641      	mov	r1, r8
 8004c26:	eb12 0a01 	adds.w	sl, r2, r1
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c44:	4692      	mov	sl, r2
 8004c46:	469b      	mov	fp, r3
 8004c48:	4643      	mov	r3, r8
 8004c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c52:	464b      	mov	r3, r9
 8004c54:	eb4b 0303 	adc.w	r3, fp, r3
 8004c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c70:	460b      	mov	r3, r1
 8004c72:	18db      	adds	r3, r3, r3
 8004c74:	643b      	str	r3, [r7, #64]	; 0x40
 8004c76:	4613      	mov	r3, r2
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c86:	f7fc f81f 	bl	8000cc8 <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004c92:	fba3 2301 	umull	r2, r3, r3, r1
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2264      	movs	r2, #100	; 0x64
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	1acb      	subs	r3, r1, r3
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ca6:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cb4:	441c      	add	r4, r3
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	1891      	adds	r1, r2, r2
 8004cce:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cd0:	415b      	adcs	r3, r3
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cd8:	4641      	mov	r1, r8
 8004cda:	1851      	adds	r1, r2, r1
 8004cdc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cde:	4649      	mov	r1, r9
 8004ce0:	414b      	adcs	r3, r1
 8004ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cf0:	4659      	mov	r1, fp
 8004cf2:	00cb      	lsls	r3, r1, #3
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cfa:	4651      	mov	r1, sl
 8004cfc:	00ca      	lsls	r2, r1, #3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	4642      	mov	r2, r8
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	460a      	mov	r2, r1
 8004d10:	eb42 0303 	adc.w	r3, r2, r3
 8004d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	18db      	adds	r3, r3, r3
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d42:	f7fb ffc1 	bl	8000cc8 <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	2164      	movs	r1, #100	; 0x64
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	3332      	adds	r3, #50	; 0x32
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	f003 0207 	and.w	r2, r3, #7
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4422      	add	r2, r4
 8004d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d74:	e105      	b.n	8004f82 <UART_SetConfig+0x4d6>
 8004d76:	bf00      	nop
 8004d78:	40011000 	.word	0x40011000
 8004d7c:	40011400 	.word	0x40011400
 8004d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d96:	4642      	mov	r2, r8
 8004d98:	464b      	mov	r3, r9
 8004d9a:	1891      	adds	r1, r2, r2
 8004d9c:	6239      	str	r1, [r7, #32]
 8004d9e:	415b      	adcs	r3, r3
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
 8004da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004da6:	4641      	mov	r1, r8
 8004da8:	1854      	adds	r4, r2, r1
 8004daa:	4649      	mov	r1, r9
 8004dac:	eb43 0501 	adc.w	r5, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	00eb      	lsls	r3, r5, #3
 8004dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dbe:	00e2      	lsls	r2, r4, #3
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	461d      	mov	r5, r3
 8004dc4:	4643      	mov	r3, r8
 8004dc6:	18e3      	adds	r3, r4, r3
 8004dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dcc:	464b      	mov	r3, r9
 8004dce:	eb45 0303 	adc.w	r3, r5, r3
 8004dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004df2:	4629      	mov	r1, r5
 8004df4:	008b      	lsls	r3, r1, #2
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	008a      	lsls	r2, r1, #2
 8004e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e04:	f7fb ff60 	bl	8000cc8 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4b60      	ldr	r3, [pc, #384]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	011c      	lsls	r4, r3, #4
 8004e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	61b9      	str	r1, [r7, #24]
 8004e30:	415b      	adcs	r3, r3
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e38:	4641      	mov	r1, r8
 8004e3a:	1851      	adds	r1, r2, r1
 8004e3c:	6139      	str	r1, [r7, #16]
 8004e3e:	4649      	mov	r1, r9
 8004e40:	414b      	adcs	r3, r1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e50:	4659      	mov	r1, fp
 8004e52:	00cb      	lsls	r3, r1, #3
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	00ca      	lsls	r2, r1, #3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	4642      	mov	r2, r8
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	460a      	mov	r2, r1
 8004e70:	eb42 0303 	adc.w	r3, r2, r3
 8004e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e90:	4649      	mov	r1, r9
 8004e92:	008b      	lsls	r3, r1, #2
 8004e94:	4641      	mov	r1, r8
 8004e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	008a      	lsls	r2, r1, #2
 8004e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ea2:	f7fb ff11 	bl	8000cc8 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eca:	441c      	add	r4, r3
 8004ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ed6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eda:	4642      	mov	r2, r8
 8004edc:	464b      	mov	r3, r9
 8004ede:	1891      	adds	r1, r2, r2
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	415b      	adcs	r3, r3
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eea:	4641      	mov	r1, r8
 8004eec:	1851      	adds	r1, r2, r1
 8004eee:	6039      	str	r1, [r7, #0]
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	414b      	adcs	r3, r1
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f02:	4659      	mov	r1, fp
 8004f04:	00cb      	lsls	r3, r1, #3
 8004f06:	4651      	mov	r1, sl
 8004f08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	00ca      	lsls	r2, r1, #3
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	4603      	mov	r3, r0
 8004f16:	4642      	mov	r2, r8
 8004f18:	189b      	adds	r3, r3, r2
 8004f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	460a      	mov	r2, r1
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f30:	667a      	str	r2, [r7, #100]	; 0x64
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f3e:	4649      	mov	r1, r9
 8004f40:	008b      	lsls	r3, r1, #2
 8004f42:	4641      	mov	r1, r8
 8004f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f48:	4641      	mov	r1, r8
 8004f4a:	008a      	lsls	r2, r1, #2
 8004f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f50:	f7fb feba 	bl	8000cc8 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2164      	movs	r1, #100	; 0x64
 8004f62:	fb01 f303 	mul.w	r3, r1, r3
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	3332      	adds	r3, #50	; 0x32
 8004f6c:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4422      	add	r2, r4
 8004f80:	609a      	str	r2, [r3, #8]
}
 8004f82:	bf00      	nop
 8004f84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	51eb851f 	.word	0x51eb851f

08004f94 <__NVIC_SetPriority>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	db0a      	blt.n	8004fbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	490c      	ldr	r1, [pc, #48]	; (8004fe0 <__NVIC_SetPriority+0x4c>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	0112      	lsls	r2, r2, #4
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fbc:	e00a      	b.n	8004fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4908      	ldr	r1, [pc, #32]	; (8004fe4 <__NVIC_SetPriority+0x50>)
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	0112      	lsls	r2, r2, #4
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	761a      	strb	r2, [r3, #24]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000e100 	.word	0xe000e100
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <SysTick_Handler+0x1c>)
 8004fee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ff0:	f001 fc02 	bl	80067f8 <xTaskGetSchedulerState>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d001      	beq.n	8004ffe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ffa:	f002 f9ed 	bl	80073d8 <xPortSysTickHandler>
  }
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	e000e010 	.word	0xe000e010

08005008 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800500c:	2100      	movs	r1, #0
 800500e:	f06f 0004 	mvn.w	r0, #4
 8005012:	f7ff ffbf 	bl	8004f94 <__NVIC_SetPriority>
#endif
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005022:	f3ef 8305 	mrs	r3, IPSR
 8005026:	603b      	str	r3, [r7, #0]
  return(result);
 8005028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800502e:	f06f 0305 	mvn.w	r3, #5
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	e00c      	b.n	8005050 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <osKernelInitialize+0x44>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <osKernelInitialize+0x44>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005044:	2300      	movs	r3, #0
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	e002      	b.n	8005050 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005050:	687b      	ldr	r3, [r7, #4]
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000388 	.word	0x20000388

08005064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506a:	f3ef 8305 	mrs	r3, IPSR
 800506e:	603b      	str	r3, [r7, #0]
  return(result);
 8005070:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005076:	f06f 0305 	mvn.w	r3, #5
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e010      	b.n	80050a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <osKernelStart+0x48>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d109      	bne.n	800509a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005086:	f7ff ffbf 	bl	8005008 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <osKernelStart+0x48>)
 800508c:	2202      	movs	r2, #2
 800508e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005090:	f000 ff56 	bl	8005f40 <vTaskStartScheduler>
      stat = osOK;
 8005094:	2300      	movs	r3, #0
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	e002      	b.n	80050a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050a0:	687b      	ldr	r3, [r7, #4]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000388 	.word	0x20000388

080050b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a07      	ldr	r2, [pc, #28]	; (80050dc <vApplicationGetIdleTaskMemory+0x2c>)
 80050c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4a06      	ldr	r2, [pc, #24]	; (80050e0 <vApplicationGetIdleTaskMemory+0x30>)
 80050c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ce:	601a      	str	r2, [r3, #0]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	2000038c 	.word	0x2000038c
 80050e0:	20000448 	.word	0x20000448

080050e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a07      	ldr	r2, [pc, #28]	; (8005110 <vApplicationGetTimerTaskMemory+0x2c>)
 80050f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4a06      	ldr	r2, [pc, #24]	; (8005114 <vApplicationGetTimerTaskMemory+0x30>)
 80050fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	20001448 	.word	0x20001448
 8005114:	20001504 	.word	0x20001504

08005118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f103 0208 	add.w	r2, r3, #8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f103 0208 	add.w	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f103 0208 	add.w	r2, r3, #8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d103      	bne.n	80051da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e00c      	b.n	80051f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3308      	adds	r3, #8
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e002      	b.n	80051e8 <vListInsert+0x2e>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d2f6      	bcs.n	80051e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	601a      	str	r2, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6892      	ldr	r2, [r2, #8]
 8005242:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6852      	ldr	r2, [r2, #4]
 800524c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d103      	bne.n	8005260 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	1e5a      	subs	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052aa:	f002 f803 	bl	80072b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	441a      	add	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	3b01      	subs	r3, #1
 80052dc:	68f9      	ldr	r1, [r7, #12]
 80052de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d114      	bne.n	800532a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01a      	beq.n	800533e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3310      	adds	r3, #16
 800530c:	4618      	mov	r0, r3
 800530e:	f001 f8b1 	bl	8006474 <xTaskRemoveFromEventList>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <xQueueGenericReset+0xcc>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	e009      	b.n	800533e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3310      	adds	r3, #16
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fef2 	bl	8005118 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff feed 	bl	8005118 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800533e:	f001 ffe9 	bl	8007314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005342:	2301      	movs	r3, #1
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08e      	sub	sp, #56	; 0x38
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <xQueueGenericCreateStatic+0x52>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <xQueueGenericCreateStatic+0x56>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <xQueueGenericCreateStatic+0x58>
 80053a6:	2300      	movs	r3, #0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	623b      	str	r3, [r7, #32]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <xQueueGenericCreateStatic+0x7e>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueGenericCreateStatic+0x82>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueGenericCreateStatic+0x84>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	61fb      	str	r3, [r7, #28]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053ee:	2350      	movs	r3, #80	; 0x50
 80053f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b50      	cmp	r3, #80	; 0x50
 80053f6:	d00a      	beq.n	800540e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	61bb      	str	r3, [r7, #24]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800540e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f805 	bl	8005440 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005438:	4618      	mov	r0, r3
 800543a:	3730      	adds	r7, #48	; 0x30
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e002      	b.n	8005462 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800546e:	2101      	movs	r1, #1
 8005470:	69b8      	ldr	r0, [r7, #24]
 8005472:	f7ff ff05 	bl	8005280 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08e      	sub	sp, #56	; 0x38
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005496:	2300      	movs	r3, #0
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueGenericSend+0x32>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d103      	bne.n	80054c8 <xQueueGenericSend+0x40>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <xQueueGenericSend+0x44>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <xQueueGenericSend+0x46>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <xQueueGenericSend+0x60>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d103      	bne.n	80054f6 <xQueueGenericSend+0x6e>
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <xQueueGenericSend+0x72>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueGenericSend+0x74>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xQueueGenericSend+0x8e>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	623b      	str	r3, [r7, #32]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005516:	f001 f96f 	bl	80067f8 <xTaskGetSchedulerState>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <xQueueGenericSend+0x9e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <xQueueGenericSend+0xa2>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericSend+0xa4>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xQueueGenericSend+0xbe>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	61fb      	str	r3, [r7, #28]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005546:	f001 feb5 	bl	80072b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <xQueueGenericSend+0xd4>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d129      	bne.n	80055b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005562:	f000 fa0b 	bl	800597c <prvCopyDataToQueue>
 8005566:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	3324      	adds	r3, #36	; 0x24
 8005574:	4618      	mov	r0, r3
 8005576:	f000 ff7d 	bl	8006474 <xTaskRemoveFromEventList>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d013      	beq.n	80055a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005580:	4b3f      	ldr	r3, [pc, #252]	; (8005680 <xQueueGenericSend+0x1f8>)
 8005582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	e00a      	b.n	80055a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005598:	4b39      	ldr	r3, [pc, #228]	; (8005680 <xQueueGenericSend+0x1f8>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055a8:	f001 feb4 	bl	8007314 <vPortExitCritical>
				return pdPASS;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e063      	b.n	8005678 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055b6:	f001 fead 	bl	8007314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e05c      	b.n	8005678 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055c4:	f107 0314 	add.w	r3, r7, #20
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 ffb7 	bl	800653c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055d2:	f001 fe9f 	bl	8007314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055d6:	f000 fd23 	bl	8006020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055da:	f001 fe6b 	bl	80072b4 <vPortEnterCritical>
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e4:	b25b      	sxtb	r3, r3
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d103      	bne.n	80055f4 <xQueueGenericSend+0x16c>
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d103      	bne.n	800560a <xQueueGenericSend+0x182>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560a:	f001 fe83 	bl	8007314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800560e:	1d3a      	adds	r2, r7, #4
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 ffa6 	bl	8006568 <xTaskCheckForTimeOut>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d124      	bne.n	800566c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005624:	f000 faa2 	bl	8005b6c <prvIsQueueFull>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d018      	beq.n	8005660 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	3310      	adds	r3, #16
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fecc 	bl	80063d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800563c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800563e:	f000 fa2d 	bl	8005a9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005642:	f000 fcfb 	bl	800603c <xTaskResumeAll>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	f47f af7c 	bne.w	8005546 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800564e:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <xQueueGenericSend+0x1f8>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	e772      	b.n	8005546 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005662:	f000 fa1b 	bl	8005a9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005666:	f000 fce9 	bl	800603c <xTaskResumeAll>
 800566a:	e76c      	b.n	8005546 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800566c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800566e:	f000 fa15 	bl	8005a9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005672:	f000 fce3 	bl	800603c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005676:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005678:	4618      	mov	r0, r3
 800567a:	3738      	adds	r7, #56	; 0x38
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b090      	sub	sp, #64	; 0x40
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ae:	bf00      	nop
 80056b0:	e7fe      	b.n	80056b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <xQueueGenericSendFromISR+0x3c>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <xQueueGenericSendFromISR+0x40>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <xQueueGenericSendFromISR+0x42>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSendFromISR+0x6a>
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericSendFromISR+0x6e>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericSendFromISR+0x70>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	623b      	str	r3, [r7, #32]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800570e:	f001 feb3 	bl	8007478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005712:	f3ef 8211 	mrs	r2, BASEPRI
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	61fa      	str	r2, [r7, #28]
 8005728:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800572a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <xQueueGenericSendFromISR+0xbc>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d12f      	bne.n	80057a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005756:	f000 f911 	bl	800597c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800575a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d112      	bne.n	800578a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d016      	beq.n	800579a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	3324      	adds	r3, #36	; 0x24
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fe7f 	bl	8006474 <xTaskRemoveFromEventList>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e007      	b.n	800579a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800578a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800578e:	3301      	adds	r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	b25a      	sxtb	r2, r3
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800579a:	2301      	movs	r3, #1
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800579e:	e001      	b.n	80057a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3740      	adds	r7, #64	; 0x40
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08c      	sub	sp, #48	; 0x30
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <xQueueReceive+0x30>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	623b      	str	r3, [r7, #32]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <xQueueReceive+0x3e>
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <xQueueReceive+0x42>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueReceive+0x44>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueReceive+0x5e>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	61fb      	str	r3, [r7, #28]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800581a:	f000 ffed 	bl	80067f8 <xTaskGetSchedulerState>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <xQueueReceive+0x6e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <xQueueReceive+0x72>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueReceive+0x74>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xQueueReceive+0x8e>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	61bb      	str	r3, [r7, #24]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800584a:	f001 fd33 	bl	80072b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01f      	beq.n	800589a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585e:	f000 f8f7 	bl	8005a50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00f      	beq.n	8005892 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	3310      	adds	r3, #16
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fdfc 	bl	8006474 <xTaskRemoveFromEventList>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005882:	4b3d      	ldr	r3, [pc, #244]	; (8005978 <xQueueReceive+0x1bc>)
 8005884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005892:	f001 fd3f 	bl	8007314 <vPortExitCritical>
				return pdPASS;
 8005896:	2301      	movs	r3, #1
 8005898:	e069      	b.n	800596e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058a0:	f001 fd38 	bl	8007314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e062      	b.n	800596e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ae:	f107 0310 	add.w	r3, r7, #16
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fe42 	bl	800653c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058bc:	f001 fd2a 	bl	8007314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058c0:	f000 fbae 	bl	8006020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058c4:	f001 fcf6 	bl	80072b4 <vPortEnterCritical>
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ce:	b25b      	sxtb	r3, r3
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d103      	bne.n	80058de <xQueueReceive+0x122>
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e4:	b25b      	sxtb	r3, r3
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d103      	bne.n	80058f4 <xQueueReceive+0x138>
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f4:	f001 fd0e 	bl	8007314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058f8:	1d3a      	adds	r2, r7, #4
 80058fa:	f107 0310 	add.w	r3, r7, #16
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fe31 	bl	8006568 <xTaskCheckForTimeOut>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d123      	bne.n	8005954 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800590c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590e:	f000 f917 	bl	8005b40 <prvIsQueueEmpty>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	3324      	adds	r3, #36	; 0x24
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fd57 	bl	80063d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005928:	f000 f8b8 	bl	8005a9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800592c:	f000 fb86 	bl	800603c <xTaskResumeAll>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d189      	bne.n	800584a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005936:	4b10      	ldr	r3, [pc, #64]	; (8005978 <xQueueReceive+0x1bc>)
 8005938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	e780      	b.n	800584a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800594a:	f000 f8a7 	bl	8005a9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800594e:	f000 fb75 	bl	800603c <xTaskResumeAll>
 8005952:	e77a      	b.n	800584a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f000 f8a1 	bl	8005a9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800595a:	f000 fb6f 	bl	800603c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800595e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005960:	f000 f8ee 	bl	8005b40 <prvIsQueueEmpty>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	f43f af6f 	beq.w	800584a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800596c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800596e:	4618      	mov	r0, r3
 8005970:	3730      	adds	r7, #48	; 0x30
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10d      	bne.n	80059b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d14d      	bne.n	8005a3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 ff44 	bl	8006834 <xTaskPriorityDisinherit>
 80059ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	e043      	b.n	8005a3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d119      	bne.n	80059f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6858      	ldr	r0, [r3, #4]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	461a      	mov	r2, r3
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	f002 f85f 	bl	8007a8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	441a      	add	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d32b      	bcc.n	8005a3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	e026      	b.n	8005a3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	68d8      	ldr	r0, [r3, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	461a      	mov	r2, r3
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	f002 f845 	bl	8007a8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	425b      	negs	r3, r3
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d207      	bcs.n	8005a2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	425b      	negs	r3, r3
 8005a26:	441a      	add	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d105      	bne.n	8005a3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a46:	697b      	ldr	r3, [r7, #20]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d018      	beq.n	8005a94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	441a      	add	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d303      	bcc.n	8005a84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68d9      	ldr	r1, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6838      	ldr	r0, [r7, #0]
 8005a90:	f001 fffb 	bl	8007a8a <memcpy>
	}
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005aa4:	f001 fc06 	bl	80072b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ab0:	e011      	b.n	8005ad6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d012      	beq.n	8005ae0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3324      	adds	r3, #36	; 0x24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fcd8 	bl	8006474 <xTaskRemoveFromEventList>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005aca:	f000 fdaf 	bl	800662c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dce9      	bgt.n	8005ab2 <prvUnlockQueue+0x16>
 8005ade:	e000      	b.n	8005ae2 <prvUnlockQueue+0x46>
					break;
 8005ae0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	22ff      	movs	r2, #255	; 0xff
 8005ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005aea:	f001 fc13 	bl	8007314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aee:	f001 fbe1 	bl	80072b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005af8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005afa:	e011      	b.n	8005b20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d012      	beq.n	8005b2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3310      	adds	r3, #16
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fcb3 	bl	8006474 <xTaskRemoveFromEventList>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b14:	f000 fd8a 	bl	800662c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dce9      	bgt.n	8005afc <prvUnlockQueue+0x60>
 8005b28:	e000      	b.n	8005b2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b34:	f001 fbee 	bl	8007314 <vPortExitCritical>
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b48:	f001 fbb4 	bl	80072b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e001      	b.n	8005b5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b5e:	f001 fbd9 	bl	8007314 <vPortExitCritical>

	return xReturn;
 8005b62:	68fb      	ldr	r3, [r7, #12]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b74:	f001 fb9e 	bl	80072b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d102      	bne.n	8005b8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e001      	b.n	8005b8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b8e:	f001 fbc1 	bl	8007314 <vPortExitCritical>

	return xReturn;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e014      	b.n	8005bd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bac:	4a0f      	ldr	r2, [pc, #60]	; (8005bec <vQueueAddToRegistry+0x50>)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10b      	bne.n	8005bd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bb8:	490c      	ldr	r1, [pc, #48]	; (8005bec <vQueueAddToRegistry+0x50>)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <vQueueAddToRegistry+0x50>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bce:	e006      	b.n	8005bde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b07      	cmp	r3, #7
 8005bda:	d9e7      	bls.n	8005bac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20003504 	.word	0x20003504

08005bf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c00:	f001 fb58 	bl	80072b4 <vPortEnterCritical>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d103      	bne.n	8005c1a <vQueueWaitForMessageRestricted+0x2a>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d103      	bne.n	8005c30 <vQueueWaitForMessageRestricted+0x40>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c30:	f001 fb70 	bl	8007314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3324      	adds	r3, #36	; 0x24
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fbe9 	bl	800641c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c4a:	6978      	ldr	r0, [r7, #20]
 8005c4c:	f7ff ff26 	bl	8005a9c <prvUnlockQueue>
	}
 8005c50:	bf00      	nop
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08e      	sub	sp, #56	; 0x38
 8005c5c:	af04      	add	r7, sp, #16
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	623b      	str	r3, [r7, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xTaskCreateStatic+0x46>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	61fb      	str	r3, [r7, #28]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c9e:	23bc      	movs	r3, #188	; 0xbc
 8005ca0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2bbc      	cmp	r3, #188	; 0xbc
 8005ca6:	d00a      	beq.n	8005cbe <xTaskCreateStatic+0x66>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	61bb      	str	r3, [r7, #24]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01e      	beq.n	8005d04 <xTaskCreateStatic+0xac>
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01b      	beq.n	8005d04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9303      	str	r3, [sp, #12]
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	f107 0314 	add.w	r3, r7, #20
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 f80c 	bl	8005d14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cfe:	f000 f8af 	bl	8005e60 <prvAddNewTaskToReadyList>
 8005d02:	e001      	b.n	8005d08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d08:	697b      	ldr	r3, [r7, #20]
	}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3728      	adds	r7, #40	; 0x28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	21a5      	movs	r1, #165	; 0xa5
 8005d2e:	f001 feba 	bl	8007aa6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	617b      	str	r3, [r7, #20]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01f      	beq.n	8005db2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e012      	b.n	8005d9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	7819      	ldrb	r1, [r3, #0]
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	3334      	adds	r3, #52	; 0x34
 8005d88:	460a      	mov	r2, r1
 8005d8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d9e9      	bls.n	8005d78 <prvInitialiseNewTask+0x64>
 8005da4:	e000      	b.n	8005da8 <prvInitialiseNewTask+0x94>
			{
				break;
 8005da6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db0:	e003      	b.n	8005dba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	2b37      	cmp	r3, #55	; 0x37
 8005dbe:	d901      	bls.n	8005dc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dc0:	2337      	movs	r3, #55	; 0x37
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff f9bc 	bl	8005158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	3318      	adds	r3, #24
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff f9b7 	bl	8005158 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	3354      	adds	r3, #84	; 0x54
 8005e14:	2260      	movs	r2, #96	; 0x60
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 fe44 	bl	8007aa6 <memset>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <prvInitialiseNewTask+0x140>)
 8005e22:	659a      	str	r2, [r3, #88]	; 0x58
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <prvInitialiseNewTask+0x144>)
 8005e28:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <prvInitialiseNewTask+0x148>)
 8005e2e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	69b8      	ldr	r0, [r7, #24]
 8005e36:	f001 f90d 	bl	8007054 <pxPortInitialiseStack>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e4c:	bf00      	nop
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	08027f28 	.word	0x08027f28
 8005e58:	08027f48 	.word	0x08027f48
 8005e5c:	08027f08 	.word	0x08027f08

08005e60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e68:	f001 fa24 	bl	80072b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e6c:	4b2d      	ldr	r3, [pc, #180]	; (8005f24 <prvAddNewTaskToReadyList+0xc4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	4a2c      	ldr	r2, [pc, #176]	; (8005f24 <prvAddNewTaskToReadyList+0xc4>)
 8005e74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e76:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <prvAddNewTaskToReadyList+0xc8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e7e:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <prvAddNewTaskToReadyList+0xc8>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e84:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <prvAddNewTaskToReadyList+0xc4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d110      	bne.n	8005eae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e8c:	f000 fbf2 	bl	8006674 <prvInitialiseTaskLists>
 8005e90:	e00d      	b.n	8005eae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e92:	4b26      	ldr	r3, [pc, #152]	; (8005f2c <prvAddNewTaskToReadyList+0xcc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e9a:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <prvAddNewTaskToReadyList+0xc8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d802      	bhi.n	8005eae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <prvAddNewTaskToReadyList+0xc8>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005eae:	4b20      	ldr	r3, [pc, #128]	; (8005f30 <prvAddNewTaskToReadyList+0xd0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <prvAddNewTaskToReadyList+0xd0>)
 8005eb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <prvAddNewTaskToReadyList+0xd0>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <prvAddNewTaskToReadyList+0xd4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d903      	bls.n	8005ed4 <prvAddNewTaskToReadyList+0x74>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <prvAddNewTaskToReadyList+0xd4>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <prvAddNewTaskToReadyList+0xd8>)
 8005ee2:	441a      	add	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7ff f941 	bl	8005172 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ef0:	f001 fa10 	bl	8007314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <prvAddNewTaskToReadyList+0xcc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00e      	beq.n	8005f1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <prvAddNewTaskToReadyList+0xc8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d207      	bcs.n	8005f1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <prvAddNewTaskToReadyList+0xdc>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20003a18 	.word	0x20003a18
 8005f28:	20003544 	.word	0x20003544
 8005f2c:	20003a24 	.word	0x20003a24
 8005f30:	20003a34 	.word	0x20003a34
 8005f34:	20003a20 	.word	0x20003a20
 8005f38:	20003548 	.word	0x20003548
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f4e:	463a      	mov	r2, r7
 8005f50:	1d39      	adds	r1, r7, #4
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff f8aa 	bl	80050b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	9202      	str	r2, [sp, #8]
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	2300      	movs	r3, #0
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	460a      	mov	r2, r1
 8005f6e:	4924      	ldr	r1, [pc, #144]	; (8006000 <vTaskStartScheduler+0xc0>)
 8005f70:	4824      	ldr	r0, [pc, #144]	; (8006004 <vTaskStartScheduler+0xc4>)
 8005f72:	f7ff fe71 	bl	8005c58 <xTaskCreateStatic>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4a23      	ldr	r2, [pc, #140]	; (8006008 <vTaskStartScheduler+0xc8>)
 8005f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f7c:	4b22      	ldr	r3, [pc, #136]	; (8006008 <vTaskStartScheduler+0xc8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e001      	b.n	8005f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d102      	bne.n	8005f9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f94:	f000 fd10 	bl	80069b8 <xTimerCreateTimerTask>
 8005f98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d11b      	bne.n	8005fd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	613b      	str	r3, [r7, #16]
}
 8005fb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fb4:	4b15      	ldr	r3, [pc, #84]	; (800600c <vTaskStartScheduler+0xcc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3354      	adds	r3, #84	; 0x54
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <vTaskStartScheduler+0xd0>)
 8005fbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fbe:	4b15      	ldr	r3, [pc, #84]	; (8006014 <vTaskStartScheduler+0xd4>)
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fc6:	4b14      	ldr	r3, [pc, #80]	; (8006018 <vTaskStartScheduler+0xd8>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fcc:	4b13      	ldr	r3, [pc, #76]	; (800601c <vTaskStartScheduler+0xdc>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fd2:	f001 f8cd 	bl	8007170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fd6:	e00e      	b.n	8005ff6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d10a      	bne.n	8005ff6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <vTaskStartScheduler+0xb4>
}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	0800c280 	.word	0x0800c280
 8006004:	08006645 	.word	0x08006645
 8006008:	20003a3c 	.word	0x20003a3c
 800600c:	20003544 	.word	0x20003544
 8006010:	20000010 	.word	0x20000010
 8006014:	20003a38 	.word	0x20003a38
 8006018:	20003a24 	.word	0x20003a24
 800601c:	20003a1c 	.word	0x20003a1c

08006020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <vTaskSuspendAll+0x18>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	4a03      	ldr	r2, [pc, #12]	; (8006038 <vTaskSuspendAll+0x18>)
 800602c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800602e:	bf00      	nop
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20003a40 	.word	0x20003a40

0800603c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800604a:	4b42      	ldr	r3, [pc, #264]	; (8006154 <xTaskResumeAll+0x118>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <xTaskResumeAll+0x2c>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	603b      	str	r3, [r7, #0]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006068:	f001 f924 	bl	80072b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800606c:	4b39      	ldr	r3, [pc, #228]	; (8006154 <xTaskResumeAll+0x118>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	4a38      	ldr	r2, [pc, #224]	; (8006154 <xTaskResumeAll+0x118>)
 8006074:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006076:	4b37      	ldr	r3, [pc, #220]	; (8006154 <xTaskResumeAll+0x118>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d162      	bne.n	8006144 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800607e:	4b36      	ldr	r3, [pc, #216]	; (8006158 <xTaskResumeAll+0x11c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d05e      	beq.n	8006144 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006086:	e02f      	b.n	80060e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006088:	4b34      	ldr	r3, [pc, #208]	; (800615c <xTaskResumeAll+0x120>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3318      	adds	r3, #24
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff f8c9 	bl	800522c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff f8c4 	bl	800522c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4b2d      	ldr	r3, [pc, #180]	; (8006160 <xTaskResumeAll+0x124>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d903      	bls.n	80060b8 <xTaskResumeAll+0x7c>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a2a      	ldr	r2, [pc, #168]	; (8006160 <xTaskResumeAll+0x124>)
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4a27      	ldr	r2, [pc, #156]	; (8006164 <xTaskResumeAll+0x128>)
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7ff f84f 	bl	8005172 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	4b23      	ldr	r3, [pc, #140]	; (8006168 <xTaskResumeAll+0x12c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d302      	bcc.n	80060e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <xTaskResumeAll+0x130>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060e8:	4b1c      	ldr	r3, [pc, #112]	; (800615c <xTaskResumeAll+0x120>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1cb      	bne.n	8006088 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060f6:	f000 fb5f 	bl	80067b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060fa:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <xTaskResumeAll+0x134>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d010      	beq.n	8006128 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006106:	f000 f847 	bl	8006198 <xTaskIncrementTick>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006110:	4b16      	ldr	r3, [pc, #88]	; (800616c <xTaskResumeAll+0x130>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3b01      	subs	r3, #1
 800611a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f1      	bne.n	8006106 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <xTaskResumeAll+0x134>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <xTaskResumeAll+0x130>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006130:	2301      	movs	r3, #1
 8006132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <xTaskResumeAll+0x138>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006144:	f001 f8e6 	bl	8007314 <vPortExitCritical>

	return xAlreadyYielded;
 8006148:	68bb      	ldr	r3, [r7, #8]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20003a40 	.word	0x20003a40
 8006158:	20003a18 	.word	0x20003a18
 800615c:	200039d8 	.word	0x200039d8
 8006160:	20003a20 	.word	0x20003a20
 8006164:	20003548 	.word	0x20003548
 8006168:	20003544 	.word	0x20003544
 800616c:	20003a2c 	.word	0x20003a2c
 8006170:	20003a28 	.word	0x20003a28
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <xTaskGetTickCount+0x1c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006184:	687b      	ldr	r3, [r7, #4]
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20003a1c 	.word	0x20003a1c

08006198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a2:	4b4f      	ldr	r3, [pc, #316]	; (80062e0 <xTaskIncrementTick+0x148>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 808f 	bne.w	80062ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061ac:	4b4d      	ldr	r3, [pc, #308]	; (80062e4 <xTaskIncrementTick+0x14c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061b4:	4a4b      	ldr	r2, [pc, #300]	; (80062e4 <xTaskIncrementTick+0x14c>)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d120      	bne.n	8006202 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80061c0:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <xTaskIncrementTick+0x150>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	603b      	str	r3, [r7, #0]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <xTaskIncrementTick+0x46>
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <xTaskIncrementTick+0x150>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	4b41      	ldr	r3, [pc, #260]	; (80062ec <xTaskIncrementTick+0x154>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a3f      	ldr	r2, [pc, #252]	; (80062e8 <xTaskIncrementTick+0x150>)
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4a3f      	ldr	r2, [pc, #252]	; (80062ec <xTaskIncrementTick+0x154>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	4b3e      	ldr	r3, [pc, #248]	; (80062f0 <xTaskIncrementTick+0x158>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	4a3d      	ldr	r2, [pc, #244]	; (80062f0 <xTaskIncrementTick+0x158>)
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	f000 fadb 	bl	80067b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006202:	4b3c      	ldr	r3, [pc, #240]	; (80062f4 <xTaskIncrementTick+0x15c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	429a      	cmp	r2, r3
 800620a:	d349      	bcc.n	80062a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <xTaskIncrementTick+0x150>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006216:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <xTaskIncrementTick+0x15c>)
 8006218:	f04f 32ff 	mov.w	r2, #4294967295
 800621c:	601a      	str	r2, [r3, #0]
					break;
 800621e:	e03f      	b.n	80062a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006220:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <xTaskIncrementTick+0x150>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d203      	bcs.n	8006240 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006238:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <xTaskIncrementTick+0x15c>)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800623e:	e02f      	b.n	80062a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3304      	adds	r3, #4
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fff1 	bl	800522c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	3318      	adds	r3, #24
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe ffe8 	bl	800522c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4b25      	ldr	r3, [pc, #148]	; (80062f8 <xTaskIncrementTick+0x160>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d903      	bls.n	8006270 <xTaskIncrementTick+0xd8>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	4a22      	ldr	r2, [pc, #136]	; (80062f8 <xTaskIncrementTick+0x160>)
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <xTaskIncrementTick+0x164>)
 800627e:	441a      	add	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fe ff73 	bl	8005172 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <xTaskIncrementTick+0x168>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	429a      	cmp	r2, r3
 8006298:	d3b8      	bcc.n	800620c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800629a:	2301      	movs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800629e:	e7b5      	b.n	800620c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062a0:	4b17      	ldr	r3, [pc, #92]	; (8006300 <xTaskIncrementTick+0x168>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a6:	4915      	ldr	r1, [pc, #84]	; (80062fc <xTaskIncrementTick+0x164>)
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d901      	bls.n	80062bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <xTaskIncrementTick+0x16c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e004      	b.n	80062d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062ca:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <xTaskIncrementTick+0x170>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <xTaskIncrementTick+0x170>)
 80062d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062d4:	697b      	ldr	r3, [r7, #20]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20003a40 	.word	0x20003a40
 80062e4:	20003a1c 	.word	0x20003a1c
 80062e8:	200039d0 	.word	0x200039d0
 80062ec:	200039d4 	.word	0x200039d4
 80062f0:	20003a30 	.word	0x20003a30
 80062f4:	20003a38 	.word	0x20003a38
 80062f8:	20003a20 	.word	0x20003a20
 80062fc:	20003548 	.word	0x20003548
 8006300:	20003544 	.word	0x20003544
 8006304:	20003a2c 	.word	0x20003a2c
 8006308:	20003a28 	.word	0x20003a28

0800630c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006312:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <vTaskSwitchContext+0xb0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800631a:	4b29      	ldr	r3, [pc, #164]	; (80063c0 <vTaskSwitchContext+0xb4>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006320:	e046      	b.n	80063b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006322:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <vTaskSwitchContext+0xb4>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006328:	4b26      	ldr	r3, [pc, #152]	; (80063c4 <vTaskSwitchContext+0xb8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	e010      	b.n	8006352 <vTaskSwitchContext+0x46>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <vTaskSwitchContext+0x40>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	607b      	str	r3, [r7, #4]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <vTaskSwitchContext+0x3e>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3b01      	subs	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	491d      	ldr	r1, [pc, #116]	; (80063c8 <vTaskSwitchContext+0xbc>)
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0e4      	beq.n	8006330 <vTaskSwitchContext+0x24>
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <vTaskSwitchContext+0xbc>)
 8006372:	4413      	add	r3, r2
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	3308      	adds	r3, #8
 8006388:	429a      	cmp	r2, r3
 800638a:	d104      	bne.n	8006396 <vTaskSwitchContext+0x8a>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	4a0b      	ldr	r2, [pc, #44]	; (80063cc <vTaskSwitchContext+0xc0>)
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <vTaskSwitchContext+0xb8>)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <vTaskSwitchContext+0xc0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3354      	adds	r3, #84	; 0x54
 80063ac:	4a08      	ldr	r2, [pc, #32]	; (80063d0 <vTaskSwitchContext+0xc4>)
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20003a40 	.word	0x20003a40
 80063c0:	20003a2c 	.word	0x20003a2c
 80063c4:	20003a20 	.word	0x20003a20
 80063c8:	20003548 	.word	0x20003548
 80063cc:	20003544 	.word	0x20003544
 80063d0:	20000010 	.word	0x20000010

080063d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <vTaskPlaceOnEventList+0x44>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3318      	adds	r3, #24
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fe fed9 	bl	80051ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006408:	2101      	movs	r1, #1
 800640a:	6838      	ldr	r0, [r7, #0]
 800640c:	f000 fa80 	bl	8006910 <prvAddCurrentTaskToDelayedList>
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20003544 	.word	0x20003544

0800641c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	617b      	str	r3, [r7, #20]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <vTaskPlaceOnEventListRestricted+0x54>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3318      	adds	r3, #24
 800644a:	4619      	mov	r1, r3
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7fe fe90 	bl	8005172 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
 800645c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	68b8      	ldr	r0, [r7, #8]
 8006462:	f000 fa55 	bl	8006910 <prvAddCurrentTaskToDelayedList>
	}
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20003544 	.word	0x20003544

08006474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	60fb      	str	r3, [r7, #12]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3318      	adds	r3, #24
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fec1 	bl	800522c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064aa:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <xTaskRemoveFromEventList+0xb0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d11d      	bne.n	80064ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe feb8 	bl	800522c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	4b19      	ldr	r3, [pc, #100]	; (8006528 <xTaskRemoveFromEventList+0xb4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d903      	bls.n	80064d0 <xTaskRemoveFromEventList+0x5c>
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a16      	ldr	r2, [pc, #88]	; (8006528 <xTaskRemoveFromEventList+0xb4>)
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4a13      	ldr	r2, [pc, #76]	; (800652c <xTaskRemoveFromEventList+0xb8>)
 80064de:	441a      	add	r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7fe fe43 	bl	8005172 <vListInsertEnd>
 80064ec:	e005      	b.n	80064fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	3318      	adds	r3, #24
 80064f2:	4619      	mov	r1, r3
 80064f4:	480e      	ldr	r0, [pc, #56]	; (8006530 <xTaskRemoveFromEventList+0xbc>)
 80064f6:	f7fe fe3c 	bl	8005172 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fe:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <xTaskRemoveFromEventList+0xc0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	429a      	cmp	r2, r3
 8006506:	d905      	bls.n	8006514 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <xTaskRemoveFromEventList+0xc4>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e001      	b.n	8006518 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006518:	697b      	ldr	r3, [r7, #20]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20003a40 	.word	0x20003a40
 8006528:	20003a20 	.word	0x20003a20
 800652c:	20003548 	.word	0x20003548
 8006530:	200039d8 	.word	0x200039d8
 8006534:	20003544 	.word	0x20003544
 8006538:	20003a2c 	.word	0x20003a2c

0800653c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <vTaskInternalSetTimeOutState+0x24>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <vTaskInternalSetTimeOutState+0x28>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	605a      	str	r2, [r3, #4]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	20003a30 	.word	0x20003a30
 8006564:	20003a1c 	.word	0x20003a1c

08006568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	613b      	str	r3, [r7, #16]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	60fb      	str	r3, [r7, #12]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80065aa:	f000 fe83 	bl	80072b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065ae:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <xTaskCheckForTimeOut+0xbc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d102      	bne.n	80065ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	e023      	b.n	8006616 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <xTaskCheckForTimeOut+0xc0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d007      	beq.n	80065ea <xTaskCheckForTimeOut+0x82>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d302      	bcc.n	80065ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	e015      	b.n	8006616 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d20b      	bcs.n	800660c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ff9b 	bl	800653c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	e004      	b.n	8006616 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006612:	2301      	movs	r3, #1
 8006614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006616:	f000 fe7d 	bl	8007314 <vPortExitCritical>

	return xReturn;
 800661a:	69fb      	ldr	r3, [r7, #28]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3720      	adds	r7, #32
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20003a1c 	.word	0x20003a1c
 8006628:	20003a30 	.word	0x20003a30

0800662c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006630:	4b03      	ldr	r3, [pc, #12]	; (8006640 <vTaskMissedYield+0x14>)
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20003a2c 	.word	0x20003a2c

08006644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800664c:	f000 f852 	bl	80066f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <prvIdleTask+0x28>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d9f9      	bls.n	800664c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <prvIdleTask+0x2c>)
 800665a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006668:	e7f0      	b.n	800664c <prvIdleTask+0x8>
 800666a:	bf00      	nop
 800666c:	20003548 	.word	0x20003548
 8006670:	e000ed04 	.word	0xe000ed04

08006674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	e00c      	b.n	800669a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <prvInitialiseTaskLists+0x60>)
 800668c:	4413      	add	r3, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe fd42 	bl	8005118 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3301      	adds	r3, #1
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b37      	cmp	r3, #55	; 0x37
 800669e:	d9ef      	bls.n	8006680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066a0:	480d      	ldr	r0, [pc, #52]	; (80066d8 <prvInitialiseTaskLists+0x64>)
 80066a2:	f7fe fd39 	bl	8005118 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066a6:	480d      	ldr	r0, [pc, #52]	; (80066dc <prvInitialiseTaskLists+0x68>)
 80066a8:	f7fe fd36 	bl	8005118 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066ac:	480c      	ldr	r0, [pc, #48]	; (80066e0 <prvInitialiseTaskLists+0x6c>)
 80066ae:	f7fe fd33 	bl	8005118 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066b2:	480c      	ldr	r0, [pc, #48]	; (80066e4 <prvInitialiseTaskLists+0x70>)
 80066b4:	f7fe fd30 	bl	8005118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066b8:	480b      	ldr	r0, [pc, #44]	; (80066e8 <prvInitialiseTaskLists+0x74>)
 80066ba:	f7fe fd2d 	bl	8005118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066be:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <prvInitialiseTaskLists+0x78>)
 80066c0:	4a05      	ldr	r2, [pc, #20]	; (80066d8 <prvInitialiseTaskLists+0x64>)
 80066c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066c4:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <prvInitialiseTaskLists+0x7c>)
 80066c6:	4a05      	ldr	r2, [pc, #20]	; (80066dc <prvInitialiseTaskLists+0x68>)
 80066c8:	601a      	str	r2, [r3, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20003548 	.word	0x20003548
 80066d8:	200039a8 	.word	0x200039a8
 80066dc:	200039bc 	.word	0x200039bc
 80066e0:	200039d8 	.word	0x200039d8
 80066e4:	200039ec 	.word	0x200039ec
 80066e8:	20003a04 	.word	0x20003a04
 80066ec:	200039d0 	.word	0x200039d0
 80066f0:	200039d4 	.word	0x200039d4

080066f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066fa:	e019      	b.n	8006730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066fc:	f000 fdda 	bl	80072b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <prvCheckTasksWaitingTermination+0x50>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4618      	mov	r0, r3
 800670e:	f7fe fd8d 	bl	800522c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006712:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <prvCheckTasksWaitingTermination+0x54>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3b01      	subs	r3, #1
 8006718:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <prvCheckTasksWaitingTermination+0x54>)
 800671a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3b01      	subs	r3, #1
 8006722:	4a0a      	ldr	r2, [pc, #40]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 8006724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006726:	f000 fdf5 	bl	8007314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f810 	bl	8006750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e1      	bne.n	80066fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200039ec 	.word	0x200039ec
 8006748:	20003a18 	.word	0x20003a18
 800674c:	20003a00 	.word	0x20003a00

08006750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3354      	adds	r3, #84	; 0x54
 800675c:	4618      	mov	r0, r3
 800675e:	f002 f8c7 	bl	80088f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006768:	2b00      	cmp	r3, #0
 800676a:	d108      	bne.n	800677e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fec1 	bl	80074f8 <vPortFree>
				vPortFree( pxTCB );
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 febe 	bl	80074f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800677c:	e018      	b.n	80067b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006784:	2b01      	cmp	r3, #1
 8006786:	d103      	bne.n	8006790 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 feb5 	bl	80074f8 <vPortFree>
	}
 800678e:	e00f      	b.n	80067b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006796:	2b02      	cmp	r3, #2
 8006798:	d00a      	beq.n	80067b0 <prvDeleteTCB+0x60>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60fb      	str	r3, [r7, #12]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <prvDeleteTCB+0x5e>
	}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067be:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <prvResetNextTaskUnblockTime+0x38>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <prvResetNextTaskUnblockTime+0x3c>)
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295
 80067ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067d0:	e008      	b.n	80067e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d2:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <prvResetNextTaskUnblockTime+0x38>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <prvResetNextTaskUnblockTime+0x3c>)
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	200039d0 	.word	0x200039d0
 80067f4:	20003a38 	.word	0x20003a38

080067f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067fe:	4b0b      	ldr	r3, [pc, #44]	; (800682c <xTaskGetSchedulerState+0x34>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006806:	2301      	movs	r3, #1
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	e008      	b.n	800681e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680c:	4b08      	ldr	r3, [pc, #32]	; (8006830 <xTaskGetSchedulerState+0x38>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006814:	2302      	movs	r3, #2
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	e001      	b.n	800681e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800681a:	2300      	movs	r3, #0
 800681c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800681e:	687b      	ldr	r3, [r7, #4]
	}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	20003a24 	.word	0x20003a24
 8006830:	20003a40 	.word	0x20003a40

08006834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d056      	beq.n	80068f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800684a:	4b2e      	ldr	r3, [pc, #184]	; (8006904 <xTaskPriorityDisinherit+0xd0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d00a      	beq.n	800686a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	60fb      	str	r3, [r7, #12]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60bb      	str	r3, [r7, #8]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688c:	1e5a      	subs	r2, r3, #1
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689a:	429a      	cmp	r2, r3
 800689c:	d02c      	beq.n	80068f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d128      	bne.n	80068f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe fcbe 	bl	800522c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <xTaskPriorityDisinherit+0xd4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d903      	bls.n	80068d8 <xTaskPriorityDisinherit+0xa4>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <xTaskPriorityDisinherit+0xd4>)
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4a09      	ldr	r2, [pc, #36]	; (800690c <xTaskPriorityDisinherit+0xd8>)
 80068e6:	441a      	add	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f7fe fc3f 	bl	8005172 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068f4:	2301      	movs	r3, #1
 80068f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068f8:	697b      	ldr	r3, [r7, #20]
	}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20003544 	.word	0x20003544
 8006908:	20003a20 	.word	0x20003a20
 800690c:	20003548 	.word	0x20003548

08006910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800691a:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006920:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3304      	adds	r3, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fc80 	bl	800522c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d10a      	bne.n	800694a <prvAddCurrentTaskToDelayedList+0x3a>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800693a:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3304      	adds	r3, #4
 8006940:	4619      	mov	r1, r3
 8006942:	4819      	ldr	r0, [pc, #100]	; (80069a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006944:	f7fe fc15 	bl	8005172 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006948:	e026      	b.n	8006998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	429a      	cmp	r2, r3
 8006960:	d209      	bcs.n	8006976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7fe fc23 	bl	80051ba <vListInsert>
}
 8006974:	e010      	b.n	8006998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006976:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7fe fc19 	bl	80051ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d202      	bcs.n	8006998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006992:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	6013      	str	r3, [r2, #0]
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20003a1c 	.word	0x20003a1c
 80069a4:	20003544 	.word	0x20003544
 80069a8:	20003a04 	.word	0x20003a04
 80069ac:	200039d4 	.word	0x200039d4
 80069b0:	200039d0 	.word	0x200039d0
 80069b4:	20003a38 	.word	0x20003a38

080069b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069c2:	f000 fb07 	bl	8006fd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069c6:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <xTimerCreateTimerTask+0x80>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d021      	beq.n	8006a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069d6:	1d3a      	adds	r2, r7, #4
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	f107 030c 	add.w	r3, r7, #12
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fb7f 	bl	80050e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	9202      	str	r2, [sp, #8]
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	2302      	movs	r3, #2
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	460a      	mov	r2, r1
 80069f8:	4910      	ldr	r1, [pc, #64]	; (8006a3c <xTimerCreateTimerTask+0x84>)
 80069fa:	4811      	ldr	r0, [pc, #68]	; (8006a40 <xTimerCreateTimerTask+0x88>)
 80069fc:	f7ff f92c 	bl	8005c58 <xTaskCreateStatic>
 8006a00:	4603      	mov	r3, r0
 8006a02:	4a10      	ldr	r2, [pc, #64]	; (8006a44 <xTimerCreateTimerTask+0x8c>)
 8006a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <xTimerCreateTimerTask+0x8c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	613b      	str	r3, [r7, #16]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a2e:	697b      	ldr	r3, [r7, #20]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20003a74 	.word	0x20003a74
 8006a3c:	0800c288 	.word	0x0800c288
 8006a40:	08006b7d 	.word	0x08006b7d
 8006a44:	20003a78 	.word	0x20003a78

08006a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	623b      	str	r3, [r7, #32]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <xTimerGenericCommand+0x98>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02a      	beq.n	8006ad4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b05      	cmp	r3, #5
 8006a8e:	dc18      	bgt.n	8006ac2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a90:	f7ff feb2 	bl	80067f8 <xTaskGetSchedulerState>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d109      	bne.n	8006aae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a9a:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <xTimerGenericCommand+0x98>)
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f107 0110 	add.w	r1, r7, #16
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	f7fe fcef 	bl	8005488 <xQueueGenericSend>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8006aac:	e012      	b.n	8006ad4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <xTimerGenericCommand+0x98>)
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f107 0110 	add.w	r1, r7, #16
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f7fe fce5 	bl	8005488 <xQueueGenericSend>
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24
 8006ac0:	e008      	b.n	8006ad4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <xTimerGenericCommand+0x98>)
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f107 0110 	add.w	r1, r7, #16
 8006aca:	2300      	movs	r3, #0
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	f7fe fdd9 	bl	8005684 <xQueueGenericSendFromISR>
 8006ad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3728      	adds	r7, #40	; 0x28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20003a74 	.word	0x20003a74

08006ae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aee:	4b22      	ldr	r3, [pc, #136]	; (8006b78 <prvProcessExpiredTimer+0x94>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fe fb95 	bl	800522c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d022      	beq.n	8006b56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	18d1      	adds	r1, r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	6978      	ldr	r0, [r7, #20]
 8006b1e:	f000 f8d1 	bl	8006cc4 <prvInsertTimerInActiveList>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01f      	beq.n	8006b68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	2100      	movs	r1, #0
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f7ff ff88 	bl	8006a48 <xTimerGenericCommand>
 8006b38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d113      	bne.n	8006b68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	60fb      	str	r3, [r7, #12]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	6978      	ldr	r0, [r7, #20]
 8006b6e:	4798      	blx	r3
}
 8006b70:	bf00      	nop
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20003a6c 	.word	0x20003a6c

08006b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b84:	f107 0308 	add.w	r3, r7, #8
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f857 	bl	8006c3c <prvGetNextExpireTime>
 8006b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4619      	mov	r1, r3
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f803 	bl	8006ba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b9a:	f000 f8d5 	bl	8006d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b9e:	e7f1      	b.n	8006b84 <prvTimerTask+0x8>

08006ba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006baa:	f7ff fa39 	bl	8006020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f866 	bl	8006c84 <prvSampleTimeNow>
 8006bb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d130      	bne.n	8006c22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <prvProcessTimerOrBlockTask+0x3c>
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d806      	bhi.n	8006bdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bce:	f7ff fa35 	bl	800603c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ff85 	bl	8006ae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bda:	e024      	b.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006be2:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <prvProcessTimerOrBlockTask+0x90>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <prvProcessTimerOrBlockTask+0x50>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <prvProcessTimerOrBlockTask+0x52>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <prvProcessTimerOrBlockTask+0x94>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7fe fff5 	bl	8005bf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c06:	f7ff fa19 	bl	800603c <xTaskResumeAll>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <prvProcessTimerOrBlockTask+0x98>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
}
 8006c20:	e001      	b.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c22:	f7ff fa0b 	bl	800603c <xTaskResumeAll>
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20003a70 	.word	0x20003a70
 8006c34:	20003a74 	.word	0x20003a74
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <prvGetNextExpireTime+0x44>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <prvGetNextExpireTime+0x16>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	e000      	b.n	8006c54 <prvGetNextExpireTime+0x18>
 8006c52:	2200      	movs	r2, #0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <prvGetNextExpireTime+0x44>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	e001      	b.n	8006c70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20003a6c 	.word	0x20003a6c

08006c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c8c:	f7ff fa74 	bl	8006178 <xTaskGetTickCount>
 8006c90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c92:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <prvSampleTimeNow+0x3c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d205      	bcs.n	8006ca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c9c:	f000 f936 	bl	8006f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cae:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <prvSampleTimeNow+0x3c>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20003a7c 	.word	0x20003a7c

08006cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d812      	bhi.n	8006d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	1ad2      	subs	r2, r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e01b      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cfe:	4b10      	ldr	r3, [pc, #64]	; (8006d40 <prvInsertTimerInActiveList+0x7c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fe fa56 	bl	80051ba <vListInsert>
 8006d0e:	e012      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d206      	bcs.n	8006d26 <prvInsertTimerInActiveList+0x62>
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e007      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <prvInsertTimerInActiveList+0x80>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7fe fa42 	bl	80051ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d36:	697b      	ldr	r3, [r7, #20]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20003a70 	.word	0x20003a70
 8006d44:	20003a6c 	.word	0x20003a6c

08006d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08e      	sub	sp, #56	; 0x38
 8006d4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d4e:	e0ca      	b.n	8006ee6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da18      	bge.n	8006d88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	3304      	adds	r3, #4
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	61fb      	str	r3, [r7, #28]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7e:	6850      	ldr	r0, [r2, #4]
 8006d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d82:	6892      	ldr	r2, [r2, #8]
 8006d84:	4611      	mov	r1, r2
 8006d86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f2c0 80aa 	blt.w	8006ee4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fa43 	bl	800522c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006da6:	463b      	mov	r3, r7
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff ff6b 	bl	8006c84 <prvSampleTimeNow>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b09      	cmp	r3, #9
 8006db4:	f200 8097 	bhi.w	8006ee6 <prvProcessReceivedCommands+0x19e>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <prvProcessReceivedCommands+0x78>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006de9 	.word	0x08006de9
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006de9 	.word	0x08006de9
 8006dcc:	08006e5d 	.word	0x08006e5d
 8006dd0:	08006e71 	.word	0x08006e71
 8006dd4:	08006ebb 	.word	0x08006ebb
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006de9 	.word	0x08006de9
 8006de0:	08006e5d 	.word	0x08006e5d
 8006de4:	08006e71 	.word	0x08006e71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dee:	f043 0301 	orr.w	r3, r3, #1
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	18d1      	adds	r1, r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e08:	f7ff ff5c 	bl	8006cc4 <prvInsertTimerInActiveList>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d069      	beq.n	8006ee6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d05e      	beq.n	8006ee6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	441a      	add	r2, r3
 8006e30:	2300      	movs	r3, #0
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	2100      	movs	r1, #0
 8006e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e3a:	f7ff fe05 	bl	8006a48 <xTimerGenericCommand>
 8006e3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d14f      	bne.n	8006ee6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	61bb      	str	r3, [r7, #24]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006e6e:	e03a      	b.n	8006ee6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	617b      	str	r3, [r7, #20]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	18d1      	adds	r1, r2, r3
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb4:	f7ff ff06 	bl	8006cc4 <prvInsertTimerInActiveList>
					break;
 8006eb8:	e015      	b.n	8006ee6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eca:	f000 fb15 	bl	80074f8 <vPortFree>
 8006ece:	e00a      	b.n	8006ee6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ee2:	e000      	b.n	8006ee6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006ee4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <prvProcessReceivedCommands+0x1c0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	1d39      	adds	r1, r7, #4
 8006eec:	2200      	movs	r2, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fc64 	bl	80057bc <xQueueReceive>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f47f af2a 	bne.w	8006d50 <prvProcessReceivedCommands+0x8>
	}
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	3730      	adds	r7, #48	; 0x30
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20003a74 	.word	0x20003a74

08006f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f12:	e048      	b.n	8006fa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f14:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <prvSwitchTimerLists+0xc0>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	; (8006fcc <prvSwitchTimerLists+0xc0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe f97d 	bl	800522c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d02e      	beq.n	8006fa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4413      	add	r3, r2
 8006f50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d90e      	bls.n	8006f78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f66:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <prvSwitchTimerLists+0xc0>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	f7fe f922 	bl	80051ba <vListInsert>
 8006f76:	e016      	b.n	8006fa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	2100      	movs	r1, #0
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7ff fd60 	bl	8006a48 <xTimerGenericCommand>
 8006f88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	603b      	str	r3, [r7, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <prvSwitchTimerLists+0xc0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1b1      	bne.n	8006f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <prvSwitchTimerLists+0xc0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fb6:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <prvSwitchTimerLists+0xc4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <prvSwitchTimerLists+0xc0>)
 8006fbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fbe:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <prvSwitchTimerLists+0xc4>)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	6013      	str	r3, [r2, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20003a6c 	.word	0x20003a6c
 8006fd0:	20003a70 	.word	0x20003a70

08006fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fda:	f000 f96b 	bl	80072b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fde:	4b15      	ldr	r3, [pc, #84]	; (8007034 <prvCheckForValidListAndQueue+0x60>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d120      	bne.n	8007028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006fe6:	4814      	ldr	r0, [pc, #80]	; (8007038 <prvCheckForValidListAndQueue+0x64>)
 8006fe8:	f7fe f896 	bl	8005118 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fec:	4813      	ldr	r0, [pc, #76]	; (800703c <prvCheckForValidListAndQueue+0x68>)
 8006fee:	f7fe f893 	bl	8005118 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ff2:	4b13      	ldr	r3, [pc, #76]	; (8007040 <prvCheckForValidListAndQueue+0x6c>)
 8006ff4:	4a10      	ldr	r2, [pc, #64]	; (8007038 <prvCheckForValidListAndQueue+0x64>)
 8006ff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <prvCheckForValidListAndQueue+0x70>)
 8006ffa:	4a10      	ldr	r2, [pc, #64]	; (800703c <prvCheckForValidListAndQueue+0x68>)
 8006ffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ffe:	2300      	movs	r3, #0
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <prvCheckForValidListAndQueue+0x74>)
 8007004:	4a11      	ldr	r2, [pc, #68]	; (800704c <prvCheckForValidListAndQueue+0x78>)
 8007006:	2110      	movs	r1, #16
 8007008:	200a      	movs	r0, #10
 800700a:	f7fe f9a1 	bl	8005350 <xQueueGenericCreateStatic>
 800700e:	4603      	mov	r3, r0
 8007010:	4a08      	ldr	r2, [pc, #32]	; (8007034 <prvCheckForValidListAndQueue+0x60>)
 8007012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <prvCheckForValidListAndQueue+0x60>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <prvCheckForValidListAndQueue+0x60>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	490b      	ldr	r1, [pc, #44]	; (8007050 <prvCheckForValidListAndQueue+0x7c>)
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fdba 	bl	8005b9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007028:	f000 f974 	bl	8007314 <vPortExitCritical>
}
 800702c:	bf00      	nop
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20003a74 	.word	0x20003a74
 8007038:	20003a44 	.word	0x20003a44
 800703c:	20003a58 	.word	0x20003a58
 8007040:	20003a6c 	.word	0x20003a6c
 8007044:	20003a70 	.word	0x20003a70
 8007048:	20003b20 	.word	0x20003b20
 800704c:	20003a80 	.word	0x20003a80
 8007050:	0800c290 	.word	0x0800c290

08007054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b04      	subs	r3, #4
 8007064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800706c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3b04      	subs	r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3b04      	subs	r3, #4
 8007082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007084:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <pxPortInitialiseStack+0x64>)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3b14      	subs	r3, #20
 800708e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3b04      	subs	r3, #4
 800709a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f06f 0202 	mvn.w	r2, #2
 80070a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3b20      	subs	r3, #32
 80070a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	080070bd 	.word	0x080070bd

080070bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070c6:	4b12      	ldr	r3, [pc, #72]	; (8007110 <prvTaskExitError+0x54>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d00a      	beq.n	80070e6 <prvTaskExitError+0x2a>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <prvTaskExitError+0x28>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60bb      	str	r3, [r7, #8]
}
 80070f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070fa:	bf00      	nop
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0fc      	beq.n	80070fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	2000000c 	.word	0x2000000c
	...

08007120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007120:	4b07      	ldr	r3, [pc, #28]	; (8007140 <pxCurrentTCBConst2>)
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	6808      	ldr	r0, [r1, #0]
 8007126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	f380 8809 	msr	PSP, r0
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	4770      	bx	lr
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst2>:
 8007140:	20003544 	.word	0x20003544
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007148:	4808      	ldr	r0, [pc, #32]	; (800716c <prvPortStartFirstTask+0x24>)
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f380 8808 	msr	MSP, r0
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8814 	msr	CONTROL, r0
 800715a:	b662      	cpsie	i
 800715c:	b661      	cpsie	f
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	df00      	svc	0
 8007168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800716a:	bf00      	nop
 800716c:	e000ed08 	.word	0xe000ed08

08007170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007176:	4b46      	ldr	r3, [pc, #280]	; (8007290 <xPortStartScheduler+0x120>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a46      	ldr	r2, [pc, #280]	; (8007294 <xPortStartScheduler+0x124>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d10a      	bne.n	8007196 <xPortStartScheduler+0x26>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	613b      	str	r3, [r7, #16]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007196:	4b3e      	ldr	r3, [pc, #248]	; (8007290 <xPortStartScheduler+0x120>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a3f      	ldr	r2, [pc, #252]	; (8007298 <xPortStartScheduler+0x128>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d10a      	bne.n	80071b6 <xPortStartScheduler+0x46>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60fb      	str	r3, [r7, #12]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <xPortStartScheduler+0x12c>)
 80071b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	22ff      	movs	r2, #255	; 0xff
 80071c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <xPortStartScheduler+0x130>)
 80071dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071de:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <xPortStartScheduler+0x134>)
 80071e0:	2207      	movs	r2, #7
 80071e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071e4:	e009      	b.n	80071fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80071e6:	4b2f      	ldr	r3, [pc, #188]	; (80072a4 <xPortStartScheduler+0x134>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <xPortStartScheduler+0x134>)
 80071ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d0ef      	beq.n	80071e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007206:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <xPortStartScheduler+0x134>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1c3 0307 	rsb	r3, r3, #7
 800720e:	2b04      	cmp	r3, #4
 8007210:	d00a      	beq.n	8007228 <xPortStartScheduler+0xb8>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60bb      	str	r3, [r7, #8]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007228:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <xPortStartScheduler+0x134>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <xPortStartScheduler+0x134>)
 8007230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007232:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <xPortStartScheduler+0x134>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800723a:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <xPortStartScheduler+0x134>)
 800723c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	b2da      	uxtb	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007246:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <xPortStartScheduler+0x138>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <xPortStartScheduler+0x138>)
 800724c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <xPortStartScheduler+0x138>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <xPortStartScheduler+0x138>)
 8007258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800725c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800725e:	f000 f8dd 	bl	800741c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007262:	4b12      	ldr	r3, [pc, #72]	; (80072ac <xPortStartScheduler+0x13c>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007268:	f000 f8fc 	bl	8007464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800726c:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <xPortStartScheduler+0x140>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a0f      	ldr	r2, [pc, #60]	; (80072b0 <xPortStartScheduler+0x140>)
 8007272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007278:	f7ff ff66 	bl	8007148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800727c:	f7ff f846 	bl	800630c <vTaskSwitchContext>
	prvTaskExitError();
 8007280:	f7ff ff1c 	bl	80070bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	e000ed00 	.word	0xe000ed00
 8007294:	410fc271 	.word	0x410fc271
 8007298:	410fc270 	.word	0x410fc270
 800729c:	e000e400 	.word	0xe000e400
 80072a0:	20003b70 	.word	0x20003b70
 80072a4:	20003b74 	.word	0x20003b74
 80072a8:	e000ed20 	.word	0xe000ed20
 80072ac:	2000000c 	.word	0x2000000c
 80072b0:	e000ef34 	.word	0xe000ef34

080072b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	607b      	str	r3, [r7, #4]
}
 80072cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <vPortEnterCritical+0x58>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	4a0d      	ldr	r2, [pc, #52]	; (800730c <vPortEnterCritical+0x58>)
 80072d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <vPortEnterCritical+0x58>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10f      	bne.n	8007300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <vPortEnterCritical+0x5c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <vPortEnterCritical+0x4c>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	603b      	str	r3, [r7, #0]
}
 80072fc:	bf00      	nop
 80072fe:	e7fe      	b.n	80072fe <vPortEnterCritical+0x4a>
	}
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	2000000c 	.word	0x2000000c
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800731a:	4b12      	ldr	r3, [pc, #72]	; (8007364 <vPortExitCritical+0x50>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <vPortExitCritical+0x24>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	607b      	str	r3, [r7, #4]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <vPortExitCritical+0x50>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3b01      	subs	r3, #1
 800733e:	4a09      	ldr	r2, [pc, #36]	; (8007364 <vPortExitCritical+0x50>)
 8007340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007342:	4b08      	ldr	r3, [pc, #32]	; (8007364 <vPortExitCritical+0x50>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <vPortExitCritical+0x42>
 800734a:	2300      	movs	r3, #0
 800734c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	f383 8811 	msr	BASEPRI, r3
}
 8007354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	2000000c 	.word	0x2000000c
	...

08007370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007370:	f3ef 8009 	mrs	r0, PSP
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <pxCurrentTCBConst>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	f01e 0f10 	tst.w	lr, #16
 8007380:	bf08      	it	eq
 8007382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	6010      	str	r0, [r2, #0]
 800738c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007394:	f380 8811 	msr	BASEPRI, r0
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f7fe ffb4 	bl	800630c <vTaskSwitchContext>
 80073a4:	f04f 0000 	mov.w	r0, #0
 80073a8:	f380 8811 	msr	BASEPRI, r0
 80073ac:	bc09      	pop	{r0, r3}
 80073ae:	6819      	ldr	r1, [r3, #0]
 80073b0:	6808      	ldr	r0, [r1, #0]
 80073b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b6:	f01e 0f10 	tst.w	lr, #16
 80073ba:	bf08      	it	eq
 80073bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073c0:	f380 8809 	msr	PSP, r0
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst>:
 80073d0:	20003544 	.word	0x20003544
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	607b      	str	r3, [r7, #4]
}
 80073f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073f2:	f7fe fed1 	bl	8006198 <xTaskIncrementTick>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <xPortSysTickHandler+0x40>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f383 8811 	msr	BASEPRI, r3
}
 800740e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <vPortSetupTimerInterrupt+0x34>)
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007426:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <vPortSetupTimerInterrupt+0x38>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <vPortSetupTimerInterrupt+0x3c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a0a      	ldr	r2, [pc, #40]	; (800745c <vPortSetupTimerInterrupt+0x40>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <vPortSetupTimerInterrupt+0x44>)
 800743a:	3b01      	subs	r3, #1
 800743c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <vPortSetupTimerInterrupt+0x34>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	e000e010 	.word	0xe000e010
 8007454:	e000e018 	.word	0xe000e018
 8007458:	20000000 	.word	0x20000000
 800745c:	10624dd3 	.word	0x10624dd3
 8007460:	e000e014 	.word	0xe000e014

08007464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007474 <vPortEnableVFP+0x10>
 8007468:	6801      	ldr	r1, [r0, #0]
 800746a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800746e:	6001      	str	r1, [r0, #0]
 8007470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007472:	bf00      	nop
 8007474:	e000ed88 	.word	0xe000ed88

08007478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800747e:	f3ef 8305 	mrs	r3, IPSR
 8007482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d914      	bls.n	80074b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <vPortValidateInterruptPriority+0x70>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007494:	4b15      	ldr	r3, [pc, #84]	; (80074ec <vPortValidateInterruptPriority+0x74>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	7afa      	ldrb	r2, [r7, #11]
 800749a:	429a      	cmp	r2, r3
 800749c:	d20a      	bcs.n	80074b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	607b      	str	r3, [r7, #4]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074b4:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <vPortValidateInterruptPriority+0x78>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074bc:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <vPortValidateInterruptPriority+0x7c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d90a      	bls.n	80074da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	603b      	str	r3, [r7, #0]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <vPortValidateInterruptPriority+0x60>
	}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	e000e3f0 	.word	0xe000e3f0
 80074ec:	20003b70 	.word	0x20003b70
 80074f0:	e000ed0c 	.word	0xe000ed0c
 80074f4:	20003b74 	.word	0x20003b74

080074f8 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04d      	beq.n	80075a6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800750a:	2308      	movs	r3, #8
 800750c:	425b      	negs	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b24      	ldr	r3, [pc, #144]	; (80075b0 <vPortFree+0xb8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <vPortFree+0x44>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00a      	beq.n	800755a <vPortFree+0x62>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60bb      	str	r3, [r7, #8]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <vPortFree+0xb8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4013      	ands	r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01e      	beq.n	80075a6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d11a      	bne.n	80075a6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <vPortFree+0xb8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	43db      	mvns	r3, r3
 800757a:	401a      	ands	r2, r3
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007580:	f7fe fd4e 	bl	8006020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <vPortFree+0xbc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4413      	add	r3, r2
 800758e:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <vPortFree+0xbc>)
 8007590:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007592:	6938      	ldr	r0, [r7, #16]
 8007594:	f000 f812 	bl	80075bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <vPortFree+0xc0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3301      	adds	r3, #1
 800759e:	4a06      	ldr	r2, [pc, #24]	; (80075b8 <vPortFree+0xc0>)
 80075a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075a2:	f7fe fd4b 	bl	800603c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075a6:	bf00      	nop
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20003b8c 	.word	0x20003b8c
 80075b4:	20003b84 	.word	0x20003b84
 80075b8:	20003b88 	.word	0x20003b88

080075bc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075c4:	4b28      	ldr	r3, [pc, #160]	; (8007668 <prvInsertBlockIntoFreeList+0xac>)
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e002      	b.n	80075d0 <prvInsertBlockIntoFreeList+0x14>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d8f7      	bhi.n	80075ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4413      	add	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d108      	bne.n	80075fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d118      	bne.n	8007644 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <prvInsertBlockIntoFreeList+0xb0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d00d      	beq.n	800763a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	441a      	add	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e008      	b.n	800764c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800763a:	4b0c      	ldr	r3, [pc, #48]	; (800766c <prvInsertBlockIntoFreeList+0xb0>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e003      	b.n	800764c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d002      	beq.n	800765a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	20003b78 	.word	0x20003b78
 800766c:	20003b80 	.word	0x20003b80

08007670 <arm_rfft_fast_init_f32>:
 8007670:	084b      	lsrs	r3, r1, #1
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	b410      	push	{r4}
 8007676:	8201      	strh	r1, [r0, #16]
 8007678:	8003      	strh	r3, [r0, #0]
 800767a:	d047      	beq.n	800770c <arm_rfft_fast_init_f32+0x9c>
 800767c:	d917      	bls.n	80076ae <arm_rfft_fast_init_f32+0x3e>
 800767e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007682:	d03d      	beq.n	8007700 <arm_rfft_fast_init_f32+0x90>
 8007684:	d929      	bls.n	80076da <arm_rfft_fast_init_f32+0x6a>
 8007686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768a:	d020      	beq.n	80076ce <arm_rfft_fast_init_f32+0x5e>
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007690:	d113      	bne.n	80076ba <arm_rfft_fast_init_f32+0x4a>
 8007692:	4921      	ldr	r1, [pc, #132]	; (8007718 <arm_rfft_fast_init_f32+0xa8>)
 8007694:	4a21      	ldr	r2, [pc, #132]	; (800771c <arm_rfft_fast_init_f32+0xac>)
 8007696:	4b22      	ldr	r3, [pc, #136]	; (8007720 <arm_rfft_fast_init_f32+0xb0>)
 8007698:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800769c:	8184      	strh	r4, [r0, #12]
 800769e:	6081      	str	r1, [r0, #8]
 80076a0:	6042      	str	r2, [r0, #4]
 80076a2:	6143      	str	r3, [r0, #20]
 80076a4:	2000      	movs	r0, #0
 80076a6:	b240      	sxtb	r0, r0
 80076a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d01c      	beq.n	80076ec <arm_rfft_fast_init_f32+0x7c>
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	d006      	beq.n	80076c4 <arm_rfft_fast_init_f32+0x54>
 80076b6:	2b10      	cmp	r3, #16
 80076b8:	d01d      	beq.n	80076f6 <arm_rfft_fast_init_f32+0x86>
 80076ba:	20ff      	movs	r0, #255	; 0xff
 80076bc:	b240      	sxtb	r0, r0
 80076be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	2438      	movs	r4, #56	; 0x38
 80076c6:	4917      	ldr	r1, [pc, #92]	; (8007724 <arm_rfft_fast_init_f32+0xb4>)
 80076c8:	4a17      	ldr	r2, [pc, #92]	; (8007728 <arm_rfft_fast_init_f32+0xb8>)
 80076ca:	4b18      	ldr	r3, [pc, #96]	; (800772c <arm_rfft_fast_init_f32+0xbc>)
 80076cc:	e7e6      	b.n	800769c <arm_rfft_fast_init_f32+0x2c>
 80076ce:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80076d2:	4917      	ldr	r1, [pc, #92]	; (8007730 <arm_rfft_fast_init_f32+0xc0>)
 80076d4:	4a17      	ldr	r2, [pc, #92]	; (8007734 <arm_rfft_fast_init_f32+0xc4>)
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <arm_rfft_fast_init_f32+0xc8>)
 80076d8:	e7e0      	b.n	800769c <arm_rfft_fast_init_f32+0x2c>
 80076da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076de:	d1ec      	bne.n	80076ba <arm_rfft_fast_init_f32+0x4a>
 80076e0:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80076e4:	4915      	ldr	r1, [pc, #84]	; (800773c <arm_rfft_fast_init_f32+0xcc>)
 80076e6:	4a16      	ldr	r2, [pc, #88]	; (8007740 <arm_rfft_fast_init_f32+0xd0>)
 80076e8:	4b16      	ldr	r3, [pc, #88]	; (8007744 <arm_rfft_fast_init_f32+0xd4>)
 80076ea:	e7d7      	b.n	800769c <arm_rfft_fast_init_f32+0x2c>
 80076ec:	2430      	movs	r4, #48	; 0x30
 80076ee:	4916      	ldr	r1, [pc, #88]	; (8007748 <arm_rfft_fast_init_f32+0xd8>)
 80076f0:	4a16      	ldr	r2, [pc, #88]	; (800774c <arm_rfft_fast_init_f32+0xdc>)
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <arm_rfft_fast_init_f32+0xe0>)
 80076f4:	e7d2      	b.n	800769c <arm_rfft_fast_init_f32+0x2c>
 80076f6:	2414      	movs	r4, #20
 80076f8:	4916      	ldr	r1, [pc, #88]	; (8007754 <arm_rfft_fast_init_f32+0xe4>)
 80076fa:	4a17      	ldr	r2, [pc, #92]	; (8007758 <arm_rfft_fast_init_f32+0xe8>)
 80076fc:	4b17      	ldr	r3, [pc, #92]	; (800775c <arm_rfft_fast_init_f32+0xec>)
 80076fe:	e7cd      	b.n	800769c <arm_rfft_fast_init_f32+0x2c>
 8007700:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8007704:	4916      	ldr	r1, [pc, #88]	; (8007760 <arm_rfft_fast_init_f32+0xf0>)
 8007706:	4a17      	ldr	r2, [pc, #92]	; (8007764 <arm_rfft_fast_init_f32+0xf4>)
 8007708:	4b17      	ldr	r3, [pc, #92]	; (8007768 <arm_rfft_fast_init_f32+0xf8>)
 800770a:	e7c7      	b.n	800769c <arm_rfft_fast_init_f32+0x2c>
 800770c:	24d0      	movs	r4, #208	; 0xd0
 800770e:	4917      	ldr	r1, [pc, #92]	; (800776c <arm_rfft_fast_init_f32+0xfc>)
 8007710:	4a17      	ldr	r2, [pc, #92]	; (8007770 <arm_rfft_fast_init_f32+0x100>)
 8007712:	4b18      	ldr	r3, [pc, #96]	; (8007774 <arm_rfft_fast_init_f32+0x104>)
 8007714:	e7c2      	b.n	800769c <arm_rfft_fast_init_f32+0x2c>
 8007716:	bf00      	nop
 8007718:	0801b8b8 	.word	0x0801b8b8
 800771c:	0800c2b0 	.word	0x0800c2b0
 8007720:	08012420 	.word	0x08012420
 8007724:	080103b0 	.word	0x080103b0
 8007728:	0801d678 	.word	0x0801d678
 800772c:	0801fb68 	.word	0x0801fb68
 8007730:	08018da0 	.word	0x08018da0
 8007734:	08016ca0 	.word	0x08016ca0
 8007738:	08010420 	.word	0x08010420
 800773c:	0801f7f8 	.word	0x0801f7f8
 8007740:	08016420 	.word	0x08016420
 8007744:	0801d878 	.word	0x0801d878
 8007748:	08019c58 	.word	0x08019c58
 800774c:	08018ca0 	.word	0x08018ca0
 8007750:	080102b0 	.word	0x080102b0
 8007754:	08019bb0 	.word	0x08019bb0
 8007758:	08016c20 	.word	0x08016c20
 800775c:	08019bd8 	.word	0x08019bd8
 8007760:	0801e078 	.word	0x0801e078
 8007764:	0801a8b8 	.word	0x0801a8b8
 8007768:	0801e3f8 	.word	0x0801e3f8
 800776c:	0801fd68 	.word	0x0801fd68
 8007770:	0801a4b8 	.word	0x0801a4b8
 8007774:	0801f3f8 	.word	0x0801f3f8

08007778 <arm_cfft_radix4_init_f32>:
 8007778:	b410      	push	{r4}
 800777a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800777e:	4c2b      	ldr	r4, [pc, #172]	; (800782c <arm_cfft_radix4_init_f32+0xb4>)
 8007780:	7082      	strb	r2, [r0, #2]
 8007782:	70c3      	strb	r3, [r0, #3]
 8007784:	8001      	strh	r1, [r0, #0]
 8007786:	6044      	str	r4, [r0, #4]
 8007788:	d043      	beq.n	8007812 <arm_cfft_radix4_init_f32+0x9a>
 800778a:	d80f      	bhi.n	80077ac <arm_cfft_radix4_init_f32+0x34>
 800778c:	2910      	cmp	r1, #16
 800778e:	d032      	beq.n	80077f6 <arm_cfft_radix4_init_f32+0x7e>
 8007790:	2940      	cmp	r1, #64	; 0x40
 8007792:	d11e      	bne.n	80077d2 <arm_cfft_radix4_init_f32+0x5a>
 8007794:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8007798:	4b25      	ldr	r3, [pc, #148]	; (8007830 <arm_cfft_radix4_init_f32+0xb8>)
 800779a:	8181      	strh	r1, [r0, #12]
 800779c:	81c1      	strh	r1, [r0, #14]
 800779e:	6102      	str	r2, [r0, #16]
 80077a0:	6083      	str	r3, [r0, #8]
 80077a2:	2000      	movs	r0, #0
 80077a4:	b240      	sxtb	r0, r0
 80077a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077b0:	d014      	beq.n	80077dc <arm_cfft_radix4_init_f32+0x64>
 80077b2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80077b6:	d10c      	bne.n	80077d2 <arm_cfft_radix4_init_f32+0x5a>
 80077b8:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80077bc:	6103      	str	r3, [r0, #16]
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <arm_cfft_radix4_init_f32+0xbc>)
 80077c0:	6082      	str	r2, [r0, #8]
 80077c2:	2301      	movs	r3, #1
 80077c4:	8183      	strh	r3, [r0, #12]
 80077c6:	81c3      	strh	r3, [r0, #14]
 80077c8:	2000      	movs	r0, #0
 80077ca:	b240      	sxtb	r0, r0
 80077cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	20ff      	movs	r0, #255	; 0xff
 80077d4:	b240      	sxtb	r0, r0
 80077d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 80077e0:	6103      	str	r3, [r0, #16]
 80077e2:	4a15      	ldr	r2, [pc, #84]	; (8007838 <arm_cfft_radix4_init_f32+0xc0>)
 80077e4:	6082      	str	r2, [r0, #8]
 80077e6:	2304      	movs	r3, #4
 80077e8:	8183      	strh	r3, [r0, #12]
 80077ea:	81c3      	strh	r3, [r0, #14]
 80077ec:	2000      	movs	r0, #0
 80077ee:	b240      	sxtb	r0, r0
 80077f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 80077fa:	6103      	str	r3, [r0, #16]
 80077fc:	4a0f      	ldr	r2, [pc, #60]	; (800783c <arm_cfft_radix4_init_f32+0xc4>)
 80077fe:	6082      	str	r2, [r0, #8]
 8007800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007804:	8183      	strh	r3, [r0, #12]
 8007806:	81c3      	strh	r3, [r0, #14]
 8007808:	2000      	movs	r0, #0
 800780a:	b240      	sxtb	r0, r0
 800780c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8007816:	6103      	str	r3, [r0, #16]
 8007818:	4a09      	ldr	r2, [pc, #36]	; (8007840 <arm_cfft_radix4_init_f32+0xc8>)
 800781a:	6082      	str	r2, [r0, #8]
 800781c:	2310      	movs	r3, #16
 800781e:	8183      	strh	r3, [r0, #12]
 8007820:	81c3      	strh	r3, [r0, #14]
 8007822:	2000      	movs	r0, #0
 8007824:	b240      	sxtb	r0, r0
 8007826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	0801ff08 	.word	0x0801ff08
 8007830:	08019d36 	.word	0x08019d36
 8007834:	08019cb8 	.word	0x08019cb8
 8007838:	08019cbe 	.word	0x08019cbe
 800783c:	08019eb6 	.word	0x08019eb6
 8007840:	08019cd6 	.word	0x08019cd6

08007844 <__errno>:
 8007844:	4b01      	ldr	r3, [pc, #4]	; (800784c <__errno+0x8>)
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20000010 	.word	0x20000010

08007850 <std>:
 8007850:	2300      	movs	r3, #0
 8007852:	b510      	push	{r4, lr}
 8007854:	4604      	mov	r4, r0
 8007856:	e9c0 3300 	strd	r3, r3, [r0]
 800785a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800785e:	6083      	str	r3, [r0, #8]
 8007860:	8181      	strh	r1, [r0, #12]
 8007862:	6643      	str	r3, [r0, #100]	; 0x64
 8007864:	81c2      	strh	r2, [r0, #14]
 8007866:	6183      	str	r3, [r0, #24]
 8007868:	4619      	mov	r1, r3
 800786a:	2208      	movs	r2, #8
 800786c:	305c      	adds	r0, #92	; 0x5c
 800786e:	f000 f91a 	bl	8007aa6 <memset>
 8007872:	4b05      	ldr	r3, [pc, #20]	; (8007888 <std+0x38>)
 8007874:	6263      	str	r3, [r4, #36]	; 0x24
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <std+0x3c>)
 8007878:	62a3      	str	r3, [r4, #40]	; 0x28
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <std+0x40>)
 800787c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800787e:	4b05      	ldr	r3, [pc, #20]	; (8007894 <std+0x44>)
 8007880:	6224      	str	r4, [r4, #32]
 8007882:	6323      	str	r3, [r4, #48]	; 0x30
 8007884:	bd10      	pop	{r4, pc}
 8007886:	bf00      	nop
 8007888:	08008a15 	.word	0x08008a15
 800788c:	08008a37 	.word	0x08008a37
 8007890:	08008a6f 	.word	0x08008a6f
 8007894:	08008a93 	.word	0x08008a93

08007898 <_cleanup_r>:
 8007898:	4901      	ldr	r1, [pc, #4]	; (80078a0 <_cleanup_r+0x8>)
 800789a:	f000 b8af 	b.w	80079fc <_fwalk_reent>
 800789e:	bf00      	nop
 80078a0:	0800a641 	.word	0x0800a641

080078a4 <__sfmoreglue>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	2268      	movs	r2, #104	; 0x68
 80078a8:	1e4d      	subs	r5, r1, #1
 80078aa:	4355      	muls	r5, r2
 80078ac:	460e      	mov	r6, r1
 80078ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078b2:	f000 f921 	bl	8007af8 <_malloc_r>
 80078b6:	4604      	mov	r4, r0
 80078b8:	b140      	cbz	r0, 80078cc <__sfmoreglue+0x28>
 80078ba:	2100      	movs	r1, #0
 80078bc:	e9c0 1600 	strd	r1, r6, [r0]
 80078c0:	300c      	adds	r0, #12
 80078c2:	60a0      	str	r0, [r4, #8]
 80078c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078c8:	f000 f8ed 	bl	8007aa6 <memset>
 80078cc:	4620      	mov	r0, r4
 80078ce:	bd70      	pop	{r4, r5, r6, pc}

080078d0 <__sfp_lock_acquire>:
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <__sfp_lock_acquire+0x8>)
 80078d2:	f000 b8d8 	b.w	8007a86 <__retarget_lock_acquire_recursive>
 80078d6:	bf00      	nop
 80078d8:	20003b91 	.word	0x20003b91

080078dc <__sfp_lock_release>:
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <__sfp_lock_release+0x8>)
 80078de:	f000 b8d3 	b.w	8007a88 <__retarget_lock_release_recursive>
 80078e2:	bf00      	nop
 80078e4:	20003b91 	.word	0x20003b91

080078e8 <__sinit_lock_acquire>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__sinit_lock_acquire+0x8>)
 80078ea:	f000 b8cc 	b.w	8007a86 <__retarget_lock_acquire_recursive>
 80078ee:	bf00      	nop
 80078f0:	20003b92 	.word	0x20003b92

080078f4 <__sinit_lock_release>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__sinit_lock_release+0x8>)
 80078f6:	f000 b8c7 	b.w	8007a88 <__retarget_lock_release_recursive>
 80078fa:	bf00      	nop
 80078fc:	20003b92 	.word	0x20003b92

08007900 <__sinit>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4604      	mov	r4, r0
 8007904:	f7ff fff0 	bl	80078e8 <__sinit_lock_acquire>
 8007908:	69a3      	ldr	r3, [r4, #24]
 800790a:	b11b      	cbz	r3, 8007914 <__sinit+0x14>
 800790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007910:	f7ff bff0 	b.w	80078f4 <__sinit_lock_release>
 8007914:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007918:	6523      	str	r3, [r4, #80]	; 0x50
 800791a:	4b13      	ldr	r3, [pc, #76]	; (8007968 <__sinit+0x68>)
 800791c:	4a13      	ldr	r2, [pc, #76]	; (800796c <__sinit+0x6c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	62a2      	str	r2, [r4, #40]	; 0x28
 8007922:	42a3      	cmp	r3, r4
 8007924:	bf04      	itt	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	61a3      	streq	r3, [r4, #24]
 800792a:	4620      	mov	r0, r4
 800792c:	f000 f820 	bl	8007970 <__sfp>
 8007930:	6060      	str	r0, [r4, #4]
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f81c 	bl	8007970 <__sfp>
 8007938:	60a0      	str	r0, [r4, #8]
 800793a:	4620      	mov	r0, r4
 800793c:	f000 f818 	bl	8007970 <__sfp>
 8007940:	2200      	movs	r2, #0
 8007942:	60e0      	str	r0, [r4, #12]
 8007944:	2104      	movs	r1, #4
 8007946:	6860      	ldr	r0, [r4, #4]
 8007948:	f7ff ff82 	bl	8007850 <std>
 800794c:	68a0      	ldr	r0, [r4, #8]
 800794e:	2201      	movs	r2, #1
 8007950:	2109      	movs	r1, #9
 8007952:	f7ff ff7d 	bl	8007850 <std>
 8007956:	68e0      	ldr	r0, [r4, #12]
 8007958:	2202      	movs	r2, #2
 800795a:	2112      	movs	r1, #18
 800795c:	f7ff ff78 	bl	8007850 <std>
 8007960:	2301      	movs	r3, #1
 8007962:	61a3      	str	r3, [r4, #24]
 8007964:	e7d2      	b.n	800790c <__sinit+0xc>
 8007966:	bf00      	nop
 8007968:	08027f68 	.word	0x08027f68
 800796c:	08007899 	.word	0x08007899

08007970 <__sfp>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	4607      	mov	r7, r0
 8007974:	f7ff ffac 	bl	80078d0 <__sfp_lock_acquire>
 8007978:	4b1e      	ldr	r3, [pc, #120]	; (80079f4 <__sfp+0x84>)
 800797a:	681e      	ldr	r6, [r3, #0]
 800797c:	69b3      	ldr	r3, [r6, #24]
 800797e:	b913      	cbnz	r3, 8007986 <__sfp+0x16>
 8007980:	4630      	mov	r0, r6
 8007982:	f7ff ffbd 	bl	8007900 <__sinit>
 8007986:	3648      	adds	r6, #72	; 0x48
 8007988:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800798c:	3b01      	subs	r3, #1
 800798e:	d503      	bpl.n	8007998 <__sfp+0x28>
 8007990:	6833      	ldr	r3, [r6, #0]
 8007992:	b30b      	cbz	r3, 80079d8 <__sfp+0x68>
 8007994:	6836      	ldr	r6, [r6, #0]
 8007996:	e7f7      	b.n	8007988 <__sfp+0x18>
 8007998:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800799c:	b9d5      	cbnz	r5, 80079d4 <__sfp+0x64>
 800799e:	4b16      	ldr	r3, [pc, #88]	; (80079f8 <__sfp+0x88>)
 80079a0:	60e3      	str	r3, [r4, #12]
 80079a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079a6:	6665      	str	r5, [r4, #100]	; 0x64
 80079a8:	f000 f86c 	bl	8007a84 <__retarget_lock_init_recursive>
 80079ac:	f7ff ff96 	bl	80078dc <__sfp_lock_release>
 80079b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079b8:	6025      	str	r5, [r4, #0]
 80079ba:	61a5      	str	r5, [r4, #24]
 80079bc:	2208      	movs	r2, #8
 80079be:	4629      	mov	r1, r5
 80079c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079c4:	f000 f86f 	bl	8007aa6 <memset>
 80079c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079d0:	4620      	mov	r0, r4
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d4:	3468      	adds	r4, #104	; 0x68
 80079d6:	e7d9      	b.n	800798c <__sfp+0x1c>
 80079d8:	2104      	movs	r1, #4
 80079da:	4638      	mov	r0, r7
 80079dc:	f7ff ff62 	bl	80078a4 <__sfmoreglue>
 80079e0:	4604      	mov	r4, r0
 80079e2:	6030      	str	r0, [r6, #0]
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1d5      	bne.n	8007994 <__sfp+0x24>
 80079e8:	f7ff ff78 	bl	80078dc <__sfp_lock_release>
 80079ec:	230c      	movs	r3, #12
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	e7ee      	b.n	80079d0 <__sfp+0x60>
 80079f2:	bf00      	nop
 80079f4:	08027f68 	.word	0x08027f68
 80079f8:	ffff0001 	.word	0xffff0001

080079fc <_fwalk_reent>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	4606      	mov	r6, r0
 8007a02:	4688      	mov	r8, r1
 8007a04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a08:	2700      	movs	r7, #0
 8007a0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a0e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a12:	d505      	bpl.n	8007a20 <_fwalk_reent+0x24>
 8007a14:	6824      	ldr	r4, [r4, #0]
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	d1f7      	bne.n	8007a0a <_fwalk_reent+0xe>
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a20:	89ab      	ldrh	r3, [r5, #12]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d907      	bls.n	8007a36 <_fwalk_reent+0x3a>
 8007a26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	d003      	beq.n	8007a36 <_fwalk_reent+0x3a>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4630      	mov	r0, r6
 8007a32:	47c0      	blx	r8
 8007a34:	4307      	orrs	r7, r0
 8007a36:	3568      	adds	r5, #104	; 0x68
 8007a38:	e7e9      	b.n	8007a0e <_fwalk_reent+0x12>
	...

08007a3c <__libc_init_array>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4d0d      	ldr	r5, [pc, #52]	; (8007a74 <__libc_init_array+0x38>)
 8007a40:	4c0d      	ldr	r4, [pc, #52]	; (8007a78 <__libc_init_array+0x3c>)
 8007a42:	1b64      	subs	r4, r4, r5
 8007a44:	10a4      	asrs	r4, r4, #2
 8007a46:	2600      	movs	r6, #0
 8007a48:	42a6      	cmp	r6, r4
 8007a4a:	d109      	bne.n	8007a60 <__libc_init_array+0x24>
 8007a4c:	4d0b      	ldr	r5, [pc, #44]	; (8007a7c <__libc_init_array+0x40>)
 8007a4e:	4c0c      	ldr	r4, [pc, #48]	; (8007a80 <__libc_init_array+0x44>)
 8007a50:	f004 fc08 	bl	800c264 <_init>
 8007a54:	1b64      	subs	r4, r4, r5
 8007a56:	10a4      	asrs	r4, r4, #2
 8007a58:	2600      	movs	r6, #0
 8007a5a:	42a6      	cmp	r6, r4
 8007a5c:	d105      	bne.n	8007a6a <__libc_init_array+0x2e>
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a64:	4798      	blx	r3
 8007a66:	3601      	adds	r6, #1
 8007a68:	e7ee      	b.n	8007a48 <__libc_init_array+0xc>
 8007a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6e:	4798      	blx	r3
 8007a70:	3601      	adds	r6, #1
 8007a72:	e7f2      	b.n	8007a5a <__libc_init_array+0x1e>
 8007a74:	080283b4 	.word	0x080283b4
 8007a78:	080283b4 	.word	0x080283b4
 8007a7c:	080283b4 	.word	0x080283b4
 8007a80:	080283b8 	.word	0x080283b8

08007a84 <__retarget_lock_init_recursive>:
 8007a84:	4770      	bx	lr

08007a86 <__retarget_lock_acquire_recursive>:
 8007a86:	4770      	bx	lr

08007a88 <__retarget_lock_release_recursive>:
 8007a88:	4770      	bx	lr

08007a8a <memcpy>:
 8007a8a:	440a      	add	r2, r1
 8007a8c:	4291      	cmp	r1, r2
 8007a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a92:	d100      	bne.n	8007a96 <memcpy+0xc>
 8007a94:	4770      	bx	lr
 8007a96:	b510      	push	{r4, lr}
 8007a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aa0:	4291      	cmp	r1, r2
 8007aa2:	d1f9      	bne.n	8007a98 <memcpy+0xe>
 8007aa4:	bd10      	pop	{r4, pc}

08007aa6 <memset>:
 8007aa6:	4402      	add	r2, r0
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d100      	bne.n	8007ab0 <memset+0xa>
 8007aae:	4770      	bx	lr
 8007ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ab4:	e7f9      	b.n	8007aaa <memset+0x4>
	...

08007ab8 <sbrk_aligned>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4e0e      	ldr	r6, [pc, #56]	; (8007af4 <sbrk_aligned+0x3c>)
 8007abc:	460c      	mov	r4, r1
 8007abe:	6831      	ldr	r1, [r6, #0]
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	b911      	cbnz	r1, 8007aca <sbrk_aligned+0x12>
 8007ac4:	f000 ff70 	bl	80089a8 <_sbrk_r>
 8007ac8:	6030      	str	r0, [r6, #0]
 8007aca:	4621      	mov	r1, r4
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 ff6b 	bl	80089a8 <_sbrk_r>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	d00a      	beq.n	8007aec <sbrk_aligned+0x34>
 8007ad6:	1cc4      	adds	r4, r0, #3
 8007ad8:	f024 0403 	bic.w	r4, r4, #3
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d007      	beq.n	8007af0 <sbrk_aligned+0x38>
 8007ae0:	1a21      	subs	r1, r4, r0
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 ff60 	bl	80089a8 <_sbrk_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d101      	bne.n	8007af0 <sbrk_aligned+0x38>
 8007aec:	f04f 34ff 	mov.w	r4, #4294967295
 8007af0:	4620      	mov	r0, r4
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	20003b98 	.word	0x20003b98

08007af8 <_malloc_r>:
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	1ccd      	adds	r5, r1, #3
 8007afe:	f025 0503 	bic.w	r5, r5, #3
 8007b02:	3508      	adds	r5, #8
 8007b04:	2d0c      	cmp	r5, #12
 8007b06:	bf38      	it	cc
 8007b08:	250c      	movcc	r5, #12
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	db01      	blt.n	8007b14 <_malloc_r+0x1c>
 8007b10:	42a9      	cmp	r1, r5
 8007b12:	d905      	bls.n	8007b20 <_malloc_r+0x28>
 8007b14:	230c      	movs	r3, #12
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	2600      	movs	r6, #0
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	4e2e      	ldr	r6, [pc, #184]	; (8007bdc <_malloc_r+0xe4>)
 8007b22:	f003 f969 	bl	800adf8 <__malloc_lock>
 8007b26:	6833      	ldr	r3, [r6, #0]
 8007b28:	461c      	mov	r4, r3
 8007b2a:	bb34      	cbnz	r4, 8007b7a <_malloc_r+0x82>
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff ffc2 	bl	8007ab8 <sbrk_aligned>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	4604      	mov	r4, r0
 8007b38:	d14d      	bne.n	8007bd6 <_malloc_r+0xde>
 8007b3a:	6834      	ldr	r4, [r6, #0]
 8007b3c:	4626      	mov	r6, r4
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d140      	bne.n	8007bc4 <_malloc_r+0xcc>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	4631      	mov	r1, r6
 8007b46:	4638      	mov	r0, r7
 8007b48:	eb04 0803 	add.w	r8, r4, r3
 8007b4c:	f000 ff2c 	bl	80089a8 <_sbrk_r>
 8007b50:	4580      	cmp	r8, r0
 8007b52:	d13a      	bne.n	8007bca <_malloc_r+0xd2>
 8007b54:	6821      	ldr	r1, [r4, #0]
 8007b56:	3503      	adds	r5, #3
 8007b58:	1a6d      	subs	r5, r5, r1
 8007b5a:	f025 0503 	bic.w	r5, r5, #3
 8007b5e:	3508      	adds	r5, #8
 8007b60:	2d0c      	cmp	r5, #12
 8007b62:	bf38      	it	cc
 8007b64:	250c      	movcc	r5, #12
 8007b66:	4629      	mov	r1, r5
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff ffa5 	bl	8007ab8 <sbrk_aligned>
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d02b      	beq.n	8007bca <_malloc_r+0xd2>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	442b      	add	r3, r5
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	e00e      	b.n	8007b98 <_malloc_r+0xa0>
 8007b7a:	6822      	ldr	r2, [r4, #0]
 8007b7c:	1b52      	subs	r2, r2, r5
 8007b7e:	d41e      	bmi.n	8007bbe <_malloc_r+0xc6>
 8007b80:	2a0b      	cmp	r2, #11
 8007b82:	d916      	bls.n	8007bb2 <_malloc_r+0xba>
 8007b84:	1961      	adds	r1, r4, r5
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	6025      	str	r5, [r4, #0]
 8007b8a:	bf18      	it	ne
 8007b8c:	6059      	strne	r1, [r3, #4]
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	bf08      	it	eq
 8007b92:	6031      	streq	r1, [r6, #0]
 8007b94:	5162      	str	r2, [r4, r5]
 8007b96:	604b      	str	r3, [r1, #4]
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f104 060b 	add.w	r6, r4, #11
 8007b9e:	f003 f931 	bl	800ae04 <__malloc_unlock>
 8007ba2:	f026 0607 	bic.w	r6, r6, #7
 8007ba6:	1d23      	adds	r3, r4, #4
 8007ba8:	1af2      	subs	r2, r6, r3
 8007baa:	d0b6      	beq.n	8007b1a <_malloc_r+0x22>
 8007bac:	1b9b      	subs	r3, r3, r6
 8007bae:	50a3      	str	r3, [r4, r2]
 8007bb0:	e7b3      	b.n	8007b1a <_malloc_r+0x22>
 8007bb2:	6862      	ldr	r2, [r4, #4]
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	bf0c      	ite	eq
 8007bb8:	6032      	streq	r2, [r6, #0]
 8007bba:	605a      	strne	r2, [r3, #4]
 8007bbc:	e7ec      	b.n	8007b98 <_malloc_r+0xa0>
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	6864      	ldr	r4, [r4, #4]
 8007bc2:	e7b2      	b.n	8007b2a <_malloc_r+0x32>
 8007bc4:	4634      	mov	r4, r6
 8007bc6:	6876      	ldr	r6, [r6, #4]
 8007bc8:	e7b9      	b.n	8007b3e <_malloc_r+0x46>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	4638      	mov	r0, r7
 8007bd0:	f003 f918 	bl	800ae04 <__malloc_unlock>
 8007bd4:	e7a1      	b.n	8007b1a <_malloc_r+0x22>
 8007bd6:	6025      	str	r5, [r4, #0]
 8007bd8:	e7de      	b.n	8007b98 <_malloc_r+0xa0>
 8007bda:	bf00      	nop
 8007bdc:	20003b94 	.word	0x20003b94

08007be0 <__cvt>:
 8007be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	ec55 4b10 	vmov	r4, r5, d0
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	460e      	mov	r6, r1
 8007bec:	4619      	mov	r1, r3
 8007bee:	462b      	mov	r3, r5
 8007bf0:	bfbb      	ittet	lt
 8007bf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bf6:	461d      	movlt	r5, r3
 8007bf8:	2300      	movge	r3, #0
 8007bfa:	232d      	movlt	r3, #45	; 0x2d
 8007bfc:	700b      	strb	r3, [r1, #0]
 8007bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c04:	4691      	mov	r9, r2
 8007c06:	f023 0820 	bic.w	r8, r3, #32
 8007c0a:	bfbc      	itt	lt
 8007c0c:	4622      	movlt	r2, r4
 8007c0e:	4614      	movlt	r4, r2
 8007c10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c14:	d005      	beq.n	8007c22 <__cvt+0x42>
 8007c16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c1a:	d100      	bne.n	8007c1e <__cvt+0x3e>
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	2102      	movs	r1, #2
 8007c20:	e000      	b.n	8007c24 <__cvt+0x44>
 8007c22:	2103      	movs	r1, #3
 8007c24:	ab03      	add	r3, sp, #12
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	ab02      	add	r3, sp, #8
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	ec45 4b10 	vmov	d0, r4, r5
 8007c30:	4653      	mov	r3, sl
 8007c32:	4632      	mov	r2, r6
 8007c34:	f001 fe90 	bl	8009958 <_dtoa_r>
 8007c38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	d102      	bne.n	8007c46 <__cvt+0x66>
 8007c40:	f019 0f01 	tst.w	r9, #1
 8007c44:	d022      	beq.n	8007c8c <__cvt+0xac>
 8007c46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c4a:	eb07 0906 	add.w	r9, r7, r6
 8007c4e:	d110      	bne.n	8007c72 <__cvt+0x92>
 8007c50:	783b      	ldrb	r3, [r7, #0]
 8007c52:	2b30      	cmp	r3, #48	; 0x30
 8007c54:	d10a      	bne.n	8007c6c <__cvt+0x8c>
 8007c56:	2200      	movs	r2, #0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 ff53 	bl	8000b08 <__aeabi_dcmpeq>
 8007c62:	b918      	cbnz	r0, 8007c6c <__cvt+0x8c>
 8007c64:	f1c6 0601 	rsb	r6, r6, #1
 8007c68:	f8ca 6000 	str.w	r6, [sl]
 8007c6c:	f8da 3000 	ldr.w	r3, [sl]
 8007c70:	4499      	add	r9, r3
 8007c72:	2200      	movs	r2, #0
 8007c74:	2300      	movs	r3, #0
 8007c76:	4620      	mov	r0, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7f8 ff45 	bl	8000b08 <__aeabi_dcmpeq>
 8007c7e:	b108      	cbz	r0, 8007c84 <__cvt+0xa4>
 8007c80:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c84:	2230      	movs	r2, #48	; 0x30
 8007c86:	9b03      	ldr	r3, [sp, #12]
 8007c88:	454b      	cmp	r3, r9
 8007c8a:	d307      	bcc.n	8007c9c <__cvt+0xbc>
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c90:	1bdb      	subs	r3, r3, r7
 8007c92:	4638      	mov	r0, r7
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	b004      	add	sp, #16
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	1c59      	adds	r1, r3, #1
 8007c9e:	9103      	str	r1, [sp, #12]
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e7f0      	b.n	8007c86 <__cvt+0xa6>

08007ca4 <__exponent>:
 8007ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	bfb8      	it	lt
 8007cac:	4249      	neglt	r1, r1
 8007cae:	f803 2b02 	strb.w	r2, [r3], #2
 8007cb2:	bfb4      	ite	lt
 8007cb4:	222d      	movlt	r2, #45	; 0x2d
 8007cb6:	222b      	movge	r2, #43	; 0x2b
 8007cb8:	2909      	cmp	r1, #9
 8007cba:	7042      	strb	r2, [r0, #1]
 8007cbc:	dd2a      	ble.n	8007d14 <__exponent+0x70>
 8007cbe:	f10d 0407 	add.w	r4, sp, #7
 8007cc2:	46a4      	mov	ip, r4
 8007cc4:	270a      	movs	r7, #10
 8007cc6:	46a6      	mov	lr, r4
 8007cc8:	460a      	mov	r2, r1
 8007cca:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cce:	fb07 1516 	mls	r5, r7, r6, r1
 8007cd2:	3530      	adds	r5, #48	; 0x30
 8007cd4:	2a63      	cmp	r2, #99	; 0x63
 8007cd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007cda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cde:	4631      	mov	r1, r6
 8007ce0:	dcf1      	bgt.n	8007cc6 <__exponent+0x22>
 8007ce2:	3130      	adds	r1, #48	; 0x30
 8007ce4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ce8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cec:	1c44      	adds	r4, r0, #1
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4561      	cmp	r1, ip
 8007cf2:	d30a      	bcc.n	8007d0a <__exponent+0x66>
 8007cf4:	f10d 0209 	add.w	r2, sp, #9
 8007cf8:	eba2 020e 	sub.w	r2, r2, lr
 8007cfc:	4565      	cmp	r5, ip
 8007cfe:	bf88      	it	hi
 8007d00:	2200      	movhi	r2, #0
 8007d02:	4413      	add	r3, r2
 8007d04:	1a18      	subs	r0, r3, r0
 8007d06:	b003      	add	sp, #12
 8007d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d12:	e7ed      	b.n	8007cf0 <__exponent+0x4c>
 8007d14:	2330      	movs	r3, #48	; 0x30
 8007d16:	3130      	adds	r1, #48	; 0x30
 8007d18:	7083      	strb	r3, [r0, #2]
 8007d1a:	70c1      	strb	r1, [r0, #3]
 8007d1c:	1d03      	adds	r3, r0, #4
 8007d1e:	e7f1      	b.n	8007d04 <__exponent+0x60>

08007d20 <_printf_float>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	ed2d 8b02 	vpush	{d8}
 8007d28:	b08d      	sub	sp, #52	; 0x34
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d30:	4616      	mov	r6, r2
 8007d32:	461f      	mov	r7, r3
 8007d34:	4605      	mov	r5, r0
 8007d36:	f003 f82f 	bl	800ad98 <_localeconv_r>
 8007d3a:	f8d0 a000 	ldr.w	sl, [r0]
 8007d3e:	4650      	mov	r0, sl
 8007d40:	f7f8 fa66 	bl	8000210 <strlen>
 8007d44:	2300      	movs	r3, #0
 8007d46:	930a      	str	r3, [sp, #40]	; 0x28
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d54:	3307      	adds	r3, #7
 8007d56:	f023 0307 	bic.w	r3, r3, #7
 8007d5a:	f103 0208 	add.w	r2, r3, #8
 8007d5e:	f8c8 2000 	str.w	r2, [r8]
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d72:	9307      	str	r3, [sp, #28]
 8007d74:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d78:	ee08 0a10 	vmov	s16, r0
 8007d7c:	4b9f      	ldr	r3, [pc, #636]	; (8007ffc <_printf_float+0x2dc>)
 8007d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	f7f8 fef1 	bl	8000b6c <__aeabi_dcmpun>
 8007d8a:	bb88      	cbnz	r0, 8007df0 <_printf_float+0xd0>
 8007d8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d90:	4b9a      	ldr	r3, [pc, #616]	; (8007ffc <_printf_float+0x2dc>)
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	f7f8 fecb 	bl	8000b30 <__aeabi_dcmple>
 8007d9a:	bb48      	cbnz	r0, 8007df0 <_printf_float+0xd0>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4640      	mov	r0, r8
 8007da2:	4649      	mov	r1, r9
 8007da4:	f7f8 feba 	bl	8000b1c <__aeabi_dcmplt>
 8007da8:	b110      	cbz	r0, 8007db0 <_printf_float+0x90>
 8007daa:	232d      	movs	r3, #45	; 0x2d
 8007dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db0:	4b93      	ldr	r3, [pc, #588]	; (8008000 <_printf_float+0x2e0>)
 8007db2:	4894      	ldr	r0, [pc, #592]	; (8008004 <_printf_float+0x2e4>)
 8007db4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007db8:	bf94      	ite	ls
 8007dba:	4698      	movls	r8, r3
 8007dbc:	4680      	movhi	r8, r0
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	f023 0204 	bic.w	r2, r3, #4
 8007dc8:	6022      	str	r2, [r4, #0]
 8007dca:	f04f 0900 	mov.w	r9, #0
 8007dce:	9700      	str	r7, [sp, #0]
 8007dd0:	4633      	mov	r3, r6
 8007dd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f9d8 	bl	800818c <_printf_common>
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f040 8090 	bne.w	8007f02 <_printf_float+0x1e2>
 8007de2:	f04f 30ff 	mov.w	r0, #4294967295
 8007de6:	b00d      	add	sp, #52	; 0x34
 8007de8:	ecbd 8b02 	vpop	{d8}
 8007dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	4642      	mov	r2, r8
 8007df2:	464b      	mov	r3, r9
 8007df4:	4640      	mov	r0, r8
 8007df6:	4649      	mov	r1, r9
 8007df8:	f7f8 feb8 	bl	8000b6c <__aeabi_dcmpun>
 8007dfc:	b140      	cbz	r0, 8007e10 <_printf_float+0xf0>
 8007dfe:	464b      	mov	r3, r9
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfbc      	itt	lt
 8007e04:	232d      	movlt	r3, #45	; 0x2d
 8007e06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e0a:	487f      	ldr	r0, [pc, #508]	; (8008008 <_printf_float+0x2e8>)
 8007e0c:	4b7f      	ldr	r3, [pc, #508]	; (800800c <_printf_float+0x2ec>)
 8007e0e:	e7d1      	b.n	8007db4 <_printf_float+0x94>
 8007e10:	6863      	ldr	r3, [r4, #4]
 8007e12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e16:	9206      	str	r2, [sp, #24]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	d13f      	bne.n	8007e9c <_printf_float+0x17c>
 8007e1c:	2306      	movs	r3, #6
 8007e1e:	6063      	str	r3, [r4, #4]
 8007e20:	9b05      	ldr	r3, [sp, #20]
 8007e22:	6861      	ldr	r1, [r4, #4]
 8007e24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	ab0a      	add	r3, sp, #40	; 0x28
 8007e2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e32:	ab09      	add	r3, sp, #36	; 0x24
 8007e34:	ec49 8b10 	vmov	d0, r8, r9
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	6022      	str	r2, [r4, #0]
 8007e3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e40:	4628      	mov	r0, r5
 8007e42:	f7ff fecd 	bl	8007be0 <__cvt>
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e4a:	2b47      	cmp	r3, #71	; 0x47
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	d108      	bne.n	8007e62 <_printf_float+0x142>
 8007e50:	1cc8      	adds	r0, r1, #3
 8007e52:	db02      	blt.n	8007e5a <_printf_float+0x13a>
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	4299      	cmp	r1, r3
 8007e58:	dd41      	ble.n	8007ede <_printf_float+0x1be>
 8007e5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e5e:	fa5f fb8b 	uxtb.w	fp, fp
 8007e62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e66:	d820      	bhi.n	8007eaa <_printf_float+0x18a>
 8007e68:	3901      	subs	r1, #1
 8007e6a:	465a      	mov	r2, fp
 8007e6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e70:	9109      	str	r1, [sp, #36]	; 0x24
 8007e72:	f7ff ff17 	bl	8007ca4 <__exponent>
 8007e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e78:	1813      	adds	r3, r2, r0
 8007e7a:	2a01      	cmp	r2, #1
 8007e7c:	4681      	mov	r9, r0
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	dc02      	bgt.n	8007e88 <_printf_float+0x168>
 8007e82:	6822      	ldr	r2, [r4, #0]
 8007e84:	07d2      	lsls	r2, r2, #31
 8007e86:	d501      	bpl.n	8007e8c <_printf_float+0x16c>
 8007e88:	3301      	adds	r3, #1
 8007e8a:	6123      	str	r3, [r4, #16]
 8007e8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d09c      	beq.n	8007dce <_printf_float+0xae>
 8007e94:	232d      	movs	r3, #45	; 0x2d
 8007e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e9a:	e798      	b.n	8007dce <_printf_float+0xae>
 8007e9c:	9a06      	ldr	r2, [sp, #24]
 8007e9e:	2a47      	cmp	r2, #71	; 0x47
 8007ea0:	d1be      	bne.n	8007e20 <_printf_float+0x100>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1bc      	bne.n	8007e20 <_printf_float+0x100>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7b9      	b.n	8007e1e <_printf_float+0xfe>
 8007eaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007eae:	d118      	bne.n	8007ee2 <_printf_float+0x1c2>
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	dd0b      	ble.n	8007ece <_printf_float+0x1ae>
 8007eb6:	6121      	str	r1, [r4, #16]
 8007eb8:	b913      	cbnz	r3, 8007ec0 <_printf_float+0x1a0>
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	07d0      	lsls	r0, r2, #31
 8007ebe:	d502      	bpl.n	8007ec6 <_printf_float+0x1a6>
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	440b      	add	r3, r1
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ec8:	f04f 0900 	mov.w	r9, #0
 8007ecc:	e7de      	b.n	8007e8c <_printf_float+0x16c>
 8007ece:	b913      	cbnz	r3, 8007ed6 <_printf_float+0x1b6>
 8007ed0:	6822      	ldr	r2, [r4, #0]
 8007ed2:	07d2      	lsls	r2, r2, #31
 8007ed4:	d501      	bpl.n	8007eda <_printf_float+0x1ba>
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	e7f4      	b.n	8007ec4 <_printf_float+0x1a4>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e7f2      	b.n	8007ec4 <_printf_float+0x1a4>
 8007ede:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee4:	4299      	cmp	r1, r3
 8007ee6:	db05      	blt.n	8007ef4 <_printf_float+0x1d4>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	6121      	str	r1, [r4, #16]
 8007eec:	07d8      	lsls	r0, r3, #31
 8007eee:	d5ea      	bpl.n	8007ec6 <_printf_float+0x1a6>
 8007ef0:	1c4b      	adds	r3, r1, #1
 8007ef2:	e7e7      	b.n	8007ec4 <_printf_float+0x1a4>
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	bfd4      	ite	le
 8007ef8:	f1c1 0202 	rsble	r2, r1, #2
 8007efc:	2201      	movgt	r2, #1
 8007efe:	4413      	add	r3, r2
 8007f00:	e7e0      	b.n	8007ec4 <_printf_float+0x1a4>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	055a      	lsls	r2, r3, #21
 8007f06:	d407      	bmi.n	8007f18 <_printf_float+0x1f8>
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	4642      	mov	r2, r8
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	4628      	mov	r0, r5
 8007f10:	47b8      	blx	r7
 8007f12:	3001      	adds	r0, #1
 8007f14:	d12c      	bne.n	8007f70 <_printf_float+0x250>
 8007f16:	e764      	b.n	8007de2 <_printf_float+0xc2>
 8007f18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f1c:	f240 80e0 	bls.w	80080e0 <_printf_float+0x3c0>
 8007f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f24:	2200      	movs	r2, #0
 8007f26:	2300      	movs	r3, #0
 8007f28:	f7f8 fdee 	bl	8000b08 <__aeabi_dcmpeq>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d034      	beq.n	8007f9a <_printf_float+0x27a>
 8007f30:	4a37      	ldr	r2, [pc, #220]	; (8008010 <_printf_float+0x2f0>)
 8007f32:	2301      	movs	r3, #1
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f43f af51 	beq.w	8007de2 <_printf_float+0xc2>
 8007f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f44:	429a      	cmp	r2, r3
 8007f46:	db02      	blt.n	8007f4e <_printf_float+0x22e>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07d8      	lsls	r0, r3, #31
 8007f4c:	d510      	bpl.n	8007f70 <_printf_float+0x250>
 8007f4e:	ee18 3a10 	vmov	r3, s16
 8007f52:	4652      	mov	r2, sl
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f af41 	beq.w	8007de2 <_printf_float+0xc2>
 8007f60:	f04f 0800 	mov.w	r8, #0
 8007f64:	f104 091a 	add.w	r9, r4, #26
 8007f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	4543      	cmp	r3, r8
 8007f6e:	dc09      	bgt.n	8007f84 <_printf_float+0x264>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	079b      	lsls	r3, r3, #30
 8007f74:	f100 8105 	bmi.w	8008182 <_printf_float+0x462>
 8007f78:	68e0      	ldr	r0, [r4, #12]
 8007f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7c:	4298      	cmp	r0, r3
 8007f7e:	bfb8      	it	lt
 8007f80:	4618      	movlt	r0, r3
 8007f82:	e730      	b.n	8007de6 <_printf_float+0xc6>
 8007f84:	2301      	movs	r3, #1
 8007f86:	464a      	mov	r2, r9
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af27 	beq.w	8007de2 <_printf_float+0xc2>
 8007f94:	f108 0801 	add.w	r8, r8, #1
 8007f98:	e7e6      	b.n	8007f68 <_printf_float+0x248>
 8007f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dc39      	bgt.n	8008014 <_printf_float+0x2f4>
 8007fa0:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <_printf_float+0x2f0>)
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af19 	beq.w	8007de2 <_printf_float+0xc2>
 8007fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	d102      	bne.n	8007fbe <_printf_float+0x29e>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	07d9      	lsls	r1, r3, #31
 8007fbc:	d5d8      	bpl.n	8007f70 <_printf_float+0x250>
 8007fbe:	ee18 3a10 	vmov	r3, s16
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f43f af09 	beq.w	8007de2 <_printf_float+0xc2>
 8007fd0:	f04f 0900 	mov.w	r9, #0
 8007fd4:	f104 0a1a 	add.w	sl, r4, #26
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	425b      	negs	r3, r3
 8007fdc:	454b      	cmp	r3, r9
 8007fde:	dc01      	bgt.n	8007fe4 <_printf_float+0x2c4>
 8007fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe2:	e792      	b.n	8007f0a <_printf_float+0x1ea>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4652      	mov	r2, sl
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f43f aef7 	beq.w	8007de2 <_printf_float+0xc2>
 8007ff4:	f109 0901 	add.w	r9, r9, #1
 8007ff8:	e7ee      	b.n	8007fd8 <_printf_float+0x2b8>
 8007ffa:	bf00      	nop
 8007ffc:	7fefffff 	.word	0x7fefffff
 8008000:	08027f6c 	.word	0x08027f6c
 8008004:	08027f70 	.word	0x08027f70
 8008008:	08027f78 	.word	0x08027f78
 800800c:	08027f74 	.word	0x08027f74
 8008010:	08027f7c 	.word	0x08027f7c
 8008014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008018:	429a      	cmp	r2, r3
 800801a:	bfa8      	it	ge
 800801c:	461a      	movge	r2, r3
 800801e:	2a00      	cmp	r2, #0
 8008020:	4691      	mov	r9, r2
 8008022:	dc37      	bgt.n	8008094 <_printf_float+0x374>
 8008024:	f04f 0b00 	mov.w	fp, #0
 8008028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800802c:	f104 021a 	add.w	r2, r4, #26
 8008030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	eba3 0309 	sub.w	r3, r3, r9
 8008038:	455b      	cmp	r3, fp
 800803a:	dc33      	bgt.n	80080a4 <_printf_float+0x384>
 800803c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008040:	429a      	cmp	r2, r3
 8008042:	db3b      	blt.n	80080bc <_printf_float+0x39c>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	07da      	lsls	r2, r3, #31
 8008048:	d438      	bmi.n	80080bc <_printf_float+0x39c>
 800804a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800804c:	9a05      	ldr	r2, [sp, #20]
 800804e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008050:	1a9a      	subs	r2, r3, r2
 8008052:	eba3 0901 	sub.w	r9, r3, r1
 8008056:	4591      	cmp	r9, r2
 8008058:	bfa8      	it	ge
 800805a:	4691      	movge	r9, r2
 800805c:	f1b9 0f00 	cmp.w	r9, #0
 8008060:	dc35      	bgt.n	80080ce <_printf_float+0x3ae>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800806a:	f104 0a1a 	add.w	sl, r4, #26
 800806e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	eba3 0309 	sub.w	r3, r3, r9
 8008078:	4543      	cmp	r3, r8
 800807a:	f77f af79 	ble.w	8007f70 <_printf_float+0x250>
 800807e:	2301      	movs	r3, #1
 8008080:	4652      	mov	r2, sl
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	f43f aeaa 	beq.w	8007de2 <_printf_float+0xc2>
 800808e:	f108 0801 	add.w	r8, r8, #1
 8008092:	e7ec      	b.n	800806e <_printf_float+0x34e>
 8008094:	4613      	mov	r3, r2
 8008096:	4631      	mov	r1, r6
 8008098:	4642      	mov	r2, r8
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	d1c0      	bne.n	8008024 <_printf_float+0x304>
 80080a2:	e69e      	b.n	8007de2 <_printf_float+0xc2>
 80080a4:	2301      	movs	r3, #1
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	9205      	str	r2, [sp, #20]
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	f43f ae97 	beq.w	8007de2 <_printf_float+0xc2>
 80080b4:	9a05      	ldr	r2, [sp, #20]
 80080b6:	f10b 0b01 	add.w	fp, fp, #1
 80080ba:	e7b9      	b.n	8008030 <_printf_float+0x310>
 80080bc:	ee18 3a10 	vmov	r3, s16
 80080c0:	4652      	mov	r2, sl
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	d1be      	bne.n	800804a <_printf_float+0x32a>
 80080cc:	e689      	b.n	8007de2 <_printf_float+0xc2>
 80080ce:	9a05      	ldr	r2, [sp, #20]
 80080d0:	464b      	mov	r3, r9
 80080d2:	4442      	add	r2, r8
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	d1c1      	bne.n	8008062 <_printf_float+0x342>
 80080de:	e680      	b.n	8007de2 <_printf_float+0xc2>
 80080e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e2:	2a01      	cmp	r2, #1
 80080e4:	dc01      	bgt.n	80080ea <_printf_float+0x3ca>
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d538      	bpl.n	800815c <_printf_float+0x43c>
 80080ea:	2301      	movs	r3, #1
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae74 	beq.w	8007de2 <_printf_float+0xc2>
 80080fa:	ee18 3a10 	vmov	r3, s16
 80080fe:	4652      	mov	r2, sl
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f ae6b 	beq.w	8007de2 <_printf_float+0xc2>
 800810c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	f7f8 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8008118:	b9d8      	cbnz	r0, 8008152 <_printf_float+0x432>
 800811a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811c:	f108 0201 	add.w	r2, r8, #1
 8008120:	3b01      	subs	r3, #1
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	d10e      	bne.n	800814a <_printf_float+0x42a>
 800812c:	e659      	b.n	8007de2 <_printf_float+0xc2>
 800812e:	2301      	movs	r3, #1
 8008130:	4652      	mov	r2, sl
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	f43f ae52 	beq.w	8007de2 <_printf_float+0xc2>
 800813e:	f108 0801 	add.w	r8, r8, #1
 8008142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008144:	3b01      	subs	r3, #1
 8008146:	4543      	cmp	r3, r8
 8008148:	dcf1      	bgt.n	800812e <_printf_float+0x40e>
 800814a:	464b      	mov	r3, r9
 800814c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008150:	e6dc      	b.n	8007f0c <_printf_float+0x1ec>
 8008152:	f04f 0800 	mov.w	r8, #0
 8008156:	f104 0a1a 	add.w	sl, r4, #26
 800815a:	e7f2      	b.n	8008142 <_printf_float+0x422>
 800815c:	2301      	movs	r3, #1
 800815e:	4642      	mov	r2, r8
 8008160:	e7df      	b.n	8008122 <_printf_float+0x402>
 8008162:	2301      	movs	r3, #1
 8008164:	464a      	mov	r2, r9
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	f43f ae38 	beq.w	8007de2 <_printf_float+0xc2>
 8008172:	f108 0801 	add.w	r8, r8, #1
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800817a:	1a5b      	subs	r3, r3, r1
 800817c:	4543      	cmp	r3, r8
 800817e:	dcf0      	bgt.n	8008162 <_printf_float+0x442>
 8008180:	e6fa      	b.n	8007f78 <_printf_float+0x258>
 8008182:	f04f 0800 	mov.w	r8, #0
 8008186:	f104 0919 	add.w	r9, r4, #25
 800818a:	e7f4      	b.n	8008176 <_printf_float+0x456>

0800818c <_printf_common>:
 800818c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008190:	4616      	mov	r6, r2
 8008192:	4699      	mov	r9, r3
 8008194:	688a      	ldr	r2, [r1, #8]
 8008196:	690b      	ldr	r3, [r1, #16]
 8008198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800819c:	4293      	cmp	r3, r2
 800819e:	bfb8      	it	lt
 80081a0:	4613      	movlt	r3, r2
 80081a2:	6033      	str	r3, [r6, #0]
 80081a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081a8:	4607      	mov	r7, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	b10a      	cbz	r2, 80081b2 <_printf_common+0x26>
 80081ae:	3301      	adds	r3, #1
 80081b0:	6033      	str	r3, [r6, #0]
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	0699      	lsls	r1, r3, #26
 80081b6:	bf42      	ittt	mi
 80081b8:	6833      	ldrmi	r3, [r6, #0]
 80081ba:	3302      	addmi	r3, #2
 80081bc:	6033      	strmi	r3, [r6, #0]
 80081be:	6825      	ldr	r5, [r4, #0]
 80081c0:	f015 0506 	ands.w	r5, r5, #6
 80081c4:	d106      	bne.n	80081d4 <_printf_common+0x48>
 80081c6:	f104 0a19 	add.w	sl, r4, #25
 80081ca:	68e3      	ldr	r3, [r4, #12]
 80081cc:	6832      	ldr	r2, [r6, #0]
 80081ce:	1a9b      	subs	r3, r3, r2
 80081d0:	42ab      	cmp	r3, r5
 80081d2:	dc26      	bgt.n	8008222 <_printf_common+0x96>
 80081d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081d8:	1e13      	subs	r3, r2, #0
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	bf18      	it	ne
 80081de:	2301      	movne	r3, #1
 80081e0:	0692      	lsls	r2, r2, #26
 80081e2:	d42b      	bmi.n	800823c <_printf_common+0xb0>
 80081e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081e8:	4649      	mov	r1, r9
 80081ea:	4638      	mov	r0, r7
 80081ec:	47c0      	blx	r8
 80081ee:	3001      	adds	r0, #1
 80081f0:	d01e      	beq.n	8008230 <_printf_common+0xa4>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	68e5      	ldr	r5, [r4, #12]
 80081f6:	6832      	ldr	r2, [r6, #0]
 80081f8:	f003 0306 	and.w	r3, r3, #6
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	bf08      	it	eq
 8008200:	1aad      	subeq	r5, r5, r2
 8008202:	68a3      	ldr	r3, [r4, #8]
 8008204:	6922      	ldr	r2, [r4, #16]
 8008206:	bf0c      	ite	eq
 8008208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800820c:	2500      	movne	r5, #0
 800820e:	4293      	cmp	r3, r2
 8008210:	bfc4      	itt	gt
 8008212:	1a9b      	subgt	r3, r3, r2
 8008214:	18ed      	addgt	r5, r5, r3
 8008216:	2600      	movs	r6, #0
 8008218:	341a      	adds	r4, #26
 800821a:	42b5      	cmp	r5, r6
 800821c:	d11a      	bne.n	8008254 <_printf_common+0xc8>
 800821e:	2000      	movs	r0, #0
 8008220:	e008      	b.n	8008234 <_printf_common+0xa8>
 8008222:	2301      	movs	r3, #1
 8008224:	4652      	mov	r2, sl
 8008226:	4649      	mov	r1, r9
 8008228:	4638      	mov	r0, r7
 800822a:	47c0      	blx	r8
 800822c:	3001      	adds	r0, #1
 800822e:	d103      	bne.n	8008238 <_printf_common+0xac>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008238:	3501      	adds	r5, #1
 800823a:	e7c6      	b.n	80081ca <_printf_common+0x3e>
 800823c:	18e1      	adds	r1, r4, r3
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	2030      	movs	r0, #48	; 0x30
 8008242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008246:	4422      	add	r2, r4
 8008248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800824c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008250:	3302      	adds	r3, #2
 8008252:	e7c7      	b.n	80081e4 <_printf_common+0x58>
 8008254:	2301      	movs	r3, #1
 8008256:	4622      	mov	r2, r4
 8008258:	4649      	mov	r1, r9
 800825a:	4638      	mov	r0, r7
 800825c:	47c0      	blx	r8
 800825e:	3001      	adds	r0, #1
 8008260:	d0e6      	beq.n	8008230 <_printf_common+0xa4>
 8008262:	3601      	adds	r6, #1
 8008264:	e7d9      	b.n	800821a <_printf_common+0x8e>
	...

08008268 <_printf_i>:
 8008268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	7e0f      	ldrb	r7, [r1, #24]
 800826e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008270:	2f78      	cmp	r7, #120	; 0x78
 8008272:	4691      	mov	r9, r2
 8008274:	4680      	mov	r8, r0
 8008276:	460c      	mov	r4, r1
 8008278:	469a      	mov	sl, r3
 800827a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800827e:	d807      	bhi.n	8008290 <_printf_i+0x28>
 8008280:	2f62      	cmp	r7, #98	; 0x62
 8008282:	d80a      	bhi.n	800829a <_printf_i+0x32>
 8008284:	2f00      	cmp	r7, #0
 8008286:	f000 80d8 	beq.w	800843a <_printf_i+0x1d2>
 800828a:	2f58      	cmp	r7, #88	; 0x58
 800828c:	f000 80a3 	beq.w	80083d6 <_printf_i+0x16e>
 8008290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008298:	e03a      	b.n	8008310 <_printf_i+0xa8>
 800829a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800829e:	2b15      	cmp	r3, #21
 80082a0:	d8f6      	bhi.n	8008290 <_printf_i+0x28>
 80082a2:	a101      	add	r1, pc, #4	; (adr r1, 80082a8 <_printf_i+0x40>)
 80082a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082a8:	08008301 	.word	0x08008301
 80082ac:	08008315 	.word	0x08008315
 80082b0:	08008291 	.word	0x08008291
 80082b4:	08008291 	.word	0x08008291
 80082b8:	08008291 	.word	0x08008291
 80082bc:	08008291 	.word	0x08008291
 80082c0:	08008315 	.word	0x08008315
 80082c4:	08008291 	.word	0x08008291
 80082c8:	08008291 	.word	0x08008291
 80082cc:	08008291 	.word	0x08008291
 80082d0:	08008291 	.word	0x08008291
 80082d4:	08008421 	.word	0x08008421
 80082d8:	08008345 	.word	0x08008345
 80082dc:	08008403 	.word	0x08008403
 80082e0:	08008291 	.word	0x08008291
 80082e4:	08008291 	.word	0x08008291
 80082e8:	08008443 	.word	0x08008443
 80082ec:	08008291 	.word	0x08008291
 80082f0:	08008345 	.word	0x08008345
 80082f4:	08008291 	.word	0x08008291
 80082f8:	08008291 	.word	0x08008291
 80082fc:	0800840b 	.word	0x0800840b
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	1d1a      	adds	r2, r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	602a      	str	r2, [r5, #0]
 8008308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800830c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008310:	2301      	movs	r3, #1
 8008312:	e0a3      	b.n	800845c <_printf_i+0x1f4>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	6829      	ldr	r1, [r5, #0]
 8008318:	0606      	lsls	r6, r0, #24
 800831a:	f101 0304 	add.w	r3, r1, #4
 800831e:	d50a      	bpl.n	8008336 <_printf_i+0xce>
 8008320:	680e      	ldr	r6, [r1, #0]
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	2e00      	cmp	r6, #0
 8008326:	da03      	bge.n	8008330 <_printf_i+0xc8>
 8008328:	232d      	movs	r3, #45	; 0x2d
 800832a:	4276      	negs	r6, r6
 800832c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008330:	485e      	ldr	r0, [pc, #376]	; (80084ac <_printf_i+0x244>)
 8008332:	230a      	movs	r3, #10
 8008334:	e019      	b.n	800836a <_printf_i+0x102>
 8008336:	680e      	ldr	r6, [r1, #0]
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800833e:	bf18      	it	ne
 8008340:	b236      	sxthne	r6, r6
 8008342:	e7ef      	b.n	8008324 <_printf_i+0xbc>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	1d19      	adds	r1, r3, #4
 800834a:	6029      	str	r1, [r5, #0]
 800834c:	0601      	lsls	r1, r0, #24
 800834e:	d501      	bpl.n	8008354 <_printf_i+0xec>
 8008350:	681e      	ldr	r6, [r3, #0]
 8008352:	e002      	b.n	800835a <_printf_i+0xf2>
 8008354:	0646      	lsls	r6, r0, #25
 8008356:	d5fb      	bpl.n	8008350 <_printf_i+0xe8>
 8008358:	881e      	ldrh	r6, [r3, #0]
 800835a:	4854      	ldr	r0, [pc, #336]	; (80084ac <_printf_i+0x244>)
 800835c:	2f6f      	cmp	r7, #111	; 0x6f
 800835e:	bf0c      	ite	eq
 8008360:	2308      	moveq	r3, #8
 8008362:	230a      	movne	r3, #10
 8008364:	2100      	movs	r1, #0
 8008366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800836a:	6865      	ldr	r5, [r4, #4]
 800836c:	60a5      	str	r5, [r4, #8]
 800836e:	2d00      	cmp	r5, #0
 8008370:	bfa2      	ittt	ge
 8008372:	6821      	ldrge	r1, [r4, #0]
 8008374:	f021 0104 	bicge.w	r1, r1, #4
 8008378:	6021      	strge	r1, [r4, #0]
 800837a:	b90e      	cbnz	r6, 8008380 <_printf_i+0x118>
 800837c:	2d00      	cmp	r5, #0
 800837e:	d04d      	beq.n	800841c <_printf_i+0x1b4>
 8008380:	4615      	mov	r5, r2
 8008382:	fbb6 f1f3 	udiv	r1, r6, r3
 8008386:	fb03 6711 	mls	r7, r3, r1, r6
 800838a:	5dc7      	ldrb	r7, [r0, r7]
 800838c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008390:	4637      	mov	r7, r6
 8008392:	42bb      	cmp	r3, r7
 8008394:	460e      	mov	r6, r1
 8008396:	d9f4      	bls.n	8008382 <_printf_i+0x11a>
 8008398:	2b08      	cmp	r3, #8
 800839a:	d10b      	bne.n	80083b4 <_printf_i+0x14c>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	07de      	lsls	r6, r3, #31
 80083a0:	d508      	bpl.n	80083b4 <_printf_i+0x14c>
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	6861      	ldr	r1, [r4, #4]
 80083a6:	4299      	cmp	r1, r3
 80083a8:	bfde      	ittt	le
 80083aa:	2330      	movle	r3, #48	; 0x30
 80083ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083b4:	1b52      	subs	r2, r2, r5
 80083b6:	6122      	str	r2, [r4, #16]
 80083b8:	f8cd a000 	str.w	sl, [sp]
 80083bc:	464b      	mov	r3, r9
 80083be:	aa03      	add	r2, sp, #12
 80083c0:	4621      	mov	r1, r4
 80083c2:	4640      	mov	r0, r8
 80083c4:	f7ff fee2 	bl	800818c <_printf_common>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d14c      	bne.n	8008466 <_printf_i+0x1fe>
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	b004      	add	sp, #16
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	4835      	ldr	r0, [pc, #212]	; (80084ac <_printf_i+0x244>)
 80083d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083dc:	6829      	ldr	r1, [r5, #0]
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083e4:	6029      	str	r1, [r5, #0]
 80083e6:	061d      	lsls	r5, r3, #24
 80083e8:	d514      	bpl.n	8008414 <_printf_i+0x1ac>
 80083ea:	07df      	lsls	r7, r3, #31
 80083ec:	bf44      	itt	mi
 80083ee:	f043 0320 	orrmi.w	r3, r3, #32
 80083f2:	6023      	strmi	r3, [r4, #0]
 80083f4:	b91e      	cbnz	r6, 80083fe <_printf_i+0x196>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	f023 0320 	bic.w	r3, r3, #32
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	2310      	movs	r3, #16
 8008400:	e7b0      	b.n	8008364 <_printf_i+0xfc>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	f043 0320 	orr.w	r3, r3, #32
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	2378      	movs	r3, #120	; 0x78
 800840c:	4828      	ldr	r0, [pc, #160]	; (80084b0 <_printf_i+0x248>)
 800840e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008412:	e7e3      	b.n	80083dc <_printf_i+0x174>
 8008414:	0659      	lsls	r1, r3, #25
 8008416:	bf48      	it	mi
 8008418:	b2b6      	uxthmi	r6, r6
 800841a:	e7e6      	b.n	80083ea <_printf_i+0x182>
 800841c:	4615      	mov	r5, r2
 800841e:	e7bb      	b.n	8008398 <_printf_i+0x130>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	6826      	ldr	r6, [r4, #0]
 8008424:	6961      	ldr	r1, [r4, #20]
 8008426:	1d18      	adds	r0, r3, #4
 8008428:	6028      	str	r0, [r5, #0]
 800842a:	0635      	lsls	r5, r6, #24
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	d501      	bpl.n	8008434 <_printf_i+0x1cc>
 8008430:	6019      	str	r1, [r3, #0]
 8008432:	e002      	b.n	800843a <_printf_i+0x1d2>
 8008434:	0670      	lsls	r0, r6, #25
 8008436:	d5fb      	bpl.n	8008430 <_printf_i+0x1c8>
 8008438:	8019      	strh	r1, [r3, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	4615      	mov	r5, r2
 8008440:	e7ba      	b.n	80083b8 <_printf_i+0x150>
 8008442:	682b      	ldr	r3, [r5, #0]
 8008444:	1d1a      	adds	r2, r3, #4
 8008446:	602a      	str	r2, [r5, #0]
 8008448:	681d      	ldr	r5, [r3, #0]
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	2100      	movs	r1, #0
 800844e:	4628      	mov	r0, r5
 8008450:	f7f7 fee6 	bl	8000220 <memchr>
 8008454:	b108      	cbz	r0, 800845a <_printf_i+0x1f2>
 8008456:	1b40      	subs	r0, r0, r5
 8008458:	6060      	str	r0, [r4, #4]
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	2300      	movs	r3, #0
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008464:	e7a8      	b.n	80083b8 <_printf_i+0x150>
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	462a      	mov	r2, r5
 800846a:	4649      	mov	r1, r9
 800846c:	4640      	mov	r0, r8
 800846e:	47d0      	blx	sl
 8008470:	3001      	adds	r0, #1
 8008472:	d0ab      	beq.n	80083cc <_printf_i+0x164>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	079b      	lsls	r3, r3, #30
 8008478:	d413      	bmi.n	80084a2 <_printf_i+0x23a>
 800847a:	68e0      	ldr	r0, [r4, #12]
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	4298      	cmp	r0, r3
 8008480:	bfb8      	it	lt
 8008482:	4618      	movlt	r0, r3
 8008484:	e7a4      	b.n	80083d0 <_printf_i+0x168>
 8008486:	2301      	movs	r3, #1
 8008488:	4632      	mov	r2, r6
 800848a:	4649      	mov	r1, r9
 800848c:	4640      	mov	r0, r8
 800848e:	47d0      	blx	sl
 8008490:	3001      	adds	r0, #1
 8008492:	d09b      	beq.n	80083cc <_printf_i+0x164>
 8008494:	3501      	adds	r5, #1
 8008496:	68e3      	ldr	r3, [r4, #12]
 8008498:	9903      	ldr	r1, [sp, #12]
 800849a:	1a5b      	subs	r3, r3, r1
 800849c:	42ab      	cmp	r3, r5
 800849e:	dcf2      	bgt.n	8008486 <_printf_i+0x21e>
 80084a0:	e7eb      	b.n	800847a <_printf_i+0x212>
 80084a2:	2500      	movs	r5, #0
 80084a4:	f104 0619 	add.w	r6, r4, #25
 80084a8:	e7f5      	b.n	8008496 <_printf_i+0x22e>
 80084aa:	bf00      	nop
 80084ac:	08027f7e 	.word	0x08027f7e
 80084b0:	08027f8f 	.word	0x08027f8f

080084b4 <_scanf_float>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	b087      	sub	sp, #28
 80084ba:	4617      	mov	r7, r2
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	688b      	ldr	r3, [r1, #8]
 80084c0:	1e5a      	subs	r2, r3, #1
 80084c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084c6:	bf83      	ittte	hi
 80084c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084cc:	195b      	addhi	r3, r3, r5
 80084ce:	9302      	strhi	r3, [sp, #8]
 80084d0:	2300      	movls	r3, #0
 80084d2:	bf86      	itte	hi
 80084d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084d8:	608b      	strhi	r3, [r1, #8]
 80084da:	9302      	strls	r3, [sp, #8]
 80084dc:	680b      	ldr	r3, [r1, #0]
 80084de:	468b      	mov	fp, r1
 80084e0:	2500      	movs	r5, #0
 80084e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80084ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084ee:	4680      	mov	r8, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	465e      	mov	r6, fp
 80084f4:	46aa      	mov	sl, r5
 80084f6:	46a9      	mov	r9, r5
 80084f8:	9501      	str	r5, [sp, #4]
 80084fa:	68a2      	ldr	r2, [r4, #8]
 80084fc:	b152      	cbz	r2, 8008514 <_scanf_float+0x60>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b4e      	cmp	r3, #78	; 0x4e
 8008504:	d864      	bhi.n	80085d0 <_scanf_float+0x11c>
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	d83c      	bhi.n	8008584 <_scanf_float+0xd0>
 800850a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800850e:	b2c8      	uxtb	r0, r1
 8008510:	280e      	cmp	r0, #14
 8008512:	d93a      	bls.n	800858a <_scanf_float+0xd6>
 8008514:	f1b9 0f00 	cmp.w	r9, #0
 8008518:	d003      	beq.n	8008522 <_scanf_float+0x6e>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008526:	f1ba 0f01 	cmp.w	sl, #1
 800852a:	f200 8113 	bhi.w	8008754 <_scanf_float+0x2a0>
 800852e:	455e      	cmp	r6, fp
 8008530:	f200 8105 	bhi.w	800873e <_scanf_float+0x28a>
 8008534:	2501      	movs	r5, #1
 8008536:	4628      	mov	r0, r5
 8008538:	b007      	add	sp, #28
 800853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008542:	2a0d      	cmp	r2, #13
 8008544:	d8e6      	bhi.n	8008514 <_scanf_float+0x60>
 8008546:	a101      	add	r1, pc, #4	; (adr r1, 800854c <_scanf_float+0x98>)
 8008548:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800854c:	0800868b 	.word	0x0800868b
 8008550:	08008515 	.word	0x08008515
 8008554:	08008515 	.word	0x08008515
 8008558:	08008515 	.word	0x08008515
 800855c:	080086eb 	.word	0x080086eb
 8008560:	080086c3 	.word	0x080086c3
 8008564:	08008515 	.word	0x08008515
 8008568:	08008515 	.word	0x08008515
 800856c:	08008699 	.word	0x08008699
 8008570:	08008515 	.word	0x08008515
 8008574:	08008515 	.word	0x08008515
 8008578:	08008515 	.word	0x08008515
 800857c:	08008515 	.word	0x08008515
 8008580:	08008651 	.word	0x08008651
 8008584:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008588:	e7db      	b.n	8008542 <_scanf_float+0x8e>
 800858a:	290e      	cmp	r1, #14
 800858c:	d8c2      	bhi.n	8008514 <_scanf_float+0x60>
 800858e:	a001      	add	r0, pc, #4	; (adr r0, 8008594 <_scanf_float+0xe0>)
 8008590:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008594:	08008643 	.word	0x08008643
 8008598:	08008515 	.word	0x08008515
 800859c:	08008643 	.word	0x08008643
 80085a0:	080086d7 	.word	0x080086d7
 80085a4:	08008515 	.word	0x08008515
 80085a8:	080085f1 	.word	0x080085f1
 80085ac:	0800862d 	.word	0x0800862d
 80085b0:	0800862d 	.word	0x0800862d
 80085b4:	0800862d 	.word	0x0800862d
 80085b8:	0800862d 	.word	0x0800862d
 80085bc:	0800862d 	.word	0x0800862d
 80085c0:	0800862d 	.word	0x0800862d
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	0800862d 	.word	0x0800862d
 80085cc:	0800862d 	.word	0x0800862d
 80085d0:	2b6e      	cmp	r3, #110	; 0x6e
 80085d2:	d809      	bhi.n	80085e8 <_scanf_float+0x134>
 80085d4:	2b60      	cmp	r3, #96	; 0x60
 80085d6:	d8b2      	bhi.n	800853e <_scanf_float+0x8a>
 80085d8:	2b54      	cmp	r3, #84	; 0x54
 80085da:	d077      	beq.n	80086cc <_scanf_float+0x218>
 80085dc:	2b59      	cmp	r3, #89	; 0x59
 80085de:	d199      	bne.n	8008514 <_scanf_float+0x60>
 80085e0:	2d07      	cmp	r5, #7
 80085e2:	d197      	bne.n	8008514 <_scanf_float+0x60>
 80085e4:	2508      	movs	r5, #8
 80085e6:	e029      	b.n	800863c <_scanf_float+0x188>
 80085e8:	2b74      	cmp	r3, #116	; 0x74
 80085ea:	d06f      	beq.n	80086cc <_scanf_float+0x218>
 80085ec:	2b79      	cmp	r3, #121	; 0x79
 80085ee:	e7f6      	b.n	80085de <_scanf_float+0x12a>
 80085f0:	6821      	ldr	r1, [r4, #0]
 80085f2:	05c8      	lsls	r0, r1, #23
 80085f4:	d51a      	bpl.n	800862c <_scanf_float+0x178>
 80085f6:	9b02      	ldr	r3, [sp, #8]
 80085f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085fc:	6021      	str	r1, [r4, #0]
 80085fe:	f109 0901 	add.w	r9, r9, #1
 8008602:	b11b      	cbz	r3, 800860c <_scanf_float+0x158>
 8008604:	3b01      	subs	r3, #1
 8008606:	3201      	adds	r2, #1
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	60a2      	str	r2, [r4, #8]
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	3b01      	subs	r3, #1
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	3301      	adds	r3, #1
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3b01      	subs	r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	607b      	str	r3, [r7, #4]
 8008620:	f340 8084 	ble.w	800872c <_scanf_float+0x278>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	e766      	b.n	80084fa <_scanf_float+0x46>
 800862c:	eb1a 0f05 	cmn.w	sl, r5
 8008630:	f47f af70 	bne.w	8008514 <_scanf_float+0x60>
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	f806 3b01 	strb.w	r3, [r6], #1
 8008640:	e7e4      	b.n	800860c <_scanf_float+0x158>
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	0610      	lsls	r0, r2, #24
 8008646:	f57f af65 	bpl.w	8008514 <_scanf_float+0x60>
 800864a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800864e:	e7f4      	b.n	800863a <_scanf_float+0x186>
 8008650:	f1ba 0f00 	cmp.w	sl, #0
 8008654:	d10e      	bne.n	8008674 <_scanf_float+0x1c0>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	d10e      	bne.n	800867a <_scanf_float+0x1c6>
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008662:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008666:	d108      	bne.n	800867a <_scanf_float+0x1c6>
 8008668:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	f04f 0a01 	mov.w	sl, #1
 8008672:	e7e3      	b.n	800863c <_scanf_float+0x188>
 8008674:	f1ba 0f02 	cmp.w	sl, #2
 8008678:	d055      	beq.n	8008726 <_scanf_float+0x272>
 800867a:	2d01      	cmp	r5, #1
 800867c:	d002      	beq.n	8008684 <_scanf_float+0x1d0>
 800867e:	2d04      	cmp	r5, #4
 8008680:	f47f af48 	bne.w	8008514 <_scanf_float+0x60>
 8008684:	3501      	adds	r5, #1
 8008686:	b2ed      	uxtb	r5, r5
 8008688:	e7d8      	b.n	800863c <_scanf_float+0x188>
 800868a:	f1ba 0f01 	cmp.w	sl, #1
 800868e:	f47f af41 	bne.w	8008514 <_scanf_float+0x60>
 8008692:	f04f 0a02 	mov.w	sl, #2
 8008696:	e7d1      	b.n	800863c <_scanf_float+0x188>
 8008698:	b97d      	cbnz	r5, 80086ba <_scanf_float+0x206>
 800869a:	f1b9 0f00 	cmp.w	r9, #0
 800869e:	f47f af3c 	bne.w	800851a <_scanf_float+0x66>
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086ac:	f47f af39 	bne.w	8008522 <_scanf_float+0x6e>
 80086b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086b4:	6022      	str	r2, [r4, #0]
 80086b6:	2501      	movs	r5, #1
 80086b8:	e7c0      	b.n	800863c <_scanf_float+0x188>
 80086ba:	2d03      	cmp	r5, #3
 80086bc:	d0e2      	beq.n	8008684 <_scanf_float+0x1d0>
 80086be:	2d05      	cmp	r5, #5
 80086c0:	e7de      	b.n	8008680 <_scanf_float+0x1cc>
 80086c2:	2d02      	cmp	r5, #2
 80086c4:	f47f af26 	bne.w	8008514 <_scanf_float+0x60>
 80086c8:	2503      	movs	r5, #3
 80086ca:	e7b7      	b.n	800863c <_scanf_float+0x188>
 80086cc:	2d06      	cmp	r5, #6
 80086ce:	f47f af21 	bne.w	8008514 <_scanf_float+0x60>
 80086d2:	2507      	movs	r5, #7
 80086d4:	e7b2      	b.n	800863c <_scanf_float+0x188>
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	0591      	lsls	r1, r2, #22
 80086da:	f57f af1b 	bpl.w	8008514 <_scanf_float+0x60>
 80086de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086e2:	6022      	str	r2, [r4, #0]
 80086e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80086e8:	e7a8      	b.n	800863c <_scanf_float+0x188>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086f4:	d006      	beq.n	8008704 <_scanf_float+0x250>
 80086f6:	0550      	lsls	r0, r2, #21
 80086f8:	f57f af0c 	bpl.w	8008514 <_scanf_float+0x60>
 80086fc:	f1b9 0f00 	cmp.w	r9, #0
 8008700:	f43f af0f 	beq.w	8008522 <_scanf_float+0x6e>
 8008704:	0591      	lsls	r1, r2, #22
 8008706:	bf58      	it	pl
 8008708:	9901      	ldrpl	r1, [sp, #4]
 800870a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800870e:	bf58      	it	pl
 8008710:	eba9 0101 	subpl.w	r1, r9, r1
 8008714:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008718:	bf58      	it	pl
 800871a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	f04f 0900 	mov.w	r9, #0
 8008724:	e78a      	b.n	800863c <_scanf_float+0x188>
 8008726:	f04f 0a03 	mov.w	sl, #3
 800872a:	e787      	b.n	800863c <_scanf_float+0x188>
 800872c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008730:	4639      	mov	r1, r7
 8008732:	4640      	mov	r0, r8
 8008734:	4798      	blx	r3
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f aedf 	beq.w	80084fa <_scanf_float+0x46>
 800873c:	e6ea      	b.n	8008514 <_scanf_float+0x60>
 800873e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008746:	463a      	mov	r2, r7
 8008748:	4640      	mov	r0, r8
 800874a:	4798      	blx	r3
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	3b01      	subs	r3, #1
 8008750:	6123      	str	r3, [r4, #16]
 8008752:	e6ec      	b.n	800852e <_scanf_float+0x7a>
 8008754:	1e6b      	subs	r3, r5, #1
 8008756:	2b06      	cmp	r3, #6
 8008758:	d825      	bhi.n	80087a6 <_scanf_float+0x2f2>
 800875a:	2d02      	cmp	r5, #2
 800875c:	d836      	bhi.n	80087cc <_scanf_float+0x318>
 800875e:	455e      	cmp	r6, fp
 8008760:	f67f aee8 	bls.w	8008534 <_scanf_float+0x80>
 8008764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008768:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800876c:	463a      	mov	r2, r7
 800876e:	4640      	mov	r0, r8
 8008770:	4798      	blx	r3
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	3b01      	subs	r3, #1
 8008776:	6123      	str	r3, [r4, #16]
 8008778:	e7f1      	b.n	800875e <_scanf_float+0x2aa>
 800877a:	9802      	ldr	r0, [sp, #8]
 800877c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008780:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	463a      	mov	r2, r7
 8008788:	4640      	mov	r0, r8
 800878a:	4798      	blx	r3
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	3b01      	subs	r3, #1
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008796:	fa5f fa8a 	uxtb.w	sl, sl
 800879a:	f1ba 0f02 	cmp.w	sl, #2
 800879e:	d1ec      	bne.n	800877a <_scanf_float+0x2c6>
 80087a0:	3d03      	subs	r5, #3
 80087a2:	b2ed      	uxtb	r5, r5
 80087a4:	1b76      	subs	r6, r6, r5
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	05da      	lsls	r2, r3, #23
 80087aa:	d52f      	bpl.n	800880c <_scanf_float+0x358>
 80087ac:	055b      	lsls	r3, r3, #21
 80087ae:	d510      	bpl.n	80087d2 <_scanf_float+0x31e>
 80087b0:	455e      	cmp	r6, fp
 80087b2:	f67f aebf 	bls.w	8008534 <_scanf_float+0x80>
 80087b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087be:	463a      	mov	r2, r7
 80087c0:	4640      	mov	r0, r8
 80087c2:	4798      	blx	r3
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	e7f1      	b.n	80087b0 <_scanf_float+0x2fc>
 80087cc:	46aa      	mov	sl, r5
 80087ce:	9602      	str	r6, [sp, #8]
 80087d0:	e7df      	b.n	8008792 <_scanf_float+0x2de>
 80087d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	2965      	cmp	r1, #101	; 0x65
 80087da:	f103 33ff 	add.w	r3, r3, #4294967295
 80087de:	f106 35ff 	add.w	r5, r6, #4294967295
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	d00c      	beq.n	8008800 <_scanf_float+0x34c>
 80087e6:	2945      	cmp	r1, #69	; 0x45
 80087e8:	d00a      	beq.n	8008800 <_scanf_float+0x34c>
 80087ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ee:	463a      	mov	r2, r7
 80087f0:	4640      	mov	r0, r8
 80087f2:	4798      	blx	r3
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	1eb5      	subs	r5, r6, #2
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008804:	463a      	mov	r2, r7
 8008806:	4640      	mov	r0, r8
 8008808:	4798      	blx	r3
 800880a:	462e      	mov	r6, r5
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	f015 0510 	ands.w	r5, r5, #16
 8008812:	d159      	bne.n	80088c8 <_scanf_float+0x414>
 8008814:	7035      	strb	r5, [r6, #0]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800881c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008820:	d11b      	bne.n	800885a <_scanf_float+0x3a6>
 8008822:	9b01      	ldr	r3, [sp, #4]
 8008824:	454b      	cmp	r3, r9
 8008826:	eba3 0209 	sub.w	r2, r3, r9
 800882a:	d123      	bne.n	8008874 <_scanf_float+0x3c0>
 800882c:	2200      	movs	r2, #0
 800882e:	4659      	mov	r1, fp
 8008830:	4640      	mov	r0, r8
 8008832:	f000 ff57 	bl	80096e4 <_strtod_r>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	f012 0f02 	tst.w	r2, #2
 800883e:	ec57 6b10 	vmov	r6, r7, d0
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	d021      	beq.n	800888a <_scanf_float+0x3d6>
 8008846:	9903      	ldr	r1, [sp, #12]
 8008848:	1d1a      	adds	r2, r3, #4
 800884a:	600a      	str	r2, [r1, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	e9c3 6700 	strd	r6, r7, [r3]
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60e3      	str	r3, [r4, #12]
 8008858:	e66d      	b.n	8008536 <_scanf_float+0x82>
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0e5      	beq.n	800882c <_scanf_float+0x378>
 8008860:	9905      	ldr	r1, [sp, #20]
 8008862:	230a      	movs	r3, #10
 8008864:	462a      	mov	r2, r5
 8008866:	3101      	adds	r1, #1
 8008868:	4640      	mov	r0, r8
 800886a:	f000 ffc3 	bl	80097f4 <_strtol_r>
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	9e05      	ldr	r6, [sp, #20]
 8008872:	1ac2      	subs	r2, r0, r3
 8008874:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008878:	429e      	cmp	r6, r3
 800887a:	bf28      	it	cs
 800887c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008880:	4912      	ldr	r1, [pc, #72]	; (80088cc <_scanf_float+0x418>)
 8008882:	4630      	mov	r0, r6
 8008884:	f000 f8a6 	bl	80089d4 <siprintf>
 8008888:	e7d0      	b.n	800882c <_scanf_float+0x378>
 800888a:	9903      	ldr	r1, [sp, #12]
 800888c:	f012 0f04 	tst.w	r2, #4
 8008890:	f103 0204 	add.w	r2, r3, #4
 8008894:	600a      	str	r2, [r1, #0]
 8008896:	d1d9      	bne.n	800884c <_scanf_float+0x398>
 8008898:	f8d3 8000 	ldr.w	r8, [r3]
 800889c:	ee10 2a10 	vmov	r2, s0
 80088a0:	ee10 0a10 	vmov	r0, s0
 80088a4:	463b      	mov	r3, r7
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f960 	bl	8000b6c <__aeabi_dcmpun>
 80088ac:	b128      	cbz	r0, 80088ba <_scanf_float+0x406>
 80088ae:	4808      	ldr	r0, [pc, #32]	; (80088d0 <_scanf_float+0x41c>)
 80088b0:	f000 f88a 	bl	80089c8 <nanf>
 80088b4:	ed88 0a00 	vstr	s0, [r8]
 80088b8:	e7cb      	b.n	8008852 <_scanf_float+0x39e>
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f8 f9b3 	bl	8000c28 <__aeabi_d2f>
 80088c2:	f8c8 0000 	str.w	r0, [r8]
 80088c6:	e7c4      	b.n	8008852 <_scanf_float+0x39e>
 80088c8:	2500      	movs	r5, #0
 80088ca:	e634      	b.n	8008536 <_scanf_float+0x82>
 80088cc:	08027fa0 	.word	0x08027fa0
 80088d0:	080283a8 	.word	0x080283a8

080088d4 <cleanup_glue>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	460c      	mov	r4, r1
 80088d8:	6809      	ldr	r1, [r1, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	b109      	cbz	r1, 80088e2 <cleanup_glue+0xe>
 80088de:	f7ff fff9 	bl	80088d4 <cleanup_glue>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ea:	f002 bf69 	b.w	800b7c0 <_free_r>
	...

080088f0 <_reclaim_reent>:
 80088f0:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <_reclaim_reent+0xb4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4283      	cmp	r3, r0
 80088f6:	b570      	push	{r4, r5, r6, lr}
 80088f8:	4604      	mov	r4, r0
 80088fa:	d051      	beq.n	80089a0 <_reclaim_reent+0xb0>
 80088fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088fe:	b143      	cbz	r3, 8008912 <_reclaim_reent+0x22>
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d14a      	bne.n	800899c <_reclaim_reent+0xac>
 8008906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008908:	6819      	ldr	r1, [r3, #0]
 800890a:	b111      	cbz	r1, 8008912 <_reclaim_reent+0x22>
 800890c:	4620      	mov	r0, r4
 800890e:	f002 ff57 	bl	800b7c0 <_free_r>
 8008912:	6961      	ldr	r1, [r4, #20]
 8008914:	b111      	cbz	r1, 800891c <_reclaim_reent+0x2c>
 8008916:	4620      	mov	r0, r4
 8008918:	f002 ff52 	bl	800b7c0 <_free_r>
 800891c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800891e:	b111      	cbz	r1, 8008926 <_reclaim_reent+0x36>
 8008920:	4620      	mov	r0, r4
 8008922:	f002 ff4d 	bl	800b7c0 <_free_r>
 8008926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008928:	b111      	cbz	r1, 8008930 <_reclaim_reent+0x40>
 800892a:	4620      	mov	r0, r4
 800892c:	f002 ff48 	bl	800b7c0 <_free_r>
 8008930:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008932:	b111      	cbz	r1, 800893a <_reclaim_reent+0x4a>
 8008934:	4620      	mov	r0, r4
 8008936:	f002 ff43 	bl	800b7c0 <_free_r>
 800893a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800893c:	b111      	cbz	r1, 8008944 <_reclaim_reent+0x54>
 800893e:	4620      	mov	r0, r4
 8008940:	f002 ff3e 	bl	800b7c0 <_free_r>
 8008944:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008946:	b111      	cbz	r1, 800894e <_reclaim_reent+0x5e>
 8008948:	4620      	mov	r0, r4
 800894a:	f002 ff39 	bl	800b7c0 <_free_r>
 800894e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008950:	b111      	cbz	r1, 8008958 <_reclaim_reent+0x68>
 8008952:	4620      	mov	r0, r4
 8008954:	f002 ff34 	bl	800b7c0 <_free_r>
 8008958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800895a:	b111      	cbz	r1, 8008962 <_reclaim_reent+0x72>
 800895c:	4620      	mov	r0, r4
 800895e:	f002 ff2f 	bl	800b7c0 <_free_r>
 8008962:	69a3      	ldr	r3, [r4, #24]
 8008964:	b1e3      	cbz	r3, 80089a0 <_reclaim_reent+0xb0>
 8008966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008968:	4620      	mov	r0, r4
 800896a:	4798      	blx	r3
 800896c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800896e:	b1b9      	cbz	r1, 80089a0 <_reclaim_reent+0xb0>
 8008970:	4620      	mov	r0, r4
 8008972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008976:	f7ff bfad 	b.w	80088d4 <cleanup_glue>
 800897a:	5949      	ldr	r1, [r1, r5]
 800897c:	b941      	cbnz	r1, 8008990 <_reclaim_reent+0xa0>
 800897e:	3504      	adds	r5, #4
 8008980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008982:	2d80      	cmp	r5, #128	; 0x80
 8008984:	68d9      	ldr	r1, [r3, #12]
 8008986:	d1f8      	bne.n	800897a <_reclaim_reent+0x8a>
 8008988:	4620      	mov	r0, r4
 800898a:	f002 ff19 	bl	800b7c0 <_free_r>
 800898e:	e7ba      	b.n	8008906 <_reclaim_reent+0x16>
 8008990:	680e      	ldr	r6, [r1, #0]
 8008992:	4620      	mov	r0, r4
 8008994:	f002 ff14 	bl	800b7c0 <_free_r>
 8008998:	4631      	mov	r1, r6
 800899a:	e7ef      	b.n	800897c <_reclaim_reent+0x8c>
 800899c:	2500      	movs	r5, #0
 800899e:	e7ef      	b.n	8008980 <_reclaim_reent+0x90>
 80089a0:	bd70      	pop	{r4, r5, r6, pc}
 80089a2:	bf00      	nop
 80089a4:	20000010 	.word	0x20000010

080089a8 <_sbrk_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	; (80089c4 <_sbrk_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f9 f99c 	bl	8001cf0 <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_sbrk_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_sbrk_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20003b9c 	.word	0x20003b9c

080089c8 <nanf>:
 80089c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089d0 <nanf+0x8>
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	7fc00000 	.word	0x7fc00000

080089d4 <siprintf>:
 80089d4:	b40e      	push	{r1, r2, r3}
 80089d6:	b500      	push	{lr}
 80089d8:	b09c      	sub	sp, #112	; 0x70
 80089da:	ab1d      	add	r3, sp, #116	; 0x74
 80089dc:	9002      	str	r0, [sp, #8]
 80089de:	9006      	str	r0, [sp, #24]
 80089e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089e4:	4809      	ldr	r0, [pc, #36]	; (8008a0c <siprintf+0x38>)
 80089e6:	9107      	str	r1, [sp, #28]
 80089e8:	9104      	str	r1, [sp, #16]
 80089ea:	4909      	ldr	r1, [pc, #36]	; (8008a10 <siprintf+0x3c>)
 80089ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f0:	9105      	str	r1, [sp, #20]
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	a902      	add	r1, sp, #8
 80089f8:	f002 ff8a 	bl	800b910 <_svfiprintf_r>
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	b01c      	add	sp, #112	; 0x70
 8008a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a08:	b003      	add	sp, #12
 8008a0a:	4770      	bx	lr
 8008a0c:	20000010 	.word	0x20000010
 8008a10:	ffff0208 	.word	0xffff0208

08008a14 <__sread>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1c:	f003 f878 	bl	800bb10 <_read_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	bfab      	itete	ge
 8008a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a26:	89a3      	ldrhlt	r3, [r4, #12]
 8008a28:	181b      	addge	r3, r3, r0
 8008a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a2e:	bfac      	ite	ge
 8008a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a32:	81a3      	strhlt	r3, [r4, #12]
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <__swrite>:
 8008a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	898b      	ldrh	r3, [r1, #12]
 8008a3e:	05db      	lsls	r3, r3, #23
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	4616      	mov	r6, r2
 8008a46:	d505      	bpl.n	8008a54 <__swrite+0x1e>
 8008a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f002 f9a6 	bl	800ada0 <_lseek_r>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	4632      	mov	r2, r6
 8008a62:	463b      	mov	r3, r7
 8008a64:	4628      	mov	r0, r5
 8008a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6a:	f000 bec5 	b.w	80097f8 <_write_r>

08008a6e <__sseek>:
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	460c      	mov	r4, r1
 8008a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a76:	f002 f993 	bl	800ada0 <_lseek_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	bf15      	itete	ne
 8008a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a8a:	81a3      	strheq	r3, [r4, #12]
 8008a8c:	bf18      	it	ne
 8008a8e:	81a3      	strhne	r3, [r4, #12]
 8008a90:	bd10      	pop	{r4, pc}

08008a92 <__sclose>:
 8008a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a96:	f000 bec1 	b.w	800981c <_close_r>

08008a9a <sulp>:
 8008a9a:	b570      	push	{r4, r5, r6, lr}
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	ec45 4b10 	vmov	d0, r4, r5
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	f002 fd25 	bl	800b4f4 <__ulp>
 8008aaa:	ec51 0b10 	vmov	r0, r1, d0
 8008aae:	b17e      	cbz	r6, 8008ad0 <sulp+0x36>
 8008ab0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ab4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dd09      	ble.n	8008ad0 <sulp+0x36>
 8008abc:	051b      	lsls	r3, r3, #20
 8008abe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ac2:	2400      	movs	r4, #0
 8008ac4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ac8:	4622      	mov	r2, r4
 8008aca:	462b      	mov	r3, r5
 8008acc:	f7f7 fdb4 	bl	8000638 <__aeabi_dmul>
 8008ad0:	bd70      	pop	{r4, r5, r6, pc}
 8008ad2:	0000      	movs	r0, r0
 8008ad4:	0000      	movs	r0, r0
	...

08008ad8 <_strtod_l>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	ed2d 8b02 	vpush	{d8}
 8008ae0:	b09d      	sub	sp, #116	; 0x74
 8008ae2:	461f      	mov	r7, r3
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9318      	str	r3, [sp, #96]	; 0x60
 8008ae8:	4ba2      	ldr	r3, [pc, #648]	; (8008d74 <_strtod_l+0x29c>)
 8008aea:	9213      	str	r2, [sp, #76]	; 0x4c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9305      	str	r3, [sp, #20]
 8008af0:	4604      	mov	r4, r0
 8008af2:	4618      	mov	r0, r3
 8008af4:	4688      	mov	r8, r1
 8008af6:	f7f7 fb8b 	bl	8000210 <strlen>
 8008afa:	f04f 0a00 	mov.w	sl, #0
 8008afe:	4605      	mov	r5, r0
 8008b00:	f04f 0b00 	mov.w	fp, #0
 8008b04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b0a:	781a      	ldrb	r2, [r3, #0]
 8008b0c:	2a2b      	cmp	r2, #43	; 0x2b
 8008b0e:	d04e      	beq.n	8008bae <_strtod_l+0xd6>
 8008b10:	d83b      	bhi.n	8008b8a <_strtod_l+0xb2>
 8008b12:	2a0d      	cmp	r2, #13
 8008b14:	d834      	bhi.n	8008b80 <_strtod_l+0xa8>
 8008b16:	2a08      	cmp	r2, #8
 8008b18:	d834      	bhi.n	8008b84 <_strtod_l+0xac>
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	d03e      	beq.n	8008b9c <_strtod_l+0xc4>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	930a      	str	r3, [sp, #40]	; 0x28
 8008b22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b24:	7833      	ldrb	r3, [r6, #0]
 8008b26:	2b30      	cmp	r3, #48	; 0x30
 8008b28:	f040 80b0 	bne.w	8008c8c <_strtod_l+0x1b4>
 8008b2c:	7873      	ldrb	r3, [r6, #1]
 8008b2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b32:	2b58      	cmp	r3, #88	; 0x58
 8008b34:	d168      	bne.n	8008c08 <_strtod_l+0x130>
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	ab18      	add	r3, sp, #96	; 0x60
 8008b3c:	9702      	str	r7, [sp, #8]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4a8d      	ldr	r2, [pc, #564]	; (8008d78 <_strtod_l+0x2a0>)
 8008b42:	ab19      	add	r3, sp, #100	; 0x64
 8008b44:	a917      	add	r1, sp, #92	; 0x5c
 8008b46:	4620      	mov	r0, r4
 8008b48:	f001 fe1e 	bl	800a788 <__gethex>
 8008b4c:	f010 0707 	ands.w	r7, r0, #7
 8008b50:	4605      	mov	r5, r0
 8008b52:	d005      	beq.n	8008b60 <_strtod_l+0x88>
 8008b54:	2f06      	cmp	r7, #6
 8008b56:	d12c      	bne.n	8008bb2 <_strtod_l+0xda>
 8008b58:	3601      	adds	r6, #1
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 8590 	bne.w	8009688 <_strtod_l+0xbb0>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	b1eb      	cbz	r3, 8008ba8 <_strtod_l+0xd0>
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b72:	ec43 2b10 	vmov	d0, r2, r3
 8008b76:	b01d      	add	sp, #116	; 0x74
 8008b78:	ecbd 8b02 	vpop	{d8}
 8008b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b80:	2a20      	cmp	r2, #32
 8008b82:	d1cc      	bne.n	8008b1e <_strtod_l+0x46>
 8008b84:	3301      	adds	r3, #1
 8008b86:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b88:	e7be      	b.n	8008b08 <_strtod_l+0x30>
 8008b8a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b8c:	d1c7      	bne.n	8008b1e <_strtod_l+0x46>
 8008b8e:	2201      	movs	r2, #1
 8008b90:	920a      	str	r2, [sp, #40]	; 0x28
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1c2      	bne.n	8008b22 <_strtod_l+0x4a>
 8008b9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f040 856e 	bne.w	8009684 <_strtod_l+0xbac>
 8008ba8:	4652      	mov	r2, sl
 8008baa:	465b      	mov	r3, fp
 8008bac:	e7e1      	b.n	8008b72 <_strtod_l+0x9a>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	e7ee      	b.n	8008b90 <_strtod_l+0xb8>
 8008bb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bb4:	b13a      	cbz	r2, 8008bc6 <_strtod_l+0xee>
 8008bb6:	2135      	movs	r1, #53	; 0x35
 8008bb8:	a81a      	add	r0, sp, #104	; 0x68
 8008bba:	f002 fda6 	bl	800b70a <__copybits>
 8008bbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f002 f965 	bl	800ae90 <_Bfree>
 8008bc6:	3f01      	subs	r7, #1
 8008bc8:	2f04      	cmp	r7, #4
 8008bca:	d806      	bhi.n	8008bda <_strtod_l+0x102>
 8008bcc:	e8df f007 	tbb	[pc, r7]
 8008bd0:	1714030a 	.word	0x1714030a
 8008bd4:	0a          	.byte	0x0a
 8008bd5:	00          	.byte	0x00
 8008bd6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008bda:	0728      	lsls	r0, r5, #28
 8008bdc:	d5c0      	bpl.n	8008b60 <_strtod_l+0x88>
 8008bde:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008be2:	e7bd      	b.n	8008b60 <_strtod_l+0x88>
 8008be4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008be8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bf6:	e7f0      	b.n	8008bda <_strtod_l+0x102>
 8008bf8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008d7c <_strtod_l+0x2a4>
 8008bfc:	e7ed      	b.n	8008bda <_strtod_l+0x102>
 8008bfe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008c02:	f04f 3aff 	mov.w	sl, #4294967295
 8008c06:	e7e8      	b.n	8008bda <_strtod_l+0x102>
 8008c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c0e:	785b      	ldrb	r3, [r3, #1]
 8008c10:	2b30      	cmp	r3, #48	; 0x30
 8008c12:	d0f9      	beq.n	8008c08 <_strtod_l+0x130>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0a3      	beq.n	8008b60 <_strtod_l+0x88>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f04f 0900 	mov.w	r9, #0
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c22:	9308      	str	r3, [sp, #32]
 8008c24:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c28:	464f      	mov	r7, r9
 8008c2a:	220a      	movs	r2, #10
 8008c2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008c2e:	7806      	ldrb	r6, [r0, #0]
 8008c30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c34:	b2d9      	uxtb	r1, r3
 8008c36:	2909      	cmp	r1, #9
 8008c38:	d92a      	bls.n	8008c90 <_strtod_l+0x1b8>
 8008c3a:	9905      	ldr	r1, [sp, #20]
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	f002 ff83 	bl	800bb48 <strncmp>
 8008c42:	b398      	cbz	r0, 8008cac <_strtod_l+0x1d4>
 8008c44:	2000      	movs	r0, #0
 8008c46:	4632      	mov	r2, r6
 8008c48:	463d      	mov	r5, r7
 8008c4a:	9005      	str	r0, [sp, #20]
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2a65      	cmp	r2, #101	; 0x65
 8008c50:	d001      	beq.n	8008c56 <_strtod_l+0x17e>
 8008c52:	2a45      	cmp	r2, #69	; 0x45
 8008c54:	d118      	bne.n	8008c88 <_strtod_l+0x1b0>
 8008c56:	b91d      	cbnz	r5, 8008c60 <_strtod_l+0x188>
 8008c58:	9a04      	ldr	r2, [sp, #16]
 8008c5a:	4302      	orrs	r2, r0
 8008c5c:	d09e      	beq.n	8008b9c <_strtod_l+0xc4>
 8008c5e:	2500      	movs	r5, #0
 8008c60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008c64:	f108 0201 	add.w	r2, r8, #1
 8008c68:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008c6e:	2a2b      	cmp	r2, #43	; 0x2b
 8008c70:	d075      	beq.n	8008d5e <_strtod_l+0x286>
 8008c72:	2a2d      	cmp	r2, #45	; 0x2d
 8008c74:	d07b      	beq.n	8008d6e <_strtod_l+0x296>
 8008c76:	f04f 0c00 	mov.w	ip, #0
 8008c7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c7e:	2909      	cmp	r1, #9
 8008c80:	f240 8082 	bls.w	8008d88 <_strtod_l+0x2b0>
 8008c84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c88:	2600      	movs	r6, #0
 8008c8a:	e09d      	b.n	8008dc8 <_strtod_l+0x2f0>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	e7c4      	b.n	8008c1a <_strtod_l+0x142>
 8008c90:	2f08      	cmp	r7, #8
 8008c92:	bfd8      	it	le
 8008c94:	9907      	ldrle	r1, [sp, #28]
 8008c96:	f100 0001 	add.w	r0, r0, #1
 8008c9a:	bfda      	itte	le
 8008c9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ca0:	9307      	strle	r3, [sp, #28]
 8008ca2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008ca6:	3701      	adds	r7, #1
 8008ca8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008caa:	e7bf      	b.n	8008c2c <_strtod_l+0x154>
 8008cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cae:	195a      	adds	r2, r3, r5
 8008cb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cb2:	5d5a      	ldrb	r2, [r3, r5]
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	d037      	beq.n	8008d28 <_strtod_l+0x250>
 8008cb8:	9005      	str	r0, [sp, #20]
 8008cba:	463d      	mov	r5, r7
 8008cbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008cc0:	2b09      	cmp	r3, #9
 8008cc2:	d912      	bls.n	8008cea <_strtod_l+0x212>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e7c2      	b.n	8008c4e <_strtod_l+0x176>
 8008cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cce:	785a      	ldrb	r2, [r3, #1]
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	2a30      	cmp	r2, #48	; 0x30
 8008cd4:	d0f8      	beq.n	8008cc8 <_strtod_l+0x1f0>
 8008cd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	f200 84d9 	bhi.w	8009692 <_strtod_l+0xbba>
 8008ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ce2:	9005      	str	r0, [sp, #20]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	9308      	str	r3, [sp, #32]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	3a30      	subs	r2, #48	; 0x30
 8008cec:	f100 0301 	add.w	r3, r0, #1
 8008cf0:	d014      	beq.n	8008d1c <_strtod_l+0x244>
 8008cf2:	9905      	ldr	r1, [sp, #20]
 8008cf4:	4419      	add	r1, r3
 8008cf6:	9105      	str	r1, [sp, #20]
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	eb00 0e05 	add.w	lr, r0, r5
 8008cfe:	210a      	movs	r1, #10
 8008d00:	4573      	cmp	r3, lr
 8008d02:	d113      	bne.n	8008d2c <_strtod_l+0x254>
 8008d04:	182b      	adds	r3, r5, r0
 8008d06:	2b08      	cmp	r3, #8
 8008d08:	f105 0501 	add.w	r5, r5, #1
 8008d0c:	4405      	add	r5, r0
 8008d0e:	dc1c      	bgt.n	8008d4a <_strtod_l+0x272>
 8008d10:	9907      	ldr	r1, [sp, #28]
 8008d12:	230a      	movs	r3, #10
 8008d14:	fb03 2301 	mla	r3, r3, r1, r2
 8008d18:	9307      	str	r3, [sp, #28]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d1e:	1c51      	adds	r1, r2, #1
 8008d20:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d22:	7852      	ldrb	r2, [r2, #1]
 8008d24:	4618      	mov	r0, r3
 8008d26:	e7c9      	b.n	8008cbc <_strtod_l+0x1e4>
 8008d28:	4638      	mov	r0, r7
 8008d2a:	e7d2      	b.n	8008cd2 <_strtod_l+0x1fa>
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	dc04      	bgt.n	8008d3a <_strtod_l+0x262>
 8008d30:	9e07      	ldr	r6, [sp, #28]
 8008d32:	434e      	muls	r6, r1
 8008d34:	9607      	str	r6, [sp, #28]
 8008d36:	3301      	adds	r3, #1
 8008d38:	e7e2      	b.n	8008d00 <_strtod_l+0x228>
 8008d3a:	f103 0c01 	add.w	ip, r3, #1
 8008d3e:	f1bc 0f10 	cmp.w	ip, #16
 8008d42:	bfd8      	it	le
 8008d44:	fb01 f909 	mulle.w	r9, r1, r9
 8008d48:	e7f5      	b.n	8008d36 <_strtod_l+0x25e>
 8008d4a:	2d10      	cmp	r5, #16
 8008d4c:	bfdc      	itt	le
 8008d4e:	230a      	movle	r3, #10
 8008d50:	fb03 2909 	mlale	r9, r3, r9, r2
 8008d54:	e7e1      	b.n	8008d1a <_strtod_l+0x242>
 8008d56:	2300      	movs	r3, #0
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e77c      	b.n	8008c58 <_strtod_l+0x180>
 8008d5e:	f04f 0c00 	mov.w	ip, #0
 8008d62:	f108 0202 	add.w	r2, r8, #2
 8008d66:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d68:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008d6c:	e785      	b.n	8008c7a <_strtod_l+0x1a2>
 8008d6e:	f04f 0c01 	mov.w	ip, #1
 8008d72:	e7f6      	b.n	8008d62 <_strtod_l+0x28a>
 8008d74:	080281f0 	.word	0x080281f0
 8008d78:	08027fa8 	.word	0x08027fa8
 8008d7c:	7ff00000 	.word	0x7ff00000
 8008d80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d82:	1c51      	adds	r1, r2, #1
 8008d84:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d86:	7852      	ldrb	r2, [r2, #1]
 8008d88:	2a30      	cmp	r2, #48	; 0x30
 8008d8a:	d0f9      	beq.n	8008d80 <_strtod_l+0x2a8>
 8008d8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d90:	2908      	cmp	r1, #8
 8008d92:	f63f af79 	bhi.w	8008c88 <_strtod_l+0x1b0>
 8008d96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d9c:	9206      	str	r2, [sp, #24]
 8008d9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008da0:	1c51      	adds	r1, r2, #1
 8008da2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008da4:	7852      	ldrb	r2, [r2, #1]
 8008da6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008daa:	2e09      	cmp	r6, #9
 8008dac:	d937      	bls.n	8008e1e <_strtod_l+0x346>
 8008dae:	9e06      	ldr	r6, [sp, #24]
 8008db0:	1b89      	subs	r1, r1, r6
 8008db2:	2908      	cmp	r1, #8
 8008db4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008db8:	dc02      	bgt.n	8008dc0 <_strtod_l+0x2e8>
 8008dba:	4576      	cmp	r6, lr
 8008dbc:	bfa8      	it	ge
 8008dbe:	4676      	movge	r6, lr
 8008dc0:	f1bc 0f00 	cmp.w	ip, #0
 8008dc4:	d000      	beq.n	8008dc8 <_strtod_l+0x2f0>
 8008dc6:	4276      	negs	r6, r6
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	d14d      	bne.n	8008e68 <_strtod_l+0x390>
 8008dcc:	9904      	ldr	r1, [sp, #16]
 8008dce:	4301      	orrs	r1, r0
 8008dd0:	f47f aec6 	bne.w	8008b60 <_strtod_l+0x88>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f47f aee1 	bne.w	8008b9c <_strtod_l+0xc4>
 8008dda:	2a69      	cmp	r2, #105	; 0x69
 8008ddc:	d027      	beq.n	8008e2e <_strtod_l+0x356>
 8008dde:	dc24      	bgt.n	8008e2a <_strtod_l+0x352>
 8008de0:	2a49      	cmp	r2, #73	; 0x49
 8008de2:	d024      	beq.n	8008e2e <_strtod_l+0x356>
 8008de4:	2a4e      	cmp	r2, #78	; 0x4e
 8008de6:	f47f aed9 	bne.w	8008b9c <_strtod_l+0xc4>
 8008dea:	499f      	ldr	r1, [pc, #636]	; (8009068 <_strtod_l+0x590>)
 8008dec:	a817      	add	r0, sp, #92	; 0x5c
 8008dee:	f001 ff23 	bl	800ac38 <__match>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f43f aed2 	beq.w	8008b9c <_strtod_l+0xc4>
 8008df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b28      	cmp	r3, #40	; 0x28
 8008dfe:	d12d      	bne.n	8008e5c <_strtod_l+0x384>
 8008e00:	499a      	ldr	r1, [pc, #616]	; (800906c <_strtod_l+0x594>)
 8008e02:	aa1a      	add	r2, sp, #104	; 0x68
 8008e04:	a817      	add	r0, sp, #92	; 0x5c
 8008e06:	f001 ff2b 	bl	800ac60 <__hexnan>
 8008e0a:	2805      	cmp	r0, #5
 8008e0c:	d126      	bne.n	8008e5c <_strtod_l+0x384>
 8008e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e10:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008e14:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008e18:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008e1c:	e6a0      	b.n	8008b60 <_strtod_l+0x88>
 8008e1e:	210a      	movs	r1, #10
 8008e20:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008e24:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e28:	e7b9      	b.n	8008d9e <_strtod_l+0x2c6>
 8008e2a:	2a6e      	cmp	r2, #110	; 0x6e
 8008e2c:	e7db      	b.n	8008de6 <_strtod_l+0x30e>
 8008e2e:	4990      	ldr	r1, [pc, #576]	; (8009070 <_strtod_l+0x598>)
 8008e30:	a817      	add	r0, sp, #92	; 0x5c
 8008e32:	f001 ff01 	bl	800ac38 <__match>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	f43f aeb0 	beq.w	8008b9c <_strtod_l+0xc4>
 8008e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e3e:	498d      	ldr	r1, [pc, #564]	; (8009074 <_strtod_l+0x59c>)
 8008e40:	3b01      	subs	r3, #1
 8008e42:	a817      	add	r0, sp, #92	; 0x5c
 8008e44:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e46:	f001 fef7 	bl	800ac38 <__match>
 8008e4a:	b910      	cbnz	r0, 8008e52 <_strtod_l+0x37a>
 8008e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e4e:	3301      	adds	r3, #1
 8008e50:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e52:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009084 <_strtod_l+0x5ac>
 8008e56:	f04f 0a00 	mov.w	sl, #0
 8008e5a:	e681      	b.n	8008b60 <_strtod_l+0x88>
 8008e5c:	4886      	ldr	r0, [pc, #536]	; (8009078 <_strtod_l+0x5a0>)
 8008e5e:	f002 fe6b 	bl	800bb38 <nan>
 8008e62:	ec5b ab10 	vmov	sl, fp, d0
 8008e66:	e67b      	b.n	8008b60 <_strtod_l+0x88>
 8008e68:	9b05      	ldr	r3, [sp, #20]
 8008e6a:	9807      	ldr	r0, [sp, #28]
 8008e6c:	1af3      	subs	r3, r6, r3
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	bf08      	it	eq
 8008e72:	462f      	moveq	r7, r5
 8008e74:	2d10      	cmp	r5, #16
 8008e76:	9306      	str	r3, [sp, #24]
 8008e78:	46a8      	mov	r8, r5
 8008e7a:	bfa8      	it	ge
 8008e7c:	f04f 0810 	movge.w	r8, #16
 8008e80:	f7f7 fb60 	bl	8000544 <__aeabi_ui2d>
 8008e84:	2d09      	cmp	r5, #9
 8008e86:	4682      	mov	sl, r0
 8008e88:	468b      	mov	fp, r1
 8008e8a:	dd13      	ble.n	8008eb4 <_strtod_l+0x3dc>
 8008e8c:	4b7b      	ldr	r3, [pc, #492]	; (800907c <_strtod_l+0x5a4>)
 8008e8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e96:	f7f7 fbcf 	bl	8000638 <__aeabi_dmul>
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	4648      	mov	r0, r9
 8008e9e:	468b      	mov	fp, r1
 8008ea0:	f7f7 fb50 	bl	8000544 <__aeabi_ui2d>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4650      	mov	r0, sl
 8008eaa:	4659      	mov	r1, fp
 8008eac:	f7f7 fa0e 	bl	80002cc <__adddf3>
 8008eb0:	4682      	mov	sl, r0
 8008eb2:	468b      	mov	fp, r1
 8008eb4:	2d0f      	cmp	r5, #15
 8008eb6:	dc38      	bgt.n	8008f2a <_strtod_l+0x452>
 8008eb8:	9b06      	ldr	r3, [sp, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f43f ae50 	beq.w	8008b60 <_strtod_l+0x88>
 8008ec0:	dd24      	ble.n	8008f0c <_strtod_l+0x434>
 8008ec2:	2b16      	cmp	r3, #22
 8008ec4:	dc0b      	bgt.n	8008ede <_strtod_l+0x406>
 8008ec6:	496d      	ldr	r1, [pc, #436]	; (800907c <_strtod_l+0x5a4>)
 8008ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	f7f7 fbb0 	bl	8000638 <__aeabi_dmul>
 8008ed8:	4682      	mov	sl, r0
 8008eda:	468b      	mov	fp, r1
 8008edc:	e640      	b.n	8008b60 <_strtod_l+0x88>
 8008ede:	9a06      	ldr	r2, [sp, #24]
 8008ee0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	db20      	blt.n	8008f2a <_strtod_l+0x452>
 8008ee8:	4c64      	ldr	r4, [pc, #400]	; (800907c <_strtod_l+0x5a4>)
 8008eea:	f1c5 050f 	rsb	r5, r5, #15
 8008eee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008efa:	f7f7 fb9d 	bl	8000638 <__aeabi_dmul>
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	1b5d      	subs	r5, r3, r5
 8008f02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f0a:	e7e3      	b.n	8008ed4 <_strtod_l+0x3fc>
 8008f0c:	9b06      	ldr	r3, [sp, #24]
 8008f0e:	3316      	adds	r3, #22
 8008f10:	db0b      	blt.n	8008f2a <_strtod_l+0x452>
 8008f12:	9b05      	ldr	r3, [sp, #20]
 8008f14:	1b9e      	subs	r6, r3, r6
 8008f16:	4b59      	ldr	r3, [pc, #356]	; (800907c <_strtod_l+0x5a4>)
 8008f18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008f1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f20:	4650      	mov	r0, sl
 8008f22:	4659      	mov	r1, fp
 8008f24:	f7f7 fcb2 	bl	800088c <__aeabi_ddiv>
 8008f28:	e7d6      	b.n	8008ed8 <_strtod_l+0x400>
 8008f2a:	9b06      	ldr	r3, [sp, #24]
 8008f2c:	eba5 0808 	sub.w	r8, r5, r8
 8008f30:	4498      	add	r8, r3
 8008f32:	f1b8 0f00 	cmp.w	r8, #0
 8008f36:	dd74      	ble.n	8009022 <_strtod_l+0x54a>
 8008f38:	f018 030f 	ands.w	r3, r8, #15
 8008f3c:	d00a      	beq.n	8008f54 <_strtod_l+0x47c>
 8008f3e:	494f      	ldr	r1, [pc, #316]	; (800907c <_strtod_l+0x5a4>)
 8008f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f44:	4652      	mov	r2, sl
 8008f46:	465b      	mov	r3, fp
 8008f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f4c:	f7f7 fb74 	bl	8000638 <__aeabi_dmul>
 8008f50:	4682      	mov	sl, r0
 8008f52:	468b      	mov	fp, r1
 8008f54:	f038 080f 	bics.w	r8, r8, #15
 8008f58:	d04f      	beq.n	8008ffa <_strtod_l+0x522>
 8008f5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f5e:	dd22      	ble.n	8008fa6 <_strtod_l+0x4ce>
 8008f60:	2500      	movs	r5, #0
 8008f62:	462e      	mov	r6, r5
 8008f64:	9507      	str	r5, [sp, #28]
 8008f66:	9505      	str	r5, [sp, #20]
 8008f68:	2322      	movs	r3, #34	; 0x22
 8008f6a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009084 <_strtod_l+0x5ac>
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	f04f 0a00 	mov.w	sl, #0
 8008f74:	9b07      	ldr	r3, [sp, #28]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f43f adf2 	beq.w	8008b60 <_strtod_l+0x88>
 8008f7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f001 ff86 	bl	800ae90 <_Bfree>
 8008f84:	9905      	ldr	r1, [sp, #20]
 8008f86:	4620      	mov	r0, r4
 8008f88:	f001 ff82 	bl	800ae90 <_Bfree>
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f001 ff7e 	bl	800ae90 <_Bfree>
 8008f94:	9907      	ldr	r1, [sp, #28]
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 ff7a 	bl	800ae90 <_Bfree>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f001 ff76 	bl	800ae90 <_Bfree>
 8008fa4:	e5dc      	b.n	8008b60 <_strtod_l+0x88>
 8008fa6:	4b36      	ldr	r3, [pc, #216]	; (8009080 <_strtod_l+0x5a8>)
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	2300      	movs	r3, #0
 8008fac:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	4699      	mov	r9, r3
 8008fb6:	f1b8 0f01 	cmp.w	r8, #1
 8008fba:	dc21      	bgt.n	8009000 <_strtod_l+0x528>
 8008fbc:	b10b      	cbz	r3, 8008fc2 <_strtod_l+0x4ea>
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	468b      	mov	fp, r1
 8008fc2:	4b2f      	ldr	r3, [pc, #188]	; (8009080 <_strtod_l+0x5a8>)
 8008fc4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008fc8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008fcc:	4652      	mov	r2, sl
 8008fce:	465b      	mov	r3, fp
 8008fd0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008fd4:	f7f7 fb30 	bl	8000638 <__aeabi_dmul>
 8008fd8:	4b2a      	ldr	r3, [pc, #168]	; (8009084 <_strtod_l+0x5ac>)
 8008fda:	460a      	mov	r2, r1
 8008fdc:	400b      	ands	r3, r1
 8008fde:	492a      	ldr	r1, [pc, #168]	; (8009088 <_strtod_l+0x5b0>)
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	4682      	mov	sl, r0
 8008fe4:	d8bc      	bhi.n	8008f60 <_strtod_l+0x488>
 8008fe6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008fea:	428b      	cmp	r3, r1
 8008fec:	bf86      	itte	hi
 8008fee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800908c <_strtod_l+0x5b4>
 8008ff2:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ff6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	e084      	b.n	800910a <_strtod_l+0x632>
 8009000:	f018 0f01 	tst.w	r8, #1
 8009004:	d005      	beq.n	8009012 <_strtod_l+0x53a>
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	f7f7 fb14 	bl	8000638 <__aeabi_dmul>
 8009010:	2301      	movs	r3, #1
 8009012:	9a04      	ldr	r2, [sp, #16]
 8009014:	3208      	adds	r2, #8
 8009016:	f109 0901 	add.w	r9, r9, #1
 800901a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800901e:	9204      	str	r2, [sp, #16]
 8009020:	e7c9      	b.n	8008fb6 <_strtod_l+0x4de>
 8009022:	d0ea      	beq.n	8008ffa <_strtod_l+0x522>
 8009024:	f1c8 0800 	rsb	r8, r8, #0
 8009028:	f018 020f 	ands.w	r2, r8, #15
 800902c:	d00a      	beq.n	8009044 <_strtod_l+0x56c>
 800902e:	4b13      	ldr	r3, [pc, #76]	; (800907c <_strtod_l+0x5a4>)
 8009030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009034:	4650      	mov	r0, sl
 8009036:	4659      	mov	r1, fp
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f7f7 fc26 	bl	800088c <__aeabi_ddiv>
 8009040:	4682      	mov	sl, r0
 8009042:	468b      	mov	fp, r1
 8009044:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009048:	d0d7      	beq.n	8008ffa <_strtod_l+0x522>
 800904a:	f1b8 0f1f 	cmp.w	r8, #31
 800904e:	dd1f      	ble.n	8009090 <_strtod_l+0x5b8>
 8009050:	2500      	movs	r5, #0
 8009052:	462e      	mov	r6, r5
 8009054:	9507      	str	r5, [sp, #28]
 8009056:	9505      	str	r5, [sp, #20]
 8009058:	2322      	movs	r3, #34	; 0x22
 800905a:	f04f 0a00 	mov.w	sl, #0
 800905e:	f04f 0b00 	mov.w	fp, #0
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	e786      	b.n	8008f74 <_strtod_l+0x49c>
 8009066:	bf00      	nop
 8009068:	08027f79 	.word	0x08027f79
 800906c:	08027fbc 	.word	0x08027fbc
 8009070:	08027f71 	.word	0x08027f71
 8009074:	080280fc 	.word	0x080280fc
 8009078:	080283a8 	.word	0x080283a8
 800907c:	08028288 	.word	0x08028288
 8009080:	08028260 	.word	0x08028260
 8009084:	7ff00000 	.word	0x7ff00000
 8009088:	7ca00000 	.word	0x7ca00000
 800908c:	7fefffff 	.word	0x7fefffff
 8009090:	f018 0310 	ands.w	r3, r8, #16
 8009094:	bf18      	it	ne
 8009096:	236a      	movne	r3, #106	; 0x6a
 8009098:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009448 <_strtod_l+0x970>
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	4650      	mov	r0, sl
 80090a0:	4659      	mov	r1, fp
 80090a2:	2300      	movs	r3, #0
 80090a4:	f018 0f01 	tst.w	r8, #1
 80090a8:	d004      	beq.n	80090b4 <_strtod_l+0x5dc>
 80090aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090ae:	f7f7 fac3 	bl	8000638 <__aeabi_dmul>
 80090b2:	2301      	movs	r3, #1
 80090b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80090b8:	f109 0908 	add.w	r9, r9, #8
 80090bc:	d1f2      	bne.n	80090a4 <_strtod_l+0x5cc>
 80090be:	b10b      	cbz	r3, 80090c4 <_strtod_l+0x5ec>
 80090c0:	4682      	mov	sl, r0
 80090c2:	468b      	mov	fp, r1
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	b1c3      	cbz	r3, 80090fa <_strtod_l+0x622>
 80090c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	4659      	mov	r1, fp
 80090d4:	dd11      	ble.n	80090fa <_strtod_l+0x622>
 80090d6:	2b1f      	cmp	r3, #31
 80090d8:	f340 8124 	ble.w	8009324 <_strtod_l+0x84c>
 80090dc:	2b34      	cmp	r3, #52	; 0x34
 80090de:	bfde      	ittt	le
 80090e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80090e4:	f04f 33ff 	movle.w	r3, #4294967295
 80090e8:	fa03 f202 	lslle.w	r2, r3, r2
 80090ec:	f04f 0a00 	mov.w	sl, #0
 80090f0:	bfcc      	ite	gt
 80090f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090f6:	ea02 0b01 	andle.w	fp, r2, r1
 80090fa:	2200      	movs	r2, #0
 80090fc:	2300      	movs	r3, #0
 80090fe:	4650      	mov	r0, sl
 8009100:	4659      	mov	r1, fp
 8009102:	f7f7 fd01 	bl	8000b08 <__aeabi_dcmpeq>
 8009106:	2800      	cmp	r0, #0
 8009108:	d1a2      	bne.n	8009050 <_strtod_l+0x578>
 800910a:	9b07      	ldr	r3, [sp, #28]
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	9908      	ldr	r1, [sp, #32]
 8009110:	462b      	mov	r3, r5
 8009112:	463a      	mov	r2, r7
 8009114:	4620      	mov	r0, r4
 8009116:	f001 ff23 	bl	800af60 <__s2b>
 800911a:	9007      	str	r0, [sp, #28]
 800911c:	2800      	cmp	r0, #0
 800911e:	f43f af1f 	beq.w	8008f60 <_strtod_l+0x488>
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	1b9e      	subs	r6, r3, r6
 8009126:	9b06      	ldr	r3, [sp, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfb4      	ite	lt
 800912c:	4633      	movlt	r3, r6
 800912e:	2300      	movge	r3, #0
 8009130:	930c      	str	r3, [sp, #48]	; 0x30
 8009132:	9b06      	ldr	r3, [sp, #24]
 8009134:	2500      	movs	r5, #0
 8009136:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800913a:	9312      	str	r3, [sp, #72]	; 0x48
 800913c:	462e      	mov	r6, r5
 800913e:	9b07      	ldr	r3, [sp, #28]
 8009140:	4620      	mov	r0, r4
 8009142:	6859      	ldr	r1, [r3, #4]
 8009144:	f001 fe64 	bl	800ae10 <_Balloc>
 8009148:	9005      	str	r0, [sp, #20]
 800914a:	2800      	cmp	r0, #0
 800914c:	f43f af0c 	beq.w	8008f68 <_strtod_l+0x490>
 8009150:	9b07      	ldr	r3, [sp, #28]
 8009152:	691a      	ldr	r2, [r3, #16]
 8009154:	3202      	adds	r2, #2
 8009156:	f103 010c 	add.w	r1, r3, #12
 800915a:	0092      	lsls	r2, r2, #2
 800915c:	300c      	adds	r0, #12
 800915e:	f7fe fc94 	bl	8007a8a <memcpy>
 8009162:	ec4b ab10 	vmov	d0, sl, fp
 8009166:	aa1a      	add	r2, sp, #104	; 0x68
 8009168:	a919      	add	r1, sp, #100	; 0x64
 800916a:	4620      	mov	r0, r4
 800916c:	f002 fa3e 	bl	800b5ec <__d2b>
 8009170:	ec4b ab18 	vmov	d8, sl, fp
 8009174:	9018      	str	r0, [sp, #96]	; 0x60
 8009176:	2800      	cmp	r0, #0
 8009178:	f43f aef6 	beq.w	8008f68 <_strtod_l+0x490>
 800917c:	2101      	movs	r1, #1
 800917e:	4620      	mov	r0, r4
 8009180:	f001 ff88 	bl	800b094 <__i2b>
 8009184:	4606      	mov	r6, r0
 8009186:	2800      	cmp	r0, #0
 8009188:	f43f aeee 	beq.w	8008f68 <_strtod_l+0x490>
 800918c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800918e:	9904      	ldr	r1, [sp, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	bfab      	itete	ge
 8009194:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009196:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009198:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800919a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800919e:	bfac      	ite	ge
 80091a0:	eb03 0902 	addge.w	r9, r3, r2
 80091a4:	1ad7      	sublt	r7, r2, r3
 80091a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80091a8:	eba3 0801 	sub.w	r8, r3, r1
 80091ac:	4490      	add	r8, r2
 80091ae:	4ba1      	ldr	r3, [pc, #644]	; (8009434 <_strtod_l+0x95c>)
 80091b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80091b4:	4598      	cmp	r8, r3
 80091b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80091ba:	f280 80c7 	bge.w	800934c <_strtod_l+0x874>
 80091be:	eba3 0308 	sub.w	r3, r3, r8
 80091c2:	2b1f      	cmp	r3, #31
 80091c4:	eba2 0203 	sub.w	r2, r2, r3
 80091c8:	f04f 0101 	mov.w	r1, #1
 80091cc:	f300 80b1 	bgt.w	8009332 <_strtod_l+0x85a>
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	930d      	str	r3, [sp, #52]	; 0x34
 80091d6:	2300      	movs	r3, #0
 80091d8:	9308      	str	r3, [sp, #32]
 80091da:	eb09 0802 	add.w	r8, r9, r2
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	45c1      	cmp	r9, r8
 80091e2:	4417      	add	r7, r2
 80091e4:	441f      	add	r7, r3
 80091e6:	464b      	mov	r3, r9
 80091e8:	bfa8      	it	ge
 80091ea:	4643      	movge	r3, r8
 80091ec:	42bb      	cmp	r3, r7
 80091ee:	bfa8      	it	ge
 80091f0:	463b      	movge	r3, r7
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	bfc2      	ittt	gt
 80091f6:	eba8 0803 	subgt.w	r8, r8, r3
 80091fa:	1aff      	subgt	r7, r7, r3
 80091fc:	eba9 0903 	subgt.w	r9, r9, r3
 8009200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009202:	2b00      	cmp	r3, #0
 8009204:	dd17      	ble.n	8009236 <_strtod_l+0x75e>
 8009206:	4631      	mov	r1, r6
 8009208:	461a      	mov	r2, r3
 800920a:	4620      	mov	r0, r4
 800920c:	f002 f802 	bl	800b214 <__pow5mult>
 8009210:	4606      	mov	r6, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	f43f aea8 	beq.w	8008f68 <_strtod_l+0x490>
 8009218:	4601      	mov	r1, r0
 800921a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800921c:	4620      	mov	r0, r4
 800921e:	f001 ff4f 	bl	800b0c0 <__multiply>
 8009222:	900b      	str	r0, [sp, #44]	; 0x2c
 8009224:	2800      	cmp	r0, #0
 8009226:	f43f ae9f 	beq.w	8008f68 <_strtod_l+0x490>
 800922a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800922c:	4620      	mov	r0, r4
 800922e:	f001 fe2f 	bl	800ae90 <_Bfree>
 8009232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009234:	9318      	str	r3, [sp, #96]	; 0x60
 8009236:	f1b8 0f00 	cmp.w	r8, #0
 800923a:	f300 808c 	bgt.w	8009356 <_strtod_l+0x87e>
 800923e:	9b06      	ldr	r3, [sp, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	dd08      	ble.n	8009256 <_strtod_l+0x77e>
 8009244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009246:	9905      	ldr	r1, [sp, #20]
 8009248:	4620      	mov	r0, r4
 800924a:	f001 ffe3 	bl	800b214 <__pow5mult>
 800924e:	9005      	str	r0, [sp, #20]
 8009250:	2800      	cmp	r0, #0
 8009252:	f43f ae89 	beq.w	8008f68 <_strtod_l+0x490>
 8009256:	2f00      	cmp	r7, #0
 8009258:	dd08      	ble.n	800926c <_strtod_l+0x794>
 800925a:	9905      	ldr	r1, [sp, #20]
 800925c:	463a      	mov	r2, r7
 800925e:	4620      	mov	r0, r4
 8009260:	f002 f832 	bl	800b2c8 <__lshift>
 8009264:	9005      	str	r0, [sp, #20]
 8009266:	2800      	cmp	r0, #0
 8009268:	f43f ae7e 	beq.w	8008f68 <_strtod_l+0x490>
 800926c:	f1b9 0f00 	cmp.w	r9, #0
 8009270:	dd08      	ble.n	8009284 <_strtod_l+0x7ac>
 8009272:	4631      	mov	r1, r6
 8009274:	464a      	mov	r2, r9
 8009276:	4620      	mov	r0, r4
 8009278:	f002 f826 	bl	800b2c8 <__lshift>
 800927c:	4606      	mov	r6, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	f43f ae72 	beq.w	8008f68 <_strtod_l+0x490>
 8009284:	9a05      	ldr	r2, [sp, #20]
 8009286:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009288:	4620      	mov	r0, r4
 800928a:	f002 f8a9 	bl	800b3e0 <__mdiff>
 800928e:	4605      	mov	r5, r0
 8009290:	2800      	cmp	r0, #0
 8009292:	f43f ae69 	beq.w	8008f68 <_strtod_l+0x490>
 8009296:	68c3      	ldr	r3, [r0, #12]
 8009298:	930b      	str	r3, [sp, #44]	; 0x2c
 800929a:	2300      	movs	r3, #0
 800929c:	60c3      	str	r3, [r0, #12]
 800929e:	4631      	mov	r1, r6
 80092a0:	f002 f882 	bl	800b3a8 <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	da60      	bge.n	800936a <_strtod_l+0x892>
 80092a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092aa:	ea53 030a 	orrs.w	r3, r3, sl
 80092ae:	f040 8082 	bne.w	80093b6 <_strtod_l+0x8de>
 80092b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d17d      	bne.n	80093b6 <_strtod_l+0x8de>
 80092ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092be:	0d1b      	lsrs	r3, r3, #20
 80092c0:	051b      	lsls	r3, r3, #20
 80092c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092c6:	d976      	bls.n	80093b6 <_strtod_l+0x8de>
 80092c8:	696b      	ldr	r3, [r5, #20]
 80092ca:	b913      	cbnz	r3, 80092d2 <_strtod_l+0x7fa>
 80092cc:	692b      	ldr	r3, [r5, #16]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	dd71      	ble.n	80093b6 <_strtod_l+0x8de>
 80092d2:	4629      	mov	r1, r5
 80092d4:	2201      	movs	r2, #1
 80092d6:	4620      	mov	r0, r4
 80092d8:	f001 fff6 	bl	800b2c8 <__lshift>
 80092dc:	4631      	mov	r1, r6
 80092de:	4605      	mov	r5, r0
 80092e0:	f002 f862 	bl	800b3a8 <__mcmp>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	dd66      	ble.n	80093b6 <_strtod_l+0x8de>
 80092e8:	9904      	ldr	r1, [sp, #16]
 80092ea:	4a53      	ldr	r2, [pc, #332]	; (8009438 <_strtod_l+0x960>)
 80092ec:	465b      	mov	r3, fp
 80092ee:	2900      	cmp	r1, #0
 80092f0:	f000 8081 	beq.w	80093f6 <_strtod_l+0x91e>
 80092f4:	ea02 010b 	and.w	r1, r2, fp
 80092f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092fc:	dc7b      	bgt.n	80093f6 <_strtod_l+0x91e>
 80092fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009302:	f77f aea9 	ble.w	8009058 <_strtod_l+0x580>
 8009306:	4b4d      	ldr	r3, [pc, #308]	; (800943c <_strtod_l+0x964>)
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	2200      	movs	r2, #0
 800930e:	f7f7 f993 	bl	8000638 <__aeabi_dmul>
 8009312:	460b      	mov	r3, r1
 8009314:	4303      	orrs	r3, r0
 8009316:	bf08      	it	eq
 8009318:	2322      	moveq	r3, #34	; 0x22
 800931a:	4682      	mov	sl, r0
 800931c:	468b      	mov	fp, r1
 800931e:	bf08      	it	eq
 8009320:	6023      	streq	r3, [r4, #0]
 8009322:	e62b      	b.n	8008f7c <_strtod_l+0x4a4>
 8009324:	f04f 32ff 	mov.w	r2, #4294967295
 8009328:	fa02 f303 	lsl.w	r3, r2, r3
 800932c:	ea03 0a0a 	and.w	sl, r3, sl
 8009330:	e6e3      	b.n	80090fa <_strtod_l+0x622>
 8009332:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009336:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800933a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800933e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009342:	fa01 f308 	lsl.w	r3, r1, r8
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	910d      	str	r1, [sp, #52]	; 0x34
 800934a:	e746      	b.n	80091da <_strtod_l+0x702>
 800934c:	2300      	movs	r3, #0
 800934e:	9308      	str	r3, [sp, #32]
 8009350:	2301      	movs	r3, #1
 8009352:	930d      	str	r3, [sp, #52]	; 0x34
 8009354:	e741      	b.n	80091da <_strtod_l+0x702>
 8009356:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009358:	4642      	mov	r2, r8
 800935a:	4620      	mov	r0, r4
 800935c:	f001 ffb4 	bl	800b2c8 <__lshift>
 8009360:	9018      	str	r0, [sp, #96]	; 0x60
 8009362:	2800      	cmp	r0, #0
 8009364:	f47f af6b 	bne.w	800923e <_strtod_l+0x766>
 8009368:	e5fe      	b.n	8008f68 <_strtod_l+0x490>
 800936a:	465f      	mov	r7, fp
 800936c:	d16e      	bne.n	800944c <_strtod_l+0x974>
 800936e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009374:	b342      	cbz	r2, 80093c8 <_strtod_l+0x8f0>
 8009376:	4a32      	ldr	r2, [pc, #200]	; (8009440 <_strtod_l+0x968>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d128      	bne.n	80093ce <_strtod_l+0x8f6>
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	4651      	mov	r1, sl
 8009380:	b1eb      	cbz	r3, 80093be <_strtod_l+0x8e6>
 8009382:	4b2d      	ldr	r3, [pc, #180]	; (8009438 <_strtod_l+0x960>)
 8009384:	403b      	ands	r3, r7
 8009386:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800938a:	f04f 32ff 	mov.w	r2, #4294967295
 800938e:	d819      	bhi.n	80093c4 <_strtod_l+0x8ec>
 8009390:	0d1b      	lsrs	r3, r3, #20
 8009392:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009396:	fa02 f303 	lsl.w	r3, r2, r3
 800939a:	4299      	cmp	r1, r3
 800939c:	d117      	bne.n	80093ce <_strtod_l+0x8f6>
 800939e:	4b29      	ldr	r3, [pc, #164]	; (8009444 <_strtod_l+0x96c>)
 80093a0:	429f      	cmp	r7, r3
 80093a2:	d102      	bne.n	80093aa <_strtod_l+0x8d2>
 80093a4:	3101      	adds	r1, #1
 80093a6:	f43f addf 	beq.w	8008f68 <_strtod_l+0x490>
 80093aa:	4b23      	ldr	r3, [pc, #140]	; (8009438 <_strtod_l+0x960>)
 80093ac:	403b      	ands	r3, r7
 80093ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80093b2:	f04f 0a00 	mov.w	sl, #0
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1a4      	bne.n	8009306 <_strtod_l+0x82e>
 80093bc:	e5de      	b.n	8008f7c <_strtod_l+0x4a4>
 80093be:	f04f 33ff 	mov.w	r3, #4294967295
 80093c2:	e7ea      	b.n	800939a <_strtod_l+0x8c2>
 80093c4:	4613      	mov	r3, r2
 80093c6:	e7e8      	b.n	800939a <_strtod_l+0x8c2>
 80093c8:	ea53 030a 	orrs.w	r3, r3, sl
 80093cc:	d08c      	beq.n	80092e8 <_strtod_l+0x810>
 80093ce:	9b08      	ldr	r3, [sp, #32]
 80093d0:	b1db      	cbz	r3, 800940a <_strtod_l+0x932>
 80093d2:	423b      	tst	r3, r7
 80093d4:	d0ef      	beq.n	80093b6 <_strtod_l+0x8de>
 80093d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d8:	9a04      	ldr	r2, [sp, #16]
 80093da:	4650      	mov	r0, sl
 80093dc:	4659      	mov	r1, fp
 80093de:	b1c3      	cbz	r3, 8009412 <_strtod_l+0x93a>
 80093e0:	f7ff fb5b 	bl	8008a9a <sulp>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	ec51 0b18 	vmov	r0, r1, d8
 80093ec:	f7f6 ff6e 	bl	80002cc <__adddf3>
 80093f0:	4682      	mov	sl, r0
 80093f2:	468b      	mov	fp, r1
 80093f4:	e7df      	b.n	80093b6 <_strtod_l+0x8de>
 80093f6:	4013      	ands	r3, r2
 80093f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009400:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009404:	f04f 3aff 	mov.w	sl, #4294967295
 8009408:	e7d5      	b.n	80093b6 <_strtod_l+0x8de>
 800940a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940c:	ea13 0f0a 	tst.w	r3, sl
 8009410:	e7e0      	b.n	80093d4 <_strtod_l+0x8fc>
 8009412:	f7ff fb42 	bl	8008a9a <sulp>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	ec51 0b18 	vmov	r0, r1, d8
 800941e:	f7f6 ff53 	bl	80002c8 <__aeabi_dsub>
 8009422:	2200      	movs	r2, #0
 8009424:	2300      	movs	r3, #0
 8009426:	4682      	mov	sl, r0
 8009428:	468b      	mov	fp, r1
 800942a:	f7f7 fb6d 	bl	8000b08 <__aeabi_dcmpeq>
 800942e:	2800      	cmp	r0, #0
 8009430:	d0c1      	beq.n	80093b6 <_strtod_l+0x8de>
 8009432:	e611      	b.n	8009058 <_strtod_l+0x580>
 8009434:	fffffc02 	.word	0xfffffc02
 8009438:	7ff00000 	.word	0x7ff00000
 800943c:	39500000 	.word	0x39500000
 8009440:	000fffff 	.word	0x000fffff
 8009444:	7fefffff 	.word	0x7fefffff
 8009448:	08027fd0 	.word	0x08027fd0
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	f002 f928 	bl	800b6a4 <__ratio>
 8009454:	ec59 8b10 	vmov	r8, r9, d0
 8009458:	ee10 0a10 	vmov	r0, s0
 800945c:	2200      	movs	r2, #0
 800945e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009462:	4649      	mov	r1, r9
 8009464:	f7f7 fb64 	bl	8000b30 <__aeabi_dcmple>
 8009468:	2800      	cmp	r0, #0
 800946a:	d07a      	beq.n	8009562 <_strtod_l+0xa8a>
 800946c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d04a      	beq.n	8009508 <_strtod_l+0xa30>
 8009472:	4b95      	ldr	r3, [pc, #596]	; (80096c8 <_strtod_l+0xbf0>)
 8009474:	2200      	movs	r2, #0
 8009476:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800947a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80096c8 <_strtod_l+0xbf0>
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	4b92      	ldr	r3, [pc, #584]	; (80096cc <_strtod_l+0xbf4>)
 8009484:	403b      	ands	r3, r7
 8009486:	930d      	str	r3, [sp, #52]	; 0x34
 8009488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800948a:	4b91      	ldr	r3, [pc, #580]	; (80096d0 <_strtod_l+0xbf8>)
 800948c:	429a      	cmp	r2, r3
 800948e:	f040 80b0 	bne.w	80095f2 <_strtod_l+0xb1a>
 8009492:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009496:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800949a:	ec4b ab10 	vmov	d0, sl, fp
 800949e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094a2:	f002 f827 	bl	800b4f4 <__ulp>
 80094a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094aa:	ec53 2b10 	vmov	r2, r3, d0
 80094ae:	f7f7 f8c3 	bl	8000638 <__aeabi_dmul>
 80094b2:	4652      	mov	r2, sl
 80094b4:	465b      	mov	r3, fp
 80094b6:	f7f6 ff09 	bl	80002cc <__adddf3>
 80094ba:	460b      	mov	r3, r1
 80094bc:	4983      	ldr	r1, [pc, #524]	; (80096cc <_strtod_l+0xbf4>)
 80094be:	4a85      	ldr	r2, [pc, #532]	; (80096d4 <_strtod_l+0xbfc>)
 80094c0:	4019      	ands	r1, r3
 80094c2:	4291      	cmp	r1, r2
 80094c4:	4682      	mov	sl, r0
 80094c6:	d960      	bls.n	800958a <_strtod_l+0xab2>
 80094c8:	ee18 3a90 	vmov	r3, s17
 80094cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d104      	bne.n	80094de <_strtod_l+0xa06>
 80094d4:	ee18 3a10 	vmov	r3, s16
 80094d8:	3301      	adds	r3, #1
 80094da:	f43f ad45 	beq.w	8008f68 <_strtod_l+0x490>
 80094de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80096e0 <_strtod_l+0xc08>
 80094e2:	f04f 3aff 	mov.w	sl, #4294967295
 80094e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094e8:	4620      	mov	r0, r4
 80094ea:	f001 fcd1 	bl	800ae90 <_Bfree>
 80094ee:	9905      	ldr	r1, [sp, #20]
 80094f0:	4620      	mov	r0, r4
 80094f2:	f001 fccd 	bl	800ae90 <_Bfree>
 80094f6:	4631      	mov	r1, r6
 80094f8:	4620      	mov	r0, r4
 80094fa:	f001 fcc9 	bl	800ae90 <_Bfree>
 80094fe:	4629      	mov	r1, r5
 8009500:	4620      	mov	r0, r4
 8009502:	f001 fcc5 	bl	800ae90 <_Bfree>
 8009506:	e61a      	b.n	800913e <_strtod_l+0x666>
 8009508:	f1ba 0f00 	cmp.w	sl, #0
 800950c:	d11b      	bne.n	8009546 <_strtod_l+0xa6e>
 800950e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009512:	b9f3      	cbnz	r3, 8009552 <_strtod_l+0xa7a>
 8009514:	4b6c      	ldr	r3, [pc, #432]	; (80096c8 <_strtod_l+0xbf0>)
 8009516:	2200      	movs	r2, #0
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f7 fafe 	bl	8000b1c <__aeabi_dcmplt>
 8009520:	b9d0      	cbnz	r0, 8009558 <_strtod_l+0xa80>
 8009522:	4640      	mov	r0, r8
 8009524:	4649      	mov	r1, r9
 8009526:	4b6c      	ldr	r3, [pc, #432]	; (80096d8 <_strtod_l+0xc00>)
 8009528:	2200      	movs	r2, #0
 800952a:	f7f7 f885 	bl	8000638 <__aeabi_dmul>
 800952e:	4680      	mov	r8, r0
 8009530:	4689      	mov	r9, r1
 8009532:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009536:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800953a:	9315      	str	r3, [sp, #84]	; 0x54
 800953c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009540:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009544:	e79d      	b.n	8009482 <_strtod_l+0x9aa>
 8009546:	f1ba 0f01 	cmp.w	sl, #1
 800954a:	d102      	bne.n	8009552 <_strtod_l+0xa7a>
 800954c:	2f00      	cmp	r7, #0
 800954e:	f43f ad83 	beq.w	8009058 <_strtod_l+0x580>
 8009552:	4b62      	ldr	r3, [pc, #392]	; (80096dc <_strtod_l+0xc04>)
 8009554:	2200      	movs	r2, #0
 8009556:	e78e      	b.n	8009476 <_strtod_l+0x99e>
 8009558:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80096d8 <_strtod_l+0xc00>
 800955c:	f04f 0800 	mov.w	r8, #0
 8009560:	e7e7      	b.n	8009532 <_strtod_l+0xa5a>
 8009562:	4b5d      	ldr	r3, [pc, #372]	; (80096d8 <_strtod_l+0xc00>)
 8009564:	4640      	mov	r0, r8
 8009566:	4649      	mov	r1, r9
 8009568:	2200      	movs	r2, #0
 800956a:	f7f7 f865 	bl	8000638 <__aeabi_dmul>
 800956e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009570:	4680      	mov	r8, r0
 8009572:	4689      	mov	r9, r1
 8009574:	b933      	cbnz	r3, 8009584 <_strtod_l+0xaac>
 8009576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800957a:	900e      	str	r0, [sp, #56]	; 0x38
 800957c:	930f      	str	r3, [sp, #60]	; 0x3c
 800957e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009582:	e7dd      	b.n	8009540 <_strtod_l+0xa68>
 8009584:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009588:	e7f9      	b.n	800957e <_strtod_l+0xaa6>
 800958a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800958e:	9b04      	ldr	r3, [sp, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1a8      	bne.n	80094e6 <_strtod_l+0xa0e>
 8009594:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800959a:	0d1b      	lsrs	r3, r3, #20
 800959c:	051b      	lsls	r3, r3, #20
 800959e:	429a      	cmp	r2, r3
 80095a0:	d1a1      	bne.n	80094e6 <_strtod_l+0xa0e>
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f7 fba7 	bl	8000cf8 <__aeabi_d2lz>
 80095aa:	f7f7 f817 	bl	80005dc <__aeabi_l2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f6 fe87 	bl	80002c8 <__aeabi_dsub>
 80095ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095c0:	ea43 030a 	orr.w	r3, r3, sl
 80095c4:	4313      	orrs	r3, r2
 80095c6:	4680      	mov	r8, r0
 80095c8:	4689      	mov	r9, r1
 80095ca:	d055      	beq.n	8009678 <_strtod_l+0xba0>
 80095cc:	a336      	add	r3, pc, #216	; (adr r3, 80096a8 <_strtod_l+0xbd0>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	f7f7 faa3 	bl	8000b1c <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f47f acd0 	bne.w	8008f7c <_strtod_l+0x4a4>
 80095dc:	a334      	add	r3, pc, #208	; (adr r3, 80096b0 <_strtod_l+0xbd8>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f7 fab7 	bl	8000b58 <__aeabi_dcmpgt>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f43f af7b 	beq.w	80094e6 <_strtod_l+0xa0e>
 80095f0:	e4c4      	b.n	8008f7c <_strtod_l+0x4a4>
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	b333      	cbz	r3, 8009644 <_strtod_l+0xb6c>
 80095f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095fc:	d822      	bhi.n	8009644 <_strtod_l+0xb6c>
 80095fe:	a32e      	add	r3, pc, #184	; (adr r3, 80096b8 <_strtod_l+0xbe0>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	4640      	mov	r0, r8
 8009606:	4649      	mov	r1, r9
 8009608:	f7f7 fa92 	bl	8000b30 <__aeabi_dcmple>
 800960c:	b1a0      	cbz	r0, 8009638 <_strtod_l+0xb60>
 800960e:	4649      	mov	r1, r9
 8009610:	4640      	mov	r0, r8
 8009612:	f7f7 fae9 	bl	8000be8 <__aeabi_d2uiz>
 8009616:	2801      	cmp	r0, #1
 8009618:	bf38      	it	cc
 800961a:	2001      	movcc	r0, #1
 800961c:	f7f6 ff92 	bl	8000544 <__aeabi_ui2d>
 8009620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009622:	4680      	mov	r8, r0
 8009624:	4689      	mov	r9, r1
 8009626:	bb23      	cbnz	r3, 8009672 <_strtod_l+0xb9a>
 8009628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800962c:	9010      	str	r0, [sp, #64]	; 0x40
 800962e:	9311      	str	r3, [sp, #68]	; 0x44
 8009630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009634:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800963c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	9309      	str	r3, [sp, #36]	; 0x24
 8009644:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009648:	eeb0 0a48 	vmov.f32	s0, s16
 800964c:	eef0 0a68 	vmov.f32	s1, s17
 8009650:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009654:	f001 ff4e 	bl	800b4f4 <__ulp>
 8009658:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800965c:	ec53 2b10 	vmov	r2, r3, d0
 8009660:	f7f6 ffea 	bl	8000638 <__aeabi_dmul>
 8009664:	ec53 2b18 	vmov	r2, r3, d8
 8009668:	f7f6 fe30 	bl	80002cc <__adddf3>
 800966c:	4682      	mov	sl, r0
 800966e:	468b      	mov	fp, r1
 8009670:	e78d      	b.n	800958e <_strtod_l+0xab6>
 8009672:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009676:	e7db      	b.n	8009630 <_strtod_l+0xb58>
 8009678:	a311      	add	r3, pc, #68	; (adr r3, 80096c0 <_strtod_l+0xbe8>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f7 fa4d 	bl	8000b1c <__aeabi_dcmplt>
 8009682:	e7b2      	b.n	80095ea <_strtod_l+0xb12>
 8009684:	2300      	movs	r3, #0
 8009686:	930a      	str	r3, [sp, #40]	; 0x28
 8009688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800968a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	f7ff ba6b 	b.w	8008b68 <_strtod_l+0x90>
 8009692:	2a65      	cmp	r2, #101	; 0x65
 8009694:	f43f ab5f 	beq.w	8008d56 <_strtod_l+0x27e>
 8009698:	2a45      	cmp	r2, #69	; 0x45
 800969a:	f43f ab5c 	beq.w	8008d56 <_strtod_l+0x27e>
 800969e:	2301      	movs	r3, #1
 80096a0:	f7ff bb94 	b.w	8008dcc <_strtod_l+0x2f4>
 80096a4:	f3af 8000 	nop.w
 80096a8:	94a03595 	.word	0x94a03595
 80096ac:	3fdfffff 	.word	0x3fdfffff
 80096b0:	35afe535 	.word	0x35afe535
 80096b4:	3fe00000 	.word	0x3fe00000
 80096b8:	ffc00000 	.word	0xffc00000
 80096bc:	41dfffff 	.word	0x41dfffff
 80096c0:	94a03595 	.word	0x94a03595
 80096c4:	3fcfffff 	.word	0x3fcfffff
 80096c8:	3ff00000 	.word	0x3ff00000
 80096cc:	7ff00000 	.word	0x7ff00000
 80096d0:	7fe00000 	.word	0x7fe00000
 80096d4:	7c9fffff 	.word	0x7c9fffff
 80096d8:	3fe00000 	.word	0x3fe00000
 80096dc:	bff00000 	.word	0xbff00000
 80096e0:	7fefffff 	.word	0x7fefffff

080096e4 <_strtod_r>:
 80096e4:	4b01      	ldr	r3, [pc, #4]	; (80096ec <_strtod_r+0x8>)
 80096e6:	f7ff b9f7 	b.w	8008ad8 <_strtod_l>
 80096ea:	bf00      	nop
 80096ec:	20000078 	.word	0x20000078

080096f0 <_strtol_l.constprop.0>:
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f6:	d001      	beq.n	80096fc <_strtol_l.constprop.0+0xc>
 80096f8:	2b24      	cmp	r3, #36	; 0x24
 80096fa:	d906      	bls.n	800970a <_strtol_l.constprop.0+0x1a>
 80096fc:	f7fe f8a2 	bl	8007844 <__errno>
 8009700:	2316      	movs	r3, #22
 8009702:	6003      	str	r3, [r0, #0]
 8009704:	2000      	movs	r0, #0
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097f0 <_strtol_l.constprop.0+0x100>
 800970e:	460d      	mov	r5, r1
 8009710:	462e      	mov	r6, r5
 8009712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009716:	f814 700c 	ldrb.w	r7, [r4, ip]
 800971a:	f017 0708 	ands.w	r7, r7, #8
 800971e:	d1f7      	bne.n	8009710 <_strtol_l.constprop.0+0x20>
 8009720:	2c2d      	cmp	r4, #45	; 0x2d
 8009722:	d132      	bne.n	800978a <_strtol_l.constprop.0+0x9a>
 8009724:	782c      	ldrb	r4, [r5, #0]
 8009726:	2701      	movs	r7, #1
 8009728:	1cb5      	adds	r5, r6, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d05b      	beq.n	80097e6 <_strtol_l.constprop.0+0xf6>
 800972e:	2b10      	cmp	r3, #16
 8009730:	d109      	bne.n	8009746 <_strtol_l.constprop.0+0x56>
 8009732:	2c30      	cmp	r4, #48	; 0x30
 8009734:	d107      	bne.n	8009746 <_strtol_l.constprop.0+0x56>
 8009736:	782c      	ldrb	r4, [r5, #0]
 8009738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800973c:	2c58      	cmp	r4, #88	; 0x58
 800973e:	d14d      	bne.n	80097dc <_strtol_l.constprop.0+0xec>
 8009740:	786c      	ldrb	r4, [r5, #1]
 8009742:	2310      	movs	r3, #16
 8009744:	3502      	adds	r5, #2
 8009746:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800974a:	f108 38ff 	add.w	r8, r8, #4294967295
 800974e:	f04f 0c00 	mov.w	ip, #0
 8009752:	fbb8 f9f3 	udiv	r9, r8, r3
 8009756:	4666      	mov	r6, ip
 8009758:	fb03 8a19 	mls	sl, r3, r9, r8
 800975c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009760:	f1be 0f09 	cmp.w	lr, #9
 8009764:	d816      	bhi.n	8009794 <_strtol_l.constprop.0+0xa4>
 8009766:	4674      	mov	r4, lr
 8009768:	42a3      	cmp	r3, r4
 800976a:	dd24      	ble.n	80097b6 <_strtol_l.constprop.0+0xc6>
 800976c:	f1bc 0f00 	cmp.w	ip, #0
 8009770:	db1e      	blt.n	80097b0 <_strtol_l.constprop.0+0xc0>
 8009772:	45b1      	cmp	r9, r6
 8009774:	d31c      	bcc.n	80097b0 <_strtol_l.constprop.0+0xc0>
 8009776:	d101      	bne.n	800977c <_strtol_l.constprop.0+0x8c>
 8009778:	45a2      	cmp	sl, r4
 800977a:	db19      	blt.n	80097b0 <_strtol_l.constprop.0+0xc0>
 800977c:	fb06 4603 	mla	r6, r6, r3, r4
 8009780:	f04f 0c01 	mov.w	ip, #1
 8009784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009788:	e7e8      	b.n	800975c <_strtol_l.constprop.0+0x6c>
 800978a:	2c2b      	cmp	r4, #43	; 0x2b
 800978c:	bf04      	itt	eq
 800978e:	782c      	ldrbeq	r4, [r5, #0]
 8009790:	1cb5      	addeq	r5, r6, #2
 8009792:	e7ca      	b.n	800972a <_strtol_l.constprop.0+0x3a>
 8009794:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009798:	f1be 0f19 	cmp.w	lr, #25
 800979c:	d801      	bhi.n	80097a2 <_strtol_l.constprop.0+0xb2>
 800979e:	3c37      	subs	r4, #55	; 0x37
 80097a0:	e7e2      	b.n	8009768 <_strtol_l.constprop.0+0x78>
 80097a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097a6:	f1be 0f19 	cmp.w	lr, #25
 80097aa:	d804      	bhi.n	80097b6 <_strtol_l.constprop.0+0xc6>
 80097ac:	3c57      	subs	r4, #87	; 0x57
 80097ae:	e7db      	b.n	8009768 <_strtol_l.constprop.0+0x78>
 80097b0:	f04f 3cff 	mov.w	ip, #4294967295
 80097b4:	e7e6      	b.n	8009784 <_strtol_l.constprop.0+0x94>
 80097b6:	f1bc 0f00 	cmp.w	ip, #0
 80097ba:	da05      	bge.n	80097c8 <_strtol_l.constprop.0+0xd8>
 80097bc:	2322      	movs	r3, #34	; 0x22
 80097be:	6003      	str	r3, [r0, #0]
 80097c0:	4646      	mov	r6, r8
 80097c2:	b942      	cbnz	r2, 80097d6 <_strtol_l.constprop.0+0xe6>
 80097c4:	4630      	mov	r0, r6
 80097c6:	e79e      	b.n	8009706 <_strtol_l.constprop.0+0x16>
 80097c8:	b107      	cbz	r7, 80097cc <_strtol_l.constprop.0+0xdc>
 80097ca:	4276      	negs	r6, r6
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	d0f9      	beq.n	80097c4 <_strtol_l.constprop.0+0xd4>
 80097d0:	f1bc 0f00 	cmp.w	ip, #0
 80097d4:	d000      	beq.n	80097d8 <_strtol_l.constprop.0+0xe8>
 80097d6:	1e69      	subs	r1, r5, #1
 80097d8:	6011      	str	r1, [r2, #0]
 80097da:	e7f3      	b.n	80097c4 <_strtol_l.constprop.0+0xd4>
 80097dc:	2430      	movs	r4, #48	; 0x30
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1b1      	bne.n	8009746 <_strtol_l.constprop.0+0x56>
 80097e2:	2308      	movs	r3, #8
 80097e4:	e7af      	b.n	8009746 <_strtol_l.constprop.0+0x56>
 80097e6:	2c30      	cmp	r4, #48	; 0x30
 80097e8:	d0a5      	beq.n	8009736 <_strtol_l.constprop.0+0x46>
 80097ea:	230a      	movs	r3, #10
 80097ec:	e7ab      	b.n	8009746 <_strtol_l.constprop.0+0x56>
 80097ee:	bf00      	nop
 80097f0:	08027ff9 	.word	0x08027ff9

080097f4 <_strtol_r>:
 80097f4:	f7ff bf7c 	b.w	80096f0 <_strtol_l.constprop.0>

080097f8 <_write_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d07      	ldr	r5, [pc, #28]	; (8009818 <_write_r+0x20>)
 80097fc:	4604      	mov	r4, r0
 80097fe:	4608      	mov	r0, r1
 8009800:	4611      	mov	r1, r2
 8009802:	2200      	movs	r2, #0
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f7f8 fa21 	bl	8001c4e <_write>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_write_r+0x1e>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_write_r+0x1e>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	20003b9c 	.word	0x20003b9c

0800981c <_close_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d06      	ldr	r5, [pc, #24]	; (8009838 <_close_r+0x1c>)
 8009820:	2300      	movs	r3, #0
 8009822:	4604      	mov	r4, r0
 8009824:	4608      	mov	r0, r1
 8009826:	602b      	str	r3, [r5, #0]
 8009828:	f7f8 fa2d 	bl	8001c86 <_close>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d102      	bne.n	8009836 <_close_r+0x1a>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	b103      	cbz	r3, 8009836 <_close_r+0x1a>
 8009834:	6023      	str	r3, [r4, #0]
 8009836:	bd38      	pop	{r3, r4, r5, pc}
 8009838:	20003b9c 	.word	0x20003b9c

0800983c <quorem>:
 800983c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	6903      	ldr	r3, [r0, #16]
 8009842:	690c      	ldr	r4, [r1, #16]
 8009844:	42a3      	cmp	r3, r4
 8009846:	4607      	mov	r7, r0
 8009848:	f2c0 8081 	blt.w	800994e <quorem+0x112>
 800984c:	3c01      	subs	r4, #1
 800984e:	f101 0814 	add.w	r8, r1, #20
 8009852:	f100 0514 	add.w	r5, r0, #20
 8009856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009860:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009864:	3301      	adds	r3, #1
 8009866:	429a      	cmp	r2, r3
 8009868:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800986c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009870:	fbb2 f6f3 	udiv	r6, r2, r3
 8009874:	d331      	bcc.n	80098da <quorem+0x9e>
 8009876:	f04f 0e00 	mov.w	lr, #0
 800987a:	4640      	mov	r0, r8
 800987c:	46ac      	mov	ip, r5
 800987e:	46f2      	mov	sl, lr
 8009880:	f850 2b04 	ldr.w	r2, [r0], #4
 8009884:	b293      	uxth	r3, r2
 8009886:	fb06 e303 	mla	r3, r6, r3, lr
 800988a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800988e:	b29b      	uxth	r3, r3
 8009890:	ebaa 0303 	sub.w	r3, sl, r3
 8009894:	f8dc a000 	ldr.w	sl, [ip]
 8009898:	0c12      	lsrs	r2, r2, #16
 800989a:	fa13 f38a 	uxtah	r3, r3, sl
 800989e:	fb06 e202 	mla	r2, r6, r2, lr
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	9b00      	ldr	r3, [sp, #0]
 80098a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098aa:	b292      	uxth	r2, r2
 80098ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80098b8:	4581      	cmp	r9, r0
 80098ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098be:	f84c 3b04 	str.w	r3, [ip], #4
 80098c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098c6:	d2db      	bcs.n	8009880 <quorem+0x44>
 80098c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80098cc:	b92b      	cbnz	r3, 80098da <quorem+0x9e>
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	3b04      	subs	r3, #4
 80098d2:	429d      	cmp	r5, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	d32e      	bcc.n	8009936 <quorem+0xfa>
 80098d8:	613c      	str	r4, [r7, #16]
 80098da:	4638      	mov	r0, r7
 80098dc:	f001 fd64 	bl	800b3a8 <__mcmp>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	db24      	blt.n	800992e <quorem+0xf2>
 80098e4:	3601      	adds	r6, #1
 80098e6:	4628      	mov	r0, r5
 80098e8:	f04f 0c00 	mov.w	ip, #0
 80098ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80098f0:	f8d0 e000 	ldr.w	lr, [r0]
 80098f4:	b293      	uxth	r3, r2
 80098f6:	ebac 0303 	sub.w	r3, ip, r3
 80098fa:	0c12      	lsrs	r2, r2, #16
 80098fc:	fa13 f38e 	uxtah	r3, r3, lr
 8009900:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009908:	b29b      	uxth	r3, r3
 800990a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800990e:	45c1      	cmp	r9, r8
 8009910:	f840 3b04 	str.w	r3, [r0], #4
 8009914:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009918:	d2e8      	bcs.n	80098ec <quorem+0xb0>
 800991a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009922:	b922      	cbnz	r2, 800992e <quorem+0xf2>
 8009924:	3b04      	subs	r3, #4
 8009926:	429d      	cmp	r5, r3
 8009928:	461a      	mov	r2, r3
 800992a:	d30a      	bcc.n	8009942 <quorem+0x106>
 800992c:	613c      	str	r4, [r7, #16]
 800992e:	4630      	mov	r0, r6
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	3b04      	subs	r3, #4
 800993a:	2a00      	cmp	r2, #0
 800993c:	d1cc      	bne.n	80098d8 <quorem+0x9c>
 800993e:	3c01      	subs	r4, #1
 8009940:	e7c7      	b.n	80098d2 <quorem+0x96>
 8009942:	6812      	ldr	r2, [r2, #0]
 8009944:	3b04      	subs	r3, #4
 8009946:	2a00      	cmp	r2, #0
 8009948:	d1f0      	bne.n	800992c <quorem+0xf0>
 800994a:	3c01      	subs	r4, #1
 800994c:	e7eb      	b.n	8009926 <quorem+0xea>
 800994e:	2000      	movs	r0, #0
 8009950:	e7ee      	b.n	8009930 <quorem+0xf4>
 8009952:	0000      	movs	r0, r0
 8009954:	0000      	movs	r0, r0
	...

08009958 <_dtoa_r>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	ed2d 8b04 	vpush	{d8-d9}
 8009960:	ec57 6b10 	vmov	r6, r7, d0
 8009964:	b093      	sub	sp, #76	; 0x4c
 8009966:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009968:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800996c:	9106      	str	r1, [sp, #24]
 800996e:	ee10 aa10 	vmov	sl, s0
 8009972:	4604      	mov	r4, r0
 8009974:	9209      	str	r2, [sp, #36]	; 0x24
 8009976:	930c      	str	r3, [sp, #48]	; 0x30
 8009978:	46bb      	mov	fp, r7
 800997a:	b975      	cbnz	r5, 800999a <_dtoa_r+0x42>
 800997c:	2010      	movs	r0, #16
 800997e:	f001 fa21 	bl	800adc4 <malloc>
 8009982:	4602      	mov	r2, r0
 8009984:	6260      	str	r0, [r4, #36]	; 0x24
 8009986:	b920      	cbnz	r0, 8009992 <_dtoa_r+0x3a>
 8009988:	4ba7      	ldr	r3, [pc, #668]	; (8009c28 <_dtoa_r+0x2d0>)
 800998a:	21ea      	movs	r1, #234	; 0xea
 800998c:	48a7      	ldr	r0, [pc, #668]	; (8009c2c <_dtoa_r+0x2d4>)
 800998e:	f002 f8fd 	bl	800bb8c <__assert_func>
 8009992:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009996:	6005      	str	r5, [r0, #0]
 8009998:	60c5      	str	r5, [r0, #12]
 800999a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800999c:	6819      	ldr	r1, [r3, #0]
 800999e:	b151      	cbz	r1, 80099b6 <_dtoa_r+0x5e>
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	604a      	str	r2, [r1, #4]
 80099a4:	2301      	movs	r3, #1
 80099a6:	4093      	lsls	r3, r2
 80099a8:	608b      	str	r3, [r1, #8]
 80099aa:	4620      	mov	r0, r4
 80099ac:	f001 fa70 	bl	800ae90 <_Bfree>
 80099b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	1e3b      	subs	r3, r7, #0
 80099b8:	bfaa      	itet	ge
 80099ba:	2300      	movge	r3, #0
 80099bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80099c0:	f8c8 3000 	strge.w	r3, [r8]
 80099c4:	4b9a      	ldr	r3, [pc, #616]	; (8009c30 <_dtoa_r+0x2d8>)
 80099c6:	bfbc      	itt	lt
 80099c8:	2201      	movlt	r2, #1
 80099ca:	f8c8 2000 	strlt.w	r2, [r8]
 80099ce:	ea33 030b 	bics.w	r3, r3, fp
 80099d2:	d11b      	bne.n	8009a0c <_dtoa_r+0xb4>
 80099d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099e0:	4333      	orrs	r3, r6
 80099e2:	f000 8592 	beq.w	800a50a <_dtoa_r+0xbb2>
 80099e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099e8:	b963      	cbnz	r3, 8009a04 <_dtoa_r+0xac>
 80099ea:	4b92      	ldr	r3, [pc, #584]	; (8009c34 <_dtoa_r+0x2dc>)
 80099ec:	e022      	b.n	8009a34 <_dtoa_r+0xdc>
 80099ee:	4b92      	ldr	r3, [pc, #584]	; (8009c38 <_dtoa_r+0x2e0>)
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	3308      	adds	r3, #8
 80099f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	9801      	ldr	r0, [sp, #4]
 80099fa:	b013      	add	sp, #76	; 0x4c
 80099fc:	ecbd 8b04 	vpop	{d8-d9}
 8009a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a04:	4b8b      	ldr	r3, [pc, #556]	; (8009c34 <_dtoa_r+0x2dc>)
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	3303      	adds	r3, #3
 8009a0a:	e7f3      	b.n	80099f4 <_dtoa_r+0x9c>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2300      	movs	r3, #0
 8009a10:	4650      	mov	r0, sl
 8009a12:	4659      	mov	r1, fp
 8009a14:	f7f7 f878 	bl	8000b08 <__aeabi_dcmpeq>
 8009a18:	ec4b ab19 	vmov	d9, sl, fp
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	b158      	cbz	r0, 8009a38 <_dtoa_r+0xe0>
 8009a20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a22:	2301      	movs	r3, #1
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 856b 	beq.w	800a504 <_dtoa_r+0xbac>
 8009a2e:	4883      	ldr	r0, [pc, #524]	; (8009c3c <_dtoa_r+0x2e4>)
 8009a30:	6018      	str	r0, [r3, #0]
 8009a32:	1e43      	subs	r3, r0, #1
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	e7df      	b.n	80099f8 <_dtoa_r+0xa0>
 8009a38:	ec4b ab10 	vmov	d0, sl, fp
 8009a3c:	aa10      	add	r2, sp, #64	; 0x40
 8009a3e:	a911      	add	r1, sp, #68	; 0x44
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 fdd3 	bl	800b5ec <__d2b>
 8009a46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a4a:	ee08 0a10 	vmov	s16, r0
 8009a4e:	2d00      	cmp	r5, #0
 8009a50:	f000 8084 	beq.w	8009b5c <_dtoa_r+0x204>
 8009a54:	ee19 3a90 	vmov	r3, s19
 8009a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a60:	4656      	mov	r6, sl
 8009a62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009a6e:	4b74      	ldr	r3, [pc, #464]	; (8009c40 <_dtoa_r+0x2e8>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	4630      	mov	r0, r6
 8009a74:	4639      	mov	r1, r7
 8009a76:	f7f6 fc27 	bl	80002c8 <__aeabi_dsub>
 8009a7a:	a365      	add	r3, pc, #404	; (adr r3, 8009c10 <_dtoa_r+0x2b8>)
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f7f6 fdda 	bl	8000638 <__aeabi_dmul>
 8009a84:	a364      	add	r3, pc, #400	; (adr r3, 8009c18 <_dtoa_r+0x2c0>)
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	f7f6 fc1f 	bl	80002cc <__adddf3>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	4628      	mov	r0, r5
 8009a92:	460f      	mov	r7, r1
 8009a94:	f7f6 fd66 	bl	8000564 <__aeabi_i2d>
 8009a98:	a361      	add	r3, pc, #388	; (adr r3, 8009c20 <_dtoa_r+0x2c8>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f6 fdcb 	bl	8000638 <__aeabi_dmul>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	f7f6 fc0f 	bl	80002cc <__adddf3>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	f7f7 f871 	bl	8000b98 <__aeabi_d2iz>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	9000      	str	r0, [sp, #0]
 8009aba:	2300      	movs	r3, #0
 8009abc:	4630      	mov	r0, r6
 8009abe:	4639      	mov	r1, r7
 8009ac0:	f7f7 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8009ac4:	b150      	cbz	r0, 8009adc <_dtoa_r+0x184>
 8009ac6:	9800      	ldr	r0, [sp, #0]
 8009ac8:	f7f6 fd4c 	bl	8000564 <__aeabi_i2d>
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	f7f7 f81a 	bl	8000b08 <__aeabi_dcmpeq>
 8009ad4:	b910      	cbnz	r0, 8009adc <_dtoa_r+0x184>
 8009ad6:	9b00      	ldr	r3, [sp, #0]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	9b00      	ldr	r3, [sp, #0]
 8009ade:	2b16      	cmp	r3, #22
 8009ae0:	d85a      	bhi.n	8009b98 <_dtoa_r+0x240>
 8009ae2:	9a00      	ldr	r2, [sp, #0]
 8009ae4:	4b57      	ldr	r3, [pc, #348]	; (8009c44 <_dtoa_r+0x2ec>)
 8009ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	ec51 0b19 	vmov	r0, r1, d9
 8009af2:	f7f7 f813 	bl	8000b1c <__aeabi_dcmplt>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d050      	beq.n	8009b9c <_dtoa_r+0x244>
 8009afa:	9b00      	ldr	r3, [sp, #0]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	2300      	movs	r3, #0
 8009b02:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b06:	1b5d      	subs	r5, r3, r5
 8009b08:	1e6b      	subs	r3, r5, #1
 8009b0a:	9305      	str	r3, [sp, #20]
 8009b0c:	bf45      	ittet	mi
 8009b0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b12:	9304      	strmi	r3, [sp, #16]
 8009b14:	2300      	movpl	r3, #0
 8009b16:	2300      	movmi	r3, #0
 8009b18:	bf4c      	ite	mi
 8009b1a:	9305      	strmi	r3, [sp, #20]
 8009b1c:	9304      	strpl	r3, [sp, #16]
 8009b1e:	9b00      	ldr	r3, [sp, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	db3d      	blt.n	8009ba0 <_dtoa_r+0x248>
 8009b24:	9b05      	ldr	r3, [sp, #20]
 8009b26:	9a00      	ldr	r2, [sp, #0]
 8009b28:	920a      	str	r2, [sp, #40]	; 0x28
 8009b2a:	4413      	add	r3, r2
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9307      	str	r3, [sp, #28]
 8009b32:	9b06      	ldr	r3, [sp, #24]
 8009b34:	2b09      	cmp	r3, #9
 8009b36:	f200 8089 	bhi.w	8009c4c <_dtoa_r+0x2f4>
 8009b3a:	2b05      	cmp	r3, #5
 8009b3c:	bfc4      	itt	gt
 8009b3e:	3b04      	subgt	r3, #4
 8009b40:	9306      	strgt	r3, [sp, #24]
 8009b42:	9b06      	ldr	r3, [sp, #24]
 8009b44:	f1a3 0302 	sub.w	r3, r3, #2
 8009b48:	bfcc      	ite	gt
 8009b4a:	2500      	movgt	r5, #0
 8009b4c:	2501      	movle	r5, #1
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	f200 8087 	bhi.w	8009c62 <_dtoa_r+0x30a>
 8009b54:	e8df f003 	tbb	[pc, r3]
 8009b58:	59383a2d 	.word	0x59383a2d
 8009b5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b60:	441d      	add	r5, r3
 8009b62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	bfc1      	itttt	gt
 8009b6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b72:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b7a:	bfda      	itte	le
 8009b7c:	f1c3 0320 	rsble	r3, r3, #32
 8009b80:	fa06 f003 	lslle.w	r0, r6, r3
 8009b84:	4318      	orrgt	r0, r3
 8009b86:	f7f6 fcdd 	bl	8000544 <__aeabi_ui2d>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b92:	3d01      	subs	r5, #1
 8009b94:	930e      	str	r3, [sp, #56]	; 0x38
 8009b96:	e76a      	b.n	8009a6e <_dtoa_r+0x116>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e7b2      	b.n	8009b02 <_dtoa_r+0x1aa>
 8009b9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b9e:	e7b1      	b.n	8009b04 <_dtoa_r+0x1ac>
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	9a00      	ldr	r2, [sp, #0]
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	4253      	negs	r3, r2
 8009baa:	9307      	str	r3, [sp, #28]
 8009bac:	2300      	movs	r3, #0
 8009bae:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb0:	e7bf      	b.n	8009b32 <_dtoa_r+0x1da>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9308      	str	r3, [sp, #32]
 8009bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dc55      	bgt.n	8009c68 <_dtoa_r+0x310>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8009bc6:	e00c      	b.n	8009be2 <_dtoa_r+0x28a>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e7f3      	b.n	8009bb4 <_dtoa_r+0x25c>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd0:	9308      	str	r3, [sp, #32]
 8009bd2:	9b00      	ldr	r3, [sp, #0]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	9302      	str	r3, [sp, #8]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	9303      	str	r3, [sp, #12]
 8009bde:	bfb8      	it	lt
 8009be0:	2301      	movlt	r3, #1
 8009be2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009be4:	2200      	movs	r2, #0
 8009be6:	6042      	str	r2, [r0, #4]
 8009be8:	2204      	movs	r2, #4
 8009bea:	f102 0614 	add.w	r6, r2, #20
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	6841      	ldr	r1, [r0, #4]
 8009bf2:	d93d      	bls.n	8009c70 <_dtoa_r+0x318>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f001 f90b 	bl	800ae10 <_Balloc>
 8009bfa:	9001      	str	r0, [sp, #4]
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d13b      	bne.n	8009c78 <_dtoa_r+0x320>
 8009c00:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <_dtoa_r+0x2f0>)
 8009c02:	4602      	mov	r2, r0
 8009c04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c08:	e6c0      	b.n	800998c <_dtoa_r+0x34>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e7df      	b.n	8009bce <_dtoa_r+0x276>
 8009c0e:	bf00      	nop
 8009c10:	636f4361 	.word	0x636f4361
 8009c14:	3fd287a7 	.word	0x3fd287a7
 8009c18:	8b60c8b3 	.word	0x8b60c8b3
 8009c1c:	3fc68a28 	.word	0x3fc68a28
 8009c20:	509f79fb 	.word	0x509f79fb
 8009c24:	3fd34413 	.word	0x3fd34413
 8009c28:	08028106 	.word	0x08028106
 8009c2c:	0802811d 	.word	0x0802811d
 8009c30:	7ff00000 	.word	0x7ff00000
 8009c34:	08028102 	.word	0x08028102
 8009c38:	080280f9 	.word	0x080280f9
 8009c3c:	08027f7d 	.word	0x08027f7d
 8009c40:	3ff80000 	.word	0x3ff80000
 8009c44:	08028288 	.word	0x08028288
 8009c48:	08028178 	.word	0x08028178
 8009c4c:	2501      	movs	r5, #1
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9306      	str	r3, [sp, #24]
 8009c52:	9508      	str	r5, [sp, #32]
 8009c54:	f04f 33ff 	mov.w	r3, #4294967295
 8009c58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2312      	movs	r3, #18
 8009c60:	e7b0      	b.n	8009bc4 <_dtoa_r+0x26c>
 8009c62:	2301      	movs	r3, #1
 8009c64:	9308      	str	r3, [sp, #32]
 8009c66:	e7f5      	b.n	8009c54 <_dtoa_r+0x2fc>
 8009c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c6e:	e7b8      	b.n	8009be2 <_dtoa_r+0x28a>
 8009c70:	3101      	adds	r1, #1
 8009c72:	6041      	str	r1, [r0, #4]
 8009c74:	0052      	lsls	r2, r2, #1
 8009c76:	e7b8      	b.n	8009bea <_dtoa_r+0x292>
 8009c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7a:	9a01      	ldr	r2, [sp, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	2b0e      	cmp	r3, #14
 8009c82:	f200 809d 	bhi.w	8009dc0 <_dtoa_r+0x468>
 8009c86:	2d00      	cmp	r5, #0
 8009c88:	f000 809a 	beq.w	8009dc0 <_dtoa_r+0x468>
 8009c8c:	9b00      	ldr	r3, [sp, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dd32      	ble.n	8009cf8 <_dtoa_r+0x3a0>
 8009c92:	4ab7      	ldr	r2, [pc, #732]	; (8009f70 <_dtoa_r+0x618>)
 8009c94:	f003 030f 	and.w	r3, r3, #15
 8009c98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ca0:	9b00      	ldr	r3, [sp, #0]
 8009ca2:	05d8      	lsls	r0, r3, #23
 8009ca4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009ca8:	d516      	bpl.n	8009cd8 <_dtoa_r+0x380>
 8009caa:	4bb2      	ldr	r3, [pc, #712]	; (8009f74 <_dtoa_r+0x61c>)
 8009cac:	ec51 0b19 	vmov	r0, r1, d9
 8009cb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cb4:	f7f6 fdea 	bl	800088c <__aeabi_ddiv>
 8009cb8:	f007 070f 	and.w	r7, r7, #15
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	468b      	mov	fp, r1
 8009cc0:	2503      	movs	r5, #3
 8009cc2:	4eac      	ldr	r6, [pc, #688]	; (8009f74 <_dtoa_r+0x61c>)
 8009cc4:	b957      	cbnz	r7, 8009cdc <_dtoa_r+0x384>
 8009cc6:	4642      	mov	r2, r8
 8009cc8:	464b      	mov	r3, r9
 8009cca:	4650      	mov	r0, sl
 8009ccc:	4659      	mov	r1, fp
 8009cce:	f7f6 fddd 	bl	800088c <__aeabi_ddiv>
 8009cd2:	4682      	mov	sl, r0
 8009cd4:	468b      	mov	fp, r1
 8009cd6:	e028      	b.n	8009d2a <_dtoa_r+0x3d2>
 8009cd8:	2502      	movs	r5, #2
 8009cda:	e7f2      	b.n	8009cc2 <_dtoa_r+0x36a>
 8009cdc:	07f9      	lsls	r1, r7, #31
 8009cde:	d508      	bpl.n	8009cf2 <_dtoa_r+0x39a>
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ce8:	f7f6 fca6 	bl	8000638 <__aeabi_dmul>
 8009cec:	3501      	adds	r5, #1
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4689      	mov	r9, r1
 8009cf2:	107f      	asrs	r7, r7, #1
 8009cf4:	3608      	adds	r6, #8
 8009cf6:	e7e5      	b.n	8009cc4 <_dtoa_r+0x36c>
 8009cf8:	f000 809b 	beq.w	8009e32 <_dtoa_r+0x4da>
 8009cfc:	9b00      	ldr	r3, [sp, #0]
 8009cfe:	4f9d      	ldr	r7, [pc, #628]	; (8009f74 <_dtoa_r+0x61c>)
 8009d00:	425e      	negs	r6, r3
 8009d02:	4b9b      	ldr	r3, [pc, #620]	; (8009f70 <_dtoa_r+0x618>)
 8009d04:	f006 020f 	and.w	r2, r6, #15
 8009d08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	ec51 0b19 	vmov	r0, r1, d9
 8009d14:	f7f6 fc90 	bl	8000638 <__aeabi_dmul>
 8009d18:	1136      	asrs	r6, r6, #4
 8009d1a:	4682      	mov	sl, r0
 8009d1c:	468b      	mov	fp, r1
 8009d1e:	2300      	movs	r3, #0
 8009d20:	2502      	movs	r5, #2
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	d17a      	bne.n	8009e1c <_dtoa_r+0x4c4>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1d3      	bne.n	8009cd2 <_dtoa_r+0x37a>
 8009d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 8082 	beq.w	8009e36 <_dtoa_r+0x4de>
 8009d32:	4b91      	ldr	r3, [pc, #580]	; (8009f78 <_dtoa_r+0x620>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	4650      	mov	r0, sl
 8009d38:	4659      	mov	r1, fp
 8009d3a:	f7f6 feef 	bl	8000b1c <__aeabi_dcmplt>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d079      	beq.n	8009e36 <_dtoa_r+0x4de>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d076      	beq.n	8009e36 <_dtoa_r+0x4de>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dd36      	ble.n	8009dbc <_dtoa_r+0x464>
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	4650      	mov	r0, sl
 8009d52:	4659      	mov	r1, fp
 8009d54:	1e5f      	subs	r7, r3, #1
 8009d56:	2200      	movs	r2, #0
 8009d58:	4b88      	ldr	r3, [pc, #544]	; (8009f7c <_dtoa_r+0x624>)
 8009d5a:	f7f6 fc6d 	bl	8000638 <__aeabi_dmul>
 8009d5e:	9e02      	ldr	r6, [sp, #8]
 8009d60:	4682      	mov	sl, r0
 8009d62:	468b      	mov	fp, r1
 8009d64:	3501      	adds	r5, #1
 8009d66:	4628      	mov	r0, r5
 8009d68:	f7f6 fbfc 	bl	8000564 <__aeabi_i2d>
 8009d6c:	4652      	mov	r2, sl
 8009d6e:	465b      	mov	r3, fp
 8009d70:	f7f6 fc62 	bl	8000638 <__aeabi_dmul>
 8009d74:	4b82      	ldr	r3, [pc, #520]	; (8009f80 <_dtoa_r+0x628>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	f7f6 faa8 	bl	80002cc <__adddf3>
 8009d7c:	46d0      	mov	r8, sl
 8009d7e:	46d9      	mov	r9, fp
 8009d80:	4682      	mov	sl, r0
 8009d82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	d158      	bne.n	8009e3c <_dtoa_r+0x4e4>
 8009d8a:	4b7e      	ldr	r3, [pc, #504]	; (8009f84 <_dtoa_r+0x62c>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4640      	mov	r0, r8
 8009d90:	4649      	mov	r1, r9
 8009d92:	f7f6 fa99 	bl	80002c8 <__aeabi_dsub>
 8009d96:	4652      	mov	r2, sl
 8009d98:	465b      	mov	r3, fp
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	4689      	mov	r9, r1
 8009d9e:	f7f6 fedb 	bl	8000b58 <__aeabi_dcmpgt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	f040 8295 	bne.w	800a2d2 <_dtoa_r+0x97a>
 8009da8:	4652      	mov	r2, sl
 8009daa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009dae:	4640      	mov	r0, r8
 8009db0:	4649      	mov	r1, r9
 8009db2:	f7f6 feb3 	bl	8000b1c <__aeabi_dcmplt>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	f040 8289 	bne.w	800a2ce <_dtoa_r+0x976>
 8009dbc:	ec5b ab19 	vmov	sl, fp, d9
 8009dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f2c0 8148 	blt.w	800a058 <_dtoa_r+0x700>
 8009dc8:	9a00      	ldr	r2, [sp, #0]
 8009dca:	2a0e      	cmp	r2, #14
 8009dcc:	f300 8144 	bgt.w	800a058 <_dtoa_r+0x700>
 8009dd0:	4b67      	ldr	r3, [pc, #412]	; (8009f70 <_dtoa_r+0x618>)
 8009dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f280 80d5 	bge.w	8009f8c <_dtoa_r+0x634>
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f300 80d1 	bgt.w	8009f8c <_dtoa_r+0x634>
 8009dea:	f040 826f 	bne.w	800a2cc <_dtoa_r+0x974>
 8009dee:	4b65      	ldr	r3, [pc, #404]	; (8009f84 <_dtoa_r+0x62c>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fc1f 	bl	8000638 <__aeabi_dmul>
 8009dfa:	4652      	mov	r2, sl
 8009dfc:	465b      	mov	r3, fp
 8009dfe:	f7f6 fea1 	bl	8000b44 <__aeabi_dcmpge>
 8009e02:	9e03      	ldr	r6, [sp, #12]
 8009e04:	4637      	mov	r7, r6
 8009e06:	2800      	cmp	r0, #0
 8009e08:	f040 8245 	bne.w	800a296 <_dtoa_r+0x93e>
 8009e0c:	9d01      	ldr	r5, [sp, #4]
 8009e0e:	2331      	movs	r3, #49	; 0x31
 8009e10:	f805 3b01 	strb.w	r3, [r5], #1
 8009e14:	9b00      	ldr	r3, [sp, #0]
 8009e16:	3301      	adds	r3, #1
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	e240      	b.n	800a29e <_dtoa_r+0x946>
 8009e1c:	07f2      	lsls	r2, r6, #31
 8009e1e:	d505      	bpl.n	8009e2c <_dtoa_r+0x4d4>
 8009e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e24:	f7f6 fc08 	bl	8000638 <__aeabi_dmul>
 8009e28:	3501      	adds	r5, #1
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	1076      	asrs	r6, r6, #1
 8009e2e:	3708      	adds	r7, #8
 8009e30:	e777      	b.n	8009d22 <_dtoa_r+0x3ca>
 8009e32:	2502      	movs	r5, #2
 8009e34:	e779      	b.n	8009d2a <_dtoa_r+0x3d2>
 8009e36:	9f00      	ldr	r7, [sp, #0]
 8009e38:	9e03      	ldr	r6, [sp, #12]
 8009e3a:	e794      	b.n	8009d66 <_dtoa_r+0x40e>
 8009e3c:	9901      	ldr	r1, [sp, #4]
 8009e3e:	4b4c      	ldr	r3, [pc, #304]	; (8009f70 <_dtoa_r+0x618>)
 8009e40:	4431      	add	r1, r6
 8009e42:	910d      	str	r1, [sp, #52]	; 0x34
 8009e44:	9908      	ldr	r1, [sp, #32]
 8009e46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e4e:	2900      	cmp	r1, #0
 8009e50:	d043      	beq.n	8009eda <_dtoa_r+0x582>
 8009e52:	494d      	ldr	r1, [pc, #308]	; (8009f88 <_dtoa_r+0x630>)
 8009e54:	2000      	movs	r0, #0
 8009e56:	f7f6 fd19 	bl	800088c <__aeabi_ddiv>
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	f7f6 fa33 	bl	80002c8 <__aeabi_dsub>
 8009e62:	9d01      	ldr	r5, [sp, #4]
 8009e64:	4682      	mov	sl, r0
 8009e66:	468b      	mov	fp, r1
 8009e68:	4649      	mov	r1, r9
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	f7f6 fe94 	bl	8000b98 <__aeabi_d2iz>
 8009e70:	4606      	mov	r6, r0
 8009e72:	f7f6 fb77 	bl	8000564 <__aeabi_i2d>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	f7f6 fa23 	bl	80002c8 <__aeabi_dsub>
 8009e82:	3630      	adds	r6, #48	; 0x30
 8009e84:	f805 6b01 	strb.w	r6, [r5], #1
 8009e88:	4652      	mov	r2, sl
 8009e8a:	465b      	mov	r3, fp
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	4689      	mov	r9, r1
 8009e90:	f7f6 fe44 	bl	8000b1c <__aeabi_dcmplt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d163      	bne.n	8009f60 <_dtoa_r+0x608>
 8009e98:	4642      	mov	r2, r8
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	4936      	ldr	r1, [pc, #216]	; (8009f78 <_dtoa_r+0x620>)
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	f7f6 fa12 	bl	80002c8 <__aeabi_dsub>
 8009ea4:	4652      	mov	r2, sl
 8009ea6:	465b      	mov	r3, fp
 8009ea8:	f7f6 fe38 	bl	8000b1c <__aeabi_dcmplt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	f040 80b5 	bne.w	800a01c <_dtoa_r+0x6c4>
 8009eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eb4:	429d      	cmp	r5, r3
 8009eb6:	d081      	beq.n	8009dbc <_dtoa_r+0x464>
 8009eb8:	4b30      	ldr	r3, [pc, #192]	; (8009f7c <_dtoa_r+0x624>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	4650      	mov	r0, sl
 8009ebe:	4659      	mov	r1, fp
 8009ec0:	f7f6 fbba 	bl	8000638 <__aeabi_dmul>
 8009ec4:	4b2d      	ldr	r3, [pc, #180]	; (8009f7c <_dtoa_r+0x624>)
 8009ec6:	4682      	mov	sl, r0
 8009ec8:	468b      	mov	fp, r1
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4649      	mov	r1, r9
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f7f6 fbb2 	bl	8000638 <__aeabi_dmul>
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	e7c6      	b.n	8009e68 <_dtoa_r+0x510>
 8009eda:	4650      	mov	r0, sl
 8009edc:	4659      	mov	r1, fp
 8009ede:	f7f6 fbab 	bl	8000638 <__aeabi_dmul>
 8009ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee4:	9d01      	ldr	r5, [sp, #4]
 8009ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ee8:	4682      	mov	sl, r0
 8009eea:	468b      	mov	fp, r1
 8009eec:	4649      	mov	r1, r9
 8009eee:	4640      	mov	r0, r8
 8009ef0:	f7f6 fe52 	bl	8000b98 <__aeabi_d2iz>
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	f7f6 fb35 	bl	8000564 <__aeabi_i2d>
 8009efa:	3630      	adds	r6, #48	; 0x30
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7f6 f9e0 	bl	80002c8 <__aeabi_dsub>
 8009f08:	f805 6b01 	strb.w	r6, [r5], #1
 8009f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	4680      	mov	r8, r0
 8009f12:	4689      	mov	r9, r1
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	d124      	bne.n	8009f64 <_dtoa_r+0x60c>
 8009f1a:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <_dtoa_r+0x630>)
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	4659      	mov	r1, fp
 8009f20:	f7f6 f9d4 	bl	80002cc <__adddf3>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 fe14 	bl	8000b58 <__aeabi_dcmpgt>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d173      	bne.n	800a01c <_dtoa_r+0x6c4>
 8009f34:	4652      	mov	r2, sl
 8009f36:	465b      	mov	r3, fp
 8009f38:	4913      	ldr	r1, [pc, #76]	; (8009f88 <_dtoa_r+0x630>)
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	f7f6 f9c4 	bl	80002c8 <__aeabi_dsub>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4640      	mov	r0, r8
 8009f46:	4649      	mov	r1, r9
 8009f48:	f7f6 fde8 	bl	8000b1c <__aeabi_dcmplt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	f43f af35 	beq.w	8009dbc <_dtoa_r+0x464>
 8009f52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f54:	1e6b      	subs	r3, r5, #1
 8009f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f5c:	2b30      	cmp	r3, #48	; 0x30
 8009f5e:	d0f8      	beq.n	8009f52 <_dtoa_r+0x5fa>
 8009f60:	9700      	str	r7, [sp, #0]
 8009f62:	e049      	b.n	8009ff8 <_dtoa_r+0x6a0>
 8009f64:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <_dtoa_r+0x624>)
 8009f66:	f7f6 fb67 	bl	8000638 <__aeabi_dmul>
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	4689      	mov	r9, r1
 8009f6e:	e7bd      	b.n	8009eec <_dtoa_r+0x594>
 8009f70:	08028288 	.word	0x08028288
 8009f74:	08028260 	.word	0x08028260
 8009f78:	3ff00000 	.word	0x3ff00000
 8009f7c:	40240000 	.word	0x40240000
 8009f80:	401c0000 	.word	0x401c0000
 8009f84:	40140000 	.word	0x40140000
 8009f88:	3fe00000 	.word	0x3fe00000
 8009f8c:	9d01      	ldr	r5, [sp, #4]
 8009f8e:	4656      	mov	r6, sl
 8009f90:	465f      	mov	r7, fp
 8009f92:	4642      	mov	r2, r8
 8009f94:	464b      	mov	r3, r9
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 fc77 	bl	800088c <__aeabi_ddiv>
 8009f9e:	f7f6 fdfb 	bl	8000b98 <__aeabi_d2iz>
 8009fa2:	4682      	mov	sl, r0
 8009fa4:	f7f6 fade 	bl	8000564 <__aeabi_i2d>
 8009fa8:	4642      	mov	r2, r8
 8009faa:	464b      	mov	r3, r9
 8009fac:	f7f6 fb44 	bl	8000638 <__aeabi_dmul>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009fbc:	f7f6 f984 	bl	80002c8 <__aeabi_dsub>
 8009fc0:	f805 6b01 	strb.w	r6, [r5], #1
 8009fc4:	9e01      	ldr	r6, [sp, #4]
 8009fc6:	9f03      	ldr	r7, [sp, #12]
 8009fc8:	1bae      	subs	r6, r5, r6
 8009fca:	42b7      	cmp	r7, r6
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	d135      	bne.n	800a03e <_dtoa_r+0x6e6>
 8009fd2:	f7f6 f97b 	bl	80002cc <__adddf3>
 8009fd6:	4642      	mov	r2, r8
 8009fd8:	464b      	mov	r3, r9
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460f      	mov	r7, r1
 8009fde:	f7f6 fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 8009fe2:	b9d0      	cbnz	r0, 800a01a <_dtoa_r+0x6c2>
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	4630      	mov	r0, r6
 8009fea:	4639      	mov	r1, r7
 8009fec:	f7f6 fd8c 	bl	8000b08 <__aeabi_dcmpeq>
 8009ff0:	b110      	cbz	r0, 8009ff8 <_dtoa_r+0x6a0>
 8009ff2:	f01a 0f01 	tst.w	sl, #1
 8009ff6:	d110      	bne.n	800a01a <_dtoa_r+0x6c2>
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	ee18 1a10 	vmov	r1, s16
 8009ffe:	f000 ff47 	bl	800ae90 <_Bfree>
 800a002:	2300      	movs	r3, #0
 800a004:	9800      	ldr	r0, [sp, #0]
 800a006:	702b      	strb	r3, [r5, #0]
 800a008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a00a:	3001      	adds	r0, #1
 800a00c:	6018      	str	r0, [r3, #0]
 800a00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a010:	2b00      	cmp	r3, #0
 800a012:	f43f acf1 	beq.w	80099f8 <_dtoa_r+0xa0>
 800a016:	601d      	str	r5, [r3, #0]
 800a018:	e4ee      	b.n	80099f8 <_dtoa_r+0xa0>
 800a01a:	9f00      	ldr	r7, [sp, #0]
 800a01c:	462b      	mov	r3, r5
 800a01e:	461d      	mov	r5, r3
 800a020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a024:	2a39      	cmp	r2, #57	; 0x39
 800a026:	d106      	bne.n	800a036 <_dtoa_r+0x6de>
 800a028:	9a01      	ldr	r2, [sp, #4]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d1f7      	bne.n	800a01e <_dtoa_r+0x6c6>
 800a02e:	9901      	ldr	r1, [sp, #4]
 800a030:	2230      	movs	r2, #48	; 0x30
 800a032:	3701      	adds	r7, #1
 800a034:	700a      	strb	r2, [r1, #0]
 800a036:	781a      	ldrb	r2, [r3, #0]
 800a038:	3201      	adds	r2, #1
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	e790      	b.n	8009f60 <_dtoa_r+0x608>
 800a03e:	4ba6      	ldr	r3, [pc, #664]	; (800a2d8 <_dtoa_r+0x980>)
 800a040:	2200      	movs	r2, #0
 800a042:	f7f6 faf9 	bl	8000638 <__aeabi_dmul>
 800a046:	2200      	movs	r2, #0
 800a048:	2300      	movs	r3, #0
 800a04a:	4606      	mov	r6, r0
 800a04c:	460f      	mov	r7, r1
 800a04e:	f7f6 fd5b 	bl	8000b08 <__aeabi_dcmpeq>
 800a052:	2800      	cmp	r0, #0
 800a054:	d09d      	beq.n	8009f92 <_dtoa_r+0x63a>
 800a056:	e7cf      	b.n	8009ff8 <_dtoa_r+0x6a0>
 800a058:	9a08      	ldr	r2, [sp, #32]
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	f000 80d7 	beq.w	800a20e <_dtoa_r+0x8b6>
 800a060:	9a06      	ldr	r2, [sp, #24]
 800a062:	2a01      	cmp	r2, #1
 800a064:	f300 80ba 	bgt.w	800a1dc <_dtoa_r+0x884>
 800a068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a06a:	2a00      	cmp	r2, #0
 800a06c:	f000 80b2 	beq.w	800a1d4 <_dtoa_r+0x87c>
 800a070:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a074:	9e07      	ldr	r6, [sp, #28]
 800a076:	9d04      	ldr	r5, [sp, #16]
 800a078:	9a04      	ldr	r2, [sp, #16]
 800a07a:	441a      	add	r2, r3
 800a07c:	9204      	str	r2, [sp, #16]
 800a07e:	9a05      	ldr	r2, [sp, #20]
 800a080:	2101      	movs	r1, #1
 800a082:	441a      	add	r2, r3
 800a084:	4620      	mov	r0, r4
 800a086:	9205      	str	r2, [sp, #20]
 800a088:	f001 f804 	bl	800b094 <__i2b>
 800a08c:	4607      	mov	r7, r0
 800a08e:	2d00      	cmp	r5, #0
 800a090:	dd0c      	ble.n	800a0ac <_dtoa_r+0x754>
 800a092:	9b05      	ldr	r3, [sp, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	dd09      	ble.n	800a0ac <_dtoa_r+0x754>
 800a098:	42ab      	cmp	r3, r5
 800a09a:	9a04      	ldr	r2, [sp, #16]
 800a09c:	bfa8      	it	ge
 800a09e:	462b      	movge	r3, r5
 800a0a0:	1ad2      	subs	r2, r2, r3
 800a0a2:	9204      	str	r2, [sp, #16]
 800a0a4:	9a05      	ldr	r2, [sp, #20]
 800a0a6:	1aed      	subs	r5, r5, r3
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	b31b      	cbz	r3, 800a0f8 <_dtoa_r+0x7a0>
 800a0b0:	9b08      	ldr	r3, [sp, #32]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 80af 	beq.w	800a216 <_dtoa_r+0x8be>
 800a0b8:	2e00      	cmp	r6, #0
 800a0ba:	dd13      	ble.n	800a0e4 <_dtoa_r+0x78c>
 800a0bc:	4639      	mov	r1, r7
 800a0be:	4632      	mov	r2, r6
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f001 f8a7 	bl	800b214 <__pow5mult>
 800a0c6:	ee18 2a10 	vmov	r2, s16
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fff6 	bl	800b0c0 <__multiply>
 800a0d4:	ee18 1a10 	vmov	r1, s16
 800a0d8:	4680      	mov	r8, r0
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 fed8 	bl	800ae90 <_Bfree>
 800a0e0:	ee08 8a10 	vmov	s16, r8
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	1b9a      	subs	r2, r3, r6
 800a0e8:	d006      	beq.n	800a0f8 <_dtoa_r+0x7a0>
 800a0ea:	ee18 1a10 	vmov	r1, s16
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f001 f890 	bl	800b214 <__pow5mult>
 800a0f4:	ee08 0a10 	vmov	s16, r0
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 ffca 	bl	800b094 <__i2b>
 800a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	4606      	mov	r6, r0
 800a106:	f340 8088 	ble.w	800a21a <_dtoa_r+0x8c2>
 800a10a:	461a      	mov	r2, r3
 800a10c:	4601      	mov	r1, r0
 800a10e:	4620      	mov	r0, r4
 800a110:	f001 f880 	bl	800b214 <__pow5mult>
 800a114:	9b06      	ldr	r3, [sp, #24]
 800a116:	2b01      	cmp	r3, #1
 800a118:	4606      	mov	r6, r0
 800a11a:	f340 8081 	ble.w	800a220 <_dtoa_r+0x8c8>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	6933      	ldr	r3, [r6, #16]
 800a124:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a128:	6918      	ldr	r0, [r3, #16]
 800a12a:	f000 ff63 	bl	800aff4 <__hi0bits>
 800a12e:	f1c0 0020 	rsb	r0, r0, #32
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	4418      	add	r0, r3
 800a136:	f010 001f 	ands.w	r0, r0, #31
 800a13a:	f000 8092 	beq.w	800a262 <_dtoa_r+0x90a>
 800a13e:	f1c0 0320 	rsb	r3, r0, #32
 800a142:	2b04      	cmp	r3, #4
 800a144:	f340 808a 	ble.w	800a25c <_dtoa_r+0x904>
 800a148:	f1c0 001c 	rsb	r0, r0, #28
 800a14c:	9b04      	ldr	r3, [sp, #16]
 800a14e:	4403      	add	r3, r0
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	9b05      	ldr	r3, [sp, #20]
 800a154:	4403      	add	r3, r0
 800a156:	4405      	add	r5, r0
 800a158:	9305      	str	r3, [sp, #20]
 800a15a:	9b04      	ldr	r3, [sp, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd07      	ble.n	800a170 <_dtoa_r+0x818>
 800a160:	ee18 1a10 	vmov	r1, s16
 800a164:	461a      	mov	r2, r3
 800a166:	4620      	mov	r0, r4
 800a168:	f001 f8ae 	bl	800b2c8 <__lshift>
 800a16c:	ee08 0a10 	vmov	s16, r0
 800a170:	9b05      	ldr	r3, [sp, #20]
 800a172:	2b00      	cmp	r3, #0
 800a174:	dd05      	ble.n	800a182 <_dtoa_r+0x82a>
 800a176:	4631      	mov	r1, r6
 800a178:	461a      	mov	r2, r3
 800a17a:	4620      	mov	r0, r4
 800a17c:	f001 f8a4 	bl	800b2c8 <__lshift>
 800a180:	4606      	mov	r6, r0
 800a182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a184:	2b00      	cmp	r3, #0
 800a186:	d06e      	beq.n	800a266 <_dtoa_r+0x90e>
 800a188:	ee18 0a10 	vmov	r0, s16
 800a18c:	4631      	mov	r1, r6
 800a18e:	f001 f90b 	bl	800b3a8 <__mcmp>
 800a192:	2800      	cmp	r0, #0
 800a194:	da67      	bge.n	800a266 <_dtoa_r+0x90e>
 800a196:	9b00      	ldr	r3, [sp, #0]
 800a198:	3b01      	subs	r3, #1
 800a19a:	ee18 1a10 	vmov	r1, s16
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 fe95 	bl	800aed4 <__multadd>
 800a1aa:	9b08      	ldr	r3, [sp, #32]
 800a1ac:	ee08 0a10 	vmov	s16, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 81b1 	beq.w	800a518 <_dtoa_r+0xbc0>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	220a      	movs	r2, #10
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 fe89 	bl	800aed4 <__multadd>
 800a1c2:	9b02      	ldr	r3, [sp, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	f300 808e 	bgt.w	800a2e8 <_dtoa_r+0x990>
 800a1cc:	9b06      	ldr	r3, [sp, #24]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	dc51      	bgt.n	800a276 <_dtoa_r+0x91e>
 800a1d2:	e089      	b.n	800a2e8 <_dtoa_r+0x990>
 800a1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1da:	e74b      	b.n	800a074 <_dtoa_r+0x71c>
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	1e5e      	subs	r6, r3, #1
 800a1e0:	9b07      	ldr	r3, [sp, #28]
 800a1e2:	42b3      	cmp	r3, r6
 800a1e4:	bfbf      	itttt	lt
 800a1e6:	9b07      	ldrlt	r3, [sp, #28]
 800a1e8:	9607      	strlt	r6, [sp, #28]
 800a1ea:	1af2      	sublt	r2, r6, r3
 800a1ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1ee:	bfb6      	itet	lt
 800a1f0:	189b      	addlt	r3, r3, r2
 800a1f2:	1b9e      	subge	r6, r3, r6
 800a1f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	bfb8      	it	lt
 800a1fa:	2600      	movlt	r6, #0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfb7      	itett	lt
 800a200:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a204:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a208:	1a9d      	sublt	r5, r3, r2
 800a20a:	2300      	movlt	r3, #0
 800a20c:	e734      	b.n	800a078 <_dtoa_r+0x720>
 800a20e:	9e07      	ldr	r6, [sp, #28]
 800a210:	9d04      	ldr	r5, [sp, #16]
 800a212:	9f08      	ldr	r7, [sp, #32]
 800a214:	e73b      	b.n	800a08e <_dtoa_r+0x736>
 800a216:	9a07      	ldr	r2, [sp, #28]
 800a218:	e767      	b.n	800a0ea <_dtoa_r+0x792>
 800a21a:	9b06      	ldr	r3, [sp, #24]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	dc18      	bgt.n	800a252 <_dtoa_r+0x8fa>
 800a220:	f1ba 0f00 	cmp.w	sl, #0
 800a224:	d115      	bne.n	800a252 <_dtoa_r+0x8fa>
 800a226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a22a:	b993      	cbnz	r3, 800a252 <_dtoa_r+0x8fa>
 800a22c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a230:	0d1b      	lsrs	r3, r3, #20
 800a232:	051b      	lsls	r3, r3, #20
 800a234:	b183      	cbz	r3, 800a258 <_dtoa_r+0x900>
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	3301      	adds	r3, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	3301      	adds	r3, #1
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	f04f 0801 	mov.w	r8, #1
 800a246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f47f af6a 	bne.w	800a122 <_dtoa_r+0x7ca>
 800a24e:	2001      	movs	r0, #1
 800a250:	e76f      	b.n	800a132 <_dtoa_r+0x7da>
 800a252:	f04f 0800 	mov.w	r8, #0
 800a256:	e7f6      	b.n	800a246 <_dtoa_r+0x8ee>
 800a258:	4698      	mov	r8, r3
 800a25a:	e7f4      	b.n	800a246 <_dtoa_r+0x8ee>
 800a25c:	f43f af7d 	beq.w	800a15a <_dtoa_r+0x802>
 800a260:	4618      	mov	r0, r3
 800a262:	301c      	adds	r0, #28
 800a264:	e772      	b.n	800a14c <_dtoa_r+0x7f4>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dc37      	bgt.n	800a2dc <_dtoa_r+0x984>
 800a26c:	9b06      	ldr	r3, [sp, #24]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	dd34      	ble.n	800a2dc <_dtoa_r+0x984>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	9302      	str	r3, [sp, #8]
 800a276:	9b02      	ldr	r3, [sp, #8]
 800a278:	b96b      	cbnz	r3, 800a296 <_dtoa_r+0x93e>
 800a27a:	4631      	mov	r1, r6
 800a27c:	2205      	movs	r2, #5
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 fe28 	bl	800aed4 <__multadd>
 800a284:	4601      	mov	r1, r0
 800a286:	4606      	mov	r6, r0
 800a288:	ee18 0a10 	vmov	r0, s16
 800a28c:	f001 f88c 	bl	800b3a8 <__mcmp>
 800a290:	2800      	cmp	r0, #0
 800a292:	f73f adbb 	bgt.w	8009e0c <_dtoa_r+0x4b4>
 800a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a298:	9d01      	ldr	r5, [sp, #4]
 800a29a:	43db      	mvns	r3, r3
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	f04f 0800 	mov.w	r8, #0
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fdf3 	bl	800ae90 <_Bfree>
 800a2aa:	2f00      	cmp	r7, #0
 800a2ac:	f43f aea4 	beq.w	8009ff8 <_dtoa_r+0x6a0>
 800a2b0:	f1b8 0f00 	cmp.w	r8, #0
 800a2b4:	d005      	beq.n	800a2c2 <_dtoa_r+0x96a>
 800a2b6:	45b8      	cmp	r8, r7
 800a2b8:	d003      	beq.n	800a2c2 <_dtoa_r+0x96a>
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 fde7 	bl	800ae90 <_Bfree>
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 fde3 	bl	800ae90 <_Bfree>
 800a2ca:	e695      	b.n	8009ff8 <_dtoa_r+0x6a0>
 800a2cc:	2600      	movs	r6, #0
 800a2ce:	4637      	mov	r7, r6
 800a2d0:	e7e1      	b.n	800a296 <_dtoa_r+0x93e>
 800a2d2:	9700      	str	r7, [sp, #0]
 800a2d4:	4637      	mov	r7, r6
 800a2d6:	e599      	b.n	8009e0c <_dtoa_r+0x4b4>
 800a2d8:	40240000 	.word	0x40240000
 800a2dc:	9b08      	ldr	r3, [sp, #32]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 80ca 	beq.w	800a478 <_dtoa_r+0xb20>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	dd05      	ble.n	800a2f8 <_dtoa_r+0x9a0>
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 ffe9 	bl	800b2c8 <__lshift>
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	f1b8 0f00 	cmp.w	r8, #0
 800a2fc:	d05b      	beq.n	800a3b6 <_dtoa_r+0xa5e>
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fd85 	bl	800ae10 <_Balloc>
 800a306:	4605      	mov	r5, r0
 800a308:	b928      	cbnz	r0, 800a316 <_dtoa_r+0x9be>
 800a30a:	4b87      	ldr	r3, [pc, #540]	; (800a528 <_dtoa_r+0xbd0>)
 800a30c:	4602      	mov	r2, r0
 800a30e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a312:	f7ff bb3b 	b.w	800998c <_dtoa_r+0x34>
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	3202      	adds	r2, #2
 800a31a:	0092      	lsls	r2, r2, #2
 800a31c:	f107 010c 	add.w	r1, r7, #12
 800a320:	300c      	adds	r0, #12
 800a322:	f7fd fbb2 	bl	8007a8a <memcpy>
 800a326:	2201      	movs	r2, #1
 800a328:	4629      	mov	r1, r5
 800a32a:	4620      	mov	r0, r4
 800a32c:	f000 ffcc 	bl	800b2c8 <__lshift>
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	f103 0901 	add.w	r9, r3, #1
 800a336:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a33a:	4413      	add	r3, r2
 800a33c:	9305      	str	r3, [sp, #20]
 800a33e:	f00a 0301 	and.w	r3, sl, #1
 800a342:	46b8      	mov	r8, r7
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	4607      	mov	r7, r0
 800a348:	4631      	mov	r1, r6
 800a34a:	ee18 0a10 	vmov	r0, s16
 800a34e:	f7ff fa75 	bl	800983c <quorem>
 800a352:	4641      	mov	r1, r8
 800a354:	9002      	str	r0, [sp, #8]
 800a356:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a35a:	ee18 0a10 	vmov	r0, s16
 800a35e:	f001 f823 	bl	800b3a8 <__mcmp>
 800a362:	463a      	mov	r2, r7
 800a364:	9003      	str	r0, [sp, #12]
 800a366:	4631      	mov	r1, r6
 800a368:	4620      	mov	r0, r4
 800a36a:	f001 f839 	bl	800b3e0 <__mdiff>
 800a36e:	68c2      	ldr	r2, [r0, #12]
 800a370:	f109 3bff 	add.w	fp, r9, #4294967295
 800a374:	4605      	mov	r5, r0
 800a376:	bb02      	cbnz	r2, 800a3ba <_dtoa_r+0xa62>
 800a378:	4601      	mov	r1, r0
 800a37a:	ee18 0a10 	vmov	r0, s16
 800a37e:	f001 f813 	bl	800b3a8 <__mcmp>
 800a382:	4602      	mov	r2, r0
 800a384:	4629      	mov	r1, r5
 800a386:	4620      	mov	r0, r4
 800a388:	9207      	str	r2, [sp, #28]
 800a38a:	f000 fd81 	bl	800ae90 <_Bfree>
 800a38e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a392:	ea43 0102 	orr.w	r1, r3, r2
 800a396:	9b04      	ldr	r3, [sp, #16]
 800a398:	430b      	orrs	r3, r1
 800a39a:	464d      	mov	r5, r9
 800a39c:	d10f      	bne.n	800a3be <_dtoa_r+0xa66>
 800a39e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3a2:	d02a      	beq.n	800a3fa <_dtoa_r+0xaa2>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd02      	ble.n	800a3b0 <_dtoa_r+0xa58>
 800a3aa:	9b02      	ldr	r3, [sp, #8]
 800a3ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a3b0:	f88b a000 	strb.w	sl, [fp]
 800a3b4:	e775      	b.n	800a2a2 <_dtoa_r+0x94a>
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	e7ba      	b.n	800a330 <_dtoa_r+0x9d8>
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	e7e2      	b.n	800a384 <_dtoa_r+0xa2c>
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	db04      	blt.n	800a3ce <_dtoa_r+0xa76>
 800a3c4:	9906      	ldr	r1, [sp, #24]
 800a3c6:	430b      	orrs	r3, r1
 800a3c8:	9904      	ldr	r1, [sp, #16]
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	d122      	bne.n	800a414 <_dtoa_r+0xabc>
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	ddee      	ble.n	800a3b0 <_dtoa_r+0xa58>
 800a3d2:	ee18 1a10 	vmov	r1, s16
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 ff75 	bl	800b2c8 <__lshift>
 800a3de:	4631      	mov	r1, r6
 800a3e0:	ee08 0a10 	vmov	s16, r0
 800a3e4:	f000 ffe0 	bl	800b3a8 <__mcmp>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	dc03      	bgt.n	800a3f4 <_dtoa_r+0xa9c>
 800a3ec:	d1e0      	bne.n	800a3b0 <_dtoa_r+0xa58>
 800a3ee:	f01a 0f01 	tst.w	sl, #1
 800a3f2:	d0dd      	beq.n	800a3b0 <_dtoa_r+0xa58>
 800a3f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3f8:	d1d7      	bne.n	800a3aa <_dtoa_r+0xa52>
 800a3fa:	2339      	movs	r3, #57	; 0x39
 800a3fc:	f88b 3000 	strb.w	r3, [fp]
 800a400:	462b      	mov	r3, r5
 800a402:	461d      	mov	r5, r3
 800a404:	3b01      	subs	r3, #1
 800a406:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a40a:	2a39      	cmp	r2, #57	; 0x39
 800a40c:	d071      	beq.n	800a4f2 <_dtoa_r+0xb9a>
 800a40e:	3201      	adds	r2, #1
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	e746      	b.n	800a2a2 <_dtoa_r+0x94a>
 800a414:	2a00      	cmp	r2, #0
 800a416:	dd07      	ble.n	800a428 <_dtoa_r+0xad0>
 800a418:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a41c:	d0ed      	beq.n	800a3fa <_dtoa_r+0xaa2>
 800a41e:	f10a 0301 	add.w	r3, sl, #1
 800a422:	f88b 3000 	strb.w	r3, [fp]
 800a426:	e73c      	b.n	800a2a2 <_dtoa_r+0x94a>
 800a428:	9b05      	ldr	r3, [sp, #20]
 800a42a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a42e:	4599      	cmp	r9, r3
 800a430:	d047      	beq.n	800a4c2 <_dtoa_r+0xb6a>
 800a432:	ee18 1a10 	vmov	r1, s16
 800a436:	2300      	movs	r3, #0
 800a438:	220a      	movs	r2, #10
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 fd4a 	bl	800aed4 <__multadd>
 800a440:	45b8      	cmp	r8, r7
 800a442:	ee08 0a10 	vmov	s16, r0
 800a446:	f04f 0300 	mov.w	r3, #0
 800a44a:	f04f 020a 	mov.w	r2, #10
 800a44e:	4641      	mov	r1, r8
 800a450:	4620      	mov	r0, r4
 800a452:	d106      	bne.n	800a462 <_dtoa_r+0xb0a>
 800a454:	f000 fd3e 	bl	800aed4 <__multadd>
 800a458:	4680      	mov	r8, r0
 800a45a:	4607      	mov	r7, r0
 800a45c:	f109 0901 	add.w	r9, r9, #1
 800a460:	e772      	b.n	800a348 <_dtoa_r+0x9f0>
 800a462:	f000 fd37 	bl	800aed4 <__multadd>
 800a466:	4639      	mov	r1, r7
 800a468:	4680      	mov	r8, r0
 800a46a:	2300      	movs	r3, #0
 800a46c:	220a      	movs	r2, #10
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 fd30 	bl	800aed4 <__multadd>
 800a474:	4607      	mov	r7, r0
 800a476:	e7f1      	b.n	800a45c <_dtoa_r+0xb04>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	9302      	str	r3, [sp, #8]
 800a47c:	9d01      	ldr	r5, [sp, #4]
 800a47e:	ee18 0a10 	vmov	r0, s16
 800a482:	4631      	mov	r1, r6
 800a484:	f7ff f9da 	bl	800983c <quorem>
 800a488:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	f805 ab01 	strb.w	sl, [r5], #1
 800a492:	1aea      	subs	r2, r5, r3
 800a494:	9b02      	ldr	r3, [sp, #8]
 800a496:	4293      	cmp	r3, r2
 800a498:	dd09      	ble.n	800a4ae <_dtoa_r+0xb56>
 800a49a:	ee18 1a10 	vmov	r1, s16
 800a49e:	2300      	movs	r3, #0
 800a4a0:	220a      	movs	r2, #10
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 fd16 	bl	800aed4 <__multadd>
 800a4a8:	ee08 0a10 	vmov	s16, r0
 800a4ac:	e7e7      	b.n	800a47e <_dtoa_r+0xb26>
 800a4ae:	9b02      	ldr	r3, [sp, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfc8      	it	gt
 800a4b4:	461d      	movgt	r5, r3
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	bfd8      	it	le
 800a4ba:	2501      	movle	r5, #1
 800a4bc:	441d      	add	r5, r3
 800a4be:	f04f 0800 	mov.w	r8, #0
 800a4c2:	ee18 1a10 	vmov	r1, s16
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fefd 	bl	800b2c8 <__lshift>
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	ee08 0a10 	vmov	s16, r0
 800a4d4:	f000 ff68 	bl	800b3a8 <__mcmp>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	dc91      	bgt.n	800a400 <_dtoa_r+0xaa8>
 800a4dc:	d102      	bne.n	800a4e4 <_dtoa_r+0xb8c>
 800a4de:	f01a 0f01 	tst.w	sl, #1
 800a4e2:	d18d      	bne.n	800a400 <_dtoa_r+0xaa8>
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	461d      	mov	r5, r3
 800a4e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ec:	2a30      	cmp	r2, #48	; 0x30
 800a4ee:	d0fa      	beq.n	800a4e6 <_dtoa_r+0xb8e>
 800a4f0:	e6d7      	b.n	800a2a2 <_dtoa_r+0x94a>
 800a4f2:	9a01      	ldr	r2, [sp, #4]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d184      	bne.n	800a402 <_dtoa_r+0xaaa>
 800a4f8:	9b00      	ldr	r3, [sp, #0]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	2331      	movs	r3, #49	; 0x31
 800a500:	7013      	strb	r3, [r2, #0]
 800a502:	e6ce      	b.n	800a2a2 <_dtoa_r+0x94a>
 800a504:	4b09      	ldr	r3, [pc, #36]	; (800a52c <_dtoa_r+0xbd4>)
 800a506:	f7ff ba95 	b.w	8009a34 <_dtoa_r+0xdc>
 800a50a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f47f aa6e 	bne.w	80099ee <_dtoa_r+0x96>
 800a512:	4b07      	ldr	r3, [pc, #28]	; (800a530 <_dtoa_r+0xbd8>)
 800a514:	f7ff ba8e 	b.w	8009a34 <_dtoa_r+0xdc>
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dcae      	bgt.n	800a47c <_dtoa_r+0xb24>
 800a51e:	9b06      	ldr	r3, [sp, #24]
 800a520:	2b02      	cmp	r3, #2
 800a522:	f73f aea8 	bgt.w	800a276 <_dtoa_r+0x91e>
 800a526:	e7a9      	b.n	800a47c <_dtoa_r+0xb24>
 800a528:	08028178 	.word	0x08028178
 800a52c:	08027f7c 	.word	0x08027f7c
 800a530:	080280f9 	.word	0x080280f9

0800a534 <__sflush_r>:
 800a534:	898a      	ldrh	r2, [r1, #12]
 800a536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	4605      	mov	r5, r0
 800a53c:	0710      	lsls	r0, r2, #28
 800a53e:	460c      	mov	r4, r1
 800a540:	d458      	bmi.n	800a5f4 <__sflush_r+0xc0>
 800a542:	684b      	ldr	r3, [r1, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	dc05      	bgt.n	800a554 <__sflush_r+0x20>
 800a548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dc02      	bgt.n	800a554 <__sflush_r+0x20>
 800a54e:	2000      	movs	r0, #0
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a556:	2e00      	cmp	r6, #0
 800a558:	d0f9      	beq.n	800a54e <__sflush_r+0x1a>
 800a55a:	2300      	movs	r3, #0
 800a55c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a560:	682f      	ldr	r7, [r5, #0]
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	d032      	beq.n	800a5cc <__sflush_r+0x98>
 800a566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	075a      	lsls	r2, r3, #29
 800a56c:	d505      	bpl.n	800a57a <__sflush_r+0x46>
 800a56e:	6863      	ldr	r3, [r4, #4]
 800a570:	1ac0      	subs	r0, r0, r3
 800a572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a574:	b10b      	cbz	r3, 800a57a <__sflush_r+0x46>
 800a576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a578:	1ac0      	subs	r0, r0, r3
 800a57a:	2300      	movs	r3, #0
 800a57c:	4602      	mov	r2, r0
 800a57e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a580:	6a21      	ldr	r1, [r4, #32]
 800a582:	4628      	mov	r0, r5
 800a584:	47b0      	blx	r6
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	d106      	bne.n	800a59a <__sflush_r+0x66>
 800a58c:	6829      	ldr	r1, [r5, #0]
 800a58e:	291d      	cmp	r1, #29
 800a590:	d82c      	bhi.n	800a5ec <__sflush_r+0xb8>
 800a592:	4a2a      	ldr	r2, [pc, #168]	; (800a63c <__sflush_r+0x108>)
 800a594:	40ca      	lsrs	r2, r1
 800a596:	07d6      	lsls	r6, r2, #31
 800a598:	d528      	bpl.n	800a5ec <__sflush_r+0xb8>
 800a59a:	2200      	movs	r2, #0
 800a59c:	6062      	str	r2, [r4, #4]
 800a59e:	04d9      	lsls	r1, r3, #19
 800a5a0:	6922      	ldr	r2, [r4, #16]
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	d504      	bpl.n	800a5b0 <__sflush_r+0x7c>
 800a5a6:	1c42      	adds	r2, r0, #1
 800a5a8:	d101      	bne.n	800a5ae <__sflush_r+0x7a>
 800a5aa:	682b      	ldr	r3, [r5, #0]
 800a5ac:	b903      	cbnz	r3, 800a5b0 <__sflush_r+0x7c>
 800a5ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a5b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5b2:	602f      	str	r7, [r5, #0]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	d0ca      	beq.n	800a54e <__sflush_r+0x1a>
 800a5b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5bc:	4299      	cmp	r1, r3
 800a5be:	d002      	beq.n	800a5c6 <__sflush_r+0x92>
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f001 f8fd 	bl	800b7c0 <_free_r>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a5ca:	e7c1      	b.n	800a550 <__sflush_r+0x1c>
 800a5cc:	6a21      	ldr	r1, [r4, #32]
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b0      	blx	r6
 800a5d4:	1c41      	adds	r1, r0, #1
 800a5d6:	d1c7      	bne.n	800a568 <__sflush_r+0x34>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d0c4      	beq.n	800a568 <__sflush_r+0x34>
 800a5de:	2b1d      	cmp	r3, #29
 800a5e0:	d001      	beq.n	800a5e6 <__sflush_r+0xb2>
 800a5e2:	2b16      	cmp	r3, #22
 800a5e4:	d101      	bne.n	800a5ea <__sflush_r+0xb6>
 800a5e6:	602f      	str	r7, [r5, #0]
 800a5e8:	e7b1      	b.n	800a54e <__sflush_r+0x1a>
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	e7ad      	b.n	800a550 <__sflush_r+0x1c>
 800a5f4:	690f      	ldr	r7, [r1, #16]
 800a5f6:	2f00      	cmp	r7, #0
 800a5f8:	d0a9      	beq.n	800a54e <__sflush_r+0x1a>
 800a5fa:	0793      	lsls	r3, r2, #30
 800a5fc:	680e      	ldr	r6, [r1, #0]
 800a5fe:	bf08      	it	eq
 800a600:	694b      	ldreq	r3, [r1, #20]
 800a602:	600f      	str	r7, [r1, #0]
 800a604:	bf18      	it	ne
 800a606:	2300      	movne	r3, #0
 800a608:	eba6 0807 	sub.w	r8, r6, r7
 800a60c:	608b      	str	r3, [r1, #8]
 800a60e:	f1b8 0f00 	cmp.w	r8, #0
 800a612:	dd9c      	ble.n	800a54e <__sflush_r+0x1a>
 800a614:	6a21      	ldr	r1, [r4, #32]
 800a616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a618:	4643      	mov	r3, r8
 800a61a:	463a      	mov	r2, r7
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b0      	blx	r6
 800a620:	2800      	cmp	r0, #0
 800a622:	dc06      	bgt.n	800a632 <__sflush_r+0xfe>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	e78e      	b.n	800a550 <__sflush_r+0x1c>
 800a632:	4407      	add	r7, r0
 800a634:	eba8 0800 	sub.w	r8, r8, r0
 800a638:	e7e9      	b.n	800a60e <__sflush_r+0xda>
 800a63a:	bf00      	nop
 800a63c:	20400001 	.word	0x20400001

0800a640 <_fflush_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	690b      	ldr	r3, [r1, #16]
 800a644:	4605      	mov	r5, r0
 800a646:	460c      	mov	r4, r1
 800a648:	b913      	cbnz	r3, 800a650 <_fflush_r+0x10>
 800a64a:	2500      	movs	r5, #0
 800a64c:	4628      	mov	r0, r5
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	b118      	cbz	r0, 800a65a <_fflush_r+0x1a>
 800a652:	6983      	ldr	r3, [r0, #24]
 800a654:	b90b      	cbnz	r3, 800a65a <_fflush_r+0x1a>
 800a656:	f7fd f953 	bl	8007900 <__sinit>
 800a65a:	4b14      	ldr	r3, [pc, #80]	; (800a6ac <_fflush_r+0x6c>)
 800a65c:	429c      	cmp	r4, r3
 800a65e:	d11b      	bne.n	800a698 <_fflush_r+0x58>
 800a660:	686c      	ldr	r4, [r5, #4]
 800a662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d0ef      	beq.n	800a64a <_fflush_r+0xa>
 800a66a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a66c:	07d0      	lsls	r0, r2, #31
 800a66e:	d404      	bmi.n	800a67a <_fflush_r+0x3a>
 800a670:	0599      	lsls	r1, r3, #22
 800a672:	d402      	bmi.n	800a67a <_fflush_r+0x3a>
 800a674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a676:	f7fd fa06 	bl	8007a86 <__retarget_lock_acquire_recursive>
 800a67a:	4628      	mov	r0, r5
 800a67c:	4621      	mov	r1, r4
 800a67e:	f7ff ff59 	bl	800a534 <__sflush_r>
 800a682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a684:	07da      	lsls	r2, r3, #31
 800a686:	4605      	mov	r5, r0
 800a688:	d4e0      	bmi.n	800a64c <_fflush_r+0xc>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	059b      	lsls	r3, r3, #22
 800a68e:	d4dd      	bmi.n	800a64c <_fflush_r+0xc>
 800a690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a692:	f7fd f9f9 	bl	8007a88 <__retarget_lock_release_recursive>
 800a696:	e7d9      	b.n	800a64c <_fflush_r+0xc>
 800a698:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <_fflush_r+0x70>)
 800a69a:	429c      	cmp	r4, r3
 800a69c:	d101      	bne.n	800a6a2 <_fflush_r+0x62>
 800a69e:	68ac      	ldr	r4, [r5, #8]
 800a6a0:	e7df      	b.n	800a662 <_fflush_r+0x22>
 800a6a2:	4b04      	ldr	r3, [pc, #16]	; (800a6b4 <_fflush_r+0x74>)
 800a6a4:	429c      	cmp	r4, r3
 800a6a6:	bf08      	it	eq
 800a6a8:	68ec      	ldreq	r4, [r5, #12]
 800a6aa:	e7da      	b.n	800a662 <_fflush_r+0x22>
 800a6ac:	08027f28 	.word	0x08027f28
 800a6b0:	08027f48 	.word	0x08027f48
 800a6b4:	08027f08 	.word	0x08027f08

0800a6b8 <rshift>:
 800a6b8:	6903      	ldr	r3, [r0, #16]
 800a6ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6c6:	f100 0414 	add.w	r4, r0, #20
 800a6ca:	dd45      	ble.n	800a758 <rshift+0xa0>
 800a6cc:	f011 011f 	ands.w	r1, r1, #31
 800a6d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6d8:	d10c      	bne.n	800a6f4 <rshift+0x3c>
 800a6da:	f100 0710 	add.w	r7, r0, #16
 800a6de:	4629      	mov	r1, r5
 800a6e0:	42b1      	cmp	r1, r6
 800a6e2:	d334      	bcc.n	800a74e <rshift+0x96>
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	1eea      	subs	r2, r5, #3
 800a6ea:	4296      	cmp	r6, r2
 800a6ec:	bf38      	it	cc
 800a6ee:	2300      	movcc	r3, #0
 800a6f0:	4423      	add	r3, r4
 800a6f2:	e015      	b.n	800a720 <rshift+0x68>
 800a6f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6f8:	f1c1 0820 	rsb	r8, r1, #32
 800a6fc:	40cf      	lsrs	r7, r1
 800a6fe:	f105 0e04 	add.w	lr, r5, #4
 800a702:	46a1      	mov	r9, r4
 800a704:	4576      	cmp	r6, lr
 800a706:	46f4      	mov	ip, lr
 800a708:	d815      	bhi.n	800a736 <rshift+0x7e>
 800a70a:	1a9a      	subs	r2, r3, r2
 800a70c:	0092      	lsls	r2, r2, #2
 800a70e:	3a04      	subs	r2, #4
 800a710:	3501      	adds	r5, #1
 800a712:	42ae      	cmp	r6, r5
 800a714:	bf38      	it	cc
 800a716:	2200      	movcc	r2, #0
 800a718:	18a3      	adds	r3, r4, r2
 800a71a:	50a7      	str	r7, [r4, r2]
 800a71c:	b107      	cbz	r7, 800a720 <rshift+0x68>
 800a71e:	3304      	adds	r3, #4
 800a720:	1b1a      	subs	r2, r3, r4
 800a722:	42a3      	cmp	r3, r4
 800a724:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a728:	bf08      	it	eq
 800a72a:	2300      	moveq	r3, #0
 800a72c:	6102      	str	r2, [r0, #16]
 800a72e:	bf08      	it	eq
 800a730:	6143      	streq	r3, [r0, #20]
 800a732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a736:	f8dc c000 	ldr.w	ip, [ip]
 800a73a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a73e:	ea4c 0707 	orr.w	r7, ip, r7
 800a742:	f849 7b04 	str.w	r7, [r9], #4
 800a746:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a74a:	40cf      	lsrs	r7, r1
 800a74c:	e7da      	b.n	800a704 <rshift+0x4c>
 800a74e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a752:	f847 cf04 	str.w	ip, [r7, #4]!
 800a756:	e7c3      	b.n	800a6e0 <rshift+0x28>
 800a758:	4623      	mov	r3, r4
 800a75a:	e7e1      	b.n	800a720 <rshift+0x68>

0800a75c <__hexdig_fun>:
 800a75c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a760:	2b09      	cmp	r3, #9
 800a762:	d802      	bhi.n	800a76a <__hexdig_fun+0xe>
 800a764:	3820      	subs	r0, #32
 800a766:	b2c0      	uxtb	r0, r0
 800a768:	4770      	bx	lr
 800a76a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d801      	bhi.n	800a776 <__hexdig_fun+0x1a>
 800a772:	3847      	subs	r0, #71	; 0x47
 800a774:	e7f7      	b.n	800a766 <__hexdig_fun+0xa>
 800a776:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a77a:	2b05      	cmp	r3, #5
 800a77c:	d801      	bhi.n	800a782 <__hexdig_fun+0x26>
 800a77e:	3827      	subs	r0, #39	; 0x27
 800a780:	e7f1      	b.n	800a766 <__hexdig_fun+0xa>
 800a782:	2000      	movs	r0, #0
 800a784:	4770      	bx	lr
	...

0800a788 <__gethex>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	ed2d 8b02 	vpush	{d8}
 800a790:	b089      	sub	sp, #36	; 0x24
 800a792:	ee08 0a10 	vmov	s16, r0
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	4bb4      	ldr	r3, [pc, #720]	; (800aa6c <__gethex+0x2e4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	468b      	mov	fp, r1
 800a7a2:	4690      	mov	r8, r2
 800a7a4:	f7f5 fd34 	bl	8000210 <strlen>
 800a7a8:	9b01      	ldr	r3, [sp, #4]
 800a7aa:	f8db 2000 	ldr.w	r2, [fp]
 800a7ae:	4403      	add	r3, r0
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a7b6:	9305      	str	r3, [sp, #20]
 800a7b8:	1c93      	adds	r3, r2, #2
 800a7ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a7be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a7c2:	32fe      	adds	r2, #254	; 0xfe
 800a7c4:	18d1      	adds	r1, r2, r3
 800a7c6:	461f      	mov	r7, r3
 800a7c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7cc:	9100      	str	r1, [sp, #0]
 800a7ce:	2830      	cmp	r0, #48	; 0x30
 800a7d0:	d0f8      	beq.n	800a7c4 <__gethex+0x3c>
 800a7d2:	f7ff ffc3 	bl	800a75c <__hexdig_fun>
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d13a      	bne.n	800a852 <__gethex+0xca>
 800a7dc:	9901      	ldr	r1, [sp, #4]
 800a7de:	4652      	mov	r2, sl
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f001 f9b1 	bl	800bb48 <strncmp>
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d168      	bne.n	800a8be <__gethex+0x136>
 800a7ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a7f0:	eb07 060a 	add.w	r6, r7, sl
 800a7f4:	f7ff ffb2 	bl	800a75c <__hexdig_fun>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d062      	beq.n	800a8c2 <__gethex+0x13a>
 800a7fc:	4633      	mov	r3, r6
 800a7fe:	7818      	ldrb	r0, [r3, #0]
 800a800:	2830      	cmp	r0, #48	; 0x30
 800a802:	461f      	mov	r7, r3
 800a804:	f103 0301 	add.w	r3, r3, #1
 800a808:	d0f9      	beq.n	800a7fe <__gethex+0x76>
 800a80a:	f7ff ffa7 	bl	800a75c <__hexdig_fun>
 800a80e:	2301      	movs	r3, #1
 800a810:	fab0 f480 	clz	r4, r0
 800a814:	0964      	lsrs	r4, r4, #5
 800a816:	4635      	mov	r5, r6
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	463a      	mov	r2, r7
 800a81c:	4616      	mov	r6, r2
 800a81e:	3201      	adds	r2, #1
 800a820:	7830      	ldrb	r0, [r6, #0]
 800a822:	f7ff ff9b 	bl	800a75c <__hexdig_fun>
 800a826:	2800      	cmp	r0, #0
 800a828:	d1f8      	bne.n	800a81c <__gethex+0x94>
 800a82a:	9901      	ldr	r1, [sp, #4]
 800a82c:	4652      	mov	r2, sl
 800a82e:	4630      	mov	r0, r6
 800a830:	f001 f98a 	bl	800bb48 <strncmp>
 800a834:	b980      	cbnz	r0, 800a858 <__gethex+0xd0>
 800a836:	b94d      	cbnz	r5, 800a84c <__gethex+0xc4>
 800a838:	eb06 050a 	add.w	r5, r6, sl
 800a83c:	462a      	mov	r2, r5
 800a83e:	4616      	mov	r6, r2
 800a840:	3201      	adds	r2, #1
 800a842:	7830      	ldrb	r0, [r6, #0]
 800a844:	f7ff ff8a 	bl	800a75c <__hexdig_fun>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d1f8      	bne.n	800a83e <__gethex+0xb6>
 800a84c:	1bad      	subs	r5, r5, r6
 800a84e:	00ad      	lsls	r5, r5, #2
 800a850:	e004      	b.n	800a85c <__gethex+0xd4>
 800a852:	2400      	movs	r4, #0
 800a854:	4625      	mov	r5, r4
 800a856:	e7e0      	b.n	800a81a <__gethex+0x92>
 800a858:	2d00      	cmp	r5, #0
 800a85a:	d1f7      	bne.n	800a84c <__gethex+0xc4>
 800a85c:	7833      	ldrb	r3, [r6, #0]
 800a85e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a862:	2b50      	cmp	r3, #80	; 0x50
 800a864:	d13b      	bne.n	800a8de <__gethex+0x156>
 800a866:	7873      	ldrb	r3, [r6, #1]
 800a868:	2b2b      	cmp	r3, #43	; 0x2b
 800a86a:	d02c      	beq.n	800a8c6 <__gethex+0x13e>
 800a86c:	2b2d      	cmp	r3, #45	; 0x2d
 800a86e:	d02e      	beq.n	800a8ce <__gethex+0x146>
 800a870:	1c71      	adds	r1, r6, #1
 800a872:	f04f 0900 	mov.w	r9, #0
 800a876:	7808      	ldrb	r0, [r1, #0]
 800a878:	f7ff ff70 	bl	800a75c <__hexdig_fun>
 800a87c:	1e43      	subs	r3, r0, #1
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b18      	cmp	r3, #24
 800a882:	d82c      	bhi.n	800a8de <__gethex+0x156>
 800a884:	f1a0 0210 	sub.w	r2, r0, #16
 800a888:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a88c:	f7ff ff66 	bl	800a75c <__hexdig_fun>
 800a890:	1e43      	subs	r3, r0, #1
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b18      	cmp	r3, #24
 800a896:	d91d      	bls.n	800a8d4 <__gethex+0x14c>
 800a898:	f1b9 0f00 	cmp.w	r9, #0
 800a89c:	d000      	beq.n	800a8a0 <__gethex+0x118>
 800a89e:	4252      	negs	r2, r2
 800a8a0:	4415      	add	r5, r2
 800a8a2:	f8cb 1000 	str.w	r1, [fp]
 800a8a6:	b1e4      	cbz	r4, 800a8e2 <__gethex+0x15a>
 800a8a8:	9b00      	ldr	r3, [sp, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bf14      	ite	ne
 800a8ae:	2700      	movne	r7, #0
 800a8b0:	2706      	moveq	r7, #6
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	b009      	add	sp, #36	; 0x24
 800a8b6:	ecbd 8b02 	vpop	{d8}
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	463e      	mov	r6, r7
 800a8c0:	4625      	mov	r5, r4
 800a8c2:	2401      	movs	r4, #1
 800a8c4:	e7ca      	b.n	800a85c <__gethex+0xd4>
 800a8c6:	f04f 0900 	mov.w	r9, #0
 800a8ca:	1cb1      	adds	r1, r6, #2
 800a8cc:	e7d3      	b.n	800a876 <__gethex+0xee>
 800a8ce:	f04f 0901 	mov.w	r9, #1
 800a8d2:	e7fa      	b.n	800a8ca <__gethex+0x142>
 800a8d4:	230a      	movs	r3, #10
 800a8d6:	fb03 0202 	mla	r2, r3, r2, r0
 800a8da:	3a10      	subs	r2, #16
 800a8dc:	e7d4      	b.n	800a888 <__gethex+0x100>
 800a8de:	4631      	mov	r1, r6
 800a8e0:	e7df      	b.n	800a8a2 <__gethex+0x11a>
 800a8e2:	1bf3      	subs	r3, r6, r7
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	dc0b      	bgt.n	800a904 <__gethex+0x17c>
 800a8ec:	ee18 0a10 	vmov	r0, s16
 800a8f0:	f000 fa8e 	bl	800ae10 <_Balloc>
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	b940      	cbnz	r0, 800a90a <__gethex+0x182>
 800a8f8:	4b5d      	ldr	r3, [pc, #372]	; (800aa70 <__gethex+0x2e8>)
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	21de      	movs	r1, #222	; 0xde
 800a8fe:	485d      	ldr	r0, [pc, #372]	; (800aa74 <__gethex+0x2ec>)
 800a900:	f001 f944 	bl	800bb8c <__assert_func>
 800a904:	3101      	adds	r1, #1
 800a906:	105b      	asrs	r3, r3, #1
 800a908:	e7ee      	b.n	800a8e8 <__gethex+0x160>
 800a90a:	f100 0914 	add.w	r9, r0, #20
 800a90e:	f04f 0b00 	mov.w	fp, #0
 800a912:	f1ca 0301 	rsb	r3, sl, #1
 800a916:	f8cd 9008 	str.w	r9, [sp, #8]
 800a91a:	f8cd b000 	str.w	fp, [sp]
 800a91e:	9306      	str	r3, [sp, #24]
 800a920:	42b7      	cmp	r7, r6
 800a922:	d340      	bcc.n	800a9a6 <__gethex+0x21e>
 800a924:	9802      	ldr	r0, [sp, #8]
 800a926:	9b00      	ldr	r3, [sp, #0]
 800a928:	f840 3b04 	str.w	r3, [r0], #4
 800a92c:	eba0 0009 	sub.w	r0, r0, r9
 800a930:	1080      	asrs	r0, r0, #2
 800a932:	0146      	lsls	r6, r0, #5
 800a934:	6120      	str	r0, [r4, #16]
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fb5c 	bl	800aff4 <__hi0bits>
 800a93c:	1a30      	subs	r0, r6, r0
 800a93e:	f8d8 6000 	ldr.w	r6, [r8]
 800a942:	42b0      	cmp	r0, r6
 800a944:	dd63      	ble.n	800aa0e <__gethex+0x286>
 800a946:	1b87      	subs	r7, r0, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 ff00 	bl	800b750 <__any_on>
 800a950:	4682      	mov	sl, r0
 800a952:	b1a8      	cbz	r0, 800a980 <__gethex+0x1f8>
 800a954:	1e7b      	subs	r3, r7, #1
 800a956:	1159      	asrs	r1, r3, #5
 800a958:	f003 021f 	and.w	r2, r3, #31
 800a95c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a960:	f04f 0a01 	mov.w	sl, #1
 800a964:	fa0a f202 	lsl.w	r2, sl, r2
 800a968:	420a      	tst	r2, r1
 800a96a:	d009      	beq.n	800a980 <__gethex+0x1f8>
 800a96c:	4553      	cmp	r3, sl
 800a96e:	dd05      	ble.n	800a97c <__gethex+0x1f4>
 800a970:	1eb9      	subs	r1, r7, #2
 800a972:	4620      	mov	r0, r4
 800a974:	f000 feec 	bl	800b750 <__any_on>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d145      	bne.n	800aa08 <__gethex+0x280>
 800a97c:	f04f 0a02 	mov.w	sl, #2
 800a980:	4639      	mov	r1, r7
 800a982:	4620      	mov	r0, r4
 800a984:	f7ff fe98 	bl	800a6b8 <rshift>
 800a988:	443d      	add	r5, r7
 800a98a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a98e:	42ab      	cmp	r3, r5
 800a990:	da4c      	bge.n	800aa2c <__gethex+0x2a4>
 800a992:	ee18 0a10 	vmov	r0, s16
 800a996:	4621      	mov	r1, r4
 800a998:	f000 fa7a 	bl	800ae90 <_Bfree>
 800a99c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	27a3      	movs	r7, #163	; 0xa3
 800a9a4:	e785      	b.n	800a8b2 <__gethex+0x12a>
 800a9a6:	1e73      	subs	r3, r6, #1
 800a9a8:	9a05      	ldr	r2, [sp, #20]
 800a9aa:	9303      	str	r3, [sp, #12]
 800a9ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d019      	beq.n	800a9e8 <__gethex+0x260>
 800a9b4:	f1bb 0f20 	cmp.w	fp, #32
 800a9b8:	d107      	bne.n	800a9ca <__gethex+0x242>
 800a9ba:	9b02      	ldr	r3, [sp, #8]
 800a9bc:	9a00      	ldr	r2, [sp, #0]
 800a9be:	f843 2b04 	str.w	r2, [r3], #4
 800a9c2:	9302      	str	r3, [sp, #8]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	469b      	mov	fp, r3
 800a9ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a9ce:	f7ff fec5 	bl	800a75c <__hexdig_fun>
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	f000 000f 	and.w	r0, r0, #15
 800a9d8:	fa00 f00b 	lsl.w	r0, r0, fp
 800a9dc:	4303      	orrs	r3, r0
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	f10b 0b04 	add.w	fp, fp, #4
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	e00d      	b.n	800aa04 <__gethex+0x27c>
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	9a06      	ldr	r2, [sp, #24]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	42bb      	cmp	r3, r7
 800a9f0:	d3e0      	bcc.n	800a9b4 <__gethex+0x22c>
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	9901      	ldr	r1, [sp, #4]
 800a9f6:	9307      	str	r3, [sp, #28]
 800a9f8:	4652      	mov	r2, sl
 800a9fa:	f001 f8a5 	bl	800bb48 <strncmp>
 800a9fe:	9b07      	ldr	r3, [sp, #28]
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d1d7      	bne.n	800a9b4 <__gethex+0x22c>
 800aa04:	461e      	mov	r6, r3
 800aa06:	e78b      	b.n	800a920 <__gethex+0x198>
 800aa08:	f04f 0a03 	mov.w	sl, #3
 800aa0c:	e7b8      	b.n	800a980 <__gethex+0x1f8>
 800aa0e:	da0a      	bge.n	800aa26 <__gethex+0x29e>
 800aa10:	1a37      	subs	r7, r6, r0
 800aa12:	4621      	mov	r1, r4
 800aa14:	ee18 0a10 	vmov	r0, s16
 800aa18:	463a      	mov	r2, r7
 800aa1a:	f000 fc55 	bl	800b2c8 <__lshift>
 800aa1e:	1bed      	subs	r5, r5, r7
 800aa20:	4604      	mov	r4, r0
 800aa22:	f100 0914 	add.w	r9, r0, #20
 800aa26:	f04f 0a00 	mov.w	sl, #0
 800aa2a:	e7ae      	b.n	800a98a <__gethex+0x202>
 800aa2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aa30:	42a8      	cmp	r0, r5
 800aa32:	dd72      	ble.n	800ab1a <__gethex+0x392>
 800aa34:	1b45      	subs	r5, r0, r5
 800aa36:	42ae      	cmp	r6, r5
 800aa38:	dc36      	bgt.n	800aaa8 <__gethex+0x320>
 800aa3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d02a      	beq.n	800aa98 <__gethex+0x310>
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d02c      	beq.n	800aaa0 <__gethex+0x318>
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d11c      	bne.n	800aa84 <__gethex+0x2fc>
 800aa4a:	42ae      	cmp	r6, r5
 800aa4c:	d11a      	bne.n	800aa84 <__gethex+0x2fc>
 800aa4e:	2e01      	cmp	r6, #1
 800aa50:	d112      	bne.n	800aa78 <__gethex+0x2f0>
 800aa52:	9a04      	ldr	r2, [sp, #16]
 800aa54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	f8c9 3000 	str.w	r3, [r9]
 800aa62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa64:	2762      	movs	r7, #98	; 0x62
 800aa66:	601c      	str	r4, [r3, #0]
 800aa68:	e723      	b.n	800a8b2 <__gethex+0x12a>
 800aa6a:	bf00      	nop
 800aa6c:	080281f0 	.word	0x080281f0
 800aa70:	08028178 	.word	0x08028178
 800aa74:	08028189 	.word	0x08028189
 800aa78:	1e71      	subs	r1, r6, #1
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fe68 	bl	800b750 <__any_on>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d1e6      	bne.n	800aa52 <__gethex+0x2ca>
 800aa84:	ee18 0a10 	vmov	r0, s16
 800aa88:	4621      	mov	r1, r4
 800aa8a:	f000 fa01 	bl	800ae90 <_Bfree>
 800aa8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa90:	2300      	movs	r3, #0
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	2750      	movs	r7, #80	; 0x50
 800aa96:	e70c      	b.n	800a8b2 <__gethex+0x12a>
 800aa98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f2      	bne.n	800aa84 <__gethex+0x2fc>
 800aa9e:	e7d8      	b.n	800aa52 <__gethex+0x2ca>
 800aaa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1d5      	bne.n	800aa52 <__gethex+0x2ca>
 800aaa6:	e7ed      	b.n	800aa84 <__gethex+0x2fc>
 800aaa8:	1e6f      	subs	r7, r5, #1
 800aaaa:	f1ba 0f00 	cmp.w	sl, #0
 800aaae:	d131      	bne.n	800ab14 <__gethex+0x38c>
 800aab0:	b127      	cbz	r7, 800aabc <__gethex+0x334>
 800aab2:	4639      	mov	r1, r7
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fe4b 	bl	800b750 <__any_on>
 800aaba:	4682      	mov	sl, r0
 800aabc:	117b      	asrs	r3, r7, #5
 800aabe:	2101      	movs	r1, #1
 800aac0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aac4:	f007 071f 	and.w	r7, r7, #31
 800aac8:	fa01 f707 	lsl.w	r7, r1, r7
 800aacc:	421f      	tst	r7, r3
 800aace:	4629      	mov	r1, r5
 800aad0:	4620      	mov	r0, r4
 800aad2:	bf18      	it	ne
 800aad4:	f04a 0a02 	orrne.w	sl, sl, #2
 800aad8:	1b76      	subs	r6, r6, r5
 800aada:	f7ff fded 	bl	800a6b8 <rshift>
 800aade:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aae2:	2702      	movs	r7, #2
 800aae4:	f1ba 0f00 	cmp.w	sl, #0
 800aae8:	d048      	beq.n	800ab7c <__gethex+0x3f4>
 800aaea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d015      	beq.n	800ab1e <__gethex+0x396>
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d017      	beq.n	800ab26 <__gethex+0x39e>
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d109      	bne.n	800ab0e <__gethex+0x386>
 800aafa:	f01a 0f02 	tst.w	sl, #2
 800aafe:	d006      	beq.n	800ab0e <__gethex+0x386>
 800ab00:	f8d9 0000 	ldr.w	r0, [r9]
 800ab04:	ea4a 0a00 	orr.w	sl, sl, r0
 800ab08:	f01a 0f01 	tst.w	sl, #1
 800ab0c:	d10e      	bne.n	800ab2c <__gethex+0x3a4>
 800ab0e:	f047 0710 	orr.w	r7, r7, #16
 800ab12:	e033      	b.n	800ab7c <__gethex+0x3f4>
 800ab14:	f04f 0a01 	mov.w	sl, #1
 800ab18:	e7d0      	b.n	800aabc <__gethex+0x334>
 800ab1a:	2701      	movs	r7, #1
 800ab1c:	e7e2      	b.n	800aae4 <__gethex+0x35c>
 800ab1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab20:	f1c3 0301 	rsb	r3, r3, #1
 800ab24:	9315      	str	r3, [sp, #84]	; 0x54
 800ab26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0f0      	beq.n	800ab0e <__gethex+0x386>
 800ab2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab30:	f104 0314 	add.w	r3, r4, #20
 800ab34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab3c:	f04f 0c00 	mov.w	ip, #0
 800ab40:	4618      	mov	r0, r3
 800ab42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab46:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab4a:	d01c      	beq.n	800ab86 <__gethex+0x3fe>
 800ab4c:	3201      	adds	r2, #1
 800ab4e:	6002      	str	r2, [r0, #0]
 800ab50:	2f02      	cmp	r7, #2
 800ab52:	f104 0314 	add.w	r3, r4, #20
 800ab56:	d13f      	bne.n	800abd8 <__gethex+0x450>
 800ab58:	f8d8 2000 	ldr.w	r2, [r8]
 800ab5c:	3a01      	subs	r2, #1
 800ab5e:	42b2      	cmp	r2, r6
 800ab60:	d10a      	bne.n	800ab78 <__gethex+0x3f0>
 800ab62:	1171      	asrs	r1, r6, #5
 800ab64:	2201      	movs	r2, #1
 800ab66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab6a:	f006 061f 	and.w	r6, r6, #31
 800ab6e:	fa02 f606 	lsl.w	r6, r2, r6
 800ab72:	421e      	tst	r6, r3
 800ab74:	bf18      	it	ne
 800ab76:	4617      	movne	r7, r2
 800ab78:	f047 0720 	orr.w	r7, r7, #32
 800ab7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab7e:	601c      	str	r4, [r3, #0]
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	601d      	str	r5, [r3, #0]
 800ab84:	e695      	b.n	800a8b2 <__gethex+0x12a>
 800ab86:	4299      	cmp	r1, r3
 800ab88:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab8c:	d8d8      	bhi.n	800ab40 <__gethex+0x3b8>
 800ab8e:	68a3      	ldr	r3, [r4, #8]
 800ab90:	459b      	cmp	fp, r3
 800ab92:	db19      	blt.n	800abc8 <__gethex+0x440>
 800ab94:	6861      	ldr	r1, [r4, #4]
 800ab96:	ee18 0a10 	vmov	r0, s16
 800ab9a:	3101      	adds	r1, #1
 800ab9c:	f000 f938 	bl	800ae10 <_Balloc>
 800aba0:	4681      	mov	r9, r0
 800aba2:	b918      	cbnz	r0, 800abac <__gethex+0x424>
 800aba4:	4b1a      	ldr	r3, [pc, #104]	; (800ac10 <__gethex+0x488>)
 800aba6:	4602      	mov	r2, r0
 800aba8:	2184      	movs	r1, #132	; 0x84
 800abaa:	e6a8      	b.n	800a8fe <__gethex+0x176>
 800abac:	6922      	ldr	r2, [r4, #16]
 800abae:	3202      	adds	r2, #2
 800abb0:	f104 010c 	add.w	r1, r4, #12
 800abb4:	0092      	lsls	r2, r2, #2
 800abb6:	300c      	adds	r0, #12
 800abb8:	f7fc ff67 	bl	8007a8a <memcpy>
 800abbc:	4621      	mov	r1, r4
 800abbe:	ee18 0a10 	vmov	r0, s16
 800abc2:	f000 f965 	bl	800ae90 <_Bfree>
 800abc6:	464c      	mov	r4, r9
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abd0:	6122      	str	r2, [r4, #16]
 800abd2:	2201      	movs	r2, #1
 800abd4:	615a      	str	r2, [r3, #20]
 800abd6:	e7bb      	b.n	800ab50 <__gethex+0x3c8>
 800abd8:	6922      	ldr	r2, [r4, #16]
 800abda:	455a      	cmp	r2, fp
 800abdc:	dd0b      	ble.n	800abf6 <__gethex+0x46e>
 800abde:	2101      	movs	r1, #1
 800abe0:	4620      	mov	r0, r4
 800abe2:	f7ff fd69 	bl	800a6b8 <rshift>
 800abe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abea:	3501      	adds	r5, #1
 800abec:	42ab      	cmp	r3, r5
 800abee:	f6ff aed0 	blt.w	800a992 <__gethex+0x20a>
 800abf2:	2701      	movs	r7, #1
 800abf4:	e7c0      	b.n	800ab78 <__gethex+0x3f0>
 800abf6:	f016 061f 	ands.w	r6, r6, #31
 800abfa:	d0fa      	beq.n	800abf2 <__gethex+0x46a>
 800abfc:	4453      	add	r3, sl
 800abfe:	f1c6 0620 	rsb	r6, r6, #32
 800ac02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac06:	f000 f9f5 	bl	800aff4 <__hi0bits>
 800ac0a:	42b0      	cmp	r0, r6
 800ac0c:	dbe7      	blt.n	800abde <__gethex+0x456>
 800ac0e:	e7f0      	b.n	800abf2 <__gethex+0x46a>
 800ac10:	08028178 	.word	0x08028178

0800ac14 <L_shift>:
 800ac14:	f1c2 0208 	rsb	r2, r2, #8
 800ac18:	0092      	lsls	r2, r2, #2
 800ac1a:	b570      	push	{r4, r5, r6, lr}
 800ac1c:	f1c2 0620 	rsb	r6, r2, #32
 800ac20:	6843      	ldr	r3, [r0, #4]
 800ac22:	6804      	ldr	r4, [r0, #0]
 800ac24:	fa03 f506 	lsl.w	r5, r3, r6
 800ac28:	432c      	orrs	r4, r5
 800ac2a:	40d3      	lsrs	r3, r2
 800ac2c:	6004      	str	r4, [r0, #0]
 800ac2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac32:	4288      	cmp	r0, r1
 800ac34:	d3f4      	bcc.n	800ac20 <L_shift+0xc>
 800ac36:	bd70      	pop	{r4, r5, r6, pc}

0800ac38 <__match>:
 800ac38:	b530      	push	{r4, r5, lr}
 800ac3a:	6803      	ldr	r3, [r0, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac42:	b914      	cbnz	r4, 800ac4a <__match+0x12>
 800ac44:	6003      	str	r3, [r0, #0]
 800ac46:	2001      	movs	r0, #1
 800ac48:	bd30      	pop	{r4, r5, pc}
 800ac4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac52:	2d19      	cmp	r5, #25
 800ac54:	bf98      	it	ls
 800ac56:	3220      	addls	r2, #32
 800ac58:	42a2      	cmp	r2, r4
 800ac5a:	d0f0      	beq.n	800ac3e <__match+0x6>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e7f3      	b.n	800ac48 <__match+0x10>

0800ac60 <__hexnan>:
 800ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	680b      	ldr	r3, [r1, #0]
 800ac66:	115e      	asrs	r6, r3, #5
 800ac68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac6c:	f013 031f 	ands.w	r3, r3, #31
 800ac70:	b087      	sub	sp, #28
 800ac72:	bf18      	it	ne
 800ac74:	3604      	addne	r6, #4
 800ac76:	2500      	movs	r5, #0
 800ac78:	1f37      	subs	r7, r6, #4
 800ac7a:	4690      	mov	r8, r2
 800ac7c:	6802      	ldr	r2, [r0, #0]
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	4682      	mov	sl, r0
 800ac82:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac86:	46b9      	mov	r9, r7
 800ac88:	463c      	mov	r4, r7
 800ac8a:	9502      	str	r5, [sp, #8]
 800ac8c:	46ab      	mov	fp, r5
 800ac8e:	7851      	ldrb	r1, [r2, #1]
 800ac90:	1c53      	adds	r3, r2, #1
 800ac92:	9303      	str	r3, [sp, #12]
 800ac94:	b341      	cbz	r1, 800ace8 <__hexnan+0x88>
 800ac96:	4608      	mov	r0, r1
 800ac98:	9205      	str	r2, [sp, #20]
 800ac9a:	9104      	str	r1, [sp, #16]
 800ac9c:	f7ff fd5e 	bl	800a75c <__hexdig_fun>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d14f      	bne.n	800ad44 <__hexnan+0xe4>
 800aca4:	9904      	ldr	r1, [sp, #16]
 800aca6:	9a05      	ldr	r2, [sp, #20]
 800aca8:	2920      	cmp	r1, #32
 800acaa:	d818      	bhi.n	800acde <__hexnan+0x7e>
 800acac:	9b02      	ldr	r3, [sp, #8]
 800acae:	459b      	cmp	fp, r3
 800acb0:	dd13      	ble.n	800acda <__hexnan+0x7a>
 800acb2:	454c      	cmp	r4, r9
 800acb4:	d206      	bcs.n	800acc4 <__hexnan+0x64>
 800acb6:	2d07      	cmp	r5, #7
 800acb8:	dc04      	bgt.n	800acc4 <__hexnan+0x64>
 800acba:	462a      	mov	r2, r5
 800acbc:	4649      	mov	r1, r9
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff ffa8 	bl	800ac14 <L_shift>
 800acc4:	4544      	cmp	r4, r8
 800acc6:	d950      	bls.n	800ad6a <__hexnan+0x10a>
 800acc8:	2300      	movs	r3, #0
 800acca:	f1a4 0904 	sub.w	r9, r4, #4
 800acce:	f844 3c04 	str.w	r3, [r4, #-4]
 800acd2:	f8cd b008 	str.w	fp, [sp, #8]
 800acd6:	464c      	mov	r4, r9
 800acd8:	461d      	mov	r5, r3
 800acda:	9a03      	ldr	r2, [sp, #12]
 800acdc:	e7d7      	b.n	800ac8e <__hexnan+0x2e>
 800acde:	2929      	cmp	r1, #41	; 0x29
 800ace0:	d156      	bne.n	800ad90 <__hexnan+0x130>
 800ace2:	3202      	adds	r2, #2
 800ace4:	f8ca 2000 	str.w	r2, [sl]
 800ace8:	f1bb 0f00 	cmp.w	fp, #0
 800acec:	d050      	beq.n	800ad90 <__hexnan+0x130>
 800acee:	454c      	cmp	r4, r9
 800acf0:	d206      	bcs.n	800ad00 <__hexnan+0xa0>
 800acf2:	2d07      	cmp	r5, #7
 800acf4:	dc04      	bgt.n	800ad00 <__hexnan+0xa0>
 800acf6:	462a      	mov	r2, r5
 800acf8:	4649      	mov	r1, r9
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7ff ff8a 	bl	800ac14 <L_shift>
 800ad00:	4544      	cmp	r4, r8
 800ad02:	d934      	bls.n	800ad6e <__hexnan+0x10e>
 800ad04:	f1a8 0204 	sub.w	r2, r8, #4
 800ad08:	4623      	mov	r3, r4
 800ad0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad12:	429f      	cmp	r7, r3
 800ad14:	d2f9      	bcs.n	800ad0a <__hexnan+0xaa>
 800ad16:	1b3b      	subs	r3, r7, r4
 800ad18:	f023 0303 	bic.w	r3, r3, #3
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	3401      	adds	r4, #1
 800ad20:	3e03      	subs	r6, #3
 800ad22:	42b4      	cmp	r4, r6
 800ad24:	bf88      	it	hi
 800ad26:	2304      	movhi	r3, #4
 800ad28:	4443      	add	r3, r8
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f843 2b04 	str.w	r2, [r3], #4
 800ad30:	429f      	cmp	r7, r3
 800ad32:	d2fb      	bcs.n	800ad2c <__hexnan+0xcc>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	b91b      	cbnz	r3, 800ad40 <__hexnan+0xe0>
 800ad38:	4547      	cmp	r7, r8
 800ad3a:	d127      	bne.n	800ad8c <__hexnan+0x12c>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	603b      	str	r3, [r7, #0]
 800ad40:	2005      	movs	r0, #5
 800ad42:	e026      	b.n	800ad92 <__hexnan+0x132>
 800ad44:	3501      	adds	r5, #1
 800ad46:	2d08      	cmp	r5, #8
 800ad48:	f10b 0b01 	add.w	fp, fp, #1
 800ad4c:	dd06      	ble.n	800ad5c <__hexnan+0xfc>
 800ad4e:	4544      	cmp	r4, r8
 800ad50:	d9c3      	bls.n	800acda <__hexnan+0x7a>
 800ad52:	2300      	movs	r3, #0
 800ad54:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad58:	2501      	movs	r5, #1
 800ad5a:	3c04      	subs	r4, #4
 800ad5c:	6822      	ldr	r2, [r4, #0]
 800ad5e:	f000 000f 	and.w	r0, r0, #15
 800ad62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad66:	6022      	str	r2, [r4, #0]
 800ad68:	e7b7      	b.n	800acda <__hexnan+0x7a>
 800ad6a:	2508      	movs	r5, #8
 800ad6c:	e7b5      	b.n	800acda <__hexnan+0x7a>
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d0df      	beq.n	800ad34 <__hexnan+0xd4>
 800ad74:	f04f 32ff 	mov.w	r2, #4294967295
 800ad78:	f1c3 0320 	rsb	r3, r3, #32
 800ad7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad84:	401a      	ands	r2, r3
 800ad86:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad8a:	e7d3      	b.n	800ad34 <__hexnan+0xd4>
 800ad8c:	3f04      	subs	r7, #4
 800ad8e:	e7d1      	b.n	800ad34 <__hexnan+0xd4>
 800ad90:	2004      	movs	r0, #4
 800ad92:	b007      	add	sp, #28
 800ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad98 <_localeconv_r>:
 800ad98:	4800      	ldr	r0, [pc, #0]	; (800ad9c <_localeconv_r+0x4>)
 800ad9a:	4770      	bx	lr
 800ad9c:	20000168 	.word	0x20000168

0800ada0 <_lseek_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d07      	ldr	r5, [pc, #28]	; (800adc0 <_lseek_r+0x20>)
 800ada4:	4604      	mov	r4, r0
 800ada6:	4608      	mov	r0, r1
 800ada8:	4611      	mov	r1, r2
 800adaa:	2200      	movs	r2, #0
 800adac:	602a      	str	r2, [r5, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	f7f6 ff90 	bl	8001cd4 <_lseek>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_lseek_r+0x1e>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_lseek_r+0x1e>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20003b9c 	.word	0x20003b9c

0800adc4 <malloc>:
 800adc4:	4b02      	ldr	r3, [pc, #8]	; (800add0 <malloc+0xc>)
 800adc6:	4601      	mov	r1, r0
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f7fc be95 	b.w	8007af8 <_malloc_r>
 800adce:	bf00      	nop
 800add0:	20000010 	.word	0x20000010

0800add4 <__ascii_mbtowc>:
 800add4:	b082      	sub	sp, #8
 800add6:	b901      	cbnz	r1, 800adda <__ascii_mbtowc+0x6>
 800add8:	a901      	add	r1, sp, #4
 800adda:	b142      	cbz	r2, 800adee <__ascii_mbtowc+0x1a>
 800addc:	b14b      	cbz	r3, 800adf2 <__ascii_mbtowc+0x1e>
 800adde:	7813      	ldrb	r3, [r2, #0]
 800ade0:	600b      	str	r3, [r1, #0]
 800ade2:	7812      	ldrb	r2, [r2, #0]
 800ade4:	1e10      	subs	r0, r2, #0
 800ade6:	bf18      	it	ne
 800ade8:	2001      	movne	r0, #1
 800adea:	b002      	add	sp, #8
 800adec:	4770      	bx	lr
 800adee:	4610      	mov	r0, r2
 800adf0:	e7fb      	b.n	800adea <__ascii_mbtowc+0x16>
 800adf2:	f06f 0001 	mvn.w	r0, #1
 800adf6:	e7f8      	b.n	800adea <__ascii_mbtowc+0x16>

0800adf8 <__malloc_lock>:
 800adf8:	4801      	ldr	r0, [pc, #4]	; (800ae00 <__malloc_lock+0x8>)
 800adfa:	f7fc be44 	b.w	8007a86 <__retarget_lock_acquire_recursive>
 800adfe:	bf00      	nop
 800ae00:	20003b90 	.word	0x20003b90

0800ae04 <__malloc_unlock>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__malloc_unlock+0x8>)
 800ae06:	f7fc be3f 	b.w	8007a88 <__retarget_lock_release_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	20003b90 	.word	0x20003b90

0800ae10 <_Balloc>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae14:	4604      	mov	r4, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	b976      	cbnz	r6, 800ae38 <_Balloc+0x28>
 800ae1a:	2010      	movs	r0, #16
 800ae1c:	f7ff ffd2 	bl	800adc4 <malloc>
 800ae20:	4602      	mov	r2, r0
 800ae22:	6260      	str	r0, [r4, #36]	; 0x24
 800ae24:	b920      	cbnz	r0, 800ae30 <_Balloc+0x20>
 800ae26:	4b18      	ldr	r3, [pc, #96]	; (800ae88 <_Balloc+0x78>)
 800ae28:	4818      	ldr	r0, [pc, #96]	; (800ae8c <_Balloc+0x7c>)
 800ae2a:	2166      	movs	r1, #102	; 0x66
 800ae2c:	f000 feae 	bl	800bb8c <__assert_func>
 800ae30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae34:	6006      	str	r6, [r0, #0]
 800ae36:	60c6      	str	r6, [r0, #12]
 800ae38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae3a:	68f3      	ldr	r3, [r6, #12]
 800ae3c:	b183      	cbz	r3, 800ae60 <_Balloc+0x50>
 800ae3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae46:	b9b8      	cbnz	r0, 800ae78 <_Balloc+0x68>
 800ae48:	2101      	movs	r1, #1
 800ae4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae4e:	1d72      	adds	r2, r6, #5
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fc9d 	bl	800b792 <_calloc_r>
 800ae58:	b160      	cbz	r0, 800ae74 <_Balloc+0x64>
 800ae5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae5e:	e00e      	b.n	800ae7e <_Balloc+0x6e>
 800ae60:	2221      	movs	r2, #33	; 0x21
 800ae62:	2104      	movs	r1, #4
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 fc94 	bl	800b792 <_calloc_r>
 800ae6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae6c:	60f0      	str	r0, [r6, #12]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1e4      	bne.n	800ae3e <_Balloc+0x2e>
 800ae74:	2000      	movs	r0, #0
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	6802      	ldr	r2, [r0, #0]
 800ae7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae84:	e7f7      	b.n	800ae76 <_Balloc+0x66>
 800ae86:	bf00      	nop
 800ae88:	08028106 	.word	0x08028106
 800ae8c:	08028204 	.word	0x08028204

0800ae90 <_Bfree>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae94:	4605      	mov	r5, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	b976      	cbnz	r6, 800aeb8 <_Bfree+0x28>
 800ae9a:	2010      	movs	r0, #16
 800ae9c:	f7ff ff92 	bl	800adc4 <malloc>
 800aea0:	4602      	mov	r2, r0
 800aea2:	6268      	str	r0, [r5, #36]	; 0x24
 800aea4:	b920      	cbnz	r0, 800aeb0 <_Bfree+0x20>
 800aea6:	4b09      	ldr	r3, [pc, #36]	; (800aecc <_Bfree+0x3c>)
 800aea8:	4809      	ldr	r0, [pc, #36]	; (800aed0 <_Bfree+0x40>)
 800aeaa:	218a      	movs	r1, #138	; 0x8a
 800aeac:	f000 fe6e 	bl	800bb8c <__assert_func>
 800aeb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeb4:	6006      	str	r6, [r0, #0]
 800aeb6:	60c6      	str	r6, [r0, #12]
 800aeb8:	b13c      	cbz	r4, 800aeca <_Bfree+0x3a>
 800aeba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aebc:	6862      	ldr	r2, [r4, #4]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aec4:	6021      	str	r1, [r4, #0]
 800aec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	08028106 	.word	0x08028106
 800aed0:	08028204 	.word	0x08028204

0800aed4 <__multadd>:
 800aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed8:	690d      	ldr	r5, [r1, #16]
 800aeda:	4607      	mov	r7, r0
 800aedc:	460c      	mov	r4, r1
 800aede:	461e      	mov	r6, r3
 800aee0:	f101 0c14 	add.w	ip, r1, #20
 800aee4:	2000      	movs	r0, #0
 800aee6:	f8dc 3000 	ldr.w	r3, [ip]
 800aeea:	b299      	uxth	r1, r3
 800aeec:	fb02 6101 	mla	r1, r2, r1, r6
 800aef0:	0c1e      	lsrs	r6, r3, #16
 800aef2:	0c0b      	lsrs	r3, r1, #16
 800aef4:	fb02 3306 	mla	r3, r2, r6, r3
 800aef8:	b289      	uxth	r1, r1
 800aefa:	3001      	adds	r0, #1
 800aefc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af00:	4285      	cmp	r5, r0
 800af02:	f84c 1b04 	str.w	r1, [ip], #4
 800af06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af0a:	dcec      	bgt.n	800aee6 <__multadd+0x12>
 800af0c:	b30e      	cbz	r6, 800af52 <__multadd+0x7e>
 800af0e:	68a3      	ldr	r3, [r4, #8]
 800af10:	42ab      	cmp	r3, r5
 800af12:	dc19      	bgt.n	800af48 <__multadd+0x74>
 800af14:	6861      	ldr	r1, [r4, #4]
 800af16:	4638      	mov	r0, r7
 800af18:	3101      	adds	r1, #1
 800af1a:	f7ff ff79 	bl	800ae10 <_Balloc>
 800af1e:	4680      	mov	r8, r0
 800af20:	b928      	cbnz	r0, 800af2e <__multadd+0x5a>
 800af22:	4602      	mov	r2, r0
 800af24:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <__multadd+0x84>)
 800af26:	480d      	ldr	r0, [pc, #52]	; (800af5c <__multadd+0x88>)
 800af28:	21b5      	movs	r1, #181	; 0xb5
 800af2a:	f000 fe2f 	bl	800bb8c <__assert_func>
 800af2e:	6922      	ldr	r2, [r4, #16]
 800af30:	3202      	adds	r2, #2
 800af32:	f104 010c 	add.w	r1, r4, #12
 800af36:	0092      	lsls	r2, r2, #2
 800af38:	300c      	adds	r0, #12
 800af3a:	f7fc fda6 	bl	8007a8a <memcpy>
 800af3e:	4621      	mov	r1, r4
 800af40:	4638      	mov	r0, r7
 800af42:	f7ff ffa5 	bl	800ae90 <_Bfree>
 800af46:	4644      	mov	r4, r8
 800af48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af4c:	3501      	adds	r5, #1
 800af4e:	615e      	str	r6, [r3, #20]
 800af50:	6125      	str	r5, [r4, #16]
 800af52:	4620      	mov	r0, r4
 800af54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af58:	08028178 	.word	0x08028178
 800af5c:	08028204 	.word	0x08028204

0800af60 <__s2b>:
 800af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af64:	460c      	mov	r4, r1
 800af66:	4615      	mov	r5, r2
 800af68:	461f      	mov	r7, r3
 800af6a:	2209      	movs	r2, #9
 800af6c:	3308      	adds	r3, #8
 800af6e:	4606      	mov	r6, r0
 800af70:	fb93 f3f2 	sdiv	r3, r3, r2
 800af74:	2100      	movs	r1, #0
 800af76:	2201      	movs	r2, #1
 800af78:	429a      	cmp	r2, r3
 800af7a:	db09      	blt.n	800af90 <__s2b+0x30>
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff ff47 	bl	800ae10 <_Balloc>
 800af82:	b940      	cbnz	r0, 800af96 <__s2b+0x36>
 800af84:	4602      	mov	r2, r0
 800af86:	4b19      	ldr	r3, [pc, #100]	; (800afec <__s2b+0x8c>)
 800af88:	4819      	ldr	r0, [pc, #100]	; (800aff0 <__s2b+0x90>)
 800af8a:	21ce      	movs	r1, #206	; 0xce
 800af8c:	f000 fdfe 	bl	800bb8c <__assert_func>
 800af90:	0052      	lsls	r2, r2, #1
 800af92:	3101      	adds	r1, #1
 800af94:	e7f0      	b.n	800af78 <__s2b+0x18>
 800af96:	9b08      	ldr	r3, [sp, #32]
 800af98:	6143      	str	r3, [r0, #20]
 800af9a:	2d09      	cmp	r5, #9
 800af9c:	f04f 0301 	mov.w	r3, #1
 800afa0:	6103      	str	r3, [r0, #16]
 800afa2:	dd16      	ble.n	800afd2 <__s2b+0x72>
 800afa4:	f104 0909 	add.w	r9, r4, #9
 800afa8:	46c8      	mov	r8, r9
 800afaa:	442c      	add	r4, r5
 800afac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afb0:	4601      	mov	r1, r0
 800afb2:	3b30      	subs	r3, #48	; 0x30
 800afb4:	220a      	movs	r2, #10
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ff8c 	bl	800aed4 <__multadd>
 800afbc:	45a0      	cmp	r8, r4
 800afbe:	d1f5      	bne.n	800afac <__s2b+0x4c>
 800afc0:	f1a5 0408 	sub.w	r4, r5, #8
 800afc4:	444c      	add	r4, r9
 800afc6:	1b2d      	subs	r5, r5, r4
 800afc8:	1963      	adds	r3, r4, r5
 800afca:	42bb      	cmp	r3, r7
 800afcc:	db04      	blt.n	800afd8 <__s2b+0x78>
 800afce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd2:	340a      	adds	r4, #10
 800afd4:	2509      	movs	r5, #9
 800afd6:	e7f6      	b.n	800afc6 <__s2b+0x66>
 800afd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afdc:	4601      	mov	r1, r0
 800afde:	3b30      	subs	r3, #48	; 0x30
 800afe0:	220a      	movs	r2, #10
 800afe2:	4630      	mov	r0, r6
 800afe4:	f7ff ff76 	bl	800aed4 <__multadd>
 800afe8:	e7ee      	b.n	800afc8 <__s2b+0x68>
 800afea:	bf00      	nop
 800afec:	08028178 	.word	0x08028178
 800aff0:	08028204 	.word	0x08028204

0800aff4 <__hi0bits>:
 800aff4:	0c03      	lsrs	r3, r0, #16
 800aff6:	041b      	lsls	r3, r3, #16
 800aff8:	b9d3      	cbnz	r3, 800b030 <__hi0bits+0x3c>
 800affa:	0400      	lsls	r0, r0, #16
 800affc:	2310      	movs	r3, #16
 800affe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b002:	bf04      	itt	eq
 800b004:	0200      	lsleq	r0, r0, #8
 800b006:	3308      	addeq	r3, #8
 800b008:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b00c:	bf04      	itt	eq
 800b00e:	0100      	lsleq	r0, r0, #4
 800b010:	3304      	addeq	r3, #4
 800b012:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b016:	bf04      	itt	eq
 800b018:	0080      	lsleq	r0, r0, #2
 800b01a:	3302      	addeq	r3, #2
 800b01c:	2800      	cmp	r0, #0
 800b01e:	db05      	blt.n	800b02c <__hi0bits+0x38>
 800b020:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b024:	f103 0301 	add.w	r3, r3, #1
 800b028:	bf08      	it	eq
 800b02a:	2320      	moveq	r3, #32
 800b02c:	4618      	mov	r0, r3
 800b02e:	4770      	bx	lr
 800b030:	2300      	movs	r3, #0
 800b032:	e7e4      	b.n	800affe <__hi0bits+0xa>

0800b034 <__lo0bits>:
 800b034:	6803      	ldr	r3, [r0, #0]
 800b036:	f013 0207 	ands.w	r2, r3, #7
 800b03a:	4601      	mov	r1, r0
 800b03c:	d00b      	beq.n	800b056 <__lo0bits+0x22>
 800b03e:	07da      	lsls	r2, r3, #31
 800b040:	d423      	bmi.n	800b08a <__lo0bits+0x56>
 800b042:	0798      	lsls	r0, r3, #30
 800b044:	bf49      	itett	mi
 800b046:	085b      	lsrmi	r3, r3, #1
 800b048:	089b      	lsrpl	r3, r3, #2
 800b04a:	2001      	movmi	r0, #1
 800b04c:	600b      	strmi	r3, [r1, #0]
 800b04e:	bf5c      	itt	pl
 800b050:	600b      	strpl	r3, [r1, #0]
 800b052:	2002      	movpl	r0, #2
 800b054:	4770      	bx	lr
 800b056:	b298      	uxth	r0, r3
 800b058:	b9a8      	cbnz	r0, 800b086 <__lo0bits+0x52>
 800b05a:	0c1b      	lsrs	r3, r3, #16
 800b05c:	2010      	movs	r0, #16
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	b90a      	cbnz	r2, 800b066 <__lo0bits+0x32>
 800b062:	3008      	adds	r0, #8
 800b064:	0a1b      	lsrs	r3, r3, #8
 800b066:	071a      	lsls	r2, r3, #28
 800b068:	bf04      	itt	eq
 800b06a:	091b      	lsreq	r3, r3, #4
 800b06c:	3004      	addeq	r0, #4
 800b06e:	079a      	lsls	r2, r3, #30
 800b070:	bf04      	itt	eq
 800b072:	089b      	lsreq	r3, r3, #2
 800b074:	3002      	addeq	r0, #2
 800b076:	07da      	lsls	r2, r3, #31
 800b078:	d403      	bmi.n	800b082 <__lo0bits+0x4e>
 800b07a:	085b      	lsrs	r3, r3, #1
 800b07c:	f100 0001 	add.w	r0, r0, #1
 800b080:	d005      	beq.n	800b08e <__lo0bits+0x5a>
 800b082:	600b      	str	r3, [r1, #0]
 800b084:	4770      	bx	lr
 800b086:	4610      	mov	r0, r2
 800b088:	e7e9      	b.n	800b05e <__lo0bits+0x2a>
 800b08a:	2000      	movs	r0, #0
 800b08c:	4770      	bx	lr
 800b08e:	2020      	movs	r0, #32
 800b090:	4770      	bx	lr
	...

0800b094 <__i2b>:
 800b094:	b510      	push	{r4, lr}
 800b096:	460c      	mov	r4, r1
 800b098:	2101      	movs	r1, #1
 800b09a:	f7ff feb9 	bl	800ae10 <_Balloc>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	b928      	cbnz	r0, 800b0ae <__i2b+0x1a>
 800b0a2:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <__i2b+0x24>)
 800b0a4:	4805      	ldr	r0, [pc, #20]	; (800b0bc <__i2b+0x28>)
 800b0a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0aa:	f000 fd6f 	bl	800bb8c <__assert_func>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	6144      	str	r4, [r0, #20]
 800b0b2:	6103      	str	r3, [r0, #16]
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	bf00      	nop
 800b0b8:	08028178 	.word	0x08028178
 800b0bc:	08028204 	.word	0x08028204

0800b0c0 <__multiply>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	4691      	mov	r9, r2
 800b0c6:	690a      	ldr	r2, [r1, #16]
 800b0c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	bfb8      	it	lt
 800b0d0:	460b      	movlt	r3, r1
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	bfbc      	itt	lt
 800b0d6:	464c      	movlt	r4, r9
 800b0d8:	4699      	movlt	r9, r3
 800b0da:	6927      	ldr	r7, [r4, #16]
 800b0dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0e0:	68a3      	ldr	r3, [r4, #8]
 800b0e2:	6861      	ldr	r1, [r4, #4]
 800b0e4:	eb07 060a 	add.w	r6, r7, sl
 800b0e8:	42b3      	cmp	r3, r6
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	bfb8      	it	lt
 800b0ee:	3101      	addlt	r1, #1
 800b0f0:	f7ff fe8e 	bl	800ae10 <_Balloc>
 800b0f4:	b930      	cbnz	r0, 800b104 <__multiply+0x44>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	4b44      	ldr	r3, [pc, #272]	; (800b20c <__multiply+0x14c>)
 800b0fa:	4845      	ldr	r0, [pc, #276]	; (800b210 <__multiply+0x150>)
 800b0fc:	f240 115d 	movw	r1, #349	; 0x15d
 800b100:	f000 fd44 	bl	800bb8c <__assert_func>
 800b104:	f100 0514 	add.w	r5, r0, #20
 800b108:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b10c:	462b      	mov	r3, r5
 800b10e:	2200      	movs	r2, #0
 800b110:	4543      	cmp	r3, r8
 800b112:	d321      	bcc.n	800b158 <__multiply+0x98>
 800b114:	f104 0314 	add.w	r3, r4, #20
 800b118:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b11c:	f109 0314 	add.w	r3, r9, #20
 800b120:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b124:	9202      	str	r2, [sp, #8]
 800b126:	1b3a      	subs	r2, r7, r4
 800b128:	3a15      	subs	r2, #21
 800b12a:	f022 0203 	bic.w	r2, r2, #3
 800b12e:	3204      	adds	r2, #4
 800b130:	f104 0115 	add.w	r1, r4, #21
 800b134:	428f      	cmp	r7, r1
 800b136:	bf38      	it	cc
 800b138:	2204      	movcc	r2, #4
 800b13a:	9201      	str	r2, [sp, #4]
 800b13c:	9a02      	ldr	r2, [sp, #8]
 800b13e:	9303      	str	r3, [sp, #12]
 800b140:	429a      	cmp	r2, r3
 800b142:	d80c      	bhi.n	800b15e <__multiply+0x9e>
 800b144:	2e00      	cmp	r6, #0
 800b146:	dd03      	ble.n	800b150 <__multiply+0x90>
 800b148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d05a      	beq.n	800b206 <__multiply+0x146>
 800b150:	6106      	str	r6, [r0, #16]
 800b152:	b005      	add	sp, #20
 800b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	f843 2b04 	str.w	r2, [r3], #4
 800b15c:	e7d8      	b.n	800b110 <__multiply+0x50>
 800b15e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b162:	f1ba 0f00 	cmp.w	sl, #0
 800b166:	d024      	beq.n	800b1b2 <__multiply+0xf2>
 800b168:	f104 0e14 	add.w	lr, r4, #20
 800b16c:	46a9      	mov	r9, r5
 800b16e:	f04f 0c00 	mov.w	ip, #0
 800b172:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b176:	f8d9 1000 	ldr.w	r1, [r9]
 800b17a:	fa1f fb82 	uxth.w	fp, r2
 800b17e:	b289      	uxth	r1, r1
 800b180:	fb0a 110b 	mla	r1, sl, fp, r1
 800b184:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b188:	f8d9 2000 	ldr.w	r2, [r9]
 800b18c:	4461      	add	r1, ip
 800b18e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b192:	fb0a c20b 	mla	r2, sl, fp, ip
 800b196:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b19a:	b289      	uxth	r1, r1
 800b19c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1a0:	4577      	cmp	r7, lr
 800b1a2:	f849 1b04 	str.w	r1, [r9], #4
 800b1a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1aa:	d8e2      	bhi.n	800b172 <__multiply+0xb2>
 800b1ac:	9a01      	ldr	r2, [sp, #4]
 800b1ae:	f845 c002 	str.w	ip, [r5, r2]
 800b1b2:	9a03      	ldr	r2, [sp, #12]
 800b1b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	f1b9 0f00 	cmp.w	r9, #0
 800b1be:	d020      	beq.n	800b202 <__multiply+0x142>
 800b1c0:	6829      	ldr	r1, [r5, #0]
 800b1c2:	f104 0c14 	add.w	ip, r4, #20
 800b1c6:	46ae      	mov	lr, r5
 800b1c8:	f04f 0a00 	mov.w	sl, #0
 800b1cc:	f8bc b000 	ldrh.w	fp, [ip]
 800b1d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1d4:	fb09 220b 	mla	r2, r9, fp, r2
 800b1d8:	4492      	add	sl, r2
 800b1da:	b289      	uxth	r1, r1
 800b1dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1e0:	f84e 1b04 	str.w	r1, [lr], #4
 800b1e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1e8:	f8be 1000 	ldrh.w	r1, [lr]
 800b1ec:	0c12      	lsrs	r2, r2, #16
 800b1ee:	fb09 1102 	mla	r1, r9, r2, r1
 800b1f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1f6:	4567      	cmp	r7, ip
 800b1f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1fc:	d8e6      	bhi.n	800b1cc <__multiply+0x10c>
 800b1fe:	9a01      	ldr	r2, [sp, #4]
 800b200:	50a9      	str	r1, [r5, r2]
 800b202:	3504      	adds	r5, #4
 800b204:	e79a      	b.n	800b13c <__multiply+0x7c>
 800b206:	3e01      	subs	r6, #1
 800b208:	e79c      	b.n	800b144 <__multiply+0x84>
 800b20a:	bf00      	nop
 800b20c:	08028178 	.word	0x08028178
 800b210:	08028204 	.word	0x08028204

0800b214 <__pow5mult>:
 800b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b218:	4615      	mov	r5, r2
 800b21a:	f012 0203 	ands.w	r2, r2, #3
 800b21e:	4606      	mov	r6, r0
 800b220:	460f      	mov	r7, r1
 800b222:	d007      	beq.n	800b234 <__pow5mult+0x20>
 800b224:	4c25      	ldr	r4, [pc, #148]	; (800b2bc <__pow5mult+0xa8>)
 800b226:	3a01      	subs	r2, #1
 800b228:	2300      	movs	r3, #0
 800b22a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b22e:	f7ff fe51 	bl	800aed4 <__multadd>
 800b232:	4607      	mov	r7, r0
 800b234:	10ad      	asrs	r5, r5, #2
 800b236:	d03d      	beq.n	800b2b4 <__pow5mult+0xa0>
 800b238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b23a:	b97c      	cbnz	r4, 800b25c <__pow5mult+0x48>
 800b23c:	2010      	movs	r0, #16
 800b23e:	f7ff fdc1 	bl	800adc4 <malloc>
 800b242:	4602      	mov	r2, r0
 800b244:	6270      	str	r0, [r6, #36]	; 0x24
 800b246:	b928      	cbnz	r0, 800b254 <__pow5mult+0x40>
 800b248:	4b1d      	ldr	r3, [pc, #116]	; (800b2c0 <__pow5mult+0xac>)
 800b24a:	481e      	ldr	r0, [pc, #120]	; (800b2c4 <__pow5mult+0xb0>)
 800b24c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b250:	f000 fc9c 	bl	800bb8c <__assert_func>
 800b254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b258:	6004      	str	r4, [r0, #0]
 800b25a:	60c4      	str	r4, [r0, #12]
 800b25c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b264:	b94c      	cbnz	r4, 800b27a <__pow5mult+0x66>
 800b266:	f240 2171 	movw	r1, #625	; 0x271
 800b26a:	4630      	mov	r0, r6
 800b26c:	f7ff ff12 	bl	800b094 <__i2b>
 800b270:	2300      	movs	r3, #0
 800b272:	f8c8 0008 	str.w	r0, [r8, #8]
 800b276:	4604      	mov	r4, r0
 800b278:	6003      	str	r3, [r0, #0]
 800b27a:	f04f 0900 	mov.w	r9, #0
 800b27e:	07eb      	lsls	r3, r5, #31
 800b280:	d50a      	bpl.n	800b298 <__pow5mult+0x84>
 800b282:	4639      	mov	r1, r7
 800b284:	4622      	mov	r2, r4
 800b286:	4630      	mov	r0, r6
 800b288:	f7ff ff1a 	bl	800b0c0 <__multiply>
 800b28c:	4639      	mov	r1, r7
 800b28e:	4680      	mov	r8, r0
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff fdfd 	bl	800ae90 <_Bfree>
 800b296:	4647      	mov	r7, r8
 800b298:	106d      	asrs	r5, r5, #1
 800b29a:	d00b      	beq.n	800b2b4 <__pow5mult+0xa0>
 800b29c:	6820      	ldr	r0, [r4, #0]
 800b29e:	b938      	cbnz	r0, 800b2b0 <__pow5mult+0x9c>
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f7ff ff0b 	bl	800b0c0 <__multiply>
 800b2aa:	6020      	str	r0, [r4, #0]
 800b2ac:	f8c0 9000 	str.w	r9, [r0]
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	e7e4      	b.n	800b27e <__pow5mult+0x6a>
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ba:	bf00      	nop
 800b2bc:	08028350 	.word	0x08028350
 800b2c0:	08028106 	.word	0x08028106
 800b2c4:	08028204 	.word	0x08028204

0800b2c8 <__lshift>:
 800b2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2cc:	460c      	mov	r4, r1
 800b2ce:	6849      	ldr	r1, [r1, #4]
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	4607      	mov	r7, r0
 800b2da:	4691      	mov	r9, r2
 800b2dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2e0:	f108 0601 	add.w	r6, r8, #1
 800b2e4:	42b3      	cmp	r3, r6
 800b2e6:	db0b      	blt.n	800b300 <__lshift+0x38>
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff fd91 	bl	800ae10 <_Balloc>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	b948      	cbnz	r0, 800b306 <__lshift+0x3e>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4b2a      	ldr	r3, [pc, #168]	; (800b3a0 <__lshift+0xd8>)
 800b2f6:	482b      	ldr	r0, [pc, #172]	; (800b3a4 <__lshift+0xdc>)
 800b2f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2fc:	f000 fc46 	bl	800bb8c <__assert_func>
 800b300:	3101      	adds	r1, #1
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	e7ee      	b.n	800b2e4 <__lshift+0x1c>
 800b306:	2300      	movs	r3, #0
 800b308:	f100 0114 	add.w	r1, r0, #20
 800b30c:	f100 0210 	add.w	r2, r0, #16
 800b310:	4618      	mov	r0, r3
 800b312:	4553      	cmp	r3, sl
 800b314:	db37      	blt.n	800b386 <__lshift+0xbe>
 800b316:	6920      	ldr	r0, [r4, #16]
 800b318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b31c:	f104 0314 	add.w	r3, r4, #20
 800b320:	f019 091f 	ands.w	r9, r9, #31
 800b324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b328:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b32c:	d02f      	beq.n	800b38e <__lshift+0xc6>
 800b32e:	f1c9 0e20 	rsb	lr, r9, #32
 800b332:	468a      	mov	sl, r1
 800b334:	f04f 0c00 	mov.w	ip, #0
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	fa02 f209 	lsl.w	r2, r2, r9
 800b33e:	ea42 020c 	orr.w	r2, r2, ip
 800b342:	f84a 2b04 	str.w	r2, [sl], #4
 800b346:	f853 2b04 	ldr.w	r2, [r3], #4
 800b34a:	4298      	cmp	r0, r3
 800b34c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b350:	d8f2      	bhi.n	800b338 <__lshift+0x70>
 800b352:	1b03      	subs	r3, r0, r4
 800b354:	3b15      	subs	r3, #21
 800b356:	f023 0303 	bic.w	r3, r3, #3
 800b35a:	3304      	adds	r3, #4
 800b35c:	f104 0215 	add.w	r2, r4, #21
 800b360:	4290      	cmp	r0, r2
 800b362:	bf38      	it	cc
 800b364:	2304      	movcc	r3, #4
 800b366:	f841 c003 	str.w	ip, [r1, r3]
 800b36a:	f1bc 0f00 	cmp.w	ip, #0
 800b36e:	d001      	beq.n	800b374 <__lshift+0xac>
 800b370:	f108 0602 	add.w	r6, r8, #2
 800b374:	3e01      	subs	r6, #1
 800b376:	4638      	mov	r0, r7
 800b378:	612e      	str	r6, [r5, #16]
 800b37a:	4621      	mov	r1, r4
 800b37c:	f7ff fd88 	bl	800ae90 <_Bfree>
 800b380:	4628      	mov	r0, r5
 800b382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b386:	f842 0f04 	str.w	r0, [r2, #4]!
 800b38a:	3301      	adds	r3, #1
 800b38c:	e7c1      	b.n	800b312 <__lshift+0x4a>
 800b38e:	3904      	subs	r1, #4
 800b390:	f853 2b04 	ldr.w	r2, [r3], #4
 800b394:	f841 2f04 	str.w	r2, [r1, #4]!
 800b398:	4298      	cmp	r0, r3
 800b39a:	d8f9      	bhi.n	800b390 <__lshift+0xc8>
 800b39c:	e7ea      	b.n	800b374 <__lshift+0xac>
 800b39e:	bf00      	nop
 800b3a0:	08028178 	.word	0x08028178
 800b3a4:	08028204 	.word	0x08028204

0800b3a8 <__mcmp>:
 800b3a8:	b530      	push	{r4, r5, lr}
 800b3aa:	6902      	ldr	r2, [r0, #16]
 800b3ac:	690c      	ldr	r4, [r1, #16]
 800b3ae:	1b12      	subs	r2, r2, r4
 800b3b0:	d10e      	bne.n	800b3d0 <__mcmp+0x28>
 800b3b2:	f100 0314 	add.w	r3, r0, #20
 800b3b6:	3114      	adds	r1, #20
 800b3b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3c8:	42a5      	cmp	r5, r4
 800b3ca:	d003      	beq.n	800b3d4 <__mcmp+0x2c>
 800b3cc:	d305      	bcc.n	800b3da <__mcmp+0x32>
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	bd30      	pop	{r4, r5, pc}
 800b3d4:	4283      	cmp	r3, r0
 800b3d6:	d3f3      	bcc.n	800b3c0 <__mcmp+0x18>
 800b3d8:	e7fa      	b.n	800b3d0 <__mcmp+0x28>
 800b3da:	f04f 32ff 	mov.w	r2, #4294967295
 800b3de:	e7f7      	b.n	800b3d0 <__mcmp+0x28>

0800b3e0 <__mdiff>:
 800b3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	4690      	mov	r8, r2
 800b3ee:	f7ff ffdb 	bl	800b3a8 <__mcmp>
 800b3f2:	1e05      	subs	r5, r0, #0
 800b3f4:	d110      	bne.n	800b418 <__mdiff+0x38>
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f7ff fd09 	bl	800ae10 <_Balloc>
 800b3fe:	b930      	cbnz	r0, 800b40e <__mdiff+0x2e>
 800b400:	4b3a      	ldr	r3, [pc, #232]	; (800b4ec <__mdiff+0x10c>)
 800b402:	4602      	mov	r2, r0
 800b404:	f240 2132 	movw	r1, #562	; 0x232
 800b408:	4839      	ldr	r0, [pc, #228]	; (800b4f0 <__mdiff+0x110>)
 800b40a:	f000 fbbf 	bl	800bb8c <__assert_func>
 800b40e:	2301      	movs	r3, #1
 800b410:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	bfa4      	itt	ge
 800b41a:	4643      	movge	r3, r8
 800b41c:	46a0      	movge	r8, r4
 800b41e:	4630      	mov	r0, r6
 800b420:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b424:	bfa6      	itte	ge
 800b426:	461c      	movge	r4, r3
 800b428:	2500      	movge	r5, #0
 800b42a:	2501      	movlt	r5, #1
 800b42c:	f7ff fcf0 	bl	800ae10 <_Balloc>
 800b430:	b920      	cbnz	r0, 800b43c <__mdiff+0x5c>
 800b432:	4b2e      	ldr	r3, [pc, #184]	; (800b4ec <__mdiff+0x10c>)
 800b434:	4602      	mov	r2, r0
 800b436:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b43a:	e7e5      	b.n	800b408 <__mdiff+0x28>
 800b43c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b440:	6926      	ldr	r6, [r4, #16]
 800b442:	60c5      	str	r5, [r0, #12]
 800b444:	f104 0914 	add.w	r9, r4, #20
 800b448:	f108 0514 	add.w	r5, r8, #20
 800b44c:	f100 0e14 	add.w	lr, r0, #20
 800b450:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b454:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b458:	f108 0210 	add.w	r2, r8, #16
 800b45c:	46f2      	mov	sl, lr
 800b45e:	2100      	movs	r1, #0
 800b460:	f859 3b04 	ldr.w	r3, [r9], #4
 800b464:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b468:	fa1f f883 	uxth.w	r8, r3
 800b46c:	fa11 f18b 	uxtah	r1, r1, fp
 800b470:	0c1b      	lsrs	r3, r3, #16
 800b472:	eba1 0808 	sub.w	r8, r1, r8
 800b476:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b47a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b47e:	fa1f f888 	uxth.w	r8, r8
 800b482:	1419      	asrs	r1, r3, #16
 800b484:	454e      	cmp	r6, r9
 800b486:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b48a:	f84a 3b04 	str.w	r3, [sl], #4
 800b48e:	d8e7      	bhi.n	800b460 <__mdiff+0x80>
 800b490:	1b33      	subs	r3, r6, r4
 800b492:	3b15      	subs	r3, #21
 800b494:	f023 0303 	bic.w	r3, r3, #3
 800b498:	3304      	adds	r3, #4
 800b49a:	3415      	adds	r4, #21
 800b49c:	42a6      	cmp	r6, r4
 800b49e:	bf38      	it	cc
 800b4a0:	2304      	movcc	r3, #4
 800b4a2:	441d      	add	r5, r3
 800b4a4:	4473      	add	r3, lr
 800b4a6:	469e      	mov	lr, r3
 800b4a8:	462e      	mov	r6, r5
 800b4aa:	4566      	cmp	r6, ip
 800b4ac:	d30e      	bcc.n	800b4cc <__mdiff+0xec>
 800b4ae:	f10c 0203 	add.w	r2, ip, #3
 800b4b2:	1b52      	subs	r2, r2, r5
 800b4b4:	f022 0203 	bic.w	r2, r2, #3
 800b4b8:	3d03      	subs	r5, #3
 800b4ba:	45ac      	cmp	ip, r5
 800b4bc:	bf38      	it	cc
 800b4be:	2200      	movcc	r2, #0
 800b4c0:	441a      	add	r2, r3
 800b4c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4c6:	b17b      	cbz	r3, 800b4e8 <__mdiff+0x108>
 800b4c8:	6107      	str	r7, [r0, #16]
 800b4ca:	e7a3      	b.n	800b414 <__mdiff+0x34>
 800b4cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b4d0:	fa11 f288 	uxtah	r2, r1, r8
 800b4d4:	1414      	asrs	r4, r2, #16
 800b4d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4da:	b292      	uxth	r2, r2
 800b4dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4e0:	f84e 2b04 	str.w	r2, [lr], #4
 800b4e4:	1421      	asrs	r1, r4, #16
 800b4e6:	e7e0      	b.n	800b4aa <__mdiff+0xca>
 800b4e8:	3f01      	subs	r7, #1
 800b4ea:	e7ea      	b.n	800b4c2 <__mdiff+0xe2>
 800b4ec:	08028178 	.word	0x08028178
 800b4f0:	08028204 	.word	0x08028204

0800b4f4 <__ulp>:
 800b4f4:	b082      	sub	sp, #8
 800b4f6:	ed8d 0b00 	vstr	d0, [sp]
 800b4fa:	9b01      	ldr	r3, [sp, #4]
 800b4fc:	4912      	ldr	r1, [pc, #72]	; (800b548 <__ulp+0x54>)
 800b4fe:	4019      	ands	r1, r3
 800b500:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b504:	2900      	cmp	r1, #0
 800b506:	dd05      	ble.n	800b514 <__ulp+0x20>
 800b508:	2200      	movs	r2, #0
 800b50a:	460b      	mov	r3, r1
 800b50c:	ec43 2b10 	vmov	d0, r2, r3
 800b510:	b002      	add	sp, #8
 800b512:	4770      	bx	lr
 800b514:	4249      	negs	r1, r1
 800b516:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b51a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b51e:	f04f 0200 	mov.w	r2, #0
 800b522:	f04f 0300 	mov.w	r3, #0
 800b526:	da04      	bge.n	800b532 <__ulp+0x3e>
 800b528:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b52c:	fa41 f300 	asr.w	r3, r1, r0
 800b530:	e7ec      	b.n	800b50c <__ulp+0x18>
 800b532:	f1a0 0114 	sub.w	r1, r0, #20
 800b536:	291e      	cmp	r1, #30
 800b538:	bfda      	itte	le
 800b53a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b53e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b542:	2101      	movgt	r1, #1
 800b544:	460a      	mov	r2, r1
 800b546:	e7e1      	b.n	800b50c <__ulp+0x18>
 800b548:	7ff00000 	.word	0x7ff00000

0800b54c <__b2d>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	6905      	ldr	r5, [r0, #16]
 800b550:	f100 0714 	add.w	r7, r0, #20
 800b554:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b558:	1f2e      	subs	r6, r5, #4
 800b55a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b55e:	4620      	mov	r0, r4
 800b560:	f7ff fd48 	bl	800aff4 <__hi0bits>
 800b564:	f1c0 0320 	rsb	r3, r0, #32
 800b568:	280a      	cmp	r0, #10
 800b56a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b5e8 <__b2d+0x9c>
 800b56e:	600b      	str	r3, [r1, #0]
 800b570:	dc14      	bgt.n	800b59c <__b2d+0x50>
 800b572:	f1c0 0e0b 	rsb	lr, r0, #11
 800b576:	fa24 f10e 	lsr.w	r1, r4, lr
 800b57a:	42b7      	cmp	r7, r6
 800b57c:	ea41 030c 	orr.w	r3, r1, ip
 800b580:	bf34      	ite	cc
 800b582:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b586:	2100      	movcs	r1, #0
 800b588:	3015      	adds	r0, #21
 800b58a:	fa04 f000 	lsl.w	r0, r4, r0
 800b58e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b592:	ea40 0201 	orr.w	r2, r0, r1
 800b596:	ec43 2b10 	vmov	d0, r2, r3
 800b59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b59c:	42b7      	cmp	r7, r6
 800b59e:	bf3a      	itte	cc
 800b5a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b5a8:	2100      	movcs	r1, #0
 800b5aa:	380b      	subs	r0, #11
 800b5ac:	d017      	beq.n	800b5de <__b2d+0x92>
 800b5ae:	f1c0 0c20 	rsb	ip, r0, #32
 800b5b2:	fa04 f500 	lsl.w	r5, r4, r0
 800b5b6:	42be      	cmp	r6, r7
 800b5b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b5bc:	ea45 0504 	orr.w	r5, r5, r4
 800b5c0:	bf8c      	ite	hi
 800b5c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b5c6:	2400      	movls	r4, #0
 800b5c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b5cc:	fa01 f000 	lsl.w	r0, r1, r0
 800b5d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b5d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b5d8:	ea40 0204 	orr.w	r2, r0, r4
 800b5dc:	e7db      	b.n	800b596 <__b2d+0x4a>
 800b5de:	ea44 030c 	orr.w	r3, r4, ip
 800b5e2:	460a      	mov	r2, r1
 800b5e4:	e7d7      	b.n	800b596 <__b2d+0x4a>
 800b5e6:	bf00      	nop
 800b5e8:	3ff00000 	.word	0x3ff00000

0800b5ec <__d2b>:
 800b5ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	4689      	mov	r9, r1
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	ec57 6b10 	vmov	r6, r7, d0
 800b5f8:	4690      	mov	r8, r2
 800b5fa:	f7ff fc09 	bl	800ae10 <_Balloc>
 800b5fe:	4604      	mov	r4, r0
 800b600:	b930      	cbnz	r0, 800b610 <__d2b+0x24>
 800b602:	4602      	mov	r2, r0
 800b604:	4b25      	ldr	r3, [pc, #148]	; (800b69c <__d2b+0xb0>)
 800b606:	4826      	ldr	r0, [pc, #152]	; (800b6a0 <__d2b+0xb4>)
 800b608:	f240 310a 	movw	r1, #778	; 0x30a
 800b60c:	f000 fabe 	bl	800bb8c <__assert_func>
 800b610:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b614:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b618:	bb35      	cbnz	r5, 800b668 <__d2b+0x7c>
 800b61a:	2e00      	cmp	r6, #0
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	d028      	beq.n	800b672 <__d2b+0x86>
 800b620:	4668      	mov	r0, sp
 800b622:	9600      	str	r6, [sp, #0]
 800b624:	f7ff fd06 	bl	800b034 <__lo0bits>
 800b628:	9900      	ldr	r1, [sp, #0]
 800b62a:	b300      	cbz	r0, 800b66e <__d2b+0x82>
 800b62c:	9a01      	ldr	r2, [sp, #4]
 800b62e:	f1c0 0320 	rsb	r3, r0, #32
 800b632:	fa02 f303 	lsl.w	r3, r2, r3
 800b636:	430b      	orrs	r3, r1
 800b638:	40c2      	lsrs	r2, r0
 800b63a:	6163      	str	r3, [r4, #20]
 800b63c:	9201      	str	r2, [sp, #4]
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	61a3      	str	r3, [r4, #24]
 800b642:	2b00      	cmp	r3, #0
 800b644:	bf14      	ite	ne
 800b646:	2202      	movne	r2, #2
 800b648:	2201      	moveq	r2, #1
 800b64a:	6122      	str	r2, [r4, #16]
 800b64c:	b1d5      	cbz	r5, 800b684 <__d2b+0x98>
 800b64e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b652:	4405      	add	r5, r0
 800b654:	f8c9 5000 	str.w	r5, [r9]
 800b658:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b65c:	f8c8 0000 	str.w	r0, [r8]
 800b660:	4620      	mov	r0, r4
 800b662:	b003      	add	sp, #12
 800b664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b66c:	e7d5      	b.n	800b61a <__d2b+0x2e>
 800b66e:	6161      	str	r1, [r4, #20]
 800b670:	e7e5      	b.n	800b63e <__d2b+0x52>
 800b672:	a801      	add	r0, sp, #4
 800b674:	f7ff fcde 	bl	800b034 <__lo0bits>
 800b678:	9b01      	ldr	r3, [sp, #4]
 800b67a:	6163      	str	r3, [r4, #20]
 800b67c:	2201      	movs	r2, #1
 800b67e:	6122      	str	r2, [r4, #16]
 800b680:	3020      	adds	r0, #32
 800b682:	e7e3      	b.n	800b64c <__d2b+0x60>
 800b684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b68c:	f8c9 0000 	str.w	r0, [r9]
 800b690:	6918      	ldr	r0, [r3, #16]
 800b692:	f7ff fcaf 	bl	800aff4 <__hi0bits>
 800b696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b69a:	e7df      	b.n	800b65c <__d2b+0x70>
 800b69c:	08028178 	.word	0x08028178
 800b6a0:	08028204 	.word	0x08028204

0800b6a4 <__ratio>:
 800b6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	4688      	mov	r8, r1
 800b6aa:	4669      	mov	r1, sp
 800b6ac:	4681      	mov	r9, r0
 800b6ae:	f7ff ff4d 	bl	800b54c <__b2d>
 800b6b2:	a901      	add	r1, sp, #4
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	ec55 4b10 	vmov	r4, r5, d0
 800b6ba:	f7ff ff47 	bl	800b54c <__b2d>
 800b6be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6c6:	eba3 0c02 	sub.w	ip, r3, r2
 800b6ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6ce:	1a9b      	subs	r3, r3, r2
 800b6d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b6d4:	ec51 0b10 	vmov	r0, r1, d0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	bfd6      	itet	le
 800b6dc:	460a      	movle	r2, r1
 800b6de:	462a      	movgt	r2, r5
 800b6e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6e4:	468b      	mov	fp, r1
 800b6e6:	462f      	mov	r7, r5
 800b6e8:	bfd4      	ite	le
 800b6ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b6ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	ee10 2a10 	vmov	r2, s0
 800b6f8:	465b      	mov	r3, fp
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	f7f5 f8c6 	bl	800088c <__aeabi_ddiv>
 800b700:	ec41 0b10 	vmov	d0, r0, r1
 800b704:	b003      	add	sp, #12
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b70a <__copybits>:
 800b70a:	3901      	subs	r1, #1
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	1149      	asrs	r1, r1, #5
 800b710:	6914      	ldr	r4, [r2, #16]
 800b712:	3101      	adds	r1, #1
 800b714:	f102 0314 	add.w	r3, r2, #20
 800b718:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b71c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b720:	1f05      	subs	r5, r0, #4
 800b722:	42a3      	cmp	r3, r4
 800b724:	d30c      	bcc.n	800b740 <__copybits+0x36>
 800b726:	1aa3      	subs	r3, r4, r2
 800b728:	3b11      	subs	r3, #17
 800b72a:	f023 0303 	bic.w	r3, r3, #3
 800b72e:	3211      	adds	r2, #17
 800b730:	42a2      	cmp	r2, r4
 800b732:	bf88      	it	hi
 800b734:	2300      	movhi	r3, #0
 800b736:	4418      	add	r0, r3
 800b738:	2300      	movs	r3, #0
 800b73a:	4288      	cmp	r0, r1
 800b73c:	d305      	bcc.n	800b74a <__copybits+0x40>
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	f853 6b04 	ldr.w	r6, [r3], #4
 800b744:	f845 6f04 	str.w	r6, [r5, #4]!
 800b748:	e7eb      	b.n	800b722 <__copybits+0x18>
 800b74a:	f840 3b04 	str.w	r3, [r0], #4
 800b74e:	e7f4      	b.n	800b73a <__copybits+0x30>

0800b750 <__any_on>:
 800b750:	f100 0214 	add.w	r2, r0, #20
 800b754:	6900      	ldr	r0, [r0, #16]
 800b756:	114b      	asrs	r3, r1, #5
 800b758:	4298      	cmp	r0, r3
 800b75a:	b510      	push	{r4, lr}
 800b75c:	db11      	blt.n	800b782 <__any_on+0x32>
 800b75e:	dd0a      	ble.n	800b776 <__any_on+0x26>
 800b760:	f011 011f 	ands.w	r1, r1, #31
 800b764:	d007      	beq.n	800b776 <__any_on+0x26>
 800b766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b76a:	fa24 f001 	lsr.w	r0, r4, r1
 800b76e:	fa00 f101 	lsl.w	r1, r0, r1
 800b772:	428c      	cmp	r4, r1
 800b774:	d10b      	bne.n	800b78e <__any_on+0x3e>
 800b776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d803      	bhi.n	800b786 <__any_on+0x36>
 800b77e:	2000      	movs	r0, #0
 800b780:	bd10      	pop	{r4, pc}
 800b782:	4603      	mov	r3, r0
 800b784:	e7f7      	b.n	800b776 <__any_on+0x26>
 800b786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b78a:	2900      	cmp	r1, #0
 800b78c:	d0f5      	beq.n	800b77a <__any_on+0x2a>
 800b78e:	2001      	movs	r0, #1
 800b790:	e7f6      	b.n	800b780 <__any_on+0x30>

0800b792 <_calloc_r>:
 800b792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b794:	fba1 2402 	umull	r2, r4, r1, r2
 800b798:	b94c      	cbnz	r4, 800b7ae <_calloc_r+0x1c>
 800b79a:	4611      	mov	r1, r2
 800b79c:	9201      	str	r2, [sp, #4]
 800b79e:	f7fc f9ab 	bl	8007af8 <_malloc_r>
 800b7a2:	9a01      	ldr	r2, [sp, #4]
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	b930      	cbnz	r0, 800b7b6 <_calloc_r+0x24>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	b003      	add	sp, #12
 800b7ac:	bd30      	pop	{r4, r5, pc}
 800b7ae:	220c      	movs	r2, #12
 800b7b0:	6002      	str	r2, [r0, #0]
 800b7b2:	2500      	movs	r5, #0
 800b7b4:	e7f8      	b.n	800b7a8 <_calloc_r+0x16>
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	f7fc f975 	bl	8007aa6 <memset>
 800b7bc:	e7f4      	b.n	800b7a8 <_calloc_r+0x16>
	...

0800b7c0 <_free_r>:
 800b7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7c2:	2900      	cmp	r1, #0
 800b7c4:	d044      	beq.n	800b850 <_free_r+0x90>
 800b7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7ca:	9001      	str	r0, [sp, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f1a1 0404 	sub.w	r4, r1, #4
 800b7d2:	bfb8      	it	lt
 800b7d4:	18e4      	addlt	r4, r4, r3
 800b7d6:	f7ff fb0f 	bl	800adf8 <__malloc_lock>
 800b7da:	4a1e      	ldr	r2, [pc, #120]	; (800b854 <_free_r+0x94>)
 800b7dc:	9801      	ldr	r0, [sp, #4]
 800b7de:	6813      	ldr	r3, [r2, #0]
 800b7e0:	b933      	cbnz	r3, 800b7f0 <_free_r+0x30>
 800b7e2:	6063      	str	r3, [r4, #4]
 800b7e4:	6014      	str	r4, [r2, #0]
 800b7e6:	b003      	add	sp, #12
 800b7e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ec:	f7ff bb0a 	b.w	800ae04 <__malloc_unlock>
 800b7f0:	42a3      	cmp	r3, r4
 800b7f2:	d908      	bls.n	800b806 <_free_r+0x46>
 800b7f4:	6825      	ldr	r5, [r4, #0]
 800b7f6:	1961      	adds	r1, r4, r5
 800b7f8:	428b      	cmp	r3, r1
 800b7fa:	bf01      	itttt	eq
 800b7fc:	6819      	ldreq	r1, [r3, #0]
 800b7fe:	685b      	ldreq	r3, [r3, #4]
 800b800:	1949      	addeq	r1, r1, r5
 800b802:	6021      	streq	r1, [r4, #0]
 800b804:	e7ed      	b.n	800b7e2 <_free_r+0x22>
 800b806:	461a      	mov	r2, r3
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	b10b      	cbz	r3, 800b810 <_free_r+0x50>
 800b80c:	42a3      	cmp	r3, r4
 800b80e:	d9fa      	bls.n	800b806 <_free_r+0x46>
 800b810:	6811      	ldr	r1, [r2, #0]
 800b812:	1855      	adds	r5, r2, r1
 800b814:	42a5      	cmp	r5, r4
 800b816:	d10b      	bne.n	800b830 <_free_r+0x70>
 800b818:	6824      	ldr	r4, [r4, #0]
 800b81a:	4421      	add	r1, r4
 800b81c:	1854      	adds	r4, r2, r1
 800b81e:	42a3      	cmp	r3, r4
 800b820:	6011      	str	r1, [r2, #0]
 800b822:	d1e0      	bne.n	800b7e6 <_free_r+0x26>
 800b824:	681c      	ldr	r4, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	6053      	str	r3, [r2, #4]
 800b82a:	4421      	add	r1, r4
 800b82c:	6011      	str	r1, [r2, #0]
 800b82e:	e7da      	b.n	800b7e6 <_free_r+0x26>
 800b830:	d902      	bls.n	800b838 <_free_r+0x78>
 800b832:	230c      	movs	r3, #12
 800b834:	6003      	str	r3, [r0, #0]
 800b836:	e7d6      	b.n	800b7e6 <_free_r+0x26>
 800b838:	6825      	ldr	r5, [r4, #0]
 800b83a:	1961      	adds	r1, r4, r5
 800b83c:	428b      	cmp	r3, r1
 800b83e:	bf04      	itt	eq
 800b840:	6819      	ldreq	r1, [r3, #0]
 800b842:	685b      	ldreq	r3, [r3, #4]
 800b844:	6063      	str	r3, [r4, #4]
 800b846:	bf04      	itt	eq
 800b848:	1949      	addeq	r1, r1, r5
 800b84a:	6021      	streq	r1, [r4, #0]
 800b84c:	6054      	str	r4, [r2, #4]
 800b84e:	e7ca      	b.n	800b7e6 <_free_r+0x26>
 800b850:	b003      	add	sp, #12
 800b852:	bd30      	pop	{r4, r5, pc}
 800b854:	20003b94 	.word	0x20003b94

0800b858 <__ssputs_r>:
 800b858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	688e      	ldr	r6, [r1, #8]
 800b85e:	429e      	cmp	r6, r3
 800b860:	4682      	mov	sl, r0
 800b862:	460c      	mov	r4, r1
 800b864:	4690      	mov	r8, r2
 800b866:	461f      	mov	r7, r3
 800b868:	d838      	bhi.n	800b8dc <__ssputs_r+0x84>
 800b86a:	898a      	ldrh	r2, [r1, #12]
 800b86c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b870:	d032      	beq.n	800b8d8 <__ssputs_r+0x80>
 800b872:	6825      	ldr	r5, [r4, #0]
 800b874:	6909      	ldr	r1, [r1, #16]
 800b876:	eba5 0901 	sub.w	r9, r5, r1
 800b87a:	6965      	ldr	r5, [r4, #20]
 800b87c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b884:	3301      	adds	r3, #1
 800b886:	444b      	add	r3, r9
 800b888:	106d      	asrs	r5, r5, #1
 800b88a:	429d      	cmp	r5, r3
 800b88c:	bf38      	it	cc
 800b88e:	461d      	movcc	r5, r3
 800b890:	0553      	lsls	r3, r2, #21
 800b892:	d531      	bpl.n	800b8f8 <__ssputs_r+0xa0>
 800b894:	4629      	mov	r1, r5
 800b896:	f7fc f92f 	bl	8007af8 <_malloc_r>
 800b89a:	4606      	mov	r6, r0
 800b89c:	b950      	cbnz	r0, 800b8b4 <__ssputs_r+0x5c>
 800b89e:	230c      	movs	r3, #12
 800b8a0:	f8ca 3000 	str.w	r3, [sl]
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b4:	6921      	ldr	r1, [r4, #16]
 800b8b6:	464a      	mov	r2, r9
 800b8b8:	f7fc f8e7 	bl	8007a8a <memcpy>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	6126      	str	r6, [r4, #16]
 800b8ca:	6165      	str	r5, [r4, #20]
 800b8cc:	444e      	add	r6, r9
 800b8ce:	eba5 0509 	sub.w	r5, r5, r9
 800b8d2:	6026      	str	r6, [r4, #0]
 800b8d4:	60a5      	str	r5, [r4, #8]
 800b8d6:	463e      	mov	r6, r7
 800b8d8:	42be      	cmp	r6, r7
 800b8da:	d900      	bls.n	800b8de <__ssputs_r+0x86>
 800b8dc:	463e      	mov	r6, r7
 800b8de:	6820      	ldr	r0, [r4, #0]
 800b8e0:	4632      	mov	r2, r6
 800b8e2:	4641      	mov	r1, r8
 800b8e4:	f000 f982 	bl	800bbec <memmove>
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	1b9b      	subs	r3, r3, r6
 800b8ec:	60a3      	str	r3, [r4, #8]
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	4433      	add	r3, r6
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	e7db      	b.n	800b8b0 <__ssputs_r+0x58>
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	f000 f991 	bl	800bc20 <_realloc_r>
 800b8fe:	4606      	mov	r6, r0
 800b900:	2800      	cmp	r0, #0
 800b902:	d1e1      	bne.n	800b8c8 <__ssputs_r+0x70>
 800b904:	6921      	ldr	r1, [r4, #16]
 800b906:	4650      	mov	r0, sl
 800b908:	f7ff ff5a 	bl	800b7c0 <_free_r>
 800b90c:	e7c7      	b.n	800b89e <__ssputs_r+0x46>
	...

0800b910 <_svfiprintf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	4698      	mov	r8, r3
 800b916:	898b      	ldrh	r3, [r1, #12]
 800b918:	061b      	lsls	r3, r3, #24
 800b91a:	b09d      	sub	sp, #116	; 0x74
 800b91c:	4607      	mov	r7, r0
 800b91e:	460d      	mov	r5, r1
 800b920:	4614      	mov	r4, r2
 800b922:	d50e      	bpl.n	800b942 <_svfiprintf_r+0x32>
 800b924:	690b      	ldr	r3, [r1, #16]
 800b926:	b963      	cbnz	r3, 800b942 <_svfiprintf_r+0x32>
 800b928:	2140      	movs	r1, #64	; 0x40
 800b92a:	f7fc f8e5 	bl	8007af8 <_malloc_r>
 800b92e:	6028      	str	r0, [r5, #0]
 800b930:	6128      	str	r0, [r5, #16]
 800b932:	b920      	cbnz	r0, 800b93e <_svfiprintf_r+0x2e>
 800b934:	230c      	movs	r3, #12
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	e0d1      	b.n	800bae2 <_svfiprintf_r+0x1d2>
 800b93e:	2340      	movs	r3, #64	; 0x40
 800b940:	616b      	str	r3, [r5, #20]
 800b942:	2300      	movs	r3, #0
 800b944:	9309      	str	r3, [sp, #36]	; 0x24
 800b946:	2320      	movs	r3, #32
 800b948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b94c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b950:	2330      	movs	r3, #48	; 0x30
 800b952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bafc <_svfiprintf_r+0x1ec>
 800b956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b95a:	f04f 0901 	mov.w	r9, #1
 800b95e:	4623      	mov	r3, r4
 800b960:	469a      	mov	sl, r3
 800b962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b966:	b10a      	cbz	r2, 800b96c <_svfiprintf_r+0x5c>
 800b968:	2a25      	cmp	r2, #37	; 0x25
 800b96a:	d1f9      	bne.n	800b960 <_svfiprintf_r+0x50>
 800b96c:	ebba 0b04 	subs.w	fp, sl, r4
 800b970:	d00b      	beq.n	800b98a <_svfiprintf_r+0x7a>
 800b972:	465b      	mov	r3, fp
 800b974:	4622      	mov	r2, r4
 800b976:	4629      	mov	r1, r5
 800b978:	4638      	mov	r0, r7
 800b97a:	f7ff ff6d 	bl	800b858 <__ssputs_r>
 800b97e:	3001      	adds	r0, #1
 800b980:	f000 80aa 	beq.w	800bad8 <_svfiprintf_r+0x1c8>
 800b984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b986:	445a      	add	r2, fp
 800b988:	9209      	str	r2, [sp, #36]	; 0x24
 800b98a:	f89a 3000 	ldrb.w	r3, [sl]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 80a2 	beq.w	800bad8 <_svfiprintf_r+0x1c8>
 800b994:	2300      	movs	r3, #0
 800b996:	f04f 32ff 	mov.w	r2, #4294967295
 800b99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b99e:	f10a 0a01 	add.w	sl, sl, #1
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	9307      	str	r3, [sp, #28]
 800b9a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9aa:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ac:	4654      	mov	r4, sl
 800b9ae:	2205      	movs	r2, #5
 800b9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b4:	4851      	ldr	r0, [pc, #324]	; (800bafc <_svfiprintf_r+0x1ec>)
 800b9b6:	f7f4 fc33 	bl	8000220 <memchr>
 800b9ba:	9a04      	ldr	r2, [sp, #16]
 800b9bc:	b9d8      	cbnz	r0, 800b9f6 <_svfiprintf_r+0xe6>
 800b9be:	06d0      	lsls	r0, r2, #27
 800b9c0:	bf44      	itt	mi
 800b9c2:	2320      	movmi	r3, #32
 800b9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9c8:	0711      	lsls	r1, r2, #28
 800b9ca:	bf44      	itt	mi
 800b9cc:	232b      	movmi	r3, #43	; 0x2b
 800b9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9d8:	d015      	beq.n	800ba06 <_svfiprintf_r+0xf6>
 800b9da:	9a07      	ldr	r2, [sp, #28]
 800b9dc:	4654      	mov	r4, sl
 800b9de:	2000      	movs	r0, #0
 800b9e0:	f04f 0c0a 	mov.w	ip, #10
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ea:	3b30      	subs	r3, #48	; 0x30
 800b9ec:	2b09      	cmp	r3, #9
 800b9ee:	d94e      	bls.n	800ba8e <_svfiprintf_r+0x17e>
 800b9f0:	b1b0      	cbz	r0, 800ba20 <_svfiprintf_r+0x110>
 800b9f2:	9207      	str	r2, [sp, #28]
 800b9f4:	e014      	b.n	800ba20 <_svfiprintf_r+0x110>
 800b9f6:	eba0 0308 	sub.w	r3, r0, r8
 800b9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	46a2      	mov	sl, r4
 800ba04:	e7d2      	b.n	800b9ac <_svfiprintf_r+0x9c>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	1d19      	adds	r1, r3, #4
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	9103      	str	r1, [sp, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfbb      	ittet	lt
 800ba12:	425b      	neglt	r3, r3
 800ba14:	f042 0202 	orrlt.w	r2, r2, #2
 800ba18:	9307      	strge	r3, [sp, #28]
 800ba1a:	9307      	strlt	r3, [sp, #28]
 800ba1c:	bfb8      	it	lt
 800ba1e:	9204      	strlt	r2, [sp, #16]
 800ba20:	7823      	ldrb	r3, [r4, #0]
 800ba22:	2b2e      	cmp	r3, #46	; 0x2e
 800ba24:	d10c      	bne.n	800ba40 <_svfiprintf_r+0x130>
 800ba26:	7863      	ldrb	r3, [r4, #1]
 800ba28:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2a:	d135      	bne.n	800ba98 <_svfiprintf_r+0x188>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	1d1a      	adds	r2, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	9203      	str	r2, [sp, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bfb8      	it	lt
 800ba38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba3c:	3402      	adds	r4, #2
 800ba3e:	9305      	str	r3, [sp, #20]
 800ba40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb0c <_svfiprintf_r+0x1fc>
 800ba44:	7821      	ldrb	r1, [r4, #0]
 800ba46:	2203      	movs	r2, #3
 800ba48:	4650      	mov	r0, sl
 800ba4a:	f7f4 fbe9 	bl	8000220 <memchr>
 800ba4e:	b140      	cbz	r0, 800ba62 <_svfiprintf_r+0x152>
 800ba50:	2340      	movs	r3, #64	; 0x40
 800ba52:	eba0 000a 	sub.w	r0, r0, sl
 800ba56:	fa03 f000 	lsl.w	r0, r3, r0
 800ba5a:	9b04      	ldr	r3, [sp, #16]
 800ba5c:	4303      	orrs	r3, r0
 800ba5e:	3401      	adds	r4, #1
 800ba60:	9304      	str	r3, [sp, #16]
 800ba62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba66:	4826      	ldr	r0, [pc, #152]	; (800bb00 <_svfiprintf_r+0x1f0>)
 800ba68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba6c:	2206      	movs	r2, #6
 800ba6e:	f7f4 fbd7 	bl	8000220 <memchr>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d038      	beq.n	800bae8 <_svfiprintf_r+0x1d8>
 800ba76:	4b23      	ldr	r3, [pc, #140]	; (800bb04 <_svfiprintf_r+0x1f4>)
 800ba78:	bb1b      	cbnz	r3, 800bac2 <_svfiprintf_r+0x1b2>
 800ba7a:	9b03      	ldr	r3, [sp, #12]
 800ba7c:	3307      	adds	r3, #7
 800ba7e:	f023 0307 	bic.w	r3, r3, #7
 800ba82:	3308      	adds	r3, #8
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba88:	4433      	add	r3, r6
 800ba8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8c:	e767      	b.n	800b95e <_svfiprintf_r+0x4e>
 800ba8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba92:	460c      	mov	r4, r1
 800ba94:	2001      	movs	r0, #1
 800ba96:	e7a5      	b.n	800b9e4 <_svfiprintf_r+0xd4>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	3401      	adds	r4, #1
 800ba9c:	9305      	str	r3, [sp, #20]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	f04f 0c0a 	mov.w	ip, #10
 800baa4:	4620      	mov	r0, r4
 800baa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baaa:	3a30      	subs	r2, #48	; 0x30
 800baac:	2a09      	cmp	r2, #9
 800baae:	d903      	bls.n	800bab8 <_svfiprintf_r+0x1a8>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0c5      	beq.n	800ba40 <_svfiprintf_r+0x130>
 800bab4:	9105      	str	r1, [sp, #20]
 800bab6:	e7c3      	b.n	800ba40 <_svfiprintf_r+0x130>
 800bab8:	fb0c 2101 	mla	r1, ip, r1, r2
 800babc:	4604      	mov	r4, r0
 800babe:	2301      	movs	r3, #1
 800bac0:	e7f0      	b.n	800baa4 <_svfiprintf_r+0x194>
 800bac2:	ab03      	add	r3, sp, #12
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	462a      	mov	r2, r5
 800bac8:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <_svfiprintf_r+0x1f8>)
 800baca:	a904      	add	r1, sp, #16
 800bacc:	4638      	mov	r0, r7
 800bace:	f7fc f927 	bl	8007d20 <_printf_float>
 800bad2:	1c42      	adds	r2, r0, #1
 800bad4:	4606      	mov	r6, r0
 800bad6:	d1d6      	bne.n	800ba86 <_svfiprintf_r+0x176>
 800bad8:	89ab      	ldrh	r3, [r5, #12]
 800bada:	065b      	lsls	r3, r3, #25
 800badc:	f53f af2c 	bmi.w	800b938 <_svfiprintf_r+0x28>
 800bae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae2:	b01d      	add	sp, #116	; 0x74
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	ab03      	add	r3, sp, #12
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	462a      	mov	r2, r5
 800baee:	4b06      	ldr	r3, [pc, #24]	; (800bb08 <_svfiprintf_r+0x1f8>)
 800baf0:	a904      	add	r1, sp, #16
 800baf2:	4638      	mov	r0, r7
 800baf4:	f7fc fbb8 	bl	8008268 <_printf_i>
 800baf8:	e7eb      	b.n	800bad2 <_svfiprintf_r+0x1c2>
 800bafa:	bf00      	nop
 800bafc:	0802835c 	.word	0x0802835c
 800bb00:	08028366 	.word	0x08028366
 800bb04:	08007d21 	.word	0x08007d21
 800bb08:	0800b859 	.word	0x0800b859
 800bb0c:	08028362 	.word	0x08028362

0800bb10 <_read_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d07      	ldr	r5, [pc, #28]	; (800bb30 <_read_r+0x20>)
 800bb14:	4604      	mov	r4, r0
 800bb16:	4608      	mov	r0, r1
 800bb18:	4611      	mov	r1, r2
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	602a      	str	r2, [r5, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f7f6 f878 	bl	8001c14 <_read>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_read_r+0x1e>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_read_r+0x1e>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	20003b9c 	.word	0x20003b9c
 800bb34:	00000000 	.word	0x00000000

0800bb38 <nan>:
 800bb38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb40 <nan+0x8>
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	00000000 	.word	0x00000000
 800bb44:	7ff80000 	.word	0x7ff80000

0800bb48 <strncmp>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	b17a      	cbz	r2, 800bb6c <strncmp+0x24>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	3901      	subs	r1, #1
 800bb50:	1884      	adds	r4, r0, r2
 800bb52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bb5a:	4290      	cmp	r0, r2
 800bb5c:	d101      	bne.n	800bb62 <strncmp+0x1a>
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	d101      	bne.n	800bb66 <strncmp+0x1e>
 800bb62:	1a80      	subs	r0, r0, r2
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d1f3      	bne.n	800bb52 <strncmp+0xa>
 800bb6a:	e7fa      	b.n	800bb62 <strncmp+0x1a>
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	e7f9      	b.n	800bb64 <strncmp+0x1c>

0800bb70 <__ascii_wctomb>:
 800bb70:	b149      	cbz	r1, 800bb86 <__ascii_wctomb+0x16>
 800bb72:	2aff      	cmp	r2, #255	; 0xff
 800bb74:	bf85      	ittet	hi
 800bb76:	238a      	movhi	r3, #138	; 0x8a
 800bb78:	6003      	strhi	r3, [r0, #0]
 800bb7a:	700a      	strbls	r2, [r1, #0]
 800bb7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb80:	bf98      	it	ls
 800bb82:	2001      	movls	r0, #1
 800bb84:	4770      	bx	lr
 800bb86:	4608      	mov	r0, r1
 800bb88:	4770      	bx	lr
	...

0800bb8c <__assert_func>:
 800bb8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb8e:	4614      	mov	r4, r2
 800bb90:	461a      	mov	r2, r3
 800bb92:	4b09      	ldr	r3, [pc, #36]	; (800bbb8 <__assert_func+0x2c>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4605      	mov	r5, r0
 800bb98:	68d8      	ldr	r0, [r3, #12]
 800bb9a:	b14c      	cbz	r4, 800bbb0 <__assert_func+0x24>
 800bb9c:	4b07      	ldr	r3, [pc, #28]	; (800bbbc <__assert_func+0x30>)
 800bb9e:	9100      	str	r1, [sp, #0]
 800bba0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bba4:	4906      	ldr	r1, [pc, #24]	; (800bbc0 <__assert_func+0x34>)
 800bba6:	462b      	mov	r3, r5
 800bba8:	f000 f80e 	bl	800bbc8 <fiprintf>
 800bbac:	f000 fa80 	bl	800c0b0 <abort>
 800bbb0:	4b04      	ldr	r3, [pc, #16]	; (800bbc4 <__assert_func+0x38>)
 800bbb2:	461c      	mov	r4, r3
 800bbb4:	e7f3      	b.n	800bb9e <__assert_func+0x12>
 800bbb6:	bf00      	nop
 800bbb8:	20000010 	.word	0x20000010
 800bbbc:	0802836d 	.word	0x0802836d
 800bbc0:	0802837a 	.word	0x0802837a
 800bbc4:	080283a8 	.word	0x080283a8

0800bbc8 <fiprintf>:
 800bbc8:	b40e      	push	{r1, r2, r3}
 800bbca:	b503      	push	{r0, r1, lr}
 800bbcc:	4601      	mov	r1, r0
 800bbce:	ab03      	add	r3, sp, #12
 800bbd0:	4805      	ldr	r0, [pc, #20]	; (800bbe8 <fiprintf+0x20>)
 800bbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd6:	6800      	ldr	r0, [r0, #0]
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	f000 f879 	bl	800bcd0 <_vfiprintf_r>
 800bbde:	b002      	add	sp, #8
 800bbe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbe4:	b003      	add	sp, #12
 800bbe6:	4770      	bx	lr
 800bbe8:	20000010 	.word	0x20000010

0800bbec <memmove>:
 800bbec:	4288      	cmp	r0, r1
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	eb01 0402 	add.w	r4, r1, r2
 800bbf4:	d902      	bls.n	800bbfc <memmove+0x10>
 800bbf6:	4284      	cmp	r4, r0
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	d807      	bhi.n	800bc0c <memmove+0x20>
 800bbfc:	1e43      	subs	r3, r0, #1
 800bbfe:	42a1      	cmp	r1, r4
 800bc00:	d008      	beq.n	800bc14 <memmove+0x28>
 800bc02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc0a:	e7f8      	b.n	800bbfe <memmove+0x12>
 800bc0c:	4402      	add	r2, r0
 800bc0e:	4601      	mov	r1, r0
 800bc10:	428a      	cmp	r2, r1
 800bc12:	d100      	bne.n	800bc16 <memmove+0x2a>
 800bc14:	bd10      	pop	{r4, pc}
 800bc16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc1e:	e7f7      	b.n	800bc10 <memmove+0x24>

0800bc20 <_realloc_r>:
 800bc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc24:	4680      	mov	r8, r0
 800bc26:	4614      	mov	r4, r2
 800bc28:	460e      	mov	r6, r1
 800bc2a:	b921      	cbnz	r1, 800bc36 <_realloc_r+0x16>
 800bc2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	4611      	mov	r1, r2
 800bc32:	f7fb bf61 	b.w	8007af8 <_malloc_r>
 800bc36:	b92a      	cbnz	r2, 800bc44 <_realloc_r+0x24>
 800bc38:	f7ff fdc2 	bl	800b7c0 <_free_r>
 800bc3c:	4625      	mov	r5, r4
 800bc3e:	4628      	mov	r0, r5
 800bc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc44:	f000 faa0 	bl	800c188 <_malloc_usable_size_r>
 800bc48:	4284      	cmp	r4, r0
 800bc4a:	4607      	mov	r7, r0
 800bc4c:	d802      	bhi.n	800bc54 <_realloc_r+0x34>
 800bc4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc52:	d812      	bhi.n	800bc7a <_realloc_r+0x5a>
 800bc54:	4621      	mov	r1, r4
 800bc56:	4640      	mov	r0, r8
 800bc58:	f7fb ff4e 	bl	8007af8 <_malloc_r>
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d0ed      	beq.n	800bc3e <_realloc_r+0x1e>
 800bc62:	42bc      	cmp	r4, r7
 800bc64:	4622      	mov	r2, r4
 800bc66:	4631      	mov	r1, r6
 800bc68:	bf28      	it	cs
 800bc6a:	463a      	movcs	r2, r7
 800bc6c:	f7fb ff0d 	bl	8007a8a <memcpy>
 800bc70:	4631      	mov	r1, r6
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7ff fda4 	bl	800b7c0 <_free_r>
 800bc78:	e7e1      	b.n	800bc3e <_realloc_r+0x1e>
 800bc7a:	4635      	mov	r5, r6
 800bc7c:	e7df      	b.n	800bc3e <_realloc_r+0x1e>

0800bc7e <__sfputc_r>:
 800bc7e:	6893      	ldr	r3, [r2, #8]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	b410      	push	{r4}
 800bc86:	6093      	str	r3, [r2, #8]
 800bc88:	da08      	bge.n	800bc9c <__sfputc_r+0x1e>
 800bc8a:	6994      	ldr	r4, [r2, #24]
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	db01      	blt.n	800bc94 <__sfputc_r+0x16>
 800bc90:	290a      	cmp	r1, #10
 800bc92:	d103      	bne.n	800bc9c <__sfputc_r+0x1e>
 800bc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc98:	f000 b94a 	b.w	800bf30 <__swbuf_r>
 800bc9c:	6813      	ldr	r3, [r2, #0]
 800bc9e:	1c58      	adds	r0, r3, #1
 800bca0:	6010      	str	r0, [r2, #0]
 800bca2:	7019      	strb	r1, [r3, #0]
 800bca4:	4608      	mov	r0, r1
 800bca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <__sfputs_r>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	4614      	mov	r4, r2
 800bcb4:	18d5      	adds	r5, r2, r3
 800bcb6:	42ac      	cmp	r4, r5
 800bcb8:	d101      	bne.n	800bcbe <__sfputs_r+0x12>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e007      	b.n	800bcce <__sfputs_r+0x22>
 800bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7ff ffda 	bl	800bc7e <__sfputc_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d1f3      	bne.n	800bcb6 <__sfputs_r+0xa>
 800bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcd0 <_vfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	b09d      	sub	sp, #116	; 0x74
 800bcd8:	4614      	mov	r4, r2
 800bcda:	4698      	mov	r8, r3
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b118      	cbz	r0, 800bce8 <_vfiprintf_r+0x18>
 800bce0:	6983      	ldr	r3, [r0, #24]
 800bce2:	b90b      	cbnz	r3, 800bce8 <_vfiprintf_r+0x18>
 800bce4:	f7fb fe0c 	bl	8007900 <__sinit>
 800bce8:	4b89      	ldr	r3, [pc, #548]	; (800bf10 <_vfiprintf_r+0x240>)
 800bcea:	429d      	cmp	r5, r3
 800bcec:	d11b      	bne.n	800bd26 <_vfiprintf_r+0x56>
 800bcee:	6875      	ldr	r5, [r6, #4]
 800bcf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf2:	07d9      	lsls	r1, r3, #31
 800bcf4:	d405      	bmi.n	800bd02 <_vfiprintf_r+0x32>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	059a      	lsls	r2, r3, #22
 800bcfa:	d402      	bmi.n	800bd02 <_vfiprintf_r+0x32>
 800bcfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcfe:	f7fb fec2 	bl	8007a86 <__retarget_lock_acquire_recursive>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	071b      	lsls	r3, r3, #28
 800bd06:	d501      	bpl.n	800bd0c <_vfiprintf_r+0x3c>
 800bd08:	692b      	ldr	r3, [r5, #16]
 800bd0a:	b9eb      	cbnz	r3, 800bd48 <_vfiprintf_r+0x78>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f000 f960 	bl	800bfd4 <__swsetup_r>
 800bd14:	b1c0      	cbz	r0, 800bd48 <_vfiprintf_r+0x78>
 800bd16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd18:	07dc      	lsls	r4, r3, #31
 800bd1a:	d50e      	bpl.n	800bd3a <_vfiprintf_r+0x6a>
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	b01d      	add	sp, #116	; 0x74
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	4b7b      	ldr	r3, [pc, #492]	; (800bf14 <_vfiprintf_r+0x244>)
 800bd28:	429d      	cmp	r5, r3
 800bd2a:	d101      	bne.n	800bd30 <_vfiprintf_r+0x60>
 800bd2c:	68b5      	ldr	r5, [r6, #8]
 800bd2e:	e7df      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bd30:	4b79      	ldr	r3, [pc, #484]	; (800bf18 <_vfiprintf_r+0x248>)
 800bd32:	429d      	cmp	r5, r3
 800bd34:	bf08      	it	eq
 800bd36:	68f5      	ldreq	r5, [r6, #12]
 800bd38:	e7da      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bd3a:	89ab      	ldrh	r3, [r5, #12]
 800bd3c:	0598      	lsls	r0, r3, #22
 800bd3e:	d4ed      	bmi.n	800bd1c <_vfiprintf_r+0x4c>
 800bd40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd42:	f7fb fea1 	bl	8007a88 <__retarget_lock_release_recursive>
 800bd46:	e7e9      	b.n	800bd1c <_vfiprintf_r+0x4c>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4c:	2320      	movs	r3, #32
 800bd4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd52:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd56:	2330      	movs	r3, #48	; 0x30
 800bd58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf1c <_vfiprintf_r+0x24c>
 800bd5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd60:	f04f 0901 	mov.w	r9, #1
 800bd64:	4623      	mov	r3, r4
 800bd66:	469a      	mov	sl, r3
 800bd68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd6c:	b10a      	cbz	r2, 800bd72 <_vfiprintf_r+0xa2>
 800bd6e:	2a25      	cmp	r2, #37	; 0x25
 800bd70:	d1f9      	bne.n	800bd66 <_vfiprintf_r+0x96>
 800bd72:	ebba 0b04 	subs.w	fp, sl, r4
 800bd76:	d00b      	beq.n	800bd90 <_vfiprintf_r+0xc0>
 800bd78:	465b      	mov	r3, fp
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff ff94 	bl	800bcac <__sfputs_r>
 800bd84:	3001      	adds	r0, #1
 800bd86:	f000 80aa 	beq.w	800bede <_vfiprintf_r+0x20e>
 800bd8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd8c:	445a      	add	r2, fp
 800bd8e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd90:	f89a 3000 	ldrb.w	r3, [sl]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 80a2 	beq.w	800bede <_vfiprintf_r+0x20e>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda4:	f10a 0a01 	add.w	sl, sl, #1
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	9307      	str	r3, [sp, #28]
 800bdac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdb0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdb2:	4654      	mov	r4, sl
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdba:	4858      	ldr	r0, [pc, #352]	; (800bf1c <_vfiprintf_r+0x24c>)
 800bdbc:	f7f4 fa30 	bl	8000220 <memchr>
 800bdc0:	9a04      	ldr	r2, [sp, #16]
 800bdc2:	b9d8      	cbnz	r0, 800bdfc <_vfiprintf_r+0x12c>
 800bdc4:	06d1      	lsls	r1, r2, #27
 800bdc6:	bf44      	itt	mi
 800bdc8:	2320      	movmi	r3, #32
 800bdca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdce:	0713      	lsls	r3, r2, #28
 800bdd0:	bf44      	itt	mi
 800bdd2:	232b      	movmi	r3, #43	; 0x2b
 800bdd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bddc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdde:	d015      	beq.n	800be0c <_vfiprintf_r+0x13c>
 800bde0:	9a07      	ldr	r2, [sp, #28]
 800bde2:	4654      	mov	r4, sl
 800bde4:	2000      	movs	r0, #0
 800bde6:	f04f 0c0a 	mov.w	ip, #10
 800bdea:	4621      	mov	r1, r4
 800bdec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdf0:	3b30      	subs	r3, #48	; 0x30
 800bdf2:	2b09      	cmp	r3, #9
 800bdf4:	d94e      	bls.n	800be94 <_vfiprintf_r+0x1c4>
 800bdf6:	b1b0      	cbz	r0, 800be26 <_vfiprintf_r+0x156>
 800bdf8:	9207      	str	r2, [sp, #28]
 800bdfa:	e014      	b.n	800be26 <_vfiprintf_r+0x156>
 800bdfc:	eba0 0308 	sub.w	r3, r0, r8
 800be00:	fa09 f303 	lsl.w	r3, r9, r3
 800be04:	4313      	orrs	r3, r2
 800be06:	9304      	str	r3, [sp, #16]
 800be08:	46a2      	mov	sl, r4
 800be0a:	e7d2      	b.n	800bdb2 <_vfiprintf_r+0xe2>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	1d19      	adds	r1, r3, #4
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	9103      	str	r1, [sp, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	bfbb      	ittet	lt
 800be18:	425b      	neglt	r3, r3
 800be1a:	f042 0202 	orrlt.w	r2, r2, #2
 800be1e:	9307      	strge	r3, [sp, #28]
 800be20:	9307      	strlt	r3, [sp, #28]
 800be22:	bfb8      	it	lt
 800be24:	9204      	strlt	r2, [sp, #16]
 800be26:	7823      	ldrb	r3, [r4, #0]
 800be28:	2b2e      	cmp	r3, #46	; 0x2e
 800be2a:	d10c      	bne.n	800be46 <_vfiprintf_r+0x176>
 800be2c:	7863      	ldrb	r3, [r4, #1]
 800be2e:	2b2a      	cmp	r3, #42	; 0x2a
 800be30:	d135      	bne.n	800be9e <_vfiprintf_r+0x1ce>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	1d1a      	adds	r2, r3, #4
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	9203      	str	r2, [sp, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bfb8      	it	lt
 800be3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800be42:	3402      	adds	r4, #2
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf2c <_vfiprintf_r+0x25c>
 800be4a:	7821      	ldrb	r1, [r4, #0]
 800be4c:	2203      	movs	r2, #3
 800be4e:	4650      	mov	r0, sl
 800be50:	f7f4 f9e6 	bl	8000220 <memchr>
 800be54:	b140      	cbz	r0, 800be68 <_vfiprintf_r+0x198>
 800be56:	2340      	movs	r3, #64	; 0x40
 800be58:	eba0 000a 	sub.w	r0, r0, sl
 800be5c:	fa03 f000 	lsl.w	r0, r3, r0
 800be60:	9b04      	ldr	r3, [sp, #16]
 800be62:	4303      	orrs	r3, r0
 800be64:	3401      	adds	r4, #1
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	482c      	ldr	r0, [pc, #176]	; (800bf20 <_vfiprintf_r+0x250>)
 800be6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be72:	2206      	movs	r2, #6
 800be74:	f7f4 f9d4 	bl	8000220 <memchr>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d03f      	beq.n	800befc <_vfiprintf_r+0x22c>
 800be7c:	4b29      	ldr	r3, [pc, #164]	; (800bf24 <_vfiprintf_r+0x254>)
 800be7e:	bb1b      	cbnz	r3, 800bec8 <_vfiprintf_r+0x1f8>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	3307      	adds	r3, #7
 800be84:	f023 0307 	bic.w	r3, r3, #7
 800be88:	3308      	adds	r3, #8
 800be8a:	9303      	str	r3, [sp, #12]
 800be8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8e:	443b      	add	r3, r7
 800be90:	9309      	str	r3, [sp, #36]	; 0x24
 800be92:	e767      	b.n	800bd64 <_vfiprintf_r+0x94>
 800be94:	fb0c 3202 	mla	r2, ip, r2, r3
 800be98:	460c      	mov	r4, r1
 800be9a:	2001      	movs	r0, #1
 800be9c:	e7a5      	b.n	800bdea <_vfiprintf_r+0x11a>
 800be9e:	2300      	movs	r3, #0
 800bea0:	3401      	adds	r4, #1
 800bea2:	9305      	str	r3, [sp, #20]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f04f 0c0a 	mov.w	ip, #10
 800beaa:	4620      	mov	r0, r4
 800beac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beb0:	3a30      	subs	r2, #48	; 0x30
 800beb2:	2a09      	cmp	r2, #9
 800beb4:	d903      	bls.n	800bebe <_vfiprintf_r+0x1ee>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0c5      	beq.n	800be46 <_vfiprintf_r+0x176>
 800beba:	9105      	str	r1, [sp, #20]
 800bebc:	e7c3      	b.n	800be46 <_vfiprintf_r+0x176>
 800bebe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bec2:	4604      	mov	r4, r0
 800bec4:	2301      	movs	r3, #1
 800bec6:	e7f0      	b.n	800beaa <_vfiprintf_r+0x1da>
 800bec8:	ab03      	add	r3, sp, #12
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	462a      	mov	r2, r5
 800bece:	4b16      	ldr	r3, [pc, #88]	; (800bf28 <_vfiprintf_r+0x258>)
 800bed0:	a904      	add	r1, sp, #16
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7fb ff24 	bl	8007d20 <_printf_float>
 800bed8:	4607      	mov	r7, r0
 800beda:	1c78      	adds	r0, r7, #1
 800bedc:	d1d6      	bne.n	800be8c <_vfiprintf_r+0x1bc>
 800bede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bee0:	07d9      	lsls	r1, r3, #31
 800bee2:	d405      	bmi.n	800bef0 <_vfiprintf_r+0x220>
 800bee4:	89ab      	ldrh	r3, [r5, #12]
 800bee6:	059a      	lsls	r2, r3, #22
 800bee8:	d402      	bmi.n	800bef0 <_vfiprintf_r+0x220>
 800beea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beec:	f7fb fdcc 	bl	8007a88 <__retarget_lock_release_recursive>
 800bef0:	89ab      	ldrh	r3, [r5, #12]
 800bef2:	065b      	lsls	r3, r3, #25
 800bef4:	f53f af12 	bmi.w	800bd1c <_vfiprintf_r+0x4c>
 800bef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800befa:	e711      	b.n	800bd20 <_vfiprintf_r+0x50>
 800befc:	ab03      	add	r3, sp, #12
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	462a      	mov	r2, r5
 800bf02:	4b09      	ldr	r3, [pc, #36]	; (800bf28 <_vfiprintf_r+0x258>)
 800bf04:	a904      	add	r1, sp, #16
 800bf06:	4630      	mov	r0, r6
 800bf08:	f7fc f9ae 	bl	8008268 <_printf_i>
 800bf0c:	e7e4      	b.n	800bed8 <_vfiprintf_r+0x208>
 800bf0e:	bf00      	nop
 800bf10:	08027f28 	.word	0x08027f28
 800bf14:	08027f48 	.word	0x08027f48
 800bf18:	08027f08 	.word	0x08027f08
 800bf1c:	0802835c 	.word	0x0802835c
 800bf20:	08028366 	.word	0x08028366
 800bf24:	08007d21 	.word	0x08007d21
 800bf28:	0800bcad 	.word	0x0800bcad
 800bf2c:	08028362 	.word	0x08028362

0800bf30 <__swbuf_r>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	460e      	mov	r6, r1
 800bf34:	4614      	mov	r4, r2
 800bf36:	4605      	mov	r5, r0
 800bf38:	b118      	cbz	r0, 800bf42 <__swbuf_r+0x12>
 800bf3a:	6983      	ldr	r3, [r0, #24]
 800bf3c:	b90b      	cbnz	r3, 800bf42 <__swbuf_r+0x12>
 800bf3e:	f7fb fcdf 	bl	8007900 <__sinit>
 800bf42:	4b21      	ldr	r3, [pc, #132]	; (800bfc8 <__swbuf_r+0x98>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	d12b      	bne.n	800bfa0 <__swbuf_r+0x70>
 800bf48:	686c      	ldr	r4, [r5, #4]
 800bf4a:	69a3      	ldr	r3, [r4, #24]
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	071a      	lsls	r2, r3, #28
 800bf52:	d52f      	bpl.n	800bfb4 <__swbuf_r+0x84>
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	b36b      	cbz	r3, 800bfb4 <__swbuf_r+0x84>
 800bf58:	6923      	ldr	r3, [r4, #16]
 800bf5a:	6820      	ldr	r0, [r4, #0]
 800bf5c:	1ac0      	subs	r0, r0, r3
 800bf5e:	6963      	ldr	r3, [r4, #20]
 800bf60:	b2f6      	uxtb	r6, r6
 800bf62:	4283      	cmp	r3, r0
 800bf64:	4637      	mov	r7, r6
 800bf66:	dc04      	bgt.n	800bf72 <__swbuf_r+0x42>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f7fe fb68 	bl	800a640 <_fflush_r>
 800bf70:	bb30      	cbnz	r0, 800bfc0 <__swbuf_r+0x90>
 800bf72:	68a3      	ldr	r3, [r4, #8]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	60a3      	str	r3, [r4, #8]
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	6022      	str	r2, [r4, #0]
 800bf7e:	701e      	strb	r6, [r3, #0]
 800bf80:	6963      	ldr	r3, [r4, #20]
 800bf82:	3001      	adds	r0, #1
 800bf84:	4283      	cmp	r3, r0
 800bf86:	d004      	beq.n	800bf92 <__swbuf_r+0x62>
 800bf88:	89a3      	ldrh	r3, [r4, #12]
 800bf8a:	07db      	lsls	r3, r3, #31
 800bf8c:	d506      	bpl.n	800bf9c <__swbuf_r+0x6c>
 800bf8e:	2e0a      	cmp	r6, #10
 800bf90:	d104      	bne.n	800bf9c <__swbuf_r+0x6c>
 800bf92:	4621      	mov	r1, r4
 800bf94:	4628      	mov	r0, r5
 800bf96:	f7fe fb53 	bl	800a640 <_fflush_r>
 800bf9a:	b988      	cbnz	r0, 800bfc0 <__swbuf_r+0x90>
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <__swbuf_r+0x9c>)
 800bfa2:	429c      	cmp	r4, r3
 800bfa4:	d101      	bne.n	800bfaa <__swbuf_r+0x7a>
 800bfa6:	68ac      	ldr	r4, [r5, #8]
 800bfa8:	e7cf      	b.n	800bf4a <__swbuf_r+0x1a>
 800bfaa:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <__swbuf_r+0xa0>)
 800bfac:	429c      	cmp	r4, r3
 800bfae:	bf08      	it	eq
 800bfb0:	68ec      	ldreq	r4, [r5, #12]
 800bfb2:	e7ca      	b.n	800bf4a <__swbuf_r+0x1a>
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f000 f80c 	bl	800bfd4 <__swsetup_r>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d0cb      	beq.n	800bf58 <__swbuf_r+0x28>
 800bfc0:	f04f 37ff 	mov.w	r7, #4294967295
 800bfc4:	e7ea      	b.n	800bf9c <__swbuf_r+0x6c>
 800bfc6:	bf00      	nop
 800bfc8:	08027f28 	.word	0x08027f28
 800bfcc:	08027f48 	.word	0x08027f48
 800bfd0:	08027f08 	.word	0x08027f08

0800bfd4 <__swsetup_r>:
 800bfd4:	4b32      	ldr	r3, [pc, #200]	; (800c0a0 <__swsetup_r+0xcc>)
 800bfd6:	b570      	push	{r4, r5, r6, lr}
 800bfd8:	681d      	ldr	r5, [r3, #0]
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	b125      	cbz	r5, 800bfea <__swsetup_r+0x16>
 800bfe0:	69ab      	ldr	r3, [r5, #24]
 800bfe2:	b913      	cbnz	r3, 800bfea <__swsetup_r+0x16>
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f7fb fc8b 	bl	8007900 <__sinit>
 800bfea:	4b2e      	ldr	r3, [pc, #184]	; (800c0a4 <__swsetup_r+0xd0>)
 800bfec:	429c      	cmp	r4, r3
 800bfee:	d10f      	bne.n	800c010 <__swsetup_r+0x3c>
 800bff0:	686c      	ldr	r4, [r5, #4]
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bff8:	0719      	lsls	r1, r3, #28
 800bffa:	d42c      	bmi.n	800c056 <__swsetup_r+0x82>
 800bffc:	06dd      	lsls	r5, r3, #27
 800bffe:	d411      	bmi.n	800c024 <__swsetup_r+0x50>
 800c000:	2309      	movs	r3, #9
 800c002:	6033      	str	r3, [r6, #0]
 800c004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c008:	81a3      	strh	r3, [r4, #12]
 800c00a:	f04f 30ff 	mov.w	r0, #4294967295
 800c00e:	e03e      	b.n	800c08e <__swsetup_r+0xba>
 800c010:	4b25      	ldr	r3, [pc, #148]	; (800c0a8 <__swsetup_r+0xd4>)
 800c012:	429c      	cmp	r4, r3
 800c014:	d101      	bne.n	800c01a <__swsetup_r+0x46>
 800c016:	68ac      	ldr	r4, [r5, #8]
 800c018:	e7eb      	b.n	800bff2 <__swsetup_r+0x1e>
 800c01a:	4b24      	ldr	r3, [pc, #144]	; (800c0ac <__swsetup_r+0xd8>)
 800c01c:	429c      	cmp	r4, r3
 800c01e:	bf08      	it	eq
 800c020:	68ec      	ldreq	r4, [r5, #12]
 800c022:	e7e6      	b.n	800bff2 <__swsetup_r+0x1e>
 800c024:	0758      	lsls	r0, r3, #29
 800c026:	d512      	bpl.n	800c04e <__swsetup_r+0x7a>
 800c028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c02a:	b141      	cbz	r1, 800c03e <__swsetup_r+0x6a>
 800c02c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c030:	4299      	cmp	r1, r3
 800c032:	d002      	beq.n	800c03a <__swsetup_r+0x66>
 800c034:	4630      	mov	r0, r6
 800c036:	f7ff fbc3 	bl	800b7c0 <_free_r>
 800c03a:	2300      	movs	r3, #0
 800c03c:	6363      	str	r3, [r4, #52]	; 0x34
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c044:	81a3      	strh	r3, [r4, #12]
 800c046:	2300      	movs	r3, #0
 800c048:	6063      	str	r3, [r4, #4]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	f043 0308 	orr.w	r3, r3, #8
 800c054:	81a3      	strh	r3, [r4, #12]
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	b94b      	cbnz	r3, 800c06e <__swsetup_r+0x9a>
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c064:	d003      	beq.n	800c06e <__swsetup_r+0x9a>
 800c066:	4621      	mov	r1, r4
 800c068:	4630      	mov	r0, r6
 800c06a:	f000 f84d 	bl	800c108 <__smakebuf_r>
 800c06e:	89a0      	ldrh	r0, [r4, #12]
 800c070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c074:	f010 0301 	ands.w	r3, r0, #1
 800c078:	d00a      	beq.n	800c090 <__swsetup_r+0xbc>
 800c07a:	2300      	movs	r3, #0
 800c07c:	60a3      	str	r3, [r4, #8]
 800c07e:	6963      	ldr	r3, [r4, #20]
 800c080:	425b      	negs	r3, r3
 800c082:	61a3      	str	r3, [r4, #24]
 800c084:	6923      	ldr	r3, [r4, #16]
 800c086:	b943      	cbnz	r3, 800c09a <__swsetup_r+0xc6>
 800c088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c08c:	d1ba      	bne.n	800c004 <__swsetup_r+0x30>
 800c08e:	bd70      	pop	{r4, r5, r6, pc}
 800c090:	0781      	lsls	r1, r0, #30
 800c092:	bf58      	it	pl
 800c094:	6963      	ldrpl	r3, [r4, #20]
 800c096:	60a3      	str	r3, [r4, #8]
 800c098:	e7f4      	b.n	800c084 <__swsetup_r+0xb0>
 800c09a:	2000      	movs	r0, #0
 800c09c:	e7f7      	b.n	800c08e <__swsetup_r+0xba>
 800c09e:	bf00      	nop
 800c0a0:	20000010 	.word	0x20000010
 800c0a4:	08027f28 	.word	0x08027f28
 800c0a8:	08027f48 	.word	0x08027f48
 800c0ac:	08027f08 	.word	0x08027f08

0800c0b0 <abort>:
 800c0b0:	b508      	push	{r3, lr}
 800c0b2:	2006      	movs	r0, #6
 800c0b4:	f000 f898 	bl	800c1e8 <raise>
 800c0b8:	2001      	movs	r0, #1
 800c0ba:	f7f5 fda1 	bl	8001c00 <_exit>

0800c0be <__swhatbuf_r>:
 800c0be:	b570      	push	{r4, r5, r6, lr}
 800c0c0:	460e      	mov	r6, r1
 800c0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	b096      	sub	sp, #88	; 0x58
 800c0ca:	4614      	mov	r4, r2
 800c0cc:	461d      	mov	r5, r3
 800c0ce:	da08      	bge.n	800c0e2 <__swhatbuf_r+0x24>
 800c0d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	602a      	str	r2, [r5, #0]
 800c0d8:	061a      	lsls	r2, r3, #24
 800c0da:	d410      	bmi.n	800c0fe <__swhatbuf_r+0x40>
 800c0dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0e0:	e00e      	b.n	800c100 <__swhatbuf_r+0x42>
 800c0e2:	466a      	mov	r2, sp
 800c0e4:	f000 f89c 	bl	800c220 <_fstat_r>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	dbf1      	blt.n	800c0d0 <__swhatbuf_r+0x12>
 800c0ec:	9a01      	ldr	r2, [sp, #4]
 800c0ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0f6:	425a      	negs	r2, r3
 800c0f8:	415a      	adcs	r2, r3
 800c0fa:	602a      	str	r2, [r5, #0]
 800c0fc:	e7ee      	b.n	800c0dc <__swhatbuf_r+0x1e>
 800c0fe:	2340      	movs	r3, #64	; 0x40
 800c100:	2000      	movs	r0, #0
 800c102:	6023      	str	r3, [r4, #0]
 800c104:	b016      	add	sp, #88	; 0x58
 800c106:	bd70      	pop	{r4, r5, r6, pc}

0800c108 <__smakebuf_r>:
 800c108:	898b      	ldrh	r3, [r1, #12]
 800c10a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c10c:	079d      	lsls	r5, r3, #30
 800c10e:	4606      	mov	r6, r0
 800c110:	460c      	mov	r4, r1
 800c112:	d507      	bpl.n	800c124 <__smakebuf_r+0x1c>
 800c114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	6123      	str	r3, [r4, #16]
 800c11c:	2301      	movs	r3, #1
 800c11e:	6163      	str	r3, [r4, #20]
 800c120:	b002      	add	sp, #8
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	ab01      	add	r3, sp, #4
 800c126:	466a      	mov	r2, sp
 800c128:	f7ff ffc9 	bl	800c0be <__swhatbuf_r>
 800c12c:	9900      	ldr	r1, [sp, #0]
 800c12e:	4605      	mov	r5, r0
 800c130:	4630      	mov	r0, r6
 800c132:	f7fb fce1 	bl	8007af8 <_malloc_r>
 800c136:	b948      	cbnz	r0, 800c14c <__smakebuf_r+0x44>
 800c138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c13c:	059a      	lsls	r2, r3, #22
 800c13e:	d4ef      	bmi.n	800c120 <__smakebuf_r+0x18>
 800c140:	f023 0303 	bic.w	r3, r3, #3
 800c144:	f043 0302 	orr.w	r3, r3, #2
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	e7e3      	b.n	800c114 <__smakebuf_r+0xc>
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <__smakebuf_r+0x7c>)
 800c14e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	6020      	str	r0, [r4, #0]
 800c154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	9b00      	ldr	r3, [sp, #0]
 800c15c:	6163      	str	r3, [r4, #20]
 800c15e:	9b01      	ldr	r3, [sp, #4]
 800c160:	6120      	str	r0, [r4, #16]
 800c162:	b15b      	cbz	r3, 800c17c <__smakebuf_r+0x74>
 800c164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c168:	4630      	mov	r0, r6
 800c16a:	f000 f86b 	bl	800c244 <_isatty_r>
 800c16e:	b128      	cbz	r0, 800c17c <__smakebuf_r+0x74>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	f023 0303 	bic.w	r3, r3, #3
 800c176:	f043 0301 	orr.w	r3, r3, #1
 800c17a:	81a3      	strh	r3, [r4, #12]
 800c17c:	89a0      	ldrh	r0, [r4, #12]
 800c17e:	4305      	orrs	r5, r0
 800c180:	81a5      	strh	r5, [r4, #12]
 800c182:	e7cd      	b.n	800c120 <__smakebuf_r+0x18>
 800c184:	08007899 	.word	0x08007899

0800c188 <_malloc_usable_size_r>:
 800c188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c18c:	1f18      	subs	r0, r3, #4
 800c18e:	2b00      	cmp	r3, #0
 800c190:	bfbc      	itt	lt
 800c192:	580b      	ldrlt	r3, [r1, r0]
 800c194:	18c0      	addlt	r0, r0, r3
 800c196:	4770      	bx	lr

0800c198 <_raise_r>:
 800c198:	291f      	cmp	r1, #31
 800c19a:	b538      	push	{r3, r4, r5, lr}
 800c19c:	4604      	mov	r4, r0
 800c19e:	460d      	mov	r5, r1
 800c1a0:	d904      	bls.n	800c1ac <_raise_r+0x14>
 800c1a2:	2316      	movs	r3, #22
 800c1a4:	6003      	str	r3, [r0, #0]
 800c1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1ae:	b112      	cbz	r2, 800c1b6 <_raise_r+0x1e>
 800c1b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b4:	b94b      	cbnz	r3, 800c1ca <_raise_r+0x32>
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f000 f830 	bl	800c21c <_getpid_r>
 800c1bc:	462a      	mov	r2, r5
 800c1be:	4601      	mov	r1, r0
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c6:	f000 b817 	b.w	800c1f8 <_kill_r>
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d00a      	beq.n	800c1e4 <_raise_r+0x4c>
 800c1ce:	1c59      	adds	r1, r3, #1
 800c1d0:	d103      	bne.n	800c1da <_raise_r+0x42>
 800c1d2:	2316      	movs	r3, #22
 800c1d4:	6003      	str	r3, [r0, #0]
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	e7e7      	b.n	800c1aa <_raise_r+0x12>
 800c1da:	2400      	movs	r4, #0
 800c1dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	4798      	blx	r3
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e7e0      	b.n	800c1aa <_raise_r+0x12>

0800c1e8 <raise>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <raise+0xc>)
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f7ff bfd3 	b.w	800c198 <_raise_r>
 800c1f2:	bf00      	nop
 800c1f4:	20000010 	.word	0x20000010

0800c1f8 <_kill_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d07      	ldr	r5, [pc, #28]	; (800c218 <_kill_r+0x20>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	4611      	mov	r1, r2
 800c204:	602b      	str	r3, [r5, #0]
 800c206:	f7f5 fceb 	bl	8001be0 <_kill>
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	d102      	bne.n	800c214 <_kill_r+0x1c>
 800c20e:	682b      	ldr	r3, [r5, #0]
 800c210:	b103      	cbz	r3, 800c214 <_kill_r+0x1c>
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	bd38      	pop	{r3, r4, r5, pc}
 800c216:	bf00      	nop
 800c218:	20003b9c 	.word	0x20003b9c

0800c21c <_getpid_r>:
 800c21c:	f7f5 bcd8 	b.w	8001bd0 <_getpid>

0800c220 <_fstat_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d07      	ldr	r5, [pc, #28]	; (800c240 <_fstat_r+0x20>)
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	4608      	mov	r0, r1
 800c22a:	4611      	mov	r1, r2
 800c22c:	602b      	str	r3, [r5, #0]
 800c22e:	f7f5 fd36 	bl	8001c9e <_fstat>
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	d102      	bne.n	800c23c <_fstat_r+0x1c>
 800c236:	682b      	ldr	r3, [r5, #0]
 800c238:	b103      	cbz	r3, 800c23c <_fstat_r+0x1c>
 800c23a:	6023      	str	r3, [r4, #0]
 800c23c:	bd38      	pop	{r3, r4, r5, pc}
 800c23e:	bf00      	nop
 800c240:	20003b9c 	.word	0x20003b9c

0800c244 <_isatty_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d06      	ldr	r5, [pc, #24]	; (800c260 <_isatty_r+0x1c>)
 800c248:	2300      	movs	r3, #0
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	602b      	str	r3, [r5, #0]
 800c250:	f7f5 fd35 	bl	8001cbe <_isatty>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_isatty_r+0x1a>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_isatty_r+0x1a>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	20003b9c 	.word	0x20003b9c

0800c264 <_init>:
 800c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c266:	bf00      	nop
 800c268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26a:	bc08      	pop	{r3}
 800c26c:	469e      	mov	lr, r3
 800c26e:	4770      	bx	lr

0800c270 <_fini>:
 800c270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c272:	bf00      	nop
 800c274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c276:	bc08      	pop	{r3}
 800c278:	469e      	mov	lr, r3
 800c27a:	4770      	bx	lr
