
MeasurementPCB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f42c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c238  0800f600  0800f600  0001f600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b838  0802b838  000401e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802b838  0802b838  0003b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b840  0802b840  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b840  0802b840  0003b840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b844  0802b844  0003b844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0802b848  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000137d8  200001e8  0802ba2c  000401e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200139c0  0802ba2c  000439c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c64  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff5  00000000  00000000  00060e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00064e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001970  00000000  00000000  000668d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018537  00000000  00000000  00068248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00009201  00000000  00000000  0008077f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c0  00000000  00000000  00089980  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008898  00000000  00000000  00089a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000035a7  00000000  00000000  000922d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f5e4 	.word	0x0800f5e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800f5e4 	.word	0x0800f5e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 800103e:	4bb6      	ldr	r3, [pc, #728]	; (8001318 <main+0x2e0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00e      	beq.n	8001064 <main+0x2c>
	  ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001046:	4bb5      	ldr	r3, [pc, #724]	; (800131c <main+0x2e4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4ab4      	ldr	r2, [pc, #720]	; (800131c <main+0x2e4>)
 800104c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001050:	6013      	str	r3, [r2, #0]
	  ARM_CM_DWT_CYCCNT  = 0;
 8001052:	4bb3      	ldr	r3, [pc, #716]	; (8001320 <main+0x2e8>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	  ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8001058:	4baf      	ldr	r3, [pc, #700]	; (8001318 <main+0x2e0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4aae      	ldr	r2, [pc, #696]	; (8001318 <main+0x2e0>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f001 fb90 	bl	8002788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 fad4 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fbd2 	bl	8001814 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001070:	f000 fb42 	bl	80016f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001074:	f000 fb6e 	bl	8001754 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001078:	f000 fba2 	bl	80017c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*initialize humidity module (I2C)*/
  //Check if device is connected
  if((ret = HAL_I2C_IsDeviceReady(&hi2c1, SHT31_ADDR, 1, HAL_MAX_DELAY)) != HAL_OK){
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2201      	movs	r2, #1
 8001082:	2188      	movs	r1, #136	; 0x88
 8001084:	48a7      	ldr	r0, [pc, #668]	; (8001324 <main+0x2ec>)
 8001086:	f002 fac5 	bl	8003614 <HAL_I2C_IsDeviceReady>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4ba6      	ldr	r3, [pc, #664]	; (8001328 <main+0x2f0>)
 8001090:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Disable heater
  I2C_trans[0] = SHT31_HEATER_First;
 8001092:	4ba6      	ldr	r3, [pc, #664]	; (800132c <main+0x2f4>)
 8001094:	2230      	movs	r2, #48	; 0x30
 8001096:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = SHT31_HEATER_Second;
 8001098:	4ba4      	ldr	r3, [pc, #656]	; (800132c <main+0x2f4>)
 800109a:	2266      	movs	r2, #102	; 0x66
 800109c:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2302      	movs	r3, #2
 80010a6:	4aa1      	ldr	r2, [pc, #644]	; (800132c <main+0x2f4>)
 80010a8:	2188      	movs	r1, #136	; 0x88
 80010aa:	489e      	ldr	r0, [pc, #632]	; (8001324 <main+0x2ec>)
 80010ac:	f001 ff8e 	bl	8002fcc <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b9c      	ldr	r3, [pc, #624]	; (8001328 <main+0x2f0>)
 80010b6:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  /*Initialize accelerometer module (I2C)*/
  //check if device is connected
  if((ret = HAL_I2C_IsDeviceReady(&hi2c1, LIS2_ADDR, 1, HAL_MAX_DELAY)) != HAL_OK){
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	2201      	movs	r2, #1
 80010be:	213a      	movs	r1, #58	; 0x3a
 80010c0:	4898      	ldr	r0, [pc, #608]	; (8001324 <main+0x2ec>)
 80010c2:	f002 faa7 	bl	8003614 <HAL_I2C_IsDeviceReady>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b97      	ldr	r3, [pc, #604]	; (8001328 <main+0x2f0>)
 80010cc:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Write setting to control register 1
  I2C_trans[0] = LIS2_CTRL1_ADDR;
 80010ce:	4b97      	ldr	r3, [pc, #604]	; (800132c <main+0x2f4>)
 80010d0:	2220      	movs	r2, #32
 80010d2:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = LIS2_CTRL1_Write;
 80010d4:	4b95      	ldr	r3, [pc, #596]	; (800132c <main+0x2f4>)
 80010d6:	2278      	movs	r2, #120	; 0x78
 80010d8:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2302      	movs	r3, #2
 80010e2:	4a92      	ldr	r2, [pc, #584]	; (800132c <main+0x2f4>)
 80010e4:	213a      	movs	r1, #58	; 0x3a
 80010e6:	488f      	ldr	r0, [pc, #572]	; (8001324 <main+0x2ec>)
 80010e8:	f001 ff70 	bl	8002fcc <HAL_I2C_Master_Transmit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b8d      	ldr	r3, [pc, #564]	; (8001328 <main+0x2f0>)
 80010f2:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Write setting to FIFO register
  I2C_trans[0] = LIS2_FIFO_ADDR;
 80010f4:	4b8d      	ldr	r3, [pc, #564]	; (800132c <main+0x2f4>)
 80010f6:	2225      	movs	r2, #37	; 0x25
 80010f8:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = LIS2_FIFO_Write;
 80010fa:	4b8c      	ldr	r3, [pc, #560]	; (800132c <main+0x2f4>)
 80010fc:	22c0      	movs	r2, #192	; 0xc0
 80010fe:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2302      	movs	r3, #2
 8001108:	4a88      	ldr	r2, [pc, #544]	; (800132c <main+0x2f4>)
 800110a:	213a      	movs	r1, #58	; 0x3a
 800110c:	4885      	ldr	r0, [pc, #532]	; (8001324 <main+0x2ec>)
 800110e:	f001 ff5d 	bl	8002fcc <HAL_I2C_Master_Transmit>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b84      	ldr	r3, [pc, #528]	; (8001328 <main+0x2f0>)
 8001118:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  /*Initialize Temp module (SPI)*/
  //Reset command
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	4884      	ldr	r0, [pc, #528]	; (8001330 <main+0x2f8>)
 8001120:	f001 fdf6 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_CMD_RESET;
 8001124:	4b83      	ldr	r3, [pc, #524]	; (8001334 <main+0x2fc>)
 8001126:	227c      	movs	r2, #124	; 0x7c
 8001128:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	4980      	ldr	r1, [pc, #512]	; (8001334 <main+0x2fc>)
 8001132:	4881      	ldr	r0, [pc, #516]	; (8001338 <main+0x300>)
 8001134:	f003 fc51 	bl	80049da <HAL_SPI_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b7a      	ldr	r3, [pc, #488]	; (8001328 <main+0x2f0>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	4b79      	ldr	r3, [pc, #484]	; (8001328 <main+0x2f0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d000      	beq.n	800114a <main+0x112>
	  //error handler
	  while(1);
 8001148:	e7fe      	b.n	8001148 <main+0x110>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4878      	ldr	r0, [pc, #480]	; (8001330 <main+0x2f8>)
 8001150:	f001 fdde 	bl	8002d10 <HAL_GPIO_WritePin>
  //Setup MUX
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2110      	movs	r1, #16
 8001158:	4875      	ldr	r0, [pc, #468]	; (8001330 <main+0x2f8>)
 800115a:	f001 fdd9 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_MUX | MCP_WRITE;
 800115e:	4b75      	ldr	r3, [pc, #468]	; (8001334 <main+0x2fc>)
 8001160:	225a      	movs	r2, #90	; 0x5a
 8001162:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x01;
 8001164:	4b73      	ldr	r3, [pc, #460]	; (8001334 <main+0x2fc>)
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	2202      	movs	r2, #2
 8001170:	4970      	ldr	r1, [pc, #448]	; (8001334 <main+0x2fc>)
 8001172:	4871      	ldr	r0, [pc, #452]	; (8001338 <main+0x300>)
 8001174:	f003 fc31 	bl	80049da <HAL_SPI_Transmit>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b6a      	ldr	r3, [pc, #424]	; (8001328 <main+0x2f0>)
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <main+0x2f0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d000      	beq.n	800118a <main+0x152>
	  //error handler
	  while(1);
 8001188:	e7fe      	b.n	8001188 <main+0x150>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2110      	movs	r1, #16
 800118e:	4868      	ldr	r0, [pc, #416]	; (8001330 <main+0x2f8>)
 8001190:	f001 fdbe 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2110      	movs	r1, #16
 8001198:	4865      	ldr	r0, [pc, #404]	; (8001330 <main+0x2f8>)
 800119a:	f001 fdb9 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_MUX | MCP_STATICREAD;
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <main+0x2fc>)
 80011a0:	2259      	movs	r2, #89	; 0x59
 80011a2:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	2201      	movs	r2, #1
 80011aa:	4962      	ldr	r1, [pc, #392]	; (8001334 <main+0x2fc>)
 80011ac:	4862      	ldr	r0, [pc, #392]	; (8001338 <main+0x300>)
 80011ae:	f003 fc14 	bl	80049da <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <main+0x2f0>)
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <main+0x2f0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d000      	beq.n	80011c4 <main+0x18c>
	  //error handler
	  while(1);
 80011c2:	e7fe      	b.n	80011c2 <main+0x18a>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	495c      	ldr	r1, [pc, #368]	; (800133c <main+0x304>)
 80011cc:	485a      	ldr	r0, [pc, #360]	; (8001338 <main+0x300>)
 80011ce:	f003 fd40 	bl	8004c52 <HAL_SPI_Receive>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b54      	ldr	r3, [pc, #336]	; (8001328 <main+0x2f0>)
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <main+0x2f0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d000      	beq.n	80011e4 <main+0x1ac>
	  //error handler
	  while(1);
 80011e2:	e7fe      	b.n	80011e2 <main+0x1aa>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2110      	movs	r1, #16
 80011e8:	4851      	ldr	r0, [pc, #324]	; (8001330 <main+0x2f8>)
 80011ea:	f001 fd91 	bl	8002d10 <HAL_GPIO_WritePin>
  //Write settings to config register 0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	484f      	ldr	r0, [pc, #316]	; (8001330 <main+0x2f8>)
 80011f4:	f001 fd8c 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF0 | MCP_WRITE;
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <main+0x2fc>)
 80011fa:	2246      	movs	r2, #70	; 0x46
 80011fc:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xC3;
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <main+0x2fc>)
 8001200:	22c3      	movs	r2, #195	; 0xc3
 8001202:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2202      	movs	r2, #2
 800120a:	494a      	ldr	r1, [pc, #296]	; (8001334 <main+0x2fc>)
 800120c:	484a      	ldr	r0, [pc, #296]	; (8001338 <main+0x300>)
 800120e:	f003 fbe4 	bl	80049da <HAL_SPI_Transmit>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <main+0x2f0>)
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	4b43      	ldr	r3, [pc, #268]	; (8001328 <main+0x2f0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d000      	beq.n	8001224 <main+0x1ec>
	  //error handler
	  while(1);
 8001222:	e7fe      	b.n	8001222 <main+0x1ea>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2110      	movs	r1, #16
 8001228:	4841      	ldr	r0, [pc, #260]	; (8001330 <main+0x2f8>)
 800122a:	f001 fd71 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2110      	movs	r1, #16
 8001232:	483f      	ldr	r0, [pc, #252]	; (8001330 <main+0x2f8>)
 8001234:	f001 fd6c 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF0 | MCP_STATICREAD;	//01000101
 8001238:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <main+0x2fc>)
 800123a:	2245      	movs	r2, #69	; 0x45
 800123c:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2201      	movs	r2, #1
 8001244:	493b      	ldr	r1, [pc, #236]	; (8001334 <main+0x2fc>)
 8001246:	483c      	ldr	r0, [pc, #240]	; (8001338 <main+0x300>)
 8001248:	f003 fbc7 	bl	80049da <HAL_SPI_Transmit>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <main+0x2f0>)
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <main+0x2f0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d000      	beq.n	800125e <main+0x226>
	  //error handler
	  while(1);
 800125c:	e7fe      	b.n	800125c <main+0x224>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2201      	movs	r2, #1
 8001264:	4935      	ldr	r1, [pc, #212]	; (800133c <main+0x304>)
 8001266:	4834      	ldr	r0, [pc, #208]	; (8001338 <main+0x300>)
 8001268:	f003 fcf3 	bl	8004c52 <HAL_SPI_Receive>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <main+0x2f0>)
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <main+0x2f0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d000      	beq.n	800127e <main+0x246>
	  //error handler
	  while(1);
 800127c:	e7fe      	b.n	800127c <main+0x244>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	2110      	movs	r1, #16
 8001282:	482b      	ldr	r0, [pc, #172]	; (8001330 <main+0x2f8>)
 8001284:	f001 fd44 	bl	8002d10 <HAL_GPIO_WritePin>
  //Write settings to config register 1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2110      	movs	r1, #16
 800128c:	4828      	ldr	r0, [pc, #160]	; (8001330 <main+0x2f8>)
 800128e:	f001 fd3f 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF1 | MCP_WRITE;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <main+0x2fc>)
 8001294:	224a      	movs	r2, #74	; 0x4a
 8001296:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xCC; //F0 for diff CC for single
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <main+0x2fc>)
 800129a:	22cc      	movs	r2, #204	; 0xcc
 800129c:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2202      	movs	r2, #2
 80012a4:	4923      	ldr	r1, [pc, #140]	; (8001334 <main+0x2fc>)
 80012a6:	4824      	ldr	r0, [pc, #144]	; (8001338 <main+0x300>)
 80012a8:	f003 fb97 	bl	80049da <HAL_SPI_Transmit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <main+0x2f0>)
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <main+0x2f0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d000      	beq.n	80012be <main+0x286>
	  //error handler
	  while(1);
 80012bc:	e7fe      	b.n	80012bc <main+0x284>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2110      	movs	r1, #16
 80012c2:	481b      	ldr	r0, [pc, #108]	; (8001330 <main+0x2f8>)
 80012c4:	f001 fd24 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2110      	movs	r1, #16
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <main+0x2f8>)
 80012ce:	f001 fd1f 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF1 | MCP_STATICREAD;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <main+0x2fc>)
 80012d4:	2249      	movs	r2, #73	; 0x49
 80012d6:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2201      	movs	r2, #1
 80012de:	4915      	ldr	r1, [pc, #84]	; (8001334 <main+0x2fc>)
 80012e0:	4815      	ldr	r0, [pc, #84]	; (8001338 <main+0x300>)
 80012e2:	f003 fb7a 	bl	80049da <HAL_SPI_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <main+0x2f0>)
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <main+0x2f0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d000      	beq.n	80012f8 <main+0x2c0>
	  //error handler
	  while(1);
 80012f6:	e7fe      	b.n	80012f6 <main+0x2be>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	2201      	movs	r2, #1
 80012fe:	490f      	ldr	r1, [pc, #60]	; (800133c <main+0x304>)
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <main+0x300>)
 8001302:	f003 fca6 	bl	8004c52 <HAL_SPI_Receive>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <main+0x2f0>)
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <main+0x2f0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d014      	beq.n	8001340 <main+0x308>
	  //error handler
	  while(1);
 8001316:	e7fe      	b.n	8001316 <main+0x2de>
 8001318:	e0001000 	.word	0xe0001000
 800131c:	e000edfc 	.word	0xe000edfc
 8001320:	e0001004 	.word	0xe0001004
 8001324:	20000204 	.word	0x20000204
 8001328:	20000352 	.word	0x20000352
 800132c:	2000034c 	.word	0x2000034c
 8001330:	40020000 	.word	0x40020000
 8001334:	20000330 	.word	0x20000330
 8001338:	20000258 	.word	0x20000258
 800133c:	20000338 	.word	0x20000338
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2110      	movs	r1, #16
 8001344:	48a0      	ldr	r0, [pc, #640]	; (80015c8 <main+0x590>)
 8001346:	f001 fce3 	bl	8002d10 <HAL_GPIO_WritePin>
  //Write settings to config register 2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	489e      	ldr	r0, [pc, #632]	; (80015c8 <main+0x590>)
 8001350:	f001 fcde 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF2 | MCP_WRITE;
 8001354:	4b9d      	ldr	r3, [pc, #628]	; (80015cc <main+0x594>)
 8001356:	224e      	movs	r2, #78	; 0x4e
 8001358:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x0B;
 800135a:	4b9c      	ldr	r3, [pc, #624]	; (80015cc <main+0x594>)
 800135c:	220b      	movs	r2, #11
 800135e:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	2202      	movs	r2, #2
 8001366:	4999      	ldr	r1, [pc, #612]	; (80015cc <main+0x594>)
 8001368:	4899      	ldr	r0, [pc, #612]	; (80015d0 <main+0x598>)
 800136a:	f003 fb36 	bl	80049da <HAL_SPI_Transmit>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b98      	ldr	r3, [pc, #608]	; (80015d4 <main+0x59c>)
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	4b97      	ldr	r3, [pc, #604]	; (80015d4 <main+0x59c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d000      	beq.n	8001380 <main+0x348>
	  //error handler
	  while(1);
 800137e:	e7fe      	b.n	800137e <main+0x346>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2110      	movs	r1, #16
 8001384:	4890      	ldr	r0, [pc, #576]	; (80015c8 <main+0x590>)
 8001386:	f001 fcc3 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2110      	movs	r1, #16
 800138e:	488e      	ldr	r0, [pc, #568]	; (80015c8 <main+0x590>)
 8001390:	f001 fcbe 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF2 | MCP_STATICREAD;
 8001394:	4b8d      	ldr	r3, [pc, #564]	; (80015cc <main+0x594>)
 8001396:	224d      	movs	r2, #77	; 0x4d
 8001398:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	2201      	movs	r2, #1
 80013a0:	498a      	ldr	r1, [pc, #552]	; (80015cc <main+0x594>)
 80013a2:	488b      	ldr	r0, [pc, #556]	; (80015d0 <main+0x598>)
 80013a4:	f003 fb19 	bl	80049da <HAL_SPI_Transmit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b89      	ldr	r3, [pc, #548]	; (80015d4 <main+0x59c>)
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <main+0x59c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d000      	beq.n	80013ba <main+0x382>
	  //error handler
	  while(1);
 80013b8:	e7fe      	b.n	80013b8 <main+0x380>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	2201      	movs	r2, #1
 80013c0:	4985      	ldr	r1, [pc, #532]	; (80015d8 <main+0x5a0>)
 80013c2:	4883      	ldr	r0, [pc, #524]	; (80015d0 <main+0x598>)
 80013c4:	f003 fc45 	bl	8004c52 <HAL_SPI_Receive>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <main+0x59c>)
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <main+0x59c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d000      	beq.n	80013da <main+0x3a2>
	  //error handler
	  while(1);
 80013d8:	e7fe      	b.n	80013d8 <main+0x3a0>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2110      	movs	r1, #16
 80013de:	487a      	ldr	r0, [pc, #488]	; (80015c8 <main+0x590>)
 80013e0:	f001 fc96 	bl	8002d10 <HAL_GPIO_WritePin>
  //Write settings to config register 3
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2110      	movs	r1, #16
 80013e8:	4877      	ldr	r0, [pc, #476]	; (80015c8 <main+0x590>)
 80013ea:	f001 fc91 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF3 | MCP_WRITE;
 80013ee:	4b77      	ldr	r3, [pc, #476]	; (80015cc <main+0x594>)
 80013f0:	2252      	movs	r2, #82	; 0x52
 80013f2:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xC0;
 80013f4:	4b75      	ldr	r3, [pc, #468]	; (80015cc <main+0x594>)
 80013f6:	22c0      	movs	r2, #192	; 0xc0
 80013f8:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2202      	movs	r2, #2
 8001400:	4972      	ldr	r1, [pc, #456]	; (80015cc <main+0x594>)
 8001402:	4873      	ldr	r0, [pc, #460]	; (80015d0 <main+0x598>)
 8001404:	f003 fae9 	bl	80049da <HAL_SPI_Transmit>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b71      	ldr	r3, [pc, #452]	; (80015d4 <main+0x59c>)
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <main+0x59c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d000      	beq.n	800141a <main+0x3e2>
	  //error handler
	  while(1);
 8001418:	e7fe      	b.n	8001418 <main+0x3e0>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2110      	movs	r1, #16
 800141e:	486a      	ldr	r0, [pc, #424]	; (80015c8 <main+0x590>)
 8001420:	f001 fc76 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2110      	movs	r1, #16
 8001428:	4867      	ldr	r0, [pc, #412]	; (80015c8 <main+0x590>)
 800142a:	f001 fc71 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF3 | MCP_STATICREAD;
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <main+0x594>)
 8001430:	2251      	movs	r2, #81	; 0x51
 8001432:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2201      	movs	r2, #1
 800143a:	4964      	ldr	r1, [pc, #400]	; (80015cc <main+0x594>)
 800143c:	4864      	ldr	r0, [pc, #400]	; (80015d0 <main+0x598>)
 800143e:	f003 facc 	bl	80049da <HAL_SPI_Transmit>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <main+0x59c>)
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <main+0x59c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d000      	beq.n	8001454 <main+0x41c>
	  //error handler
	  while(1);
 8001452:	e7fe      	b.n	8001452 <main+0x41a>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	495f      	ldr	r1, [pc, #380]	; (80015d8 <main+0x5a0>)
 800145c:	485c      	ldr	r0, [pc, #368]	; (80015d0 <main+0x598>)
 800145e:	f003 fbf8 	bl	8004c52 <HAL_SPI_Receive>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <main+0x59c>)
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <main+0x59c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d000      	beq.n	8001474 <main+0x43c>
	  //error handler
	  while(1);
 8001472:	e7fe      	b.n	8001472 <main+0x43a>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2110      	movs	r1, #16
 8001478:	4853      	ldr	r0, [pc, #332]	; (80015c8 <main+0x590>)
 800147a:	f001 fc49 	bl	8002d10 <HAL_GPIO_WritePin>
  //Write settings to config IRQ
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2110      	movs	r1, #16
 8001482:	4851      	ldr	r0, [pc, #324]	; (80015c8 <main+0x590>)
 8001484:	f001 fc44 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_IRQ | MCP_WRITE;
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <main+0x594>)
 800148a:	2256      	movs	r2, #86	; 0x56
 800148c:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x77;
 800148e:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <main+0x594>)
 8001490:	2277      	movs	r2, #119	; 0x77
 8001492:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	2202      	movs	r2, #2
 800149a:	494c      	ldr	r1, [pc, #304]	; (80015cc <main+0x594>)
 800149c:	484c      	ldr	r0, [pc, #304]	; (80015d0 <main+0x598>)
 800149e:	f003 fa9c 	bl	80049da <HAL_SPI_Transmit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <main+0x59c>)
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	4b4a      	ldr	r3, [pc, #296]	; (80015d4 <main+0x59c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d000      	beq.n	80014b4 <main+0x47c>
	  while(1);
 80014b2:	e7fe      	b.n	80014b2 <main+0x47a>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	4843      	ldr	r0, [pc, #268]	; (80015c8 <main+0x590>)
 80014ba:	f001 fc29 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	4841      	ldr	r0, [pc, #260]	; (80015c8 <main+0x590>)
 80014c4:	f001 fc24 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_IRQ | MCP_STATICREAD;
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <main+0x594>)
 80014ca:	2255      	movs	r2, #85	; 0x55
 80014cc:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	2201      	movs	r2, #1
 80014d4:	493d      	ldr	r1, [pc, #244]	; (80015cc <main+0x594>)
 80014d6:	483e      	ldr	r0, [pc, #248]	; (80015d0 <main+0x598>)
 80014d8:	f003 fa7f 	bl	80049da <HAL_SPI_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <main+0x59c>)
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <main+0x59c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d000      	beq.n	80014ee <main+0x4b6>
	  while(1);
 80014ec:	e7fe      	b.n	80014ec <main+0x4b4>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	2201      	movs	r2, #1
 80014f4:	4938      	ldr	r1, [pc, #224]	; (80015d8 <main+0x5a0>)
 80014f6:	4836      	ldr	r0, [pc, #216]	; (80015d0 <main+0x598>)
 80014f8:	f003 fbab 	bl	8004c52 <HAL_SPI_Receive>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <main+0x59c>)
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <main+0x59c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d000      	beq.n	800150e <main+0x4d6>
	  while(1);
 800150c:	e7fe      	b.n	800150c <main+0x4d4>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2110      	movs	r1, #16
 8001512:	482d      	ldr	r0, [pc, #180]	; (80015c8 <main+0x590>)
 8001514:	f001 fbfc 	bl	8002d10 <HAL_GPIO_WritePin>

  //Conversion start thermistor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	482a      	ldr	r0, [pc, #168]	; (80015c8 <main+0x590>)
 800151e:	f001 fbf7 	bl	8002d10 <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_CMD_CONV;
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <main+0x594>)
 8001524:	2268      	movs	r2, #104	; 0x68
 8001526:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	2201      	movs	r2, #1
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <main+0x594>)
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <main+0x598>)
 8001532:	f003 fa52 	bl	80049da <HAL_SPI_Transmit>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <main+0x59c>)
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <main+0x59c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d000      	beq.n	8001548 <main+0x510>
	  while(1);
 8001546:	e7fe      	b.n	8001546 <main+0x50e>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2110      	movs	r1, #16
 800154c:	481e      	ldr	r0, [pc, #120]	; (80015c8 <main+0x590>)
 800154e:	f001 fbdf 	bl	8002d10 <HAL_GPIO_WritePin>
  //Initialize DSP functions
  arm_rfft_fast_init_f32(&S, FFT_SIZE);
 8001552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001556:	4821      	ldr	r0, [pc, #132]	; (80015dc <main+0x5a4>)
 8001558:	f007 fbf8 	bl	8008d4c <arm_rfft_fast_init_f32>
  /* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
  arm_cfft_radix4_init_f32(&L, FFT_SIZE, 0, 1);
 800155c:	2301      	movs	r3, #1
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001564:	481e      	ldr	r0, [pc, #120]	; (80015e0 <main+0x5a8>)
 8001566:	f007 fc75 	bl	8008e54 <arm_cfft_radix4_init_f32>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2101      	movs	r1, #1
 800156e:	4816      	ldr	r0, [pc, #88]	; (80015c8 <main+0x590>)
 8001570:	f001 fbce 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001578:	f001 f948 	bl	800280c <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800157c:	f004 fe00 	bl	8006180 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Accelerometer */
  AccelerometerHandle = osThreadNew(StartAccelerometer, NULL, &Accelerometer_attributes);
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <main+0x5ac>)
 8001582:	2100      	movs	r1, #0
 8001584:	4818      	ldr	r0, [pc, #96]	; (80015e8 <main+0x5b0>)
 8001586:	f004 fe45 	bl	8006214 <osThreadNew>
 800158a:	4603      	mov	r3, r0
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <main+0x5b4>)
 800158e:	6013      	str	r3, [r2, #0]

  /* creation of Humidity */
  HumidityHandle = osThreadNew(StartHumidity, NULL, &Humidity_attributes);
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <main+0x5b8>)
 8001592:	2100      	movs	r1, #0
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <main+0x5bc>)
 8001596:	f004 fe3d 	bl	8006214 <osThreadNew>
 800159a:	4603      	mov	r3, r0
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <main+0x5c0>)
 800159e:	6013      	str	r3, [r2, #0]

  /* creation of Temperature */
  TemperatureHandle = osThreadNew(StartTemperature, NULL, &Temperature_attributes);
 80015a0:	4a16      	ldr	r2, [pc, #88]	; (80015fc <main+0x5c4>)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <main+0x5c8>)
 80015a6:	f004 fe35 	bl	8006214 <osThreadNew>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a15      	ldr	r2, [pc, #84]	; (8001604 <main+0x5cc>)
 80015ae:	6013      	str	r3, [r2, #0]

  /* creation of UART */
  UARTHandle = osThreadNew(StartUART, NULL, &UART_attributes);
 80015b0:	4a15      	ldr	r2, [pc, #84]	; (8001608 <main+0x5d0>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4815      	ldr	r0, [pc, #84]	; (800160c <main+0x5d4>)
 80015b6:	f004 fe2d 	bl	8006214 <osThreadNew>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <main+0x5d8>)
 80015be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015c0:	f004 fe02 	bl	80061c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x58c>
 80015c6:	bf00      	nop
 80015c8:	40020000 	.word	0x40020000
 80015cc:	20000330 	.word	0x20000330
 80015d0:	20000258 	.word	0x20000258
 80015d4:	20000352 	.word	0x20000352
 80015d8:	20000338 	.word	0x20000338
 80015dc:	20000304 	.word	0x20000304
 80015e0:	2000031c 	.word	0x2000031c
 80015e4:	0800f660 	.word	0x0800f660
 80015e8:	08001919 	.word	0x08001919
 80015ec:	200002f4 	.word	0x200002f4
 80015f0:	0800f684 	.word	0x0800f684
 80015f4:	08001d79 	.word	0x08001d79
 80015f8:	200002f8 	.word	0x200002f8
 80015fc:	0800f6a8 	.word	0x0800f6a8
 8001600:	08001ed1 	.word	0x08001ed1
 8001604:	200002fc 	.word	0x200002fc
 8001608:	0800f6cc 	.word	0x0800f6cc
 800160c:	080021a1 	.word	0x080021a1
 8001610:	20000300 	.word	0x20000300

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b094      	sub	sp, #80	; 0x50
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	2234      	movs	r2, #52	; 0x34
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f008 fac7 	bl	8009bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <SystemClock_Config+0xdc>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <SystemClock_Config+0xdc>)
 8001642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <SystemClock_Config+0xdc>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <SystemClock_Config+0xe0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <SystemClock_Config+0xe0>)
 800165e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <SystemClock_Config+0xe0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167a:	2302      	movs	r3, #2
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001684:	2310      	movs	r3, #16
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 256;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800168e:	2304      	movs	r3, #4
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001692:	2302      	movs	r3, #2
 8001694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001696:	2302      	movs	r3, #2
 8001698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fe8e 	bl	80043c0 <HAL_RCC_OscConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016aa:	f000 fdcf 	bl	800224c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ae:	230f      	movs	r3, #15
 80016b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b2:	2302      	movs	r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	2103      	movs	r1, #3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fbfe 	bl	8003ecc <HAL_RCC_ClockConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016d6:	f000 fdb9 	bl	800224c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_5);
 80016da:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80016de:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80016e2:	2000      	movs	r0, #0
 80016e4:	f002 fcd8 	bl	8004098 <HAL_RCC_MCOConfig>
}
 80016e8:	bf00      	nop
 80016ea:	3750      	adds	r7, #80	; 0x50
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000

080016f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_I2C1_Init+0x50>)
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <MX_I2C1_Init+0x54>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_I2C1_Init+0x50>)
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_I2C1_Init+0x58>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_I2C1_Init+0x50>)
 8001716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_I2C1_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_I2C1_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_I2C1_Init+0x50>)
 8001736:	f001 fb05 	bl	8002d44 <HAL_I2C_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001740:	f000 fd84 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000204 	.word	0x20000204
 800174c:	40005400 	.word	0x40005400
 8001750:	00061a80 	.word	0x00061a80

08001754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <MX_SPI1_Init+0x64>)
 800175a:	4a18      	ldr	r2, [pc, #96]	; (80017bc <MX_SPI1_Init+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <MX_SPI1_Init+0x64>)
 8001760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_SPI1_Init+0x64>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_SPI1_Init+0x64>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_SPI1_Init+0x64>)
 8001774:	2202      	movs	r2, #2
 8001776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_SPI1_Init+0x64>)
 800177a:	2201      	movs	r2, #1
 800177c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_SPI1_Init+0x64>)
 8001780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_SPI1_Init+0x64>)
 8001788:	2210      	movs	r2, #16
 800178a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <MX_SPI1_Init+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_SPI1_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <MX_SPI1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_SPI1_Init+0x64>)
 80017a0:	220a      	movs	r2, #10
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_SPI1_Init+0x64>)
 80017a6:	f003 f88f 	bl	80048c8 <HAL_SPI_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017b0:	f000 fd4c 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000258 	.word	0x20000258
 80017bc:	40013000 	.word	0x40013000

080017c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART1_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f8:	f004 f8bc 	bl	8005974 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 fd23 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002b0 	.word	0x200002b0
 8001810:	40011000 	.word	0x40011000

08001814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <MX_GPIO_Init+0xf8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a36      	ldr	r2, [pc, #216]	; (800190c <MX_GPIO_Init+0xf8>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <MX_GPIO_Init+0xf8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <MX_GPIO_Init+0xf8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a2f      	ldr	r2, [pc, #188]	; (800190c <MX_GPIO_Init+0xf8>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <MX_GPIO_Init+0xf8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <MX_GPIO_Init+0xf8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a28      	ldr	r2, [pc, #160]	; (800190c <MX_GPIO_Init+0xf8>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_GPIO_Init+0xf8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thermistorSwitch_Pin|CS_Pin|RTS_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	f640 0111 	movw	r1, #2065	; 0x811
 8001884:	4822      	ldr	r0, [pc, #136]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001886:	f001 fa43 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : thermistorSwitch_Pin */
  GPIO_InitStruct.Pin = thermistorSwitch_Pin;
 800188a:	2301      	movs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(thermistorSwitch_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	481b      	ldr	r0, [pc, #108]	; (8001910 <MX_GPIO_Init+0xfc>)
 80018a2:	f001 f8b9 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80018a6:	2310      	movs	r3, #16
 80018a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4619      	mov	r1, r3
 80018bc:	4814      	ldr	r0, [pc, #80]	; (8001910 <MX_GPIO_Init+0xfc>)
 80018be:	f001 f8ab 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_GPIO_Init+0xfc>)
 80018e0:	f001 f89a 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTS_Pin */
  GPIO_InitStruct.Pin = RTS_Pin;
 80018e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTS_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_GPIO_Init+0xfc>)
 80018fe:	f001 f88b 	bl	8002a18 <HAL_GPIO_Init>

}
 8001902:	bf00      	nop
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000
 8001914:	00000000 	.word	0x00000000

08001918 <StartAccelerometer>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAccelerometer */
void StartAccelerometer(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	f5ad 4d90 	sub.w	sp, sp, #18432	; 0x4800
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af02      	add	r7, sp, #8
 8001922:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001926:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800192a:	6018      	str	r0, [r3, #0]

  int16_t maxValueAxis;

  float32_t Input[SAMPLES];
  float32_t Output[FFT_SIZE];
  uint16_t x = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001932:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001936:	8013      	strh	r3, [r2, #0]

  uint32_t maxIndex;
  float32_t maxValue;

  uint32_t start = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 800193e:	f102 0214 	add.w	r2, r2, #20
 8001942:	6013      	str	r3, [r2, #0]
  uint32_t delta = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 800194a:	f102 0210 	add.w	r2, r2, #16
 800194e:	6013      	str	r3, [r2, #0]
  uint32_t stop = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001956:	f102 0220 	add.w	r2, r2, #32
 800195a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	if(I2C_lock == 0){
 800195c:	4ba6      	ldr	r3, [pc, #664]	; (8001bf8 <StartAccelerometer+0x2e0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 81ff 	bne.w	8001d64 <StartAccelerometer+0x44c>
//			for(;;);
//		}
//		rawYaxis[x] = (rawYaxis[x] | I2C_recv[0])/4;

		//Z axis
		I2C_trans[0] = LIS2_OUTZH;
 8001966:	4ba5      	ldr	r3, [pc, #660]	; (8001bfc <StartAccelerometer+0x2e4>)
 8001968:	222d      	movs	r2, #45	; 0x2d
 800196a:	701a      	strb	r2, [r3, #0]
		if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, &I2C_trans[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	4aa1      	ldr	r2, [pc, #644]	; (8001bfc <StartAccelerometer+0x2e4>)
 8001976:	213a      	movs	r1, #58	; 0x3a
 8001978:	48a1      	ldr	r0, [pc, #644]	; (8001c00 <StartAccelerometer+0x2e8>)
 800197a:	f001 fb27 	bl	8002fcc <HAL_I2C_Master_Transmit>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4ba0      	ldr	r3, [pc, #640]	; (8001c04 <StartAccelerometer+0x2ec>)
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	4b9f      	ldr	r3, [pc, #636]	; (8001c04 <StartAccelerometer+0x2ec>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d014      	beq.n	80019b8 <StartAccelerometer+0xa0>
			//error handler
			do{
				vTaskDelay(1000);
 800198e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001992:	f005 fc79 	bl	8007288 <vTaskDelay>
				ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, &I2C_trans[0], 1, HAL_MAX_DELAY);
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	4a97      	ldr	r2, [pc, #604]	; (8001bfc <StartAccelerometer+0x2e4>)
 80019a0:	213a      	movs	r1, #58	; 0x3a
 80019a2:	4897      	ldr	r0, [pc, #604]	; (8001c00 <StartAccelerometer+0x2e8>)
 80019a4:	f001 fb12 	bl	8002fcc <HAL_I2C_Master_Transmit>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b95      	ldr	r3, [pc, #596]	; (8001c04 <StartAccelerometer+0x2ec>)
 80019ae:	701a      	strb	r2, [r3, #0]
			}while(ret != HAL_OK);
 80019b0:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <StartAccelerometer+0x2ec>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ea      	bne.n	800198e <StartAccelerometer+0x76>
		}
		if((ret = HAL_I2C_Master_Receive(&hi2c1, LIS2_ADDR, &I2C_recv[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	4a91      	ldr	r2, [pc, #580]	; (8001c08 <StartAccelerometer+0x2f0>)
 80019c2:	213a      	movs	r1, #58	; 0x3a
 80019c4:	488e      	ldr	r0, [pc, #568]	; (8001c00 <StartAccelerometer+0x2e8>)
 80019c6:	f001 fbff 	bl	80031c8 <HAL_I2C_Master_Receive>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b8d      	ldr	r3, [pc, #564]	; (8001c04 <StartAccelerometer+0x2ec>)
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <StartAccelerometer+0x2ec>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d000      	beq.n	80019dc <StartAccelerometer+0xc4>
			//error handler
			for(;;);
 80019da:	e7fe      	b.n	80019da <StartAccelerometer+0xc2>
		}
		rawZaxis[x] = I2C_recv[0] << 8;
 80019dc:	4b8a      	ldr	r3, [pc, #552]	; (8001c08 <StartAccelerometer+0x2f0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 80019e6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	b219      	sxth	r1, r3
 80019ee:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 80019f2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019f6:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80019fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		I2C_trans[0] = LIS2_OUTZL;
 80019fe:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <StartAccelerometer+0x2e4>)
 8001a00:	222c      	movs	r2, #44	; 0x2c
 8001a02:	701a      	strb	r2, [r3, #0]
		if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, &I2C_trans[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4a7b      	ldr	r2, [pc, #492]	; (8001bfc <StartAccelerometer+0x2e4>)
 8001a0e:	213a      	movs	r1, #58	; 0x3a
 8001a10:	487b      	ldr	r0, [pc, #492]	; (8001c00 <StartAccelerometer+0x2e8>)
 8001a12:	f001 fadb 	bl	8002fcc <HAL_I2C_Master_Transmit>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <StartAccelerometer+0x2ec>)
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <StartAccelerometer+0x2ec>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d000      	beq.n	8001a28 <StartAccelerometer+0x110>
			//error handler
			for(;;);
 8001a26:	e7fe      	b.n	8001a26 <StartAccelerometer+0x10e>
		}
		if((ret = HAL_I2C_Master_Receive(&hi2c1, LIS2_ADDR, &I2C_recv[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <StartAccelerometer+0x2f0>)
 8001a32:	213a      	movs	r1, #58	; 0x3a
 8001a34:	4872      	ldr	r0, [pc, #456]	; (8001c00 <StartAccelerometer+0x2e8>)
 8001a36:	f001 fbc7 	bl	80031c8 <HAL_I2C_Master_Receive>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b71      	ldr	r3, [pc, #452]	; (8001c04 <StartAccelerometer+0x2ec>)
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <StartAccelerometer+0x2ec>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d000      	beq.n	8001a4c <StartAccelerometer+0x134>
			//error handler
			for(;;);
 8001a4a:	e7fe      	b.n	8001a4a <StartAccelerometer+0x132>
		}
		rawZaxis[x] = (rawZaxis[x] | I2C_recv[0])/4;//14 bit divide by 4, 12 bit divide by 16
 8001a4c:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001a50:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001a5a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a5e:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001a62:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <StartAccelerometer+0x2f0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da00      	bge.n	8001a74 <StartAccelerometer+0x15c>
 8001a72:	3303      	adds	r3, #3
 8001a74:	109b      	asrs	r3, r3, #2
 8001a76:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001a7a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001a7e:	8812      	ldrh	r2, [r2, #0]
 8001a80:	b219      	sxth	r1, r3
 8001a82:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001a86:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a8a:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001a8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		x++;
 8001a92:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001a96:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001aa2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001aa6:	8013      	strh	r3, [r2, #0]

		start = ARM_CM_DWT_CYCCNT;
 8001aa8:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <StartAccelerometer+0x2f4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001ab0:	f102 0214 	add.w	r2, r2, #20
 8001ab4:	6013      	str	r3, [r2, #0]
		delta = start - stop;
 8001ab6:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001aba:	f103 0314 	add.w	r3, r3, #20
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001ac4:	f103 0320 	add.w	r3, r3, #32
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001ad0:	f102 0210 	add.w	r2, r2, #16
 8001ad4:	6013      	str	r3, [r2, #0]
		stop = start;
 8001ad6:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001ada:	f103 0314 	add.w	r3, r3, #20
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001ae4:	f102 0220 	add.w	r2, r2, #32
 8001ae8:	6013      	str	r3, [r2, #0]
		if(x > FFT_SIZE-1){
 8001aea:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001aee:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af8:	f0c0 8134 	bcc.w	8001d64 <StartAccelerometer+0x44c>
			maxValueAxis = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b02:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8001b06:	8013      	strh	r3, [r2, #0]
		    // Storing the largest number
		    for (int i = 1; i < x; i++) {
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b0e:	f102 021c 	add.w	r2, r2, #28
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e031      	b.n	8001b7a <StartAccelerometer+0x262>
		    	if(maxValueAxis < rawZaxis[i]){
 8001b16:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001b1a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001b1e:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001b22:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b26:	f102 021c 	add.w	r2, r2, #28
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b30:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b34:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8001b38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	da11      	bge.n	8001b64 <StartAccelerometer+0x24c>
		    		maxValueAxis = rawZaxis[i];
 8001b40:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001b44:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001b48:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001b4c:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b50:	f102 021c 	add.w	r2, r2, #28
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b5a:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b5e:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8001b62:	8013      	strh	r3, [r2, #0]
		    for (int i = 1; i < x; i++) {
 8001b64:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001b68:	f103 031c 	add.w	r3, r3, #28
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b74:	f102 021c 	add.w	r2, r2, #28
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001b7e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001b88:	f102 021c 	add.w	r2, r2, #28
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbc1      	blt.n	8001b16 <StartAccelerometer+0x1fe>
		    	}
		    }
		    // Calculate amplitude in G with acceleration of z axis with 4G scale and 14 bit data length
		    ampMax = (maxValueAxis * 0.488)/1000;
 8001b92:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001b96:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fce0 	bl	8000564 <__aeabi_i2d>
 8001ba4:	a312      	add	r3, pc, #72	; (adr r3, 8001bf0 <StartAccelerometer+0x2d8>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fd45 	bl	8000638 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <StartAccelerometer+0x2f8>)
 8001bbc:	f7fe fe66 	bl	800088c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff f82e 	bl	8000c28 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <StartAccelerometer+0x2fc>)
 8001bd0:	6013      	str	r3, [r2, #0]
			x = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001bd8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001bdc:	8013      	strh	r3, [r2, #0]

			// DSP functionality
	        for(int i = 0; i < SAMPLES; i += 2){
 8001bde:	2300      	movs	r3, #0
 8001be0:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001be4:	f102 0218 	add.w	r2, r2, #24
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e05f      	b.n	8001cac <StartAccelerometer+0x394>
 8001bec:	f3af 8000 	nop.w
 8001bf0:	5a1cac08 	.word	0x5a1cac08
 8001bf4:	3fdf3b64 	.word	0x3fdf3b64
 8001bf8:	20000353 	.word	0x20000353
 8001bfc:	2000034c 	.word	0x2000034c
 8001c00:	20000204 	.word	0x20000204
 8001c04:	20000352 	.word	0x20000352
 8001c08:	20000340 	.word	0x20000340
 8001c0c:	e0001004 	.word	0xe0001004
 8001c10:	408f4000 	.word	0x408f4000
 8001c14:	2000035c 	.word	0x2000035c
	            /* Real part */
	            Input[(uint16_t)i] = (float32_t)rawZaxis[x];
 8001c18:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001c1c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c20:	881a      	ldrh	r2, [r3, #0]
 8001c22:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001c26:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c2a:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001c2e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001c32:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001c36:	f103 0318 	add.w	r3, r3, #24
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	ee07 2a90 	vmov	s15, r2
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001c4a:	f102 0208 	add.w	r2, r2, #8
 8001c4e:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	edc3 7a00 	vstr	s15, [r3]
	            /* Imaginary part */
	            Input[(uint16_t)(i + 1)] = 0;
 8001c5a:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001c5e:	f103 0318 	add.w	r3, r3, #24
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001c6e:	f102 0208 	add.w	r2, r2, #8
 8001c72:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
	            x++;
 8001c80:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001c84:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001c90:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001c94:	8013      	strh	r3, [r2, #0]
	        for(int i = 0; i < SAMPLES; i += 2){
 8001c96:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001c9a:	f103 0318 	add.w	r3, r3, #24
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001ca6:	f102 0218 	add.w	r2, r2, #24
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8001cb0:	f103 0318 	add.w	r3, r3, #24
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cba:	dbad      	blt.n	8001c18 <StartAccelerometer+0x300>
	        }
	        x = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001cc2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001cc6:	8013      	strh	r3, [r2, #0]
	        /* Process the data through the CFFT/CIFFT module */
	        arm_cfft_radix4_f32(&L, Input);
 8001cc8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ccc:	f103 0308 	add.w	r3, r3, #8
 8001cd0:	3b18      	subs	r3, #24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4825      	ldr	r0, [pc, #148]	; (8001d6c <StartAccelerometer+0x454>)
 8001cd6:	f007 fcc5 	bl	8009664 <arm_cfft_radix4_f32>
	        /* Process the data through the Complex Magnitude Module for calculating the magnitude at each bin */
	        arm_cmplx_mag_f32(Input, Output, FFT_SIZE);
 8001cda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cde:	3918      	subs	r1, #24
 8001ce0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ce4:	f103 0308 	add.w	r3, r3, #8
 8001ce8:	3b18      	subs	r3, #24
 8001cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f007 fcd8 	bl	80096a4 <arm_cmplx_mag_f32>
	        Output[0] = 0;
 8001cf4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001cf8:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
	        /* Calculates maxValue and returns corresponding value */
	        arm_max_f32(Output, FFT_SIZE, &maxValue, &maxIndex);
 8001d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d06:	3b1c      	subs	r3, #28
 8001d08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d0c:	3a20      	subs	r2, #32
 8001d0e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d12:	3818      	subs	r0, #24
 8001d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d18:	f006 ffb0 	bl	8008c7c <arm_max_f32>
	        //calculate frequency.
	        if(maxIndex >= 512){
 8001d1c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d20:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2a:	d305      	bcc.n	8001d38 <StartAccelerometer+0x420>
	        	maxIndex = 0;
 8001d2c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d30:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
	        }
	        freq = (500/(float)(FFT_SIZE)) * (float)maxIndex;
 8001d38:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d3c:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001d70 <StartAccelerometer+0x458>
 8001d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <StartAccelerometer+0x45c>)
 8001d54:	edc3 7a00 	vstr	s15, [r3]
	        x = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8001d5e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001d62:	8013      	strh	r3, [r2, #0]
		}
	}
    osDelay(2);
 8001d64:	2002      	movs	r0, #2
 8001d66:	f004 fae8 	bl	800633a <osDelay>
	if(I2C_lock == 0){
 8001d6a:	e5f7      	b.n	800195c <StartAccelerometer+0x44>
 8001d6c:	2000031c 	.word	0x2000031c
 8001d70:	3efa0000 	.word	0x3efa0000
 8001d74:	20000358 	.word	0x20000358

08001d78 <StartHumidity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHumidity */
void StartHumidity(void *argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	6078      	str	r0, [r7, #4]
  float hum_rh;
  float temp_c;
  /* Infinite loop */
  for(;;)
  {
	I2C_trans[0] = 0x2C;
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <StartHumidity+0x130>)
 8001d82:	222c      	movs	r2, #44	; 0x2c
 8001d84:	701a      	strb	r2, [r3, #0]
	I2C_trans[1] = 0x10;
 8001d86:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <StartHumidity+0x130>)
 8001d88:	2210      	movs	r2, #16
 8001d8a:	705a      	strb	r2, [r3, #1]

	I2C_lock = 1;
 8001d8c:	4b47      	ldr	r3, [pc, #284]	; (8001eac <StartHumidity+0x134>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
	if((ret = HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	4a43      	ldr	r2, [pc, #268]	; (8001ea8 <StartHumidity+0x130>)
 8001d9c:	2188      	movs	r1, #136	; 0x88
 8001d9e:	4844      	ldr	r0, [pc, #272]	; (8001eb0 <StartHumidity+0x138>)
 8001da0:	f001 f914 	bl	8002fcc <HAL_I2C_Master_Transmit>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <StartHumidity+0x13c>)
 8001daa:	701a      	strb	r2, [r3, #0]
		//error handler
	}
	if((ret = HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, I2C_recv, 10, HAL_MAX_DELAY)) != HAL_OK){
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	230a      	movs	r3, #10
 8001db4:	4a40      	ldr	r2, [pc, #256]	; (8001eb8 <StartHumidity+0x140>)
 8001db6:	2188      	movs	r1, #136	; 0x88
 8001db8:	483d      	ldr	r0, [pc, #244]	; (8001eb0 <StartHumidity+0x138>)
 8001dba:	f001 fa05 	bl	80031c8 <HAL_I2C_Master_Receive>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <StartHumidity+0x13c>)
 8001dc4:	701a      	strb	r2, [r3, #0]
		//error handler
	}
	I2C_lock = 0;
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <StartHumidity+0x134>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
	val = I2C_recv[0] << 8 | I2C_recv[1];
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <StartHumidity+0x140>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <StartHumidity+0x140>)
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	82fb      	strh	r3, [r7, #22]
	temp_c = -45+(175*(val/((pow(2,16))-1)));
 8001de0:	8afb      	ldrh	r3, [r7, #22]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fbbe 	bl	8000564 <__aeabi_i2d>
 8001de8:	a32b      	add	r3, pc, #172	; (adr r3, 8001e98 <StartHumidity+0x120>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fd4d 	bl	800088c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	a329      	add	r3, pc, #164	; (adr r3, 8001ea0 <StartHumidity+0x128>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fc1a 	bl	8000638 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <StartHumidity+0x144>)
 8001e12:	f7fe fa59 	bl	80002c8 <__aeabi_dsub>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe ff03 	bl	8000c28 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]
	val = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	82fb      	strh	r3, [r7, #22]
	val = I2C_recv[3] << 8 | I2C_recv[4];
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <StartHumidity+0x140>)
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <StartHumidity+0x140>)
 8001e34:	791b      	ldrb	r3, [r3, #4]
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	82fb      	strh	r3, [r7, #22]
	hum_rh = 100*(val/((pow(2,16))-1));
 8001e3e:	8afb      	ldrh	r3, [r7, #22]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb8f 	bl	8000564 <__aeabi_i2d>
 8001e46:	a314      	add	r3, pc, #80	; (adr r3, 8001e98 <StartHumidity+0x120>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fd1e 	bl	800088c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <StartHumidity+0x148>)
 8001e5e:	f7fe fbeb 	bl	8000638 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fedd 	bl	8000c28 <__aeabi_d2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	60fb      	str	r3, [r7, #12]
	if(hum_rh >= 75){
 8001e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e76:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001ec4 <StartHumidity+0x14c>
 8001e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	db02      	blt.n	8001e8a <StartHumidity+0x112>
		humAlarm = 1;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <StartHumidity+0x150>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
	}
    osDelay(100);
 8001e8a:	2064      	movs	r0, #100	; 0x64
 8001e8c:	f004 fa55 	bl	800633a <osDelay>
	I2C_trans[0] = 0x2C;
 8001e90:	e776      	b.n	8001d80 <StartHumidity+0x8>
 8001e92:	bf00      	nop
 8001e94:	f3af 8000 	nop.w
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	40efffe0 	.word	0x40efffe0
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	4065e000 	.word	0x4065e000
 8001ea8:	2000034c 	.word	0x2000034c
 8001eac:	20000353 	.word	0x20000353
 8001eb0:	20000204 	.word	0x20000204
 8001eb4:	20000352 	.word	0x20000352
 8001eb8:	20000340 	.word	0x20000340
 8001ebc:	40468000 	.word	0x40468000
 8001ec0:	40590000 	.word	0x40590000
 8001ec4:	42960000 	.word	0x42960000
 8001ec8:	20000354 	.word	0x20000354
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <StartTemperature>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemperature */
void StartTemperature(void *argument)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemperature */
  int32_t val = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
//  float tempTemp = 0;
//  uint8_t tempCounter = 0;
  float voltage = 0;
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  float voltageDif = 0;
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  float voltageFix = VOLTAGE/2;
 8001ee8:	4ba3      	ldr	r3, [pc, #652]	; (8002178 <StartTemperature+0x2a8>)
 8001eea:	60fb      	str	r3, [r7, #12]
  float resistance = 0;
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	val = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
	voltage = 0;
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	2101      	movs	r1, #1
 8001f00:	489e      	ldr	r0, [pc, #632]	; (800217c <StartTemperature+0x2ac>)
 8001f02:	f000 ff05 	bl	8002d10 <HAL_GPIO_WritePin>
	vTaskDelay(500);
 8001f06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f0a:	f005 f9bd 	bl	8007288 <vTaskDelay>
	//Read ADC
	SPI_trans[0] =  MCP_ADDR | MCP_DATA | MCP_STATICREAD;
 8001f0e:	4b9c      	ldr	r3, [pc, #624]	; (8002180 <StartTemperature+0x2b0>)
 8001f10:	2241      	movs	r2, #65	; 0x41
 8001f12:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2110      	movs	r1, #16
 8001f18:	4898      	ldr	r0, [pc, #608]	; (800217c <StartTemperature+0x2ac>)
 8001f1a:	f000 fef9 	bl	8002d10 <HAL_GPIO_WritePin>
	if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	2201      	movs	r2, #1
 8001f24:	4996      	ldr	r1, [pc, #600]	; (8002180 <StartTemperature+0x2b0>)
 8001f26:	4897      	ldr	r0, [pc, #604]	; (8002184 <StartTemperature+0x2b4>)
 8001f28:	f002 fd57 	bl	80049da <HAL_SPI_Transmit>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b95      	ldr	r3, [pc, #596]	; (8002188 <StartTemperature+0x2b8>)
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	4b94      	ldr	r3, [pc, #592]	; (8002188 <StartTemperature+0x2b8>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d000      	beq.n	8001f3e <StartTemperature+0x6e>
		//error handler
		while(1);
 8001f3c:	e7fe      	b.n	8001f3c <StartTemperature+0x6c>
	}
	for(int i = 0; i <= 255; i++);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e002      	b.n	8001f4a <StartTemperature+0x7a>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2bff      	cmp	r3, #255	; 0xff
 8001f4e:	ddf9      	ble.n	8001f44 <StartTemperature+0x74>
	if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 3, HAL_MAX_DELAY)) != HAL_OK){
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	2203      	movs	r2, #3
 8001f56:	498d      	ldr	r1, [pc, #564]	; (800218c <StartTemperature+0x2bc>)
 8001f58:	488a      	ldr	r0, [pc, #552]	; (8002184 <StartTemperature+0x2b4>)
 8001f5a:	f002 fe7a 	bl	8004c52 <HAL_SPI_Receive>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b89      	ldr	r3, [pc, #548]	; (8002188 <StartTemperature+0x2b8>)
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <StartTemperature+0x2b8>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d000      	beq.n	8001f70 <StartTemperature+0xa0>
		//error handler
		while(1);
 8001f6e:	e7fe      	b.n	8001f6e <StartTemperature+0x9e>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2110      	movs	r1, #16
 8001f74:	4881      	ldr	r0, [pc, #516]	; (800217c <StartTemperature+0x2ac>)
 8001f76:	f000 fecb 	bl	8002d10 <HAL_GPIO_WritePin>
	//get voltage and resistance
	val = (SPI_recv[0] << 24 | SPI_recv[1] << 18 | SPI_recv[2] << 8)/256;
 8001f7a:	4b84      	ldr	r3, [pc, #528]	; (800218c <StartTemperature+0x2bc>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	061a      	lsls	r2, r3, #24
 8001f80:	4b82      	ldr	r3, [pc, #520]	; (800218c <StartTemperature+0x2bc>)
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	049b      	lsls	r3, r3, #18
 8001f86:	431a      	orrs	r2, r3
 8001f88:	4b80      	ldr	r3, [pc, #512]	; (800218c <StartTemperature+0x2bc>)
 8001f8a:	789b      	ldrb	r3, [r3, #2]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da00      	bge.n	8001f96 <StartTemperature+0xc6>
 8001f94:	33ff      	adds	r3, #255	; 0xff
 8001f96:	121b      	asrs	r3, r3, #8
 8001f98:	61bb      	str	r3, [r7, #24]
	voltageDif = (VOLTAGE*val)/8388608;
 8001f9a:	69b8      	ldr	r0, [r7, #24]
 8001f9c:	f7fe fae2 	bl	8000564 <__aeabi_i2d>
 8001fa0:	a365      	add	r3, pc, #404	; (adr r3, 8002138 <StartTemperature+0x268>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fb47 	bl	8000638 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b76      	ldr	r3, [pc, #472]	; (8002190 <StartTemperature+0x2c0>)
 8001fb8:	f7fe fc68 	bl	800088c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fe30 	bl	8000c28 <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]
	voltage = voltageDif + voltageFix;
 8001fcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	edc7 7a05 	vstr	s15, [r7, #20]
	resistance = (voltage*RESISTANCE)/(VOLTAGE-voltage);
 8001fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fe0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002194 <StartTemperature+0x2c4>
 8001fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe8:	ee17 0a90 	vmov	r0, s15
 8001fec:	f7fe facc 	bl	8000588 <__aeabi_f2d>
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	460d      	mov	r5, r1
 8001ff4:	6978      	ldr	r0, [r7, #20]
 8001ff6:	f7fe fac7 	bl	8000588 <__aeabi_f2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	a14e      	add	r1, pc, #312	; (adr r1, 8002138 <StartTemperature+0x268>)
 8002000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002004:	f7fe f960 	bl	80002c8 <__aeabi_dsub>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4620      	mov	r0, r4
 800200e:	4629      	mov	r1, r5
 8002010:	f7fe fc3c 	bl	800088c <__aeabi_ddiv>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fe04 	bl	8000c28 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	60bb      	str	r3, [r7, #8]
	//Steinhart and Hart approach
	temp = (1/(A + (B*log(resistance)) + (C*pow(log(resistance),2)) + (D*pow(log(resistance),3)))) - KELVIN;
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f7fe faaf 	bl	8000588 <__aeabi_f2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	ec43 2b10 	vmov	d0, r2, r3
 8002032:	f00c f9a1 	bl	800e378 <log>
 8002036:	ec51 0b10 	vmov	r0, r1, d0
 800203a:	a341      	add	r3, pc, #260	; (adr r3, 8002140 <StartTemperature+0x270>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fafa 	bl	8000638 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	a33e      	add	r3, pc, #248	; (adr r3, 8002148 <StartTemperature+0x278>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe f93b 	bl	80002cc <__adddf3>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4614      	mov	r4, r2
 800205c:	461d      	mov	r5, r3
 800205e:	68b8      	ldr	r0, [r7, #8]
 8002060:	f7fe fa92 	bl	8000588 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	ec43 2b10 	vmov	d0, r2, r3
 800206c:	f00c f984 	bl	800e378 <log>
 8002070:	eeb0 7a40 	vmov.f32	s14, s0
 8002074:	eef0 7a60 	vmov.f32	s15, s1
 8002078:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002150 <StartTemperature+0x280>
 800207c:	eeb0 0a47 	vmov.f32	s0, s14
 8002080:	eef0 0a67 	vmov.f32	s1, s15
 8002084:	f00c f9b6 	bl	800e3f4 <pow>
 8002088:	ec51 0b10 	vmov	r0, r1, d0
 800208c:	a332      	add	r3, pc, #200	; (adr r3, 8002158 <StartTemperature+0x288>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	f7fe fad1 	bl	8000638 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f7fe f915 	bl	80002cc <__adddf3>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4614      	mov	r4, r2
 80020a8:	461d      	mov	r5, r3
 80020aa:	68b8      	ldr	r0, [r7, #8]
 80020ac:	f7fe fa6c 	bl	8000588 <__aeabi_f2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	ec43 2b10 	vmov	d0, r2, r3
 80020b8:	f00c f95e 	bl	800e378 <log>
 80020bc:	eeb0 7a40 	vmov.f32	s14, s0
 80020c0:	eef0 7a60 	vmov.f32	s15, s1
 80020c4:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8002160 <StartTemperature+0x290>
 80020c8:	eeb0 0a47 	vmov.f32	s0, s14
 80020cc:	eef0 0a67 	vmov.f32	s1, s15
 80020d0:	f00c f990 	bl	800e3f4 <pow>
 80020d4:	ec51 0b10 	vmov	r0, r1, d0
 80020d8:	a323      	add	r3, pc, #140	; (adr r3, 8002168 <StartTemperature+0x298>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe faab 	bl	8000638 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe f8ef 	bl	80002cc <__adddf3>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	f04f 0000 	mov.w	r0, #0
 80020f6:	4928      	ldr	r1, [pc, #160]	; (8002198 <StartTemperature+0x2c8>)
 80020f8:	f7fe fbc8 	bl	800088c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	a31a      	add	r3, pc, #104	; (adr r3, 8002170 <StartTemperature+0x2a0>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe f8dd 	bl	80002c8 <__aeabi_dsub>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4922      	ldr	r1, [pc, #136]	; (800219c <StartTemperature+0x2cc>)
 8002114:	e9c1 2300 	strd	r2, r3, [r1]
	vTaskDelay(300);
 8002118:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800211c:	f005 f8b4 	bl	8007288 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002120:	2200      	movs	r2, #0
 8002122:	2101      	movs	r1, #1
 8002124:	4815      	ldr	r0, [pc, #84]	; (800217c <StartTemperature+0x2ac>)
 8002126:	f000 fdf3 	bl	8002d10 <HAL_GPIO_WritePin>
    osDelay(500);
 800212a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800212e:	f004 f904 	bl	800633a <osDelay>
	val = 0;
 8002132:	e6de      	b.n	8001ef2 <StartTemperature+0x22>
 8002134:	f3af 8000 	nop.w
 8002138:	47ae147b 	.word	0x47ae147b
 800213c:	400a7ae1 	.word	0x400a7ae1
 8002140:	356c26d4 	.word	0x356c26d4
 8002144:	3f2d6359 	.word	0x3f2d6359
 8002148:	74755c46 	.word	0x74755c46
 800214c:	3f52fcca 	.word	0x3f52fcca
 8002150:	00000000 	.word	0x00000000
 8002154:	40000000 	.word	0x40000000
 8002158:	37f560c7 	.word	0x37f560c7
 800215c:	3eb2230f 	.word	0x3eb2230f
 8002160:	00000000 	.word	0x00000000
 8002164:	40080000 	.word	0x40080000
 8002168:	c1edfe7f 	.word	0xc1edfe7f
 800216c:	3e6a5616 	.word	0x3e6a5616
 8002170:	66666666 	.word	0x66666666
 8002174:	40711266 	.word	0x40711266
 8002178:	3fd3d70a 	.word	0x3fd3d70a
 800217c:	40020000 	.word	0x40020000
 8002180:	20000330 	.word	0x20000330
 8002184:	20000258 	.word	0x20000258
 8002188:	20000352 	.word	0x20000352
 800218c:	20000338 	.word	0x20000338
 8002190:	41600000 	.word	0x41600000
 8002194:	461c4000 	.word	0x461c4000
 8002198:	3ff00000 	.word	0x3ff00000
 800219c:	20000360 	.word	0x20000360

080021a0 <StartUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART */
void StartUART(void *argument)
{
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	b097      	sub	sp, #92	; 0x5c
 80021a4:	af06      	add	r7, sp, #24
 80021a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART */
  char UART_buf[50];
  /* Infinite loop */
  for(;;)
  {
	sprintf((char *)UART_buf, "%6.2f,%6.2f,%6.2f,%d", ampMax, freq, temp, humAlarm);
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <StartUART+0x70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9eb 	bl	8000588 <__aeabi_f2d>
 80021b2:	4604      	mov	r4, r0
 80021b4:	460d      	mov	r5, r1
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <StartUART+0x74>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f9e4 	bl	8000588 <__aeabi_f2d>
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <StartUART+0x78>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	4e15      	ldr	r6, [pc, #84]	; (800221c <StartUART+0x7c>)
 80021c8:	7836      	ldrb	r6, [r6, #0]
 80021ca:	f107 0c0c 	add.w	ip, r7, #12
 80021ce:	9604      	str	r6, [sp, #16]
 80021d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021d4:	e9cd 0100 	strd	r0, r1, [sp]
 80021d8:	4622      	mov	r2, r4
 80021da:	462b      	mov	r3, r5
 80021dc:	4910      	ldr	r1, [pc, #64]	; (8002220 <StartUART+0x80>)
 80021de:	4660      	mov	r0, ip
 80021e0:	f008 fc80 	bl	800aae4 <siprintf>
	HAL_UART_Transmit(&huart1, UART_buf, strlen(UART_buf), HAL_MAX_DELAY);
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f811 	bl	8000210 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	f107 010c 	add.w	r1, r7, #12
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	480a      	ldr	r0, [pc, #40]	; (8002224 <StartUART+0x84>)
 80021fc:	f003 fc07 	bl	8005a0e <HAL_UART_Transmit>
	humAlarm = 0;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <StartUART+0x7c>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
	osDelay(500);
 8002206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800220a:	f004 f896 	bl	800633a <osDelay>
	sprintf((char *)UART_buf, "%6.2f,%6.2f,%6.2f,%d", ampMax, freq, temp, humAlarm);
 800220e:	e7cb      	b.n	80021a8 <StartUART+0x8>
 8002210:	2000035c 	.word	0x2000035c
 8002214:	20000358 	.word	0x20000358
 8002218:	20000360 	.word	0x20000360
 800221c:	20000354 	.word	0x20000354
 8002220:	0800f630 	.word	0x0800f630
 8002224:	200002b0 	.word	0x200002b0

08002228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800223a:	f000 fac7 	bl	80027cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000

0800224c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002250:	b672      	cpsid	i
}
 8002252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002254:	e7fe      	b.n	8002254 <Error_Handler+0x8>
	...

08002258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_MspInit+0x54>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_MspInit+0x54>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_MspInit+0x54>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_MspInit+0x54>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_MspInit+0x54>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_MspInit+0x54>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	210f      	movs	r1, #15
 800229a:	f06f 0001 	mvn.w	r0, #1
 800229e:	f000 fb91 	bl	80029c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_I2C_MspInit+0x84>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_I2C_MspInit+0x88>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_I2C_MspInit+0x88>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_I2C_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f2:	2312      	movs	r3, #18
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022fe:	2304      	movs	r3, #4
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <HAL_I2C_MspInit+0x8c>)
 800230a:	f000 fb85 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_I2C_MspInit+0x88>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_I2C_MspInit+0x88>)
 8002318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_I2C_MspInit+0x88>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40005400 	.word	0x40005400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400

08002340 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_SPI_MspInit+0x84>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d12b      	bne.n	80023ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 800236c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800239a:	23e0      	movs	r3, #224	; 0xe0
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023aa:	2305      	movs	r3, #5
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_SPI_MspInit+0x8c>)
 80023b6:	f000 fb2f 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40013000 	.word	0x40013000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000

080023d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_UART_MspInit+0x84>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d12c      	bne.n	800244c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_UART_MspInit+0x88>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a17      	ldr	r2, [pc, #92]	; (8002458 <HAL_UART_MspInit+0x88>)
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_UART_MspInit+0x88>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_UART_MspInit+0x88>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <HAL_UART_MspInit+0x88>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_UART_MspInit+0x88>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800242a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800243c:	2307      	movs	r3, #7
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <HAL_UART_MspInit+0x8c>)
 8002448:	f000 fae6 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800244c:	bf00      	nop
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40011000 	.word	0x40011000
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000

08002460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_InitTick+0xd0>)
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_InitTick+0xd0>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6453      	str	r3, [r2, #68]	; 0x44
 8002480:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_InitTick+0xd0>)
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f001 ff60 	bl	800435c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800249c:	f001 ff4a 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80024a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_InitTick+0xd4>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	3b01      	subs	r3, #1
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024b0:	4b21      	ldr	r3, [pc, #132]	; (8002538 <HAL_InitTick+0xd8>)
 80024b2:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_InitTick+0xdc>)
 80024b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_InitTick+0xd8>)
 80024b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_InitTick+0xd8>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024c4:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <HAL_InitTick+0xd8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_InitTick+0xd8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_InitTick+0xd8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80024d6:	4818      	ldr	r0, [pc, #96]	; (8002538 <HAL_InitTick+0xd8>)
 80024d8:	f002 ff9e 	bl	8005418 <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80024e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11b      	bne.n	8002522 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80024ea:	4813      	ldr	r0, [pc, #76]	; (8002538 <HAL_InitTick+0xd8>)
 80024ec:	f002 ffee 	bl	80054cc <HAL_TIM_Base_Start_IT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80024f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d111      	bne.n	8002522 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024fe:	2019      	movs	r0, #25
 8002500:	f000 fa7c 	bl	80029fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d808      	bhi.n	800251c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800250a:	2200      	movs	r2, #0
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	2019      	movs	r0, #25
 8002510:	f000 fa58 	bl	80029c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_InitTick+0xe0>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e002      	b.n	8002522 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002526:	4618      	mov	r0, r3
 8002528:	3730      	adds	r7, #48	; 0x30
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	431bde83 	.word	0x431bde83
 8002538:	20000368 	.word	0x20000368
 800253c:	40010000 	.word	0x40010000
 8002540:	20000004 	.word	0x20000004

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002576:	f003 f819 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000368 	.word	0x20000368

08002584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
	return 1;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_kill>:

int _kill(int pid, int sig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800259e:	f007 f9d9 	bl	8009954 <__errno>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2216      	movs	r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
	return -1;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_exit>:

void _exit (int status)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffe7 	bl	8002594 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025c6:	e7fe      	b.n	80025c6 <_exit+0x12>

080025c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e00a      	b.n	80025f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025da:	f3af 8000 	nop.w
 80025de:	4601      	mov	r1, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	b2ca      	uxtb	r2, r1
 80025e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf0      	blt.n	80025da <_read+0x12>
	}

return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e009      	b.n	8002628 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	60ba      	str	r2, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf1      	blt.n	8002614 <_write+0x12>
	}
	return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_close>:

int _close(int file)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
	return -1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002662:	605a      	str	r2, [r3, #4]
	return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_isatty>:

int _isatty(int file)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	return 1;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f007 f93e 	bl	8009954 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20040000 	.word	0x20040000
 8002704:	00000400 	.word	0x00000400
 8002708:	200003b0 	.word	0x200003b0
 800270c:	200139c0 	.word	0x200139c0

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <SystemInit+0x20>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <SystemInit+0x20>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273a:	490e      	ldr	r1, [pc, #56]	; (8002774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002750:	4c0b      	ldr	r4, [pc, #44]	; (8002780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800275e:	f7ff ffd7 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f007 f9f3 	bl	8009b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7fe fc67 	bl	8001038 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800276c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002778:	0802b848 	.word	0x0802b848
  ldr r2, =_sbss
 800277c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002780:	200139c0 	.word	0x200139c0

08002784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC_IRQHandler>
	...

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_Init+0x40>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_Init+0x40>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_Init+0x40>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 f8fc 	bl	80029ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b6:	200f      	movs	r0, #15
 80027b8:	f7ff fe52 	bl	8002460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027bc:	f7ff fd4c 	bl	8002258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000008 	.word	0x20000008
 80027f0:	200003b4 	.word	0x200003b4

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200003b4 	.word	0x200003b4

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff ffee 	bl	80027f4 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffde 	bl	80027f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	; (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff4c 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d6:	f7ff ff61 	bl	800289c <__NVIC_GetPriorityGrouping>
 80029da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	6978      	ldr	r0, [r7, #20]
 80029e2:	f7ff ffb1 	bl	8002948 <NVIC_EncodePriority>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff80 	bl	80028f4 <__NVIC_SetPriority>
}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff54 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e153      	b.n	8002cdc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 8142 	bne.w	8002cd6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d005      	beq.n	8002a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d130      	bne.n	8002acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d017      	beq.n	8002b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 809c 	beq.w	8002cd6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b54      	ldr	r3, [pc, #336]	; (8002cf4 <HAL_GPIO_Init+0x2dc>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <HAL_GPIO_Init+0x2dc>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b51      	ldr	r3, [pc, #324]	; (8002cf4 <HAL_GPIO_Init+0x2dc>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a4f      	ldr	r2, [pc, #316]	; (8002cf8 <HAL_GPIO_Init+0x2e0>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_GPIO_Init+0x2e4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x1f2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a44      	ldr	r2, [pc, #272]	; (8002d04 <HAL_GPIO_Init+0x2ec>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a43      	ldr	r2, [pc, #268]	; (8002d08 <HAL_GPIO_Init+0x2f0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x1ea>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c20:	4935      	ldr	r1, [pc, #212]	; (8002cf8 <HAL_GPIO_Init+0x2e0>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a2e      	ldr	r2, [pc, #184]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	f67f aea8 	bls.w	8002a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40013c00 	.word	0x40013c00

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d2c:	e003      	b.n	8002d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	041a      	lsls	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e12b      	b.n	8002fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff faa0 	bl	80022b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da8:	f001 fab0 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8002dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a81      	ldr	r2, [pc, #516]	; (8002fb8 <HAL_I2C_Init+0x274>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d807      	bhi.n	8002dc8 <HAL_I2C_Init+0x84>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <HAL_I2C_Init+0x278>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e006      	b.n	8002dd6 <HAL_I2C_Init+0x92>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a7d      	ldr	r2, [pc, #500]	; (8002fc0 <HAL_I2C_Init+0x27c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0e7      	b.n	8002fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a78      	ldr	r2, [pc, #480]	; (8002fc4 <HAL_I2C_Init+0x280>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9b      	lsrs	r3, r3, #18
 8002de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a6a      	ldr	r2, [pc, #424]	; (8002fb8 <HAL_I2C_Init+0x274>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d802      	bhi.n	8002e18 <HAL_I2C_Init+0xd4>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3301      	adds	r3, #1
 8002e16:	e009      	b.n	8002e2c <HAL_I2C_Init+0xe8>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	4a69      	ldr	r2, [pc, #420]	; (8002fc8 <HAL_I2C_Init+0x284>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	495c      	ldr	r1, [pc, #368]	; (8002fb8 <HAL_I2C_Init+0x274>)
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d819      	bhi.n	8002e80 <HAL_I2C_Init+0x13c>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e59      	subs	r1, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5a:	1c59      	adds	r1, r3, #1
 8002e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e60:	400b      	ands	r3, r1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_I2C_Init+0x138>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e59      	subs	r1, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	e051      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	e04f      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <HAL_I2C_Init+0x168>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e012      	b.n	8002ed2 <HAL_I2C_Init+0x18e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	0099      	lsls	r1, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x196>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e022      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10e      	bne.n	8002f00 <HAL_I2C_Init+0x1bc>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e58      	subs	r0, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	440b      	add	r3, r1
 8002ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efe:	e00f      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	6809      	ldr	r1, [r1, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6911      	ldr	r1, [r2, #16]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	4311      	orrs	r1, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	000186a0 	.word	0x000186a0
 8002fbc:	001e847f 	.word	0x001e847f
 8002fc0:	003d08ff 	.word	0x003d08ff
 8002fc4:	431bde83 	.word	0x431bde83
 8002fc8:	10624dd3 	.word	0x10624dd3

08002fcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff fc08 	bl	80027f4 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	f040 80e0 	bne.w	80031b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2319      	movs	r3, #25
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4970      	ldr	r1, [pc, #448]	; (80031c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fd86 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	e0d3      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_I2C_Master_Transmit+0x50>
 8003018:	2302      	movs	r3, #2
 800301a:	e0cc      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d007      	beq.n	8003042 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2221      	movs	r2, #33	; 0x21
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2210      	movs	r2, #16
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a50      	ldr	r2, [pc, #320]	; (80031c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003084:	8979      	ldrh	r1, [r7, #10]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fbf0 	bl	8003870 <I2C_MasterRequestWrite>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e08d      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030b0:	e066      	b.n	8003180 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fe00 	bl	8003cbc <I2C_WaitOnTXEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d107      	bne.n	80030da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06b      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b04      	cmp	r3, #4
 800311a:	d11b      	bne.n	8003154 <HAL_I2C_Master_Transmit+0x188>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	6a39      	ldr	r1, [r7, #32]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fdf0 	bl	8003d3e <I2C_WaitOnBTFFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01a      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d194      	bne.n	80030b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	00100002 	.word	0x00100002
 80031c4:	ffff0000 	.word	0xffff0000

080031c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	460b      	mov	r3, r1
 80031d6:	817b      	strh	r3, [r7, #10]
 80031d8:	4613      	mov	r3, r2
 80031da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff fb0a 	bl	80027f4 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	f040 820b 	bne.w	8003606 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2319      	movs	r3, #25
 80031f6:	2201      	movs	r2, #1
 80031f8:	497c      	ldr	r1, [pc, #496]	; (80033ec <HAL_I2C_Master_Receive+0x224>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fc88 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	e1fe      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_I2C_Master_Receive+0x50>
 8003214:	2302      	movs	r3, #2
 8003216:	e1f7      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d007      	beq.n	800323e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2222      	movs	r2, #34	; 0x22
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2210      	movs	r2, #16
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	893a      	ldrh	r2, [r7, #8]
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a5c      	ldr	r2, [pc, #368]	; (80033f0 <HAL_I2C_Master_Receive+0x228>)
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003280:	8979      	ldrh	r1, [r7, #10]
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fb74 	bl	8003974 <I2C_MasterRequestRead>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1b8      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	d113      	bne.n	80032c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e18c      	b.n	80035e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d11b      	bne.n	8003306 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e16c      	b.n	80035e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	2b02      	cmp	r3, #2
 800330c:	d11b      	bne.n	8003346 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	e14c      	b.n	80035e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800336c:	e138      	b.n	80035e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b03      	cmp	r3, #3
 8003374:	f200 80f1 	bhi.w	800355a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b01      	cmp	r3, #1
 800337e:	d123      	bne.n	80033c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fd1b 	bl	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e139      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c6:	e10b      	b.n	80035e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d14e      	bne.n	800346e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2200      	movs	r2, #0
 80033d8:	4906      	ldr	r1, [pc, #24]	; (80033f4 <HAL_I2C_Master_Receive+0x22c>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fb98 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e10e      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
 80033ea:	bf00      	nop
 80033ec:	00100002 	.word	0x00100002
 80033f0:	ffff0000 	.word	0xffff0000
 80033f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800346c:	e0b8      	b.n	80035e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	2200      	movs	r2, #0
 8003476:	4966      	ldr	r1, [pc, #408]	; (8003610 <HAL_I2C_Master_Receive+0x448>)
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fb49 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0bf      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	2200      	movs	r2, #0
 80034d2:	494f      	ldr	r1, [pc, #316]	; (8003610 <HAL_I2C_Master_Receive+0x448>)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fb1b 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e091      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003558:	e042      	b.n	80035e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fc2e 	bl	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e04c      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d118      	bne.n	80035e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f aec2 	bne.w	800336e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003606:	2302      	movs	r3, #2
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	00010004 	.word	0x00010004

08003614 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003624:	f7ff f8e6 	bl	80027f4 <HAL_GetTick>
 8003628:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	f040 8111 	bne.w	800385e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2319      	movs	r3, #25
 8003642:	2201      	movs	r2, #1
 8003644:	4988      	ldr	r1, [pc, #544]	; (8003868 <HAL_I2C_IsDeviceReady+0x254>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa62 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	e104      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_I2C_IsDeviceReady+0x50>
 8003660:	2302      	movs	r3, #2
 8003662:	e0fd      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x24c>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d007      	beq.n	800368a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2224      	movs	r2, #36	; 0x24
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a70      	ldr	r2, [pc, #448]	; (800386c <HAL_I2C_IsDeviceReady+0x258>)
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa20 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e4:	d103      	bne.n	80036ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0b6      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003700:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003702:	f7ff f877 	bl	80027f4 <HAL_GetTick>
 8003706:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003736:	e025      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7ff f85c 	bl	80027f4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <HAL_I2C_IsDeviceReady+0x13a>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	22a0      	movs	r2, #160	; 0xa0
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b02      	cmp	r3, #2
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2ba0      	cmp	r3, #160	; 0xa0
 800378e:	d005      	beq.n	800379c <HAL_I2C_IsDeviceReady+0x188>
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_I2C_IsDeviceReady+0x188>
 8003796:	7dbb      	ldrb	r3, [r7, #22]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0cd      	beq.n	8003738 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d129      	bne.n	8003806 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2319      	movs	r3, #25
 80037de:	2201      	movs	r2, #1
 80037e0:	4921      	ldr	r1, [pc, #132]	; (8003868 <HAL_I2C_IsDeviceReady+0x254>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f994 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e036      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e02c      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003814:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800381e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2319      	movs	r3, #25
 8003826:	2201      	movs	r2, #1
 8003828:	490f      	ldr	r1, [pc, #60]	; (8003868 <HAL_I2C_IsDeviceReady+0x254>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f970 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e012      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	3301      	adds	r3, #1
 800383e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	f4ff af32 	bcc.w	80036ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00100002 	.word	0x00100002
 800386c:	ffff0000 	.word	0xffff0000

08003870 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	460b      	mov	r3, r1
 800387e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d006      	beq.n	800389a <I2C_MasterRequestWrite+0x2a>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d003      	beq.n	800389a <I2C_MasterRequestWrite+0x2a>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003898:	d108      	bne.n	80038ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e00b      	b.n	80038c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	2b12      	cmp	r3, #18
 80038b2:	d107      	bne.n	80038c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f91d 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ea:	d103      	bne.n	80038f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e035      	b.n	8003964 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003900:	d108      	bne.n	8003914 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003902:	897b      	ldrh	r3, [r7, #10]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003910:	611a      	str	r2, [r3, #16]
 8003912:	e01b      	b.n	800394c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003914:	897b      	ldrh	r3, [r7, #10]
 8003916:	11db      	asrs	r3, r3, #7
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 0306 	and.w	r3, r3, #6
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f063 030f 	orn	r3, r3, #15
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	490e      	ldr	r1, [pc, #56]	; (800396c <I2C_MasterRequestWrite+0xfc>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f943 	bl	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e010      	b.n	8003964 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4907      	ldr	r1, [pc, #28]	; (8003970 <I2C_MasterRequestWrite+0x100>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f933 	bl	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	00010008 	.word	0x00010008
 8003970:	00010002 	.word	0x00010002

08003974 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	460b      	mov	r3, r1
 8003982:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003998:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d006      	beq.n	80039ae <I2C_MasterRequestRead+0x3a>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d003      	beq.n	80039ae <I2C_MasterRequestRead+0x3a>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039ac:	d108      	bne.n	80039c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e00b      	b.n	80039d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	2b11      	cmp	r3, #17
 80039c6:	d107      	bne.n	80039d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f893 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	d103      	bne.n	8003a08 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e079      	b.n	8003b00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a14:	d108      	bne.n	8003a28 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a16:	897b      	ldrh	r3, [r7, #10]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	e05f      	b.n	8003ae8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a28:	897b      	ldrh	r3, [r7, #10]
 8003a2a:	11db      	asrs	r3, r3, #7
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f003 0306 	and.w	r3, r3, #6
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f063 030f 	orn	r3, r3, #15
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4930      	ldr	r1, [pc, #192]	; (8003b08 <I2C_MasterRequestRead+0x194>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f8b9 	bl	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e054      	b.n	8003b00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4929      	ldr	r1, [pc, #164]	; (8003b0c <I2C_MasterRequestRead+0x198>)
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8a9 	bl	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e044      	b.n	8003b00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f831 	bl	8003b10 <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac2:	d103      	bne.n	8003acc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e017      	b.n	8003b00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	11db      	asrs	r3, r3, #7
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f063 030e 	orn	r3, r3, #14
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <I2C_MasterRequestRead+0x198>)
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f865 	bl	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	00010008 	.word	0x00010008
 8003b0c:	00010002 	.word	0x00010002

08003b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b20:	e025      	b.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d021      	beq.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fe fe63 	bl	80027f4 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d116      	bne.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e023      	b.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10d      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	e00c      	b.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d0b6      	beq.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bcc:	e051      	b.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bdc:	d123      	bne.n	8003c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e046      	b.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d021      	beq.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fe fde1 	bl	80027f4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d116      	bne.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e020      	b.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10c      	bne.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4013      	ands	r3, r2
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bf14      	ite	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	2300      	moveq	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	e00b      	b.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d18d      	bne.n	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cc8:	e02d      	b.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f8ce 	bl	8003e6c <I2C_IsAcknowledgeFailed>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e02d      	b.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d021      	beq.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe fd87 	bl	80027f4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d116      	bne.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e007      	b.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b80      	cmp	r3, #128	; 0x80
 8003d32:	d1ca      	bne.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d4a:	e02d      	b.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f88d 	bl	8003e6c <I2C_IsAcknowledgeFailed>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e02d      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d021      	beq.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d64:	f7fe fd46 	bl	80027f4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d302      	bcc.n	8003d7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e007      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d1ca      	bne.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dcc:	e042      	b.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d119      	bne.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0210 	mvn.w	r2, #16
 8003de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e029      	b.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e10:	f7fe fcf0 	bl	80027f4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d302      	bcc.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d116      	bne.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e007      	b.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d1b5      	bne.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e82:	d11b      	bne.n	8003ebc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0cc      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b68      	ldr	r3, [pc, #416]	; (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d90c      	bls.n	8003f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b65      	ldr	r3, [pc, #404]	; (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b63      	ldr	r3, [pc, #396]	; (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0b8      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d020      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f20:	4b59      	ldr	r3, [pc, #356]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a58      	ldr	r2, [pc, #352]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f38:	4b53      	ldr	r3, [pc, #332]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a52      	ldr	r2, [pc, #328]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b50      	ldr	r3, [pc, #320]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	494d      	ldr	r1, [pc, #308]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d044      	beq.n	8003fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	4b47      	ldr	r3, [pc, #284]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d119      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e07f      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e06f      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e067      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003faa:	4b37      	ldr	r3, [pc, #220]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f023 0203 	bic.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4934      	ldr	r1, [pc, #208]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fbc:	f7fe fc1a 	bl	80027f4 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc4:	f7fe fc16 	bl	80027f4 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e04f      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 020c 	and.w	r2, r3, #12
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1eb      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d20c      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b22      	ldr	r3, [pc, #136]	; (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e032      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4916      	ldr	r1, [pc, #88]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	490e      	ldr	r1, [pc, #56]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004052:	f000 f889 	bl	8004168 <HAL_RCC_GetSysClockFreq>
 8004056:	4602      	mov	r2, r0
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	490a      	ldr	r1, [pc, #40]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8004064:	5ccb      	ldrb	r3, [r1, r3]
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	4a09      	ldr	r2, [pc, #36]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_RCC_ClockConfig+0x1c8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe f9f4 	bl	8002460 <HAL_InitTick>

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40023c00 	.word	0x40023c00
 8004088:	40023800 	.word	0x40023800
 800408c:	0800f6f0 	.word	0x0800f6f0
 8004090:	20000000 	.word	0x20000000
 8004094:	20000004 	.word	0x20000004

08004098 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	; 0x30
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d129      	bne.n	80040fe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	4b2b      	ldr	r3, [pc, #172]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	4a2a      	ldr	r2, [pc, #168]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80040c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	2302      	movs	r3, #2
 80040ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040d8:	2300      	movs	r3, #0
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80040dc:	f107 031c 	add.w	r3, r7, #28
 80040e0:	4619      	mov	r1, r3
 80040e2:	481f      	ldr	r0, [pc, #124]	; (8004160 <HAL_RCC_MCOConfig+0xc8>)
 80040e4:	f7fe fc98 	bl	8002a18 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	4919      	ldr	r1, [pc, #100]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80040fc:	e029      	b.n	8004152 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a15      	ldr	r2, [pc, #84]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 8004108:	f043 0304 	orr.w	r3, r3, #4
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800411a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800411e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004120:	2302      	movs	r3, #2
 8004122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004124:	2303      	movs	r3, #3
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004130:	f107 031c 	add.w	r3, r7, #28
 8004134:	4619      	mov	r1, r3
 8004136:	480b      	ldr	r0, [pc, #44]	; (8004164 <HAL_RCC_MCOConfig+0xcc>)
 8004138:	f7fe fc6e 	bl	8002a18 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800413c:	4b07      	ldr	r3, [pc, #28]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	00d9      	lsls	r1, r3, #3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	430b      	orrs	r3, r1
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <HAL_RCC_MCOConfig+0xc4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
}
 8004152:	bf00      	nop
 8004154:	3730      	adds	r7, #48	; 0x30
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	40020000 	.word	0x40020000
 8004164:	40020800 	.word	0x40020800

08004168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b090      	sub	sp, #64	; 0x40
 800416e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004178:	2300      	movs	r3, #0
 800417a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004180:	4b59      	ldr	r3, [pc, #356]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d00d      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x40>
 800418c:	2b08      	cmp	r3, #8
 800418e:	f200 80a1 	bhi.w	80042d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x34>
 8004196:	2b04      	cmp	r3, #4
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800419a:	e09b      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_GetSysClockFreq+0x184>)
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80041a0:	e09b      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041a2:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041a6:	e098      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a8:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041b2:	4b4d      	ldr	r3, [pc, #308]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d028      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	2200      	movs	r2, #0
 80041c6:	623b      	str	r3, [r7, #32]
 80041c8:	627a      	str	r2, [r7, #36]	; 0x24
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041d0:	2100      	movs	r1, #0
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041d4:	fb03 f201 	mul.w	r2, r3, r1
 80041d8:	2300      	movs	r3, #0
 80041da:	fb00 f303 	mul.w	r3, r0, r3
 80041de:	4413      	add	r3, r2
 80041e0:	4a43      	ldr	r2, [pc, #268]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041e2:	fba0 1202 	umull	r1, r2, r0, r2
 80041e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041e8:	460a      	mov	r2, r1
 80041ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80041ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ee:	4413      	add	r3, r2
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f4:	2200      	movs	r2, #0
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	61fa      	str	r2, [r7, #28]
 80041fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004202:	f7fc fd61 	bl	8000cc8 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4613      	mov	r3, r2
 800420c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420e:	e053      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004210:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	2200      	movs	r2, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	617a      	str	r2, [r7, #20]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004222:	f04f 0b00 	mov.w	fp, #0
 8004226:	4652      	mov	r2, sl
 8004228:	465b      	mov	r3, fp
 800422a:	f04f 0000 	mov.w	r0, #0
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	0159      	lsls	r1, r3, #5
 8004234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004238:	0150      	lsls	r0, r2, #5
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	ebb2 080a 	subs.w	r8, r2, sl
 8004242:	eb63 090b 	sbc.w	r9, r3, fp
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004252:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004256:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800425a:	ebb2 0408 	subs.w	r4, r2, r8
 800425e:	eb63 0509 	sbc.w	r5, r3, r9
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	00eb      	lsls	r3, r5, #3
 800426c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004270:	00e2      	lsls	r2, r4, #3
 8004272:	4614      	mov	r4, r2
 8004274:	461d      	mov	r5, r3
 8004276:	eb14 030a 	adds.w	r3, r4, sl
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	eb45 030b 	adc.w	r3, r5, fp
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428e:	4629      	mov	r1, r5
 8004290:	028b      	lsls	r3, r1, #10
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004298:	4621      	mov	r1, r4
 800429a:	028a      	lsls	r2, r1, #10
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a2:	2200      	movs	r2, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	60fa      	str	r2, [r7, #12]
 80042a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ac:	f7fc fd0c 	bl	8000cc8 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetSysClockFreq+0x184>)
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3740      	adds	r7, #64	; 0x40
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	017d7840 	.word	0x017d7840

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000000 	.word	0x20000000

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	0800f700 	.word	0x0800f700

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0b5b      	lsrs	r3, r3, #13
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	0800f700 	.word	0x0800f700

0800435c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	220f      	movs	r2, #15
 800436a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_RCC_GetClockConfig+0x5c>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0203 	and.w	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_RCC_GetClockConfig+0x5c>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	08db      	lsrs	r3, r3, #3
 8004396:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_RCC_GetClockConfig+0x60>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0207 	and.w	r2, r3, #7
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	601a      	str	r2, [r3, #0]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e273      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d075      	beq.n	80044ca <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043de:	4b88      	ldr	r3, [pc, #544]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d00c      	beq.n	8004404 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ea:	4b85      	ldr	r3, [pc, #532]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d112      	bne.n	800441c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4b82      	ldr	r3, [pc, #520]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d10b      	bne.n	800441c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	4b7e      	ldr	r3, [pc, #504]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d05b      	beq.n	80044c8 <HAL_RCC_OscConfig+0x108>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d157      	bne.n	80044c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e24e      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004424:	d106      	bne.n	8004434 <HAL_RCC_OscConfig+0x74>
 8004426:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a75      	ldr	r2, [pc, #468]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e01d      	b.n	8004470 <HAL_RCC_OscConfig+0xb0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800443c:	d10c      	bne.n	8004458 <HAL_RCC_OscConfig+0x98>
 800443e:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a6f      	ldr	r2, [pc, #444]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6c      	ldr	r2, [pc, #432]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e00b      	b.n	8004470 <HAL_RCC_OscConfig+0xb0>
 8004458:	4b69      	ldr	r3, [pc, #420]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a68      	ldr	r2, [pc, #416]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 800445e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 800446a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d013      	beq.n	80044a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe f9bc 	bl	80027f4 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe f9b8 	bl	80027f4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e213      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b5b      	ldr	r3, [pc, #364]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0xc0>
 800449e:	e014      	b.n	80044ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fe f9a8 	bl	80027f4 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fe f9a4 	bl	80027f4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	; 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e1ff      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ba:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0xe8>
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d063      	beq.n	800459e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d11c      	bne.n	8004528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b44      	ldr	r3, [pc, #272]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x152>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1d3      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4937      	ldr	r1, [pc, #220]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	e03a      	b.n	800459e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_RCC_OscConfig+0x244>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fe f95d 	bl	80027f4 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453e:	f7fe f959 	bl	80027f4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1b4      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4925      	ldr	r1, [pc, #148]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	e015      	b.n	800459e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_OscConfig+0x244>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fe f93c 	bl	80027f4 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004580:	f7fe f938 	bl	80027f4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e193      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d036      	beq.n	8004618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <HAL_RCC_OscConfig+0x248>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fe f91c 	bl	80027f4 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c0:	f7fe f918 	bl	80027f4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e173      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x240>)
 80045d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x200>
 80045de:	e01b      	b.n	8004618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_OscConfig+0x248>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fe f905 	bl	80027f4 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ec:	e00e      	b.n	800460c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ee:	f7fe f901 	bl	80027f4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d907      	bls.n	800460c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e15c      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
 8004600:	40023800 	.word	0x40023800
 8004604:	42470000 	.word	0x42470000
 8004608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	4b8a      	ldr	r3, [pc, #552]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ea      	bne.n	80045ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8097 	beq.w	8004754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b83      	ldr	r3, [pc, #524]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	4b7f      	ldr	r3, [pc, #508]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a7e      	ldr	r2, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCC_OscConfig+0x47c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCC_OscConfig+0x47c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a75      	ldr	r2, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x47c>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fe f8c1 	bl	80027f4 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7fe f8bd 	bl	80027f4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e118      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	4b6c      	ldr	r3, [pc, #432]	; (800483c <HAL_RCC_OscConfig+0x47c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x2ea>
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	e01c      	b.n	80046e4 <HAL_RCC_OscConfig+0x324>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x30c>
 80046b2:	4b61      	ldr	r3, [pc, #388]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a60      	ldr	r2, [pc, #384]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
 80046be:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a5d      	ldr	r2, [pc, #372]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0x324>
 80046cc:	4b5a      	ldr	r3, [pc, #360]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a59      	ldr	r2, [pc, #356]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	4b57      	ldr	r3, [pc, #348]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a56      	ldr	r2, [pc, #344]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fe f882 	bl	80027f4 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fe f87e 	bl	80027f4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0d7      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470a:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ee      	beq.n	80046f4 <HAL_RCC_OscConfig+0x334>
 8004716:	e014      	b.n	8004742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fe f86c 	bl	80027f4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	e00a      	b.n	8004736 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004720:	f7fe f868 	bl	80027f4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0c1      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ee      	bne.n	8004720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004752:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80ad 	beq.w	80048b8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b08      	cmp	r3, #8
 8004768:	d060      	beq.n	800482c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d145      	bne.n	80047fe <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <HAL_RCC_OscConfig+0x480>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe f83c 	bl	80027f4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe f838 	bl	80027f4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e093      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	019b      	lsls	r3, r3, #6
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	3b01      	subs	r3, #1
 80047b8:	041b      	lsls	r3, r3, #16
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	071b      	lsls	r3, r3, #28
 80047ca:	491b      	ldr	r1, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_RCC_OscConfig+0x480>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fe f80d 	bl	80027f4 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047de:	f7fe f809 	bl	80027f4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e064      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x41e>
 80047fc:	e05c      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_RCC_OscConfig+0x480>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd fff6 	bl	80027f4 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7fd fff2 	bl	80027f4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e04d      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_OscConfig+0x478>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x44c>
 800482a:	e045      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e040      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
 8004840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004844:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <HAL_RCC_OscConfig+0x504>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d030      	beq.n	80048b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d129      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d122      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004874:	4013      	ands	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800487a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487c:	4293      	cmp	r3, r2
 800487e:	d119      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	3b01      	subs	r3, #1
 800488e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d10f      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800

080048c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07b      	b.n	80049d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ea:	d009      	beq.n	8004900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	e005      	b.n	8004900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fd fd10 	bl	8002340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	ea42 0103 	orr.w	r1, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f003 0104 	and.w	r1, r3, #4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	f003 0210 	and.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_SPI_Transmit+0x22>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e126      	b.n	8004c4a <HAL_SPI_Transmit+0x270>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a04:	f7fd fef6 	bl	80027f4 <HAL_GetTick>
 8004a08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d002      	beq.n	8004a20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a1e:	e10b      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_Transmit+0x52>
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a30:	e102      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2203      	movs	r2, #3
 8004a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	d10f      	bne.n	8004a9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d007      	beq.n	8004ab8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac0:	d14b      	bne.n	8004b5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Transmit+0xf6>
 8004aca:	8afb      	ldrh	r3, [r7, #22]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d13e      	bne.n	8004b4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	881a      	ldrh	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	1c9a      	adds	r2, r3, #2
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004af4:	e02b      	b.n	8004b4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d112      	bne.n	8004b2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b28:	e011      	b.n	8004b4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b2a:	f7fd fe63 	bl	80027f4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d803      	bhi.n	8004b42 <HAL_SPI_Transmit+0x168>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d102      	bne.n	8004b48 <HAL_SPI_Transmit+0x16e>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b4c:	e074      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ce      	bne.n	8004af6 <HAL_SPI_Transmit+0x11c>
 8004b58:	e04c      	b.n	8004bf4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Transmit+0x18e>
 8004b62:	8afb      	ldrh	r3, [r7, #22]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d140      	bne.n	8004bea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b8e:	e02c      	b.n	8004bea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d113      	bne.n	8004bc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc4:	e011      	b.n	8004bea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc6:	f7fd fe15 	bl	80027f4 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d803      	bhi.n	8004bde <HAL_SPI_Transmit+0x204>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Transmit+0x20a>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be8:	e026      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1cd      	bne.n	8004b90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fbcb 	bl	8005394 <SPI_EndRxTxTransaction>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e000      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af02      	add	r7, sp, #8
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6e:	d112      	bne.n	8004c96 <HAL_SPI_Receive+0x44>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10e      	bne.n	8004c96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f8f1 	bl	8004e74 <HAL_SPI_TransmitReceive>
 8004c92:	4603      	mov	r3, r0
 8004c94:	e0ea      	b.n	8004e6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_Receive+0x52>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0e3      	b.n	8004e6c <HAL_SPI_Receive+0x21a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cac:	f7fd fda2 	bl	80027f4 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc2:	e0ca      	b.n	8004e5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Receive+0x7e>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cd4:	e0c1      	b.n	8004e5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1c:	d10f      	bne.n	8004d3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d007      	beq.n	8004d5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d162      	bne.n	8004e2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d64:	e02e      	b.n	8004dc4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d115      	bne.n	8004da0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f103 020c 	add.w	r2, r3, #12
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d9e:	e011      	b.n	8004dc4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da0:	f7fd fd28 	bl	80027f4 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d803      	bhi.n	8004db8 <HAL_SPI_Receive+0x166>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d102      	bne.n	8004dbe <HAL_SPI_Receive+0x16c>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dc2:	e04a      	b.n	8004e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1cb      	bne.n	8004d66 <HAL_SPI_Receive+0x114>
 8004dce:	e031      	b.n	8004e34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d113      	bne.n	8004e06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	b292      	uxth	r2, r2
 8004dea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e04:	e011      	b.n	8004e2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e06:	f7fd fcf5 	bl	80027f4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d803      	bhi.n	8004e1e <HAL_SPI_Receive+0x1cc>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d102      	bne.n	8004e24 <HAL_SPI_Receive+0x1d2>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d102      	bne.n	8004e2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e28:	e017      	b.n	8004e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1cd      	bne.n	8004dd0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fa45 	bl	80052c8 <SPI_EndRxTransaction>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
 8004e56:	e000      	b.n	8004e5a <HAL_SPI_Receive+0x208>
  }

error :
 8004e58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e82:	2301      	movs	r3, #1
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x26>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e18a      	b.n	80051b0 <HAL_SPI_TransmitReceive+0x33c>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea2:	f7fd fca7 	bl	80027f4 <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d00f      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x70>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eca:	d107      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x68>
 8004ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d003      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ee2:	e15b      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x82>
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004efc:	e14e      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d003      	beq.n	8004f12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2205      	movs	r2, #5
 8004f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	887a      	ldrh	r2, [r7, #2]
 8004f22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	887a      	ldrh	r2, [r7, #2]
 8004f28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	887a      	ldrh	r2, [r7, #2]
 8004f3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d007      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6e:	d178      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x10a>
 8004f78:	8b7b      	ldrh	r3, [r7, #26]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d166      	bne.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	881a      	ldrh	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	1c9a      	adds	r2, r3, #2
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa2:	e053      	b.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d11b      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x176>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d016      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x176>
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d113      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	881a      	ldrh	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d119      	bne.n	800502c <HAL_SPI_TransmitReceive+0x1b8>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d014      	beq.n	800502c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	b292      	uxth	r2, r2
 800500e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005028:	2301      	movs	r3, #1
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800502c:	f7fd fbe2 	bl	80027f4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005038:	429a      	cmp	r2, r3
 800503a:	d807      	bhi.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d003      	beq.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800504a:	e0a7      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1a6      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x130>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1a1      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x130>
 8005060:	e07c      	b.n	800515c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x1fc>
 800506a:	8b7b      	ldrh	r3, [r7, #26]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d16b      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005096:	e057      	b.n	8005148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d11c      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x26c>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d017      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x26c>
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d114      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d119      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x2ae>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d014      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800511e:	2301      	movs	r3, #1
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005122:	f7fd fb67 	bl	80027f4 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512e:	429a      	cmp	r2, r3
 8005130:	d803      	bhi.n	800513a <HAL_SPI_TransmitReceive+0x2c6>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d102      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x2cc>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d103      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005146:	e029      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1a2      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x224>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d19d      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800515c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f917 	bl	8005394 <SPI_EndRxTxTransaction>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005178:	e010      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e000      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800519a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3730      	adds	r7, #48	; 0x30
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c8:	f7fd fb14 	bl	80027f4 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d8:	f7fd fb0c 	bl	80027f4 <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051de:	4b39      	ldr	r3, [pc, #228]	; (80052c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	015b      	lsls	r3, r3, #5
 80051e4:	0d1b      	lsrs	r3, r3, #20
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ee:	e054      	b.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d050      	beq.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f8:	f7fd fafc 	bl	80027f4 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	429a      	cmp	r2, r3
 8005206:	d902      	bls.n	800520e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d13d      	bne.n	800528a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800521c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005226:	d111      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005230:	d004      	beq.n	800523c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523a:	d107      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005254:	d10f      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e017      	b.n	80052ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3b01      	subs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d19b      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000000 	.word	0x20000000

080052c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052dc:	d111      	bne.n	8005302 <SPI_EndRxTransaction+0x3a>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e6:	d004      	beq.n	80052f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d107      	bne.n	8005302 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530a:	d12a      	bne.n	8005362 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d012      	beq.n	800533c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff49 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02d      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e026      	b.n	800538a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	2101      	movs	r1, #1
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff36 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01a      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e013      	b.n	800538a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	2101      	movs	r1, #1
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff23 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e000      	b.n	800538a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <SPI_EndRxTxTransaction+0x7c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <SPI_EndRxTxTransaction+0x80>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0d5b      	lsrs	r3, r3, #21
 80053ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053be:	d112      	bne.n	80053e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	; 0x80
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fef4 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d016      	beq.n	8005404 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00f      	b.n	8005406 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d0f2      	beq.n	80053e6 <SPI_EndRxTxTransaction+0x52>
 8005400:	e000      	b.n	8005404 <SPI_EndRxTxTransaction+0x70>
        break;
 8005402:	bf00      	nop
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000000 	.word	0x20000000
 8005414:	165e9f81 	.word	0x165e9f81

08005418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e041      	b.n	80054ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f839 	bl	80054b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 f9d8 	bl	800580c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04e      	b.n	8005582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a23      	ldr	r2, [pc, #140]	; (8005590 <HAL_TIM_Base_Start_IT+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d01d      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_TIM_Base_Start_IT+0xc8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_TIM_Base_Start_IT+0xcc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_TIM_Base_Start_IT+0xd0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d111      	bne.n	8005570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d010      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556e:	e007      	b.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f8ee 	bl	80057d0 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8e0 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8f1 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8c4 	bl	80057d0 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8b6 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f8c7 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f89a 	bl	80057d0 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f88c 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f89d 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f870 	bl	80057d0 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f862 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f873 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0201 	mvn.w	r2, #1
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fd7c 	bl	8002228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f902 	bl	8005960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f838 	bl	80057f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0220 	mvn.w	r2, #32
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8cc 	bl	800594c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a40      	ldr	r2, [pc, #256]	; (8005920 <TIM_Base_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582a:	d00f      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a3d      	ldr	r2, [pc, #244]	; (8005924 <TIM_Base_SetConfig+0x118>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a3c      	ldr	r2, [pc, #240]	; (8005928 <TIM_Base_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3b      	ldr	r2, [pc, #236]	; (800592c <TIM_Base_SetConfig+0x120>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a3a      	ldr	r2, [pc, #232]	; (8005930 <TIM_Base_SetConfig+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d108      	bne.n	800585e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2f      	ldr	r2, [pc, #188]	; (8005920 <TIM_Base_SetConfig+0x114>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d02b      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d027      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2c      	ldr	r2, [pc, #176]	; (8005924 <TIM_Base_SetConfig+0x118>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d023      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2b      	ldr	r2, [pc, #172]	; (8005928 <TIM_Base_SetConfig+0x11c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01f      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2a      	ldr	r2, [pc, #168]	; (800592c <TIM_Base_SetConfig+0x120>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01b      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a29      	ldr	r2, [pc, #164]	; (8005930 <TIM_Base_SetConfig+0x124>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d017      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a28      	ldr	r2, [pc, #160]	; (8005934 <TIM_Base_SetConfig+0x128>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a27      	ldr	r2, [pc, #156]	; (8005938 <TIM_Base_SetConfig+0x12c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00f      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a26      	ldr	r2, [pc, #152]	; (800593c <TIM_Base_SetConfig+0x130>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00b      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a25      	ldr	r2, [pc, #148]	; (8005940 <TIM_Base_SetConfig+0x134>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d007      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <TIM_Base_SetConfig+0x138>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a23      	ldr	r2, [pc, #140]	; (8005948 <TIM_Base_SetConfig+0x13c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d108      	bne.n	80058d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <TIM_Base_SetConfig+0x114>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_Base_SetConfig+0xf8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a0c      	ldr	r2, [pc, #48]	; (8005930 <TIM_Base_SetConfig+0x124>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d103      	bne.n	800590c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	615a      	str	r2, [r3, #20]
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010000 	.word	0x40010000
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40010400 	.word	0x40010400
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800
 8005940:	40001800 	.word	0x40001800
 8005944:	40001c00 	.word	0x40001c00
 8005948:	40002000 	.word	0x40002000

0800594c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e03f      	b.n	8005a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fc fd18 	bl	80023d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	; 0x24
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f929 	bl	8005c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08a      	sub	sp, #40	; 0x28
 8005a12:	af02      	add	r7, sp, #8
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d17c      	bne.n	8005b28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_UART_Transmit+0x2c>
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e075      	b.n	8005b2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Transmit+0x3e>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e06e      	b.n	8005b2a <HAL_UART_Transmit+0x11c>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2221      	movs	r2, #33	; 0x21
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a62:	f7fc fec7 	bl	80027f4 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7c:	d108      	bne.n	8005a90 <HAL_UART_Transmit+0x82>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	e003      	b.n	8005a98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005aa0:	e02a      	b.n	8005af8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2180      	movs	r1, #128	; 0x80
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f840 	bl	8005b32 <UART_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e036      	b.n	8005b2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	61bb      	str	r3, [r7, #24]
 8005ad8:	e007      	b.n	8005aea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1cf      	bne.n	8005aa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2140      	movs	r1, #64	; 0x40
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f810 	bl	8005b32 <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e006      	b.n	8005b2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	e000      	b.n	8005b2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b28:	2302      	movs	r3, #2
  }
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3720      	adds	r7, #32
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b090      	sub	sp, #64	; 0x40
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b42:	e050      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d04c      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b52:	f7fc fe4f 	bl	80027f4 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d241      	bcs.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b82:	637a      	str	r2, [r7, #52]	; 0x34
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb6:	623a      	str	r2, [r7, #32]
 8005bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	69f9      	ldr	r1, [r7, #28]
 8005bbc:	6a3a      	ldr	r2, [r7, #32]
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e00f      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2301      	moveq	r3, #1
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d09f      	beq.n	8005b44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3740      	adds	r7, #64	; 0x40
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c14:	b0c0      	sub	sp, #256	; 0x100
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	68d9      	ldr	r1, [r3, #12]
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	ea40 0301 	orr.w	r3, r0, r1
 8005c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c68:	f021 010c 	bic.w	r1, r1, #12
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c76:	430b      	orrs	r3, r1
 8005c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	6999      	ldr	r1, [r3, #24]
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	ea40 0301 	orr.w	r3, r0, r1
 8005c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b8f      	ldr	r3, [pc, #572]	; (8005edc <UART_SetConfig+0x2cc>)
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d005      	beq.n	8005cb0 <UART_SetConfig+0xa0>
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b8d      	ldr	r3, [pc, #564]	; (8005ee0 <UART_SetConfig+0x2d0>)
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d104      	bne.n	8005cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cb0:	f7fe fb40 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8005cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cb8:	e003      	b.n	8005cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cba:	f7fe fb27 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8005cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ccc:	f040 810c 	bne.w	8005ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	1891      	adds	r1, r2, r2
 8005ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cea:	415b      	adcs	r3, r3
 8005cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	eb12 0801 	adds.w	r8, r2, r1
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	eb43 0901 	adc.w	r9, r3, r1
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d12:	4690      	mov	r8, r2
 8005d14:	4699      	mov	r9, r3
 8005d16:	4623      	mov	r3, r4
 8005d18:	eb18 0303 	adds.w	r3, r8, r3
 8005d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d20:	462b      	mov	r3, r5
 8005d22:	eb49 0303 	adc.w	r3, r9, r3
 8005d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d3e:	460b      	mov	r3, r1
 8005d40:	18db      	adds	r3, r3, r3
 8005d42:	653b      	str	r3, [r7, #80]	; 0x50
 8005d44:	4613      	mov	r3, r2
 8005d46:	eb42 0303 	adc.w	r3, r2, r3
 8005d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d54:	f7fa ffb8 	bl	8000cc8 <__aeabi_uldivmod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4b61      	ldr	r3, [pc, #388]	; (8005ee4 <UART_SetConfig+0x2d4>)
 8005d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	011c      	lsls	r4, r3, #4
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d80:	415b      	adcs	r3, r3
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d88:	4641      	mov	r1, r8
 8005d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8005d8e:	4649      	mov	r1, r9
 8005d90:	eb43 0b01 	adc.w	fp, r3, r1
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005da8:	4692      	mov	sl, r2
 8005daa:	469b      	mov	fp, r3
 8005dac:	4643      	mov	r3, r8
 8005dae:	eb1a 0303 	adds.w	r3, sl, r3
 8005db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005db6:	464b      	mov	r3, r9
 8005db8:	eb4b 0303 	adc.w	r3, fp, r3
 8005dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	18db      	adds	r3, r3, r3
 8005dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dda:	4613      	mov	r3, r2
 8005ddc:	eb42 0303 	adc.w	r3, r2, r3
 8005de0:	647b      	str	r3, [r7, #68]	; 0x44
 8005de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dea:	f7fa ff6d 	bl	8000cc8 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	4b3b      	ldr	r3, [pc, #236]	; (8005ee4 <UART_SetConfig+0x2d4>)
 8005df6:	fba3 2301 	umull	r2, r3, r3, r1
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2264      	movs	r2, #100	; 0x64
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	1acb      	subs	r3, r1, r3
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e0a:	4b36      	ldr	r3, [pc, #216]	; (8005ee4 <UART_SetConfig+0x2d4>)
 8005e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e18:	441c      	add	r4, r3
 8005e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	1891      	adds	r1, r2, r2
 8005e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e34:	415b      	adcs	r3, r3
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	1851      	adds	r1, r2, r1
 8005e40:	6339      	str	r1, [r7, #48]	; 0x30
 8005e42:	4649      	mov	r1, r9
 8005e44:	414b      	adcs	r3, r1
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e54:	4659      	mov	r1, fp
 8005e56:	00cb      	lsls	r3, r1, #3
 8005e58:	4651      	mov	r1, sl
 8005e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e5e:	4651      	mov	r1, sl
 8005e60:	00ca      	lsls	r2, r1, #3
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	4642      	mov	r2, r8
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e70:	464b      	mov	r3, r9
 8005e72:	460a      	mov	r2, r1
 8005e74:	eb42 0303 	adc.w	r3, r2, r3
 8005e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e90:	460b      	mov	r3, r1
 8005e92:	18db      	adds	r3, r3, r3
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e96:	4613      	mov	r3, r2
 8005e98:	eb42 0303 	adc.w	r3, r2, r3
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ea6:	f7fa ff0f 	bl	8000cc8 <__aeabi_uldivmod>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <UART_SetConfig+0x2d4>)
 8005eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	2164      	movs	r1, #100	; 0x64
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	3332      	adds	r3, #50	; 0x32
 8005ec2:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <UART_SetConfig+0x2d4>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	f003 0207 	and.w	r2, r3, #7
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4422      	add	r2, r4
 8005ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ed8:	e105      	b.n	80060e6 <UART_SetConfig+0x4d6>
 8005eda:	bf00      	nop
 8005edc:	40011000 	.word	0x40011000
 8005ee0:	40011400 	.word	0x40011400
 8005ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005efa:	4642      	mov	r2, r8
 8005efc:	464b      	mov	r3, r9
 8005efe:	1891      	adds	r1, r2, r2
 8005f00:	6239      	str	r1, [r7, #32]
 8005f02:	415b      	adcs	r3, r3
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f0a:	4641      	mov	r1, r8
 8005f0c:	1854      	adds	r4, r2, r1
 8005f0e:	4649      	mov	r1, r9
 8005f10:	eb43 0501 	adc.w	r5, r3, r1
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	00eb      	lsls	r3, r5, #3
 8005f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f22:	00e2      	lsls	r2, r4, #3
 8005f24:	4614      	mov	r4, r2
 8005f26:	461d      	mov	r5, r3
 8005f28:	4643      	mov	r3, r8
 8005f2a:	18e3      	adds	r3, r4, r3
 8005f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f30:	464b      	mov	r3, r9
 8005f32:	eb45 0303 	adc.w	r3, r5, r3
 8005f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f56:	4629      	mov	r1, r5
 8005f58:	008b      	lsls	r3, r1, #2
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f60:	4621      	mov	r1, r4
 8005f62:	008a      	lsls	r2, r1, #2
 8005f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f68:	f7fa feae 	bl	8000cc8 <__aeabi_uldivmod>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4b60      	ldr	r3, [pc, #384]	; (80060f4 <UART_SetConfig+0x4e4>)
 8005f72:	fba3 2302 	umull	r2, r3, r3, r2
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	011c      	lsls	r4, r3, #4
 8005f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	464b      	mov	r3, r9
 8005f90:	1891      	adds	r1, r2, r2
 8005f92:	61b9      	str	r1, [r7, #24]
 8005f94:	415b      	adcs	r3, r3
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	1851      	adds	r1, r2, r1
 8005fa0:	6139      	str	r1, [r7, #16]
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	414b      	adcs	r3, r1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fb4:	4659      	mov	r1, fp
 8005fb6:	00cb      	lsls	r3, r1, #3
 8005fb8:	4651      	mov	r1, sl
 8005fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fbe:	4651      	mov	r1, sl
 8005fc0:	00ca      	lsls	r2, r1, #3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4642      	mov	r2, r8
 8005fca:	189b      	adds	r3, r3, r2
 8005fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	eb42 0303 	adc.w	r3, r2, r3
 8005fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	008b      	lsls	r3, r1, #2
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ffe:	4641      	mov	r1, r8
 8006000:	008a      	lsls	r2, r1, #2
 8006002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006006:	f7fa fe5f 	bl	8000cc8 <__aeabi_uldivmod>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <UART_SetConfig+0x4e4>)
 8006010:	fba3 1302 	umull	r1, r3, r3, r2
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	2164      	movs	r1, #100	; 0x64
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	3332      	adds	r3, #50	; 0x32
 8006022:	4a34      	ldr	r2, [pc, #208]	; (80060f4 <UART_SetConfig+0x4e4>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800602e:	441c      	add	r4, r3
 8006030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006034:	2200      	movs	r2, #0
 8006036:	673b      	str	r3, [r7, #112]	; 0x70
 8006038:	677a      	str	r2, [r7, #116]	; 0x74
 800603a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800603e:	4642      	mov	r2, r8
 8006040:	464b      	mov	r3, r9
 8006042:	1891      	adds	r1, r2, r2
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	415b      	adcs	r3, r3
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800604e:	4641      	mov	r1, r8
 8006050:	1851      	adds	r1, r2, r1
 8006052:	6039      	str	r1, [r7, #0]
 8006054:	4649      	mov	r1, r9
 8006056:	414b      	adcs	r3, r1
 8006058:	607b      	str	r3, [r7, #4]
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006066:	4659      	mov	r1, fp
 8006068:	00cb      	lsls	r3, r1, #3
 800606a:	4651      	mov	r1, sl
 800606c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006070:	4651      	mov	r1, sl
 8006072:	00ca      	lsls	r2, r1, #3
 8006074:	4610      	mov	r0, r2
 8006076:	4619      	mov	r1, r3
 8006078:	4603      	mov	r3, r0
 800607a:	4642      	mov	r2, r8
 800607c:	189b      	adds	r3, r3, r2
 800607e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006080:	464b      	mov	r3, r9
 8006082:	460a      	mov	r2, r1
 8006084:	eb42 0303 	adc.w	r3, r2, r3
 8006088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	663b      	str	r3, [r7, #96]	; 0x60
 8006094:	667a      	str	r2, [r7, #100]	; 0x64
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060a2:	4649      	mov	r1, r9
 80060a4:	008b      	lsls	r3, r1, #2
 80060a6:	4641      	mov	r1, r8
 80060a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ac:	4641      	mov	r1, r8
 80060ae:	008a      	lsls	r2, r1, #2
 80060b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060b4:	f7fa fe08 	bl	8000cc8 <__aeabi_uldivmod>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <UART_SetConfig+0x4e4>)
 80060be:	fba3 1302 	umull	r1, r3, r3, r2
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	2164      	movs	r1, #100	; 0x64
 80060c6:	fb01 f303 	mul.w	r3, r1, r3
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	3332      	adds	r3, #50	; 0x32
 80060d0:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <UART_SetConfig+0x4e4>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4422      	add	r2, r4
 80060e4:	609a      	str	r2, [r3, #8]
}
 80060e6:	bf00      	nop
 80060e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f2:	bf00      	nop
 80060f4:	51eb851f 	.word	0x51eb851f

080060f8 <__NVIC_SetPriority>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006108:	2b00      	cmp	r3, #0
 800610a:	db0a      	blt.n	8006122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	b2da      	uxtb	r2, r3
 8006110:	490c      	ldr	r1, [pc, #48]	; (8006144 <__NVIC_SetPriority+0x4c>)
 8006112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006116:	0112      	lsls	r2, r2, #4
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	440b      	add	r3, r1
 800611c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006120:	e00a      	b.n	8006138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	4908      	ldr	r1, [pc, #32]	; (8006148 <__NVIC_SetPriority+0x50>)
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	3b04      	subs	r3, #4
 8006130:	0112      	lsls	r2, r2, #4
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	440b      	add	r3, r1
 8006136:	761a      	strb	r2, [r3, #24]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	e000e100 	.word	0xe000e100
 8006148:	e000ed00 	.word	0xe000ed00

0800614c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <SysTick_Handler+0x1c>)
 8006152:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006154:	f001 fd28 	bl	8007ba8 <xTaskGetSchedulerState>
 8006158:	4603      	mov	r3, r0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d001      	beq.n	8006162 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800615e:	f002 fb13 	bl	8008788 <xPortSysTickHandler>
  }
}
 8006162:	bf00      	nop
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	e000e010 	.word	0xe000e010

0800616c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006170:	2100      	movs	r1, #0
 8006172:	f06f 0004 	mvn.w	r0, #4
 8006176:	f7ff ffbf 	bl	80060f8 <__NVIC_SetPriority>
#endif
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006186:	f3ef 8305 	mrs	r3, IPSR
 800618a:	603b      	str	r3, [r7, #0]
  return(result);
 800618c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006192:	f06f 0305 	mvn.w	r3, #5
 8006196:	607b      	str	r3, [r7, #4]
 8006198:	e00c      	b.n	80061b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <osKernelInitialize+0x44>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d105      	bne.n	80061ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80061a2:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <osKernelInitialize+0x44>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	607b      	str	r3, [r7, #4]
 80061ac:	e002      	b.n	80061b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295
 80061b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061b4:	687b      	ldr	r3, [r7, #4]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	200003b8 	.word	0x200003b8

080061c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ce:	f3ef 8305 	mrs	r3, IPSR
 80061d2:	603b      	str	r3, [r7, #0]
  return(result);
 80061d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80061da:	f06f 0305 	mvn.w	r3, #5
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	e010      	b.n	8006204 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <osKernelStart+0x48>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d109      	bne.n	80061fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061ea:	f7ff ffbf 	bl	800616c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061ee:	4b08      	ldr	r3, [pc, #32]	; (8006210 <osKernelStart+0x48>)
 80061f0:	2202      	movs	r2, #2
 80061f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061f4:	f001 f87c 	bl	80072f0 <vTaskStartScheduler>
      stat = osOK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	e002      	b.n	8006204 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006204:	687b      	ldr	r3, [r7, #4]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	200003b8 	.word	0x200003b8

08006214 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b08e      	sub	sp, #56	; 0x38
 8006218:	af04      	add	r7, sp, #16
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006224:	f3ef 8305 	mrs	r3, IPSR
 8006228:	617b      	str	r3, [r7, #20]
  return(result);
 800622a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800622c:	2b00      	cmp	r3, #0
 800622e:	d17f      	bne.n	8006330 <osThreadNew+0x11c>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d07c      	beq.n	8006330 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800623a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800623c:	2318      	movs	r3, #24
 800623e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006244:	f04f 33ff 	mov.w	r3, #4294967295
 8006248:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d045      	beq.n	80062dc <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <osThreadNew+0x4a>
        name = attr->name;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <osThreadNew+0x70>
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	2b38      	cmp	r3, #56	; 0x38
 8006276:	d805      	bhi.n	8006284 <osThreadNew+0x70>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <osThreadNew+0x74>
        return (NULL);
 8006284:	2300      	movs	r3, #0
 8006286:	e054      	b.n	8006332 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00e      	beq.n	80062be <osThreadNew+0xaa>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2bbb      	cmp	r3, #187	; 0xbb
 80062a6:	d90a      	bls.n	80062be <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <osThreadNew+0xaa>
        mem = 1;
 80062b8:	2301      	movs	r3, #1
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e010      	b.n	80062e0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10c      	bne.n	80062e0 <osThreadNew+0xcc>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d108      	bne.n	80062e0 <osThreadNew+0xcc>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <osThreadNew+0xcc>
          mem = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e001      	b.n	80062e0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d110      	bne.n	8006308 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062ee:	9202      	str	r2, [sp, #8]
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fe0b 	bl	8006f18 <xTaskCreateStatic>
 8006302:	4603      	mov	r3, r0
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	e013      	b.n	8006330 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d110      	bne.n	8006330 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	b29a      	uxth	r2, r3
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fe56 	bl	8006fd2 <xTaskCreate>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <osThreadNew+0x11c>
            hTask = NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006330:	693b      	ldr	r3, [r7, #16]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3728      	adds	r7, #40	; 0x28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006342:	f3ef 8305 	mrs	r3, IPSR
 8006346:	60bb      	str	r3, [r7, #8]
  return(result);
 8006348:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <osDelay+0x1c>
    stat = osErrorISR;
 800634e:	f06f 0305 	mvn.w	r3, #5
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e007      	b.n	8006366 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 ff91 	bl	8007288 <vTaskDelay>
    }
  }

  return (stat);
 8006366:	68fb      	ldr	r3, [r7, #12]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a07      	ldr	r2, [pc, #28]	; (800639c <vApplicationGetIdleTaskMemory+0x2c>)
 8006380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4a06      	ldr	r2, [pc, #24]	; (80063a0 <vApplicationGetIdleTaskMemory+0x30>)
 8006386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800638e:	601a      	str	r2, [r3, #0]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	200003bc 	.word	0x200003bc
 80063a0:	20000478 	.word	0x20000478

080063a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a07      	ldr	r2, [pc, #28]	; (80063d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80063b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4a06      	ldr	r2, [pc, #24]	; (80063d4 <vApplicationGetTimerTaskMemory+0x30>)
 80063ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063c2:	601a      	str	r2, [r3, #0]
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20001478 	.word	0x20001478
 80063d4:	20001534 	.word	0x20001534

080063d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f103 0208 	add.w	r2, r3, #8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f103 0208 	add.w	r2, r3, #8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f103 0208 	add.w	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d103      	bne.n	800649a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e00c      	b.n	80064b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3308      	adds	r3, #8
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e002      	b.n	80064a8 <vListInsert+0x2e>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d2f6      	bcs.n	80064a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6892      	ldr	r2, [r2, #8]
 8006502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6852      	ldr	r2, [r2, #4]
 800650c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d103      	bne.n	8006520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800656a:	f002 f87b 	bl	8008664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	441a      	add	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	3b01      	subs	r3, #1
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	441a      	add	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	22ff      	movs	r2, #255	; 0xff
 80065ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d114      	bne.n	80065ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01a      	beq.n	80065fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3310      	adds	r3, #16
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 f929 	bl	8007824 <xTaskRemoveFromEventList>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d012      	beq.n	80065fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <xQueueGenericReset+0xcc>)
 80065da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	e009      	b.n	80065fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3310      	adds	r3, #16
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fef2 	bl	80063d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff feed 	bl	80063d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065fe:	f002 f861 	bl	80086c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006602:	2301      	movs	r3, #1
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	e000ed04 	.word	0xe000ed04

08006610 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08e      	sub	sp, #56	; 0x38
 8006614:	af02      	add	r7, sp, #8
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <xQueueGenericCreateStatic+0x52>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <xQueueGenericCreateStatic+0x56>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <xQueueGenericCreateStatic+0x58>
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	623b      	str	r3, [r7, #32]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <xQueueGenericCreateStatic+0x7e>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <xQueueGenericCreateStatic+0x82>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <xQueueGenericCreateStatic+0x84>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	61fb      	str	r3, [r7, #28]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066ae:	2350      	movs	r3, #80	; 0x50
 80066b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b50      	cmp	r3, #80	; 0x50
 80066b6:	d00a      	beq.n	80066ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	61bb      	str	r3, [r7, #24]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f805 	bl	8006700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3730      	adds	r7, #48	; 0x30
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d103      	bne.n	800671c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e002      	b.n	8006722 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800672e:	2101      	movs	r1, #1
 8006730:	69b8      	ldr	r0, [r7, #24]
 8006732:	f7ff ff05 	bl	8006540 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	78fa      	ldrb	r2, [r7, #3]
 800673a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08e      	sub	sp, #56	; 0x38
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xQueueGenericSend+0x32>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <xQueueGenericSend+0x40>
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <xQueueGenericSend+0x44>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <xQueueGenericSend+0x46>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <xQueueGenericSend+0x60>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d103      	bne.n	80067b6 <xQueueGenericSend+0x6e>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <xQueueGenericSend+0x72>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueGenericSend+0x74>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	623b      	str	r3, [r7, #32]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d6:	f001 f9e7 	bl	8007ba8 <xTaskGetSchedulerState>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <xQueueGenericSend+0x9e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <xQueueGenericSend+0xa2>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xQueueGenericSend+0xa4>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueGenericSend+0xbe>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	61fb      	str	r3, [r7, #28]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006806:	f001 ff2d 	bl	8008664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <xQueueGenericSend+0xd4>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d129      	bne.n	8006870 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006822:	f000 fa0b 	bl	8006c3c <prvCopyDataToQueue>
 8006826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fff5 	bl	8007824 <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d013      	beq.n	8006868 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <xQueueGenericSend+0x1f8>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e00a      	b.n	8006868 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006858:	4b39      	ldr	r3, [pc, #228]	; (8006940 <xQueueGenericSend+0x1f8>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006868:	f001 ff2c 	bl	80086c4 <vPortExitCritical>
				return pdPASS;
 800686c:	2301      	movs	r3, #1
 800686e:	e063      	b.n	8006938 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006876:	f001 ff25 	bl	80086c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800687a:	2300      	movs	r3, #0
 800687c:	e05c      	b.n	8006938 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	4618      	mov	r0, r3
 800688a:	f001 f82f 	bl	80078ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006892:	f001 ff17 	bl	80086c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006896:	f000 fd9b 	bl	80073d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689a:	f001 fee3 	bl	8008664 <vPortEnterCritical>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d103      	bne.n	80068b4 <xQueueGenericSend+0x16c>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSend+0x182>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ca:	f001 fefb 	bl	80086c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f81e 	bl	8007918 <xTaskCheckForTimeOut>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d124      	bne.n	800692c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e4:	f000 faa2 	bl	8006e2c <prvIsQueueFull>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d018      	beq.n	8006920 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	3310      	adds	r3, #16
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 ff44 	bl	8007784 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068fe:	f000 fa2d 	bl	8006d5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006902:	f000 fd73 	bl	80073ec <xTaskResumeAll>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	f47f af7c 	bne.w	8006806 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <xQueueGenericSend+0x1f8>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e772      	b.n	8006806 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006922:	f000 fa1b 	bl	8006d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006926:	f000 fd61 	bl	80073ec <xTaskResumeAll>
 800692a:	e76c      	b.n	8006806 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800692c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800692e:	f000 fa15 	bl	8006d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 fd5b 	bl	80073ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	; 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b090      	sub	sp, #64	; 0x40
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <xQueueGenericSendFromISR+0x3c>
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <xQueueGenericSendFromISR+0x40>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <xQueueGenericSendFromISR+0x42>
 8006984:	2300      	movs	r3, #0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d103      	bne.n	80069ae <xQueueGenericSendFromISR+0x6a>
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <xQueueGenericSendFromISR+0x6e>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericSendFromISR+0x70>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ce:	f001 ff2b 	bl	8008828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069d2:	f3ef 8211 	mrs	r2, BASEPRI
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	61fa      	str	r2, [r7, #28]
 80069e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <xQueueGenericSendFromISR+0xbc>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d12f      	bne.n	8006a60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a16:	f000 f911 	bl	8006c3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d112      	bne.n	8006a4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	3324      	adds	r3, #36	; 0x24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fef7 	bl	8007824 <xTaskRemoveFromEventList>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00e      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e007      	b.n	8006a5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	b25a      	sxtb	r2, r3
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a5e:	e001      	b.n	8006a64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3740      	adds	r7, #64	; 0x40
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	; 0x30
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <xQueueReceive+0x30>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	623b      	str	r3, [r7, #32]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d103      	bne.n	8006aba <xQueueReceive+0x3e>
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <xQueueReceive+0x42>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <xQueueReceive+0x44>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <xQueueReceive+0x5e>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	61fb      	str	r3, [r7, #28]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ada:	f001 f865 	bl	8007ba8 <xTaskGetSchedulerState>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <xQueueReceive+0x6e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <xQueueReceive+0x72>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueReceive+0x74>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueReceive+0x8e>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61bb      	str	r3, [r7, #24]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b0a:	f001 fdab 	bl	8008664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01f      	beq.n	8006b5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1e:	f000 f8f7 	bl	8006d10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	1e5a      	subs	r2, r3, #1
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00f      	beq.n	8006b52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	3310      	adds	r3, #16
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fe74 	bl	8007824 <xTaskRemoveFromEventList>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b42:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <xQueueReceive+0x1bc>)
 8006b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b52:	f001 fdb7 	bl	80086c4 <vPortExitCritical>
				return pdPASS;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e069      	b.n	8006c2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d103      	bne.n	8006b68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b60:	f001 fdb0 	bl	80086c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e062      	b.n	8006c2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b6e:	f107 0310 	add.w	r3, r7, #16
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 feba 	bl	80078ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b7c:	f001 fda2 	bl	80086c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b80:	f000 fc26 	bl	80073d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b84:	f001 fd6e 	bl	8008664 <vPortEnterCritical>
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d103      	bne.n	8006b9e <xQueueReceive+0x122>
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d103      	bne.n	8006bb4 <xQueueReceive+0x138>
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb4:	f001 fd86 	bl	80086c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bb8:	1d3a      	adds	r2, r7, #4
 8006bba:	f107 0310 	add.w	r3, r7, #16
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fea9 	bl	8007918 <xTaskCheckForTimeOut>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d123      	bne.n	8006c14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bce:	f000 f917 	bl	8006e00 <prvIsQueueEmpty>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d017      	beq.n	8006c08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fdcf 	bl	8007784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006be8:	f000 f8b8 	bl	8006d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bec:	f000 fbfe 	bl	80073ec <xTaskResumeAll>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d189      	bne.n	8006b0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <xQueueReceive+0x1bc>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	e780      	b.n	8006b0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0a:	f000 f8a7 	bl	8006d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c0e:	f000 fbed 	bl	80073ec <xTaskResumeAll>
 8006c12:	e77a      	b.n	8006b0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c16:	f000 f8a1 	bl	8006d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c1a:	f000 fbe7 	bl	80073ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c20:	f000 f8ee 	bl	8006e00 <prvIsQueueEmpty>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f43f af6f 	beq.w	8006b0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3730      	adds	r7, #48	; 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d14d      	bne.n	8006cfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 ffbc 	bl	8007be4 <xTaskPriorityDisinherit>
 8006c6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	e043      	b.n	8006cfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d119      	bne.n	8006cb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6858      	ldr	r0, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	461a      	mov	r2, r3
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	f002 ff87 	bl	8009b9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	441a      	add	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d32b      	bcc.n	8006cfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]
 8006cae:	e026      	b.n	8006cfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68d8      	ldr	r0, [r3, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	f002 ff6d 	bl	8009b9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	425b      	negs	r3, r3
 8006cca:	441a      	add	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d207      	bcs.n	8006cec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	425b      	negs	r3, r3
 8006ce6:	441a      	add	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d105      	bne.n	8006cfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d06:	697b      	ldr	r3, [r7, #20]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d018      	beq.n	8006d54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	441a      	add	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d303      	bcc.n	8006d44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68d9      	ldr	r1, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6838      	ldr	r0, [r7, #0]
 8006d50:	f002 ff23 	bl	8009b9a <memcpy>
	}
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d64:	f001 fc7e 	bl	8008664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d70:	e011      	b.n	8006d96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d012      	beq.n	8006da0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3324      	adds	r3, #36	; 0x24
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fd50 	bl	8007824 <xTaskRemoveFromEventList>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d8a:	f000 fe27 	bl	80079dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dce9      	bgt.n	8006d72 <prvUnlockQueue+0x16>
 8006d9e:	e000      	b.n	8006da2 <prvUnlockQueue+0x46>
					break;
 8006da0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006daa:	f001 fc8b 	bl	80086c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dae:	f001 fc59 	bl	8008664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006db8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dba:	e011      	b.n	8006de0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d012      	beq.n	8006dea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3310      	adds	r3, #16
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fd2b 	bl	8007824 <xTaskRemoveFromEventList>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dd4:	f000 fe02 	bl	80079dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dce9      	bgt.n	8006dbc <prvUnlockQueue+0x60>
 8006de8:	e000      	b.n	8006dec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006dea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	22ff      	movs	r2, #255	; 0xff
 8006df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006df4:	f001 fc66 	bl	80086c4 <vPortExitCritical>
}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e08:	f001 fc2c 	bl	8008664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e001      	b.n	8006e1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e1e:	f001 fc51 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 8006e22:	68fb      	ldr	r3, [r7, #12]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e34:	f001 fc16 	bl	8008664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d102      	bne.n	8006e4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e001      	b.n	8006e4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e4e:	f001 fc39 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 8006e52:	68fb      	ldr	r3, [r7, #12]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	e014      	b.n	8006e96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e6c:	4a0f      	ldr	r2, [pc, #60]	; (8006eac <vQueueAddToRegistry+0x50>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10b      	bne.n	8006e90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e78:	490c      	ldr	r1, [pc, #48]	; (8006eac <vQueueAddToRegistry+0x50>)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e82:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <vQueueAddToRegistry+0x50>)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4413      	add	r3, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e8e:	e006      	b.n	8006e9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b07      	cmp	r3, #7
 8006e9a:	d9e7      	bls.n	8006e6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20003534 	.word	0x20003534

08006eb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ec0:	f001 fbd0 	bl	8008664 <vPortEnterCritical>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d103      	bne.n	8006eda <vQueueWaitForMessageRestricted+0x2a>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d103      	bne.n	8006ef0 <vQueueWaitForMessageRestricted+0x40>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ef0:	f001 fbe8 	bl	80086c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	3324      	adds	r3, #36	; 0x24
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fc61 	bl	80077cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	f7ff ff26 	bl	8006d5c <prvUnlockQueue>
	}
 8006f10:	bf00      	nop
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08e      	sub	sp, #56	; 0x38
 8006f1c:	af04      	add	r7, sp, #16
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	623b      	str	r3, [r7, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <xTaskCreateStatic+0x46>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	61fb      	str	r3, [r7, #28]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f5e:	23bc      	movs	r3, #188	; 0xbc
 8006f60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2bbc      	cmp	r3, #188	; 0xbc
 8006f66:	d00a      	beq.n	8006f7e <xTaskCreateStatic+0x66>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	61bb      	str	r3, [r7, #24]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01e      	beq.n	8006fc4 <xTaskCreateStatic+0xac>
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01b      	beq.n	8006fc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9303      	str	r3, [sp, #12]
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	9302      	str	r3, [sp, #8]
 8006fa6:	f107 0314 	add.w	r3, r7, #20
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f850 	bl	800705c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fbe:	f000 f8f3 	bl	80071a8 <prvAddNewTaskToReadyList>
 8006fc2:	e001      	b.n	8006fc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fc8:	697b      	ldr	r3, [r7, #20]
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3728      	adds	r7, #40	; 0x28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b08c      	sub	sp, #48	; 0x30
 8006fd6:	af04      	add	r7, sp, #16
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fc5e 	bl	80088a8 <pvPortMalloc>
 8006fec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00e      	beq.n	8007012 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ff4:	20bc      	movs	r0, #188	; 0xbc
 8006ff6:	f001 fc57 	bl	80088a8 <pvPortMalloc>
 8006ffa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
 8007008:	e005      	b.n	8007016 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800700a:	6978      	ldr	r0, [r7, #20]
 800700c:	f001 fd18 	bl	8008a40 <vPortFree>
 8007010:	e001      	b.n	8007016 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d017      	beq.n	800704c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	2300      	movs	r3, #0
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68b9      	ldr	r1, [r7, #8]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f80e 	bl	800705c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007040:	69f8      	ldr	r0, [r7, #28]
 8007042:	f000 f8b1 	bl	80071a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007046:	2301      	movs	r3, #1
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	e002      	b.n	8007052 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800704c:	f04f 33ff 	mov.w	r3, #4294967295
 8007050:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007052:	69bb      	ldr	r3, [r7, #24]
	}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	461a      	mov	r2, r3
 8007074:	21a5      	movs	r1, #165	; 0xa5
 8007076:	f002 fd9e 	bl	8009bb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007084:	3b01      	subs	r3, #1
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f023 0307 	bic.w	r3, r3, #7
 8007092:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	617b      	str	r3, [r7, #20]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01f      	beq.n	80070fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	e012      	b.n	80070e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4413      	add	r3, r2
 80070c6:	7819      	ldrb	r1, [r3, #0]
 80070c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	3334      	adds	r3, #52	; 0x34
 80070d0:	460a      	mov	r2, r1
 80070d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	3301      	adds	r3, #1
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d9e9      	bls.n	80070c0 <prvInitialiseNewTask+0x64>
 80070ec:	e000      	b.n	80070f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80070ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070f8:	e003      	b.n	8007102 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	2b37      	cmp	r3, #55	; 0x37
 8007106:	d901      	bls.n	800710c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007108:	2337      	movs	r3, #55	; 0x37
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007110:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007116:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	2200      	movs	r2, #0
 800711c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff f978 	bl	8006418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	3318      	adds	r3, #24
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff f973 	bl	8006418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007136:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007146:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	2200      	movs	r2, #0
 8007154:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	3354      	adds	r3, #84	; 0x54
 800715c:	2260      	movs	r2, #96	; 0x60
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f002 fd28 	bl	8009bb6 <memset>
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	4a0c      	ldr	r2, [pc, #48]	; (800719c <prvInitialiseNewTask+0x140>)
 800716a:	659a      	str	r2, [r3, #88]	; 0x58
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <prvInitialiseNewTask+0x144>)
 8007170:	65da      	str	r2, [r3, #92]	; 0x5c
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <prvInitialiseNewTask+0x148>)
 8007176:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	69b8      	ldr	r0, [r7, #24]
 800717e:	f001 f941 	bl	8008404 <pxPortInitialiseStack>
 8007182:	4602      	mov	r2, r0
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007192:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007194:	bf00      	nop
 8007196:	3720      	adds	r7, #32
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	0802b380 	.word	0x0802b380
 80071a0:	0802b3a0 	.word	0x0802b3a0
 80071a4:	0802b360 	.word	0x0802b360

080071a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071b0:	f001 fa58 	bl	8008664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071b4:	4b2d      	ldr	r3, [pc, #180]	; (800726c <prvAddNewTaskToReadyList+0xc4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	4a2c      	ldr	r2, [pc, #176]	; (800726c <prvAddNewTaskToReadyList+0xc4>)
 80071bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071be:	4b2c      	ldr	r3, [pc, #176]	; (8007270 <prvAddNewTaskToReadyList+0xc8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071c6:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <prvAddNewTaskToReadyList+0xc8>)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071cc:	4b27      	ldr	r3, [pc, #156]	; (800726c <prvAddNewTaskToReadyList+0xc4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d110      	bne.n	80071f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071d4:	f000 fc26 	bl	8007a24 <prvInitialiseTaskLists>
 80071d8:	e00d      	b.n	80071f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071da:	4b26      	ldr	r3, [pc, #152]	; (8007274 <prvAddNewTaskToReadyList+0xcc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d109      	bne.n	80071f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071e2:	4b23      	ldr	r3, [pc, #140]	; (8007270 <prvAddNewTaskToReadyList+0xc8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d802      	bhi.n	80071f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071f0:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <prvAddNewTaskToReadyList+0xc8>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071f6:	4b20      	ldr	r3, [pc, #128]	; (8007278 <prvAddNewTaskToReadyList+0xd0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <prvAddNewTaskToReadyList+0xd0>)
 80071fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007200:	4b1d      	ldr	r3, [pc, #116]	; (8007278 <prvAddNewTaskToReadyList+0xd0>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <prvAddNewTaskToReadyList+0xd4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d903      	bls.n	800721c <prvAddNewTaskToReadyList+0x74>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a18      	ldr	r2, [pc, #96]	; (800727c <prvAddNewTaskToReadyList+0xd4>)
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4a15      	ldr	r2, [pc, #84]	; (8007280 <prvAddNewTaskToReadyList+0xd8>)
 800722a:	441a      	add	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f7ff f8fd 	bl	8006432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007238:	f001 fa44 	bl	80086c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <prvAddNewTaskToReadyList+0xcc>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <prvAddNewTaskToReadyList+0xc8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	429a      	cmp	r2, r3
 8007250:	d207      	bcs.n	8007262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <prvAddNewTaskToReadyList+0xdc>)
 8007254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20003a48 	.word	0x20003a48
 8007270:	20003574 	.word	0x20003574
 8007274:	20003a54 	.word	0x20003a54
 8007278:	20003a64 	.word	0x20003a64
 800727c:	20003a50 	.word	0x20003a50
 8007280:	20003578 	.word	0x20003578
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d017      	beq.n	80072ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <vTaskDelay+0x60>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <vTaskDelay+0x30>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	60bb      	str	r3, [r7, #8]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072b8:	f000 f88a 	bl	80073d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072bc:	2100      	movs	r1, #0
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fcfe 	bl	8007cc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072c4:	f000 f892 	bl	80073ec <xTaskResumeAll>
 80072c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d107      	bne.n	80072e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <vTaskDelay+0x64>)
 80072d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20003a70 	.word	0x20003a70
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072fe:	463a      	mov	r2, r7
 8007300:	1d39      	adds	r1, r7, #4
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff f832 	bl	8006370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	9202      	str	r2, [sp, #8]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	460a      	mov	r2, r1
 800731e:	4924      	ldr	r1, [pc, #144]	; (80073b0 <vTaskStartScheduler+0xc0>)
 8007320:	4824      	ldr	r0, [pc, #144]	; (80073b4 <vTaskStartScheduler+0xc4>)
 8007322:	f7ff fdf9 	bl	8006f18 <xTaskCreateStatic>
 8007326:	4603      	mov	r3, r0
 8007328:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <vTaskStartScheduler+0xc8>)
 800732a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800732c:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <vTaskStartScheduler+0xc8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e001      	b.n	800733e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d102      	bne.n	800734a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007344:	f000 fd10 	bl	8007d68 <xTimerCreateTimerTask>
 8007348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d11b      	bne.n	8007388 <vTaskStartScheduler+0x98>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007364:	4b15      	ldr	r3, [pc, #84]	; (80073bc <vTaskStartScheduler+0xcc>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3354      	adds	r3, #84	; 0x54
 800736a:	4a15      	ldr	r2, [pc, #84]	; (80073c0 <vTaskStartScheduler+0xd0>)
 800736c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <vTaskStartScheduler+0xd4>)
 8007370:	f04f 32ff 	mov.w	r2, #4294967295
 8007374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <vTaskStartScheduler+0xd8>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <vTaskStartScheduler+0xdc>)
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007382:	f001 f8cd 	bl	8008520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007386:	e00e      	b.n	80073a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d10a      	bne.n	80073a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60fb      	str	r3, [r7, #12]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <vTaskStartScheduler+0xb4>
}
 80073a6:	bf00      	nop
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	0800f648 	.word	0x0800f648
 80073b4:	080079f5 	.word	0x080079f5
 80073b8:	20003a6c 	.word	0x20003a6c
 80073bc:	20003574 	.word	0x20003574
 80073c0:	20000010 	.word	0x20000010
 80073c4:	20003a68 	.word	0x20003a68
 80073c8:	20003a54 	.word	0x20003a54
 80073cc:	20003a4c 	.word	0x20003a4c

080073d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <vTaskSuspendAll+0x18>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3301      	adds	r3, #1
 80073da:	4a03      	ldr	r2, [pc, #12]	; (80073e8 <vTaskSuspendAll+0x18>)
 80073dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073de:	bf00      	nop
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	20003a70 	.word	0x20003a70

080073ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073fa:	4b42      	ldr	r3, [pc, #264]	; (8007504 <xTaskResumeAll+0x118>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <xTaskResumeAll+0x2c>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	603b      	str	r3, [r7, #0]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007418:	f001 f924 	bl	8008664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800741c:	4b39      	ldr	r3, [pc, #228]	; (8007504 <xTaskResumeAll+0x118>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3b01      	subs	r3, #1
 8007422:	4a38      	ldr	r2, [pc, #224]	; (8007504 <xTaskResumeAll+0x118>)
 8007424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007426:	4b37      	ldr	r3, [pc, #220]	; (8007504 <xTaskResumeAll+0x118>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d162      	bne.n	80074f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800742e:	4b36      	ldr	r3, [pc, #216]	; (8007508 <xTaskResumeAll+0x11c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d05e      	beq.n	80074f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007436:	e02f      	b.n	8007498 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007438:	4b34      	ldr	r3, [pc, #208]	; (800750c <xTaskResumeAll+0x120>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3318      	adds	r3, #24
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff f851 	bl	80064ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff f84c 	bl	80064ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	4b2d      	ldr	r3, [pc, #180]	; (8007510 <xTaskResumeAll+0x124>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d903      	bls.n	8007468 <xTaskResumeAll+0x7c>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4a2a      	ldr	r2, [pc, #168]	; (8007510 <xTaskResumeAll+0x124>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4a27      	ldr	r2, [pc, #156]	; (8007514 <xTaskResumeAll+0x128>)
 8007476:	441a      	add	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f7fe ffd7 	bl	8006432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	4b23      	ldr	r3, [pc, #140]	; (8007518 <xTaskResumeAll+0x12c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	429a      	cmp	r2, r3
 8007490:	d302      	bcc.n	8007498 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007492:	4b22      	ldr	r3, [pc, #136]	; (800751c <xTaskResumeAll+0x130>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007498:	4b1c      	ldr	r3, [pc, #112]	; (800750c <xTaskResumeAll+0x120>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1cb      	bne.n	8007438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074a6:	f000 fb5f 	bl	8007b68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074aa:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <xTaskResumeAll+0x134>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d010      	beq.n	80074d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074b6:	f000 f847 	bl	8007548 <xTaskIncrementTick>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80074c0:	4b16      	ldr	r3, [pc, #88]	; (800751c <xTaskResumeAll+0x130>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f1      	bne.n	80074b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <xTaskResumeAll+0x134>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074d8:	4b10      	ldr	r3, [pc, #64]	; (800751c <xTaskResumeAll+0x130>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <xTaskResumeAll+0x138>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074f4:	f001 f8e6 	bl	80086c4 <vPortExitCritical>

	return xAlreadyYielded;
 80074f8:	68bb      	ldr	r3, [r7, #8]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20003a70 	.word	0x20003a70
 8007508:	20003a48 	.word	0x20003a48
 800750c:	20003a08 	.word	0x20003a08
 8007510:	20003a50 	.word	0x20003a50
 8007514:	20003578 	.word	0x20003578
 8007518:	20003574 	.word	0x20003574
 800751c:	20003a5c 	.word	0x20003a5c
 8007520:	20003a58 	.word	0x20003a58
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <xTaskGetTickCount+0x1c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007534:	687b      	ldr	r3, [r7, #4]
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20003a4c 	.word	0x20003a4c

08007548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007552:	4b4f      	ldr	r3, [pc, #316]	; (8007690 <xTaskIncrementTick+0x148>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 808f 	bne.w	800767a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800755c:	4b4d      	ldr	r3, [pc, #308]	; (8007694 <xTaskIncrementTick+0x14c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007564:	4a4b      	ldr	r2, [pc, #300]	; (8007694 <xTaskIncrementTick+0x14c>)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d120      	bne.n	80075b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007570:	4b49      	ldr	r3, [pc, #292]	; (8007698 <xTaskIncrementTick+0x150>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <xTaskIncrementTick+0x48>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	603b      	str	r3, [r7, #0]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <xTaskIncrementTick+0x46>
 8007590:	4b41      	ldr	r3, [pc, #260]	; (8007698 <xTaskIncrementTick+0x150>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	4b41      	ldr	r3, [pc, #260]	; (800769c <xTaskIncrementTick+0x154>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3f      	ldr	r2, [pc, #252]	; (8007698 <xTaskIncrementTick+0x150>)
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4a3f      	ldr	r2, [pc, #252]	; (800769c <xTaskIncrementTick+0x154>)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	4b3e      	ldr	r3, [pc, #248]	; (80076a0 <xTaskIncrementTick+0x158>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a3d      	ldr	r2, [pc, #244]	; (80076a0 <xTaskIncrementTick+0x158>)
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	f000 fadb 	bl	8007b68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075b2:	4b3c      	ldr	r3, [pc, #240]	; (80076a4 <xTaskIncrementTick+0x15c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d349      	bcc.n	8007650 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075bc:	4b36      	ldr	r3, [pc, #216]	; (8007698 <xTaskIncrementTick+0x150>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <xTaskIncrementTick+0x15c>)
 80075c8:	f04f 32ff 	mov.w	r2, #4294967295
 80075cc:	601a      	str	r2, [r3, #0]
					break;
 80075ce:	e03f      	b.n	8007650 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d0:	4b31      	ldr	r3, [pc, #196]	; (8007698 <xTaskIncrementTick+0x150>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d203      	bcs.n	80075f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075e8:	4a2e      	ldr	r2, [pc, #184]	; (80076a4 <xTaskIncrementTick+0x15c>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075ee:	e02f      	b.n	8007650 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe ff79 	bl	80064ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	3318      	adds	r3, #24
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe ff70 	bl	80064ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <xTaskIncrementTick+0x160>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d903      	bls.n	8007620 <xTaskIncrementTick+0xd8>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	4a22      	ldr	r2, [pc, #136]	; (80076a8 <xTaskIncrementTick+0x160>)
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <xTaskIncrementTick+0x164>)
 800762e:	441a      	add	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3304      	adds	r3, #4
 8007634:	4619      	mov	r1, r3
 8007636:	4610      	mov	r0, r2
 8007638:	f7fe fefb 	bl	8006432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4b1b      	ldr	r3, [pc, #108]	; (80076b0 <xTaskIncrementTick+0x168>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	429a      	cmp	r2, r3
 8007648:	d3b8      	bcc.n	80075bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800764a:	2301      	movs	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764e:	e7b5      	b.n	80075bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007650:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <xTaskIncrementTick+0x168>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007656:	4915      	ldr	r1, [pc, #84]	; (80076ac <xTaskIncrementTick+0x164>)
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d901      	bls.n	800766c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800766c:	4b11      	ldr	r3, [pc, #68]	; (80076b4 <xTaskIncrementTick+0x16c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007674:	2301      	movs	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e004      	b.n	8007684 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <xTaskIncrementTick+0x170>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3301      	adds	r3, #1
 8007680:	4a0d      	ldr	r2, [pc, #52]	; (80076b8 <xTaskIncrementTick+0x170>)
 8007682:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007684:	697b      	ldr	r3, [r7, #20]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20003a70 	.word	0x20003a70
 8007694:	20003a4c 	.word	0x20003a4c
 8007698:	20003a00 	.word	0x20003a00
 800769c:	20003a04 	.word	0x20003a04
 80076a0:	20003a60 	.word	0x20003a60
 80076a4:	20003a68 	.word	0x20003a68
 80076a8:	20003a50 	.word	0x20003a50
 80076ac:	20003578 	.word	0x20003578
 80076b0:	20003574 	.word	0x20003574
 80076b4:	20003a5c 	.word	0x20003a5c
 80076b8:	20003a58 	.word	0x20003a58

080076bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076c2:	4b2a      	ldr	r3, [pc, #168]	; (800776c <vTaskSwitchContext+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076ca:	4b29      	ldr	r3, [pc, #164]	; (8007770 <vTaskSwitchContext+0xb4>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076d0:	e046      	b.n	8007760 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80076d2:	4b27      	ldr	r3, [pc, #156]	; (8007770 <vTaskSwitchContext+0xb4>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d8:	4b26      	ldr	r3, [pc, #152]	; (8007774 <vTaskSwitchContext+0xb8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e010      	b.n	8007702 <vTaskSwitchContext+0x46>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <vTaskSwitchContext+0x40>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	607b      	str	r3, [r7, #4]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <vTaskSwitchContext+0x3e>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3b01      	subs	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	491d      	ldr	r1, [pc, #116]	; (8007778 <vTaskSwitchContext+0xbc>)
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0e4      	beq.n	80076e0 <vTaskSwitchContext+0x24>
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4a15      	ldr	r2, [pc, #84]	; (8007778 <vTaskSwitchContext+0xbc>)
 8007722:	4413      	add	r3, r2
 8007724:	60bb      	str	r3, [r7, #8]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	605a      	str	r2, [r3, #4]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3308      	adds	r3, #8
 8007738:	429a      	cmp	r2, r3
 800773a:	d104      	bne.n	8007746 <vTaskSwitchContext+0x8a>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	605a      	str	r2, [r3, #4]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	4a0b      	ldr	r2, [pc, #44]	; (800777c <vTaskSwitchContext+0xc0>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	4a08      	ldr	r2, [pc, #32]	; (8007774 <vTaskSwitchContext+0xb8>)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <vTaskSwitchContext+0xc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3354      	adds	r3, #84	; 0x54
 800775c:	4a08      	ldr	r2, [pc, #32]	; (8007780 <vTaskSwitchContext+0xc4>)
 800775e:	6013      	str	r3, [r2, #0]
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	20003a70 	.word	0x20003a70
 8007770:	20003a5c 	.word	0x20003a5c
 8007774:	20003a50 	.word	0x20003a50
 8007778:	20003578 	.word	0x20003578
 800777c:	20003574 	.word	0x20003574
 8007780:	20000010 	.word	0x20000010

08007784 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <vTaskPlaceOnEventList+0x44>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3318      	adds	r3, #24
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fe fe61 	bl	800647a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077b8:	2101      	movs	r1, #1
 80077ba:	6838      	ldr	r0, [r7, #0]
 80077bc:	f000 fa80 	bl	8007cc0 <prvAddCurrentTaskToDelayedList>
}
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20003574 	.word	0x20003574

080077cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <vTaskPlaceOnEventListRestricted+0x54>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3318      	adds	r3, #24
 80077fa:	4619      	mov	r1, r3
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7fe fe18 	bl	8006432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007808:	f04f 33ff 	mov.w	r3, #4294967295
 800780c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f000 fa55 	bl	8007cc0 <prvAddCurrentTaskToDelayedList>
	}
 8007816:	bf00      	nop
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20003574 	.word	0x20003574

08007824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	60fb      	str	r3, [r7, #12]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3318      	adds	r3, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fe49 	bl	80064ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785a:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <xTaskRemoveFromEventList+0xb0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d11d      	bne.n	800789e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3304      	adds	r3, #4
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fe40 	bl	80064ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007870:	4b19      	ldr	r3, [pc, #100]	; (80078d8 <xTaskRemoveFromEventList+0xb4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d903      	bls.n	8007880 <xTaskRemoveFromEventList+0x5c>
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <xTaskRemoveFromEventList+0xb4>)
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <xTaskRemoveFromEventList+0xb8>)
 800788e:	441a      	add	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f7fe fdcb 	bl	8006432 <vListInsertEnd>
 800789c:	e005      	b.n	80078aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	3318      	adds	r3, #24
 80078a2:	4619      	mov	r1, r3
 80078a4:	480e      	ldr	r0, [pc, #56]	; (80078e0 <xTaskRemoveFromEventList+0xbc>)
 80078a6:	f7fe fdc4 	bl	8006432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <xTaskRemoveFromEventList+0xc0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d905      	bls.n	80078c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <xTaskRemoveFromEventList+0xc4>)
 80078be:	2201      	movs	r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e001      	b.n	80078c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078c8:	697b      	ldr	r3, [r7, #20]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20003a70 	.word	0x20003a70
 80078d8:	20003a50 	.word	0x20003a50
 80078dc:	20003578 	.word	0x20003578
 80078e0:	20003a08 	.word	0x20003a08
 80078e4:	20003574 	.word	0x20003574
 80078e8:	20003a5c 	.word	0x20003a5c

080078ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <vTaskInternalSetTimeOutState+0x24>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <vTaskInternalSetTimeOutState+0x28>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	605a      	str	r2, [r3, #4]
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20003a60 	.word	0x20003a60
 8007914:	20003a4c 	.word	0x20003a4c

08007918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	613b      	str	r3, [r7, #16]
}
 800793a:	bf00      	nop
 800793c:	e7fe      	b.n	800793c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	60fb      	str	r3, [r7, #12]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800795a:	f000 fe83 	bl	8008664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800795e:	4b1d      	ldr	r3, [pc, #116]	; (80079d4 <xTaskCheckForTimeOut+0xbc>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d102      	bne.n	800797e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007978:	2300      	movs	r3, #0
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	e023      	b.n	80079c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <xTaskCheckForTimeOut+0xc0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d007      	beq.n	800799a <xTaskCheckForTimeOut+0x82>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	e015      	b.n	80079c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d20b      	bcs.n	80079bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	1ad2      	subs	r2, r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff ff9b 	bl	80078ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
 80079ba:	e004      	b.n	80079c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079c6:	f000 fe7d 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 80079ca:	69fb      	ldr	r3, [r7, #28]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3720      	adds	r7, #32
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20003a4c 	.word	0x20003a4c
 80079d8:	20003a60 	.word	0x20003a60

080079dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079e0:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <vTaskMissedYield+0x14>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
}
 80079e6:	bf00      	nop
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20003a5c 	.word	0x20003a5c

080079f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079fc:	f000 f852 	bl	8007aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <prvIdleTask+0x28>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d9f9      	bls.n	80079fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a08:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <prvIdleTask+0x2c>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a18:	e7f0      	b.n	80079fc <prvIdleTask+0x8>
 8007a1a:	bf00      	nop
 8007a1c:	20003578 	.word	0x20003578
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	e00c      	b.n	8007a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4a12      	ldr	r2, [pc, #72]	; (8007a84 <prvInitialiseTaskLists+0x60>)
 8007a3c:	4413      	add	r3, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fcca 	bl	80063d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3301      	adds	r3, #1
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b37      	cmp	r3, #55	; 0x37
 8007a4e:	d9ef      	bls.n	8007a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a50:	480d      	ldr	r0, [pc, #52]	; (8007a88 <prvInitialiseTaskLists+0x64>)
 8007a52:	f7fe fcc1 	bl	80063d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a56:	480d      	ldr	r0, [pc, #52]	; (8007a8c <prvInitialiseTaskLists+0x68>)
 8007a58:	f7fe fcbe 	bl	80063d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a5c:	480c      	ldr	r0, [pc, #48]	; (8007a90 <prvInitialiseTaskLists+0x6c>)
 8007a5e:	f7fe fcbb 	bl	80063d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a62:	480c      	ldr	r0, [pc, #48]	; (8007a94 <prvInitialiseTaskLists+0x70>)
 8007a64:	f7fe fcb8 	bl	80063d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a68:	480b      	ldr	r0, [pc, #44]	; (8007a98 <prvInitialiseTaskLists+0x74>)
 8007a6a:	f7fe fcb5 	bl	80063d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <prvInitialiseTaskLists+0x78>)
 8007a70:	4a05      	ldr	r2, [pc, #20]	; (8007a88 <prvInitialiseTaskLists+0x64>)
 8007a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a74:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <prvInitialiseTaskLists+0x7c>)
 8007a76:	4a05      	ldr	r2, [pc, #20]	; (8007a8c <prvInitialiseTaskLists+0x68>)
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20003578 	.word	0x20003578
 8007a88:	200039d8 	.word	0x200039d8
 8007a8c:	200039ec 	.word	0x200039ec
 8007a90:	20003a08 	.word	0x20003a08
 8007a94:	20003a1c 	.word	0x20003a1c
 8007a98:	20003a34 	.word	0x20003a34
 8007a9c:	20003a00 	.word	0x20003a00
 8007aa0:	20003a04 	.word	0x20003a04

08007aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aaa:	e019      	b.n	8007ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007aac:	f000 fdda 	bl	8008664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <prvCheckTasksWaitingTermination+0x50>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fd15 	bl	80064ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <prvCheckTasksWaitingTermination+0x54>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4a0b      	ldr	r2, [pc, #44]	; (8007af8 <prvCheckTasksWaitingTermination+0x54>)
 8007aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007acc:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ad6:	f000 fdf5 	bl	80086c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f810 	bl	8007b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ae0:	4b06      	ldr	r3, [pc, #24]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e1      	bne.n	8007aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20003a1c 	.word	0x20003a1c
 8007af8:	20003a48 	.word	0x20003a48
 8007afc:	20003a30 	.word	0x20003a30

08007b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3354      	adds	r3, #84	; 0x54
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f002 ff77 	bl	800aa00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d108      	bne.n	8007b2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 ff8d 	bl	8008a40 <vPortFree>
				vPortFree( pxTCB );
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 ff8a 	bl	8008a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b2c:	e018      	b.n	8007b60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d103      	bne.n	8007b40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 ff81 	bl	8008a40 <vPortFree>
	}
 8007b3e:	e00f      	b.n	8007b60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d00a      	beq.n	8007b60 <prvDeleteTCB+0x60>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60fb      	str	r3, [r7, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <prvDeleteTCB+0x5e>
	}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <prvResetNextTaskUnblockTime+0x38>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8007b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b80:	e008      	b.n	8007b94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b82:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <prvResetNextTaskUnblockTime+0x38>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a04      	ldr	r2, [pc, #16]	; (8007ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8007b92:	6013      	str	r3, [r2, #0]
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20003a00 	.word	0x20003a00
 8007ba4:	20003a68 	.word	0x20003a68

08007ba8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bae:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <xTaskGetSchedulerState+0x34>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d102      	bne.n	8007bbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	607b      	str	r3, [r7, #4]
 8007bba:	e008      	b.n	8007bce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bbc:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <xTaskGetSchedulerState+0x38>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e001      	b.n	8007bce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bce:	687b      	ldr	r3, [r7, #4]
	}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	20003a54 	.word	0x20003a54
 8007be0:	20003a70 	.word	0x20003a70

08007be4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d056      	beq.n	8007ca8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bfa:	4b2e      	ldr	r3, [pc, #184]	; (8007cb4 <xTaskPriorityDisinherit+0xd0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d00a      	beq.n	8007c1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	60fb      	str	r3, [r7, #12]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60bb      	str	r3, [r7, #8]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3c:	1e5a      	subs	r2, r3, #1
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d02c      	beq.n	8007ca8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d128      	bne.n	8007ca8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fc46 	bl	80064ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c78:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <xTaskPriorityDisinherit+0xd4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d903      	bls.n	8007c88 <xTaskPriorityDisinherit+0xa4>
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <xTaskPriorityDisinherit+0xd4>)
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4a09      	ldr	r2, [pc, #36]	; (8007cbc <xTaskPriorityDisinherit+0xd8>)
 8007c96:	441a      	add	r2, r3
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f7fe fbc7 	bl	8006432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ca8:	697b      	ldr	r3, [r7, #20]
	}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20003574 	.word	0x20003574
 8007cb8:	20003a50 	.word	0x20003a50
 8007cbc:	20003578 	.word	0x20003578

08007cc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cca:	4b21      	ldr	r3, [pc, #132]	; (8007d50 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd0:	4b20      	ldr	r3, [pc, #128]	; (8007d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fc08 	bl	80064ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d10a      	bne.n	8007cfa <prvAddCurrentTaskToDelayedList+0x3a>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4819      	ldr	r0, [pc, #100]	; (8007d58 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cf4:	f7fe fb9d 	bl	8006432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cf8:	e026      	b.n	8007d48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4413      	add	r3, r2
 8007d00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d02:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d209      	bcs.n	8007d26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4610      	mov	r0, r2
 8007d20:	f7fe fbab 	bl	800647a <vListInsert>
}
 8007d24:	e010      	b.n	8007d48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d26:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f7fe fba1 	bl	800647a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d202      	bcs.n	8007d48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d42:	4a08      	ldr	r2, [pc, #32]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6013      	str	r3, [r2, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20003a4c 	.word	0x20003a4c
 8007d54:	20003574 	.word	0x20003574
 8007d58:	20003a34 	.word	0x20003a34
 8007d5c:	20003a04 	.word	0x20003a04
 8007d60:	20003a00 	.word	0x20003a00
 8007d64:	20003a68 	.word	0x20003a68

08007d68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08a      	sub	sp, #40	; 0x28
 8007d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d72:	f000 fb07 	bl	8008384 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d76:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <xTimerCreateTimerTask+0x80>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d021      	beq.n	8007dc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d86:	1d3a      	adds	r2, r7, #4
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	f107 030c 	add.w	r3, r7, #12
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe fb07 	bl	80063a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	9202      	str	r2, [sp, #8]
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	2302      	movs	r3, #2
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	460a      	mov	r2, r1
 8007da8:	4910      	ldr	r1, [pc, #64]	; (8007dec <xTimerCreateTimerTask+0x84>)
 8007daa:	4811      	ldr	r0, [pc, #68]	; (8007df0 <xTimerCreateTimerTask+0x88>)
 8007dac:	f7ff f8b4 	bl	8006f18 <xTaskCreateStatic>
 8007db0:	4603      	mov	r3, r0
 8007db2:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <xTimerCreateTimerTask+0x8c>)
 8007db4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007db6:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <xTimerCreateTimerTask+0x8c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	613b      	str	r3, [r7, #16]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dde:	697b      	ldr	r3, [r7, #20]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20003aa4 	.word	0x20003aa4
 8007dec:	0800f650 	.word	0x0800f650
 8007df0:	08007f2d 	.word	0x08007f2d
 8007df4:	20003aa8 	.word	0x20003aa8

08007df8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	; 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	623b      	str	r3, [r7, #32]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e26:	4b1a      	ldr	r3, [pc, #104]	; (8007e90 <xTimerGenericCommand+0x98>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d02a      	beq.n	8007e84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b05      	cmp	r3, #5
 8007e3e:	dc18      	bgt.n	8007e72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e40:	f7ff feb2 	bl	8007ba8 <xTaskGetSchedulerState>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d109      	bne.n	8007e5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <xTimerGenericCommand+0x98>)
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	f107 0110 	add.w	r1, r7, #16
 8007e52:	2300      	movs	r3, #0
 8007e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e56:	f7fe fc77 	bl	8006748 <xQueueGenericSend>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8007e5c:	e012      	b.n	8007e84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <xTimerGenericCommand+0x98>)
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	f107 0110 	add.w	r1, r7, #16
 8007e66:	2300      	movs	r3, #0
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f7fe fc6d 	bl	8006748 <xQueueGenericSend>
 8007e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007e70:	e008      	b.n	8007e84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e72:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <xTimerGenericCommand+0x98>)
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f107 0110 	add.w	r1, r7, #16
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	f7fe fd61 	bl	8006944 <xQueueGenericSendFromISR>
 8007e82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3728      	adds	r7, #40	; 0x28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20003aa4 	.word	0x20003aa4

08007e94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9e:	4b22      	ldr	r3, [pc, #136]	; (8007f28 <prvProcessExpiredTimer+0x94>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fb1d 	bl	80064ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d022      	beq.n	8007f06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	18d1      	adds	r1, r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	6978      	ldr	r0, [r7, #20]
 8007ece:	f000 f8d1 	bl	8008074 <prvInsertTimerInActiveList>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01f      	beq.n	8007f18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6978      	ldr	r0, [r7, #20]
 8007ee4:	f7ff ff88 	bl	8007df8 <xTimerGenericCommand>
 8007ee8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d113      	bne.n	8007f18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	60fb      	str	r3, [r7, #12]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f0c:	f023 0301 	bic.w	r3, r3, #1
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	6978      	ldr	r0, [r7, #20]
 8007f1e:	4798      	blx	r3
}
 8007f20:	bf00      	nop
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20003a9c 	.word	0x20003a9c

08007f2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 f857 	bl	8007fec <prvGetNextExpireTime>
 8007f3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4619      	mov	r1, r3
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f803 	bl	8007f50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f4a:	f000 f8d5 	bl	80080f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f4e:	e7f1      	b.n	8007f34 <prvTimerTask+0x8>

08007f50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f5a:	f7ff fa39 	bl	80073d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f5e:	f107 0308 	add.w	r3, r7, #8
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f866 	bl	8008034 <prvSampleTimeNow>
 8007f68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d130      	bne.n	8007fd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <prvProcessTimerOrBlockTask+0x3c>
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d806      	bhi.n	8007f8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f7e:	f7ff fa35 	bl	80073ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff85 	bl	8007e94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f8a:	e024      	b.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <prvProcessTimerOrBlockTask+0x90>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <prvProcessTimerOrBlockTask+0x50>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <prvProcessTimerOrBlockTask+0x52>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <prvProcessTimerOrBlockTask+0x94>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f7fe ff7d 	bl	8006eb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fb6:	f7ff fa19 	bl	80073ec <xTaskResumeAll>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <prvProcessTimerOrBlockTask+0x98>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
}
 8007fd0:	e001      	b.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fd2:	f7ff fa0b 	bl	80073ec <xTaskResumeAll>
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20003aa0 	.word	0x20003aa0
 8007fe4:	20003aa4 	.word	0x20003aa4
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <prvGetNextExpireTime+0x44>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <prvGetNextExpireTime+0x16>
 8007ffe:	2201      	movs	r2, #1
 8008000:	e000      	b.n	8008004 <prvGetNextExpireTime+0x18>
 8008002:	2200      	movs	r2, #0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <prvGetNextExpireTime+0x44>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	e001      	b.n	8008020 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20003a9c 	.word	0x20003a9c

08008034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800803c:	f7ff fa74 	bl	8007528 <xTaskGetTickCount>
 8008040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <prvSampleTimeNow+0x3c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	429a      	cmp	r2, r3
 800804a:	d205      	bcs.n	8008058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800804c:	f000 f936 	bl	80082bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e002      	b.n	800805e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800805e:	4a04      	ldr	r2, [pc, #16]	; (8008070 <prvSampleTimeNow+0x3c>)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008064:	68fb      	ldr	r3, [r7, #12]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20003aac 	.word	0x20003aac

08008074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	429a      	cmp	r2, r3
 8008098:	d812      	bhi.n	80080c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d302      	bcc.n	80080ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e01b      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ae:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <prvInsertTimerInActiveList+0x7c>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fe f9de 	bl	800647a <vListInsert>
 80080be:	e012      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d206      	bcs.n	80080d6 <prvInsertTimerInActiveList+0x62>
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e007      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <prvInsertTimerInActiveList+0x80>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fe f9ca 	bl	800647a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080e6:	697b      	ldr	r3, [r7, #20]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20003aa0 	.word	0x20003aa0
 80080f4:	20003a9c 	.word	0x20003a9c

080080f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08e      	sub	sp, #56	; 0x38
 80080fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080fe:	e0ca      	b.n	8008296 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	da18      	bge.n	8008138 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	3304      	adds	r3, #4
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	61fb      	str	r3, [r7, #28]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800812e:	6850      	ldr	r0, [r2, #4]
 8008130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008132:	6892      	ldr	r2, [r2, #8]
 8008134:	4611      	mov	r1, r2
 8008136:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f2c0 80aa 	blt.w	8008294 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	3304      	adds	r3, #4
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe f9cb 	bl	80064ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008156:	463b      	mov	r3, r7
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff ff6b 	bl	8008034 <prvSampleTimeNow>
 800815e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b09      	cmp	r3, #9
 8008164:	f200 8097 	bhi.w	8008296 <prvProcessReceivedCommands+0x19e>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <prvProcessReceivedCommands+0x78>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008199 	.word	0x08008199
 8008174:	08008199 	.word	0x08008199
 8008178:	08008199 	.word	0x08008199
 800817c:	0800820d 	.word	0x0800820d
 8008180:	08008221 	.word	0x08008221
 8008184:	0800826b 	.word	0x0800826b
 8008188:	08008199 	.word	0x08008199
 800818c:	08008199 	.word	0x08008199
 8008190:	0800820d 	.word	0x0800820d
 8008194:	08008221 	.word	0x08008221
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b8:	f7ff ff5c 	bl	8008074 <prvInsertTimerInActiveList>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d069      	beq.n	8008296 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d05e      	beq.n	8008296 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	441a      	add	r2, r3
 80081e0:	2300      	movs	r3, #0
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ea:	f7ff fe05 	bl	8007df8 <xTimerGenericCommand>
 80081ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d14f      	bne.n	8008296 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	61bb      	str	r3, [r7, #24]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008212:	f023 0301 	bic.w	r3, r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800821e:	e03a      	b.n	8008296 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	617b      	str	r3, [r7, #20]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	18d1      	adds	r1, r2, r3
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008264:	f7ff ff06 	bl	8008074 <prvInsertTimerInActiveList>
					break;
 8008268:	e015      	b.n	8008296 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827a:	f000 fbe1 	bl	8008a40 <vPortFree>
 800827e:	e00a      	b.n	8008296 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008292:	e000      	b.n	8008296 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008294:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008296:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <prvProcessReceivedCommands+0x1c0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	1d39      	adds	r1, r7, #4
 800829c:	2200      	movs	r2, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fbec 	bl	8006a7c <xQueueReceive>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f47f af2a 	bne.w	8008100 <prvProcessReceivedCommands+0x8>
	}
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	3730      	adds	r7, #48	; 0x30
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20003aa4 	.word	0x20003aa4

080082bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082c2:	e048      	b.n	8008356 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082c4:	4b2d      	ldr	r3, [pc, #180]	; (800837c <prvSwitchTimerLists+0xc0>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ce:	4b2b      	ldr	r3, [pc, #172]	; (800837c <prvSwitchTimerLists+0xc0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe f905 	bl	80064ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d02e      	beq.n	8008356 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4413      	add	r3, r2
 8008300:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	429a      	cmp	r2, r3
 8008308:	d90e      	bls.n	8008328 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008316:	4b19      	ldr	r3, [pc, #100]	; (800837c <prvSwitchTimerLists+0xc0>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7fe f8aa 	bl	800647a <vListInsert>
 8008326:	e016      	b.n	8008356 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008328:	2300      	movs	r3, #0
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	2100      	movs	r1, #0
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fd60 	bl	8007df8 <xTimerGenericCommand>
 8008338:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	603b      	str	r3, [r7, #0]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <prvSwitchTimerLists+0xc0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1b1      	bne.n	80082c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008360:	4b06      	ldr	r3, [pc, #24]	; (800837c <prvSwitchTimerLists+0xc0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <prvSwitchTimerLists+0xc4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a04      	ldr	r2, [pc, #16]	; (800837c <prvSwitchTimerLists+0xc0>)
 800836c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800836e:	4a04      	ldr	r2, [pc, #16]	; (8008380 <prvSwitchTimerLists+0xc4>)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	6013      	str	r3, [r2, #0]
}
 8008374:	bf00      	nop
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20003a9c 	.word	0x20003a9c
 8008380:	20003aa0 	.word	0x20003aa0

08008384 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800838a:	f000 f96b 	bl	8008664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800838e:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <prvCheckForValidListAndQueue+0x60>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d120      	bne.n	80083d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008396:	4814      	ldr	r0, [pc, #80]	; (80083e8 <prvCheckForValidListAndQueue+0x64>)
 8008398:	f7fe f81e 	bl	80063d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800839c:	4813      	ldr	r0, [pc, #76]	; (80083ec <prvCheckForValidListAndQueue+0x68>)
 800839e:	f7fe f81b 	bl	80063d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <prvCheckForValidListAndQueue+0x6c>)
 80083a4:	4a10      	ldr	r2, [pc, #64]	; (80083e8 <prvCheckForValidListAndQueue+0x64>)
 80083a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083a8:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <prvCheckForValidListAndQueue+0x70>)
 80083aa:	4a10      	ldr	r2, [pc, #64]	; (80083ec <prvCheckForValidListAndQueue+0x68>)
 80083ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ae:	2300      	movs	r3, #0
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <prvCheckForValidListAndQueue+0x74>)
 80083b4:	4a11      	ldr	r2, [pc, #68]	; (80083fc <prvCheckForValidListAndQueue+0x78>)
 80083b6:	2110      	movs	r1, #16
 80083b8:	200a      	movs	r0, #10
 80083ba:	f7fe f929 	bl	8006610 <xQueueGenericCreateStatic>
 80083be:	4603      	mov	r3, r0
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <prvCheckForValidListAndQueue+0x60>)
 80083c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083c4:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <prvCheckForValidListAndQueue+0x60>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083cc:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <prvCheckForValidListAndQueue+0x60>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	490b      	ldr	r1, [pc, #44]	; (8008400 <prvCheckForValidListAndQueue+0x7c>)
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fd42 	bl	8006e5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083d8:	f000 f974 	bl	80086c4 <vPortExitCritical>
}
 80083dc:	bf00      	nop
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20003aa4 	.word	0x20003aa4
 80083e8:	20003a74 	.word	0x20003a74
 80083ec:	20003a88 	.word	0x20003a88
 80083f0:	20003a9c 	.word	0x20003a9c
 80083f4:	20003aa0 	.word	0x20003aa0
 80083f8:	20003b50 	.word	0x20003b50
 80083fc:	20003ab0 	.word	0x20003ab0
 8008400:	0800f658 	.word	0x0800f658

08008404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3b04      	subs	r3, #4
 8008414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800841c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3b04      	subs	r3, #4
 8008422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f023 0201 	bic.w	r2, r3, #1
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3b04      	subs	r3, #4
 8008432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008434:	4a0c      	ldr	r2, [pc, #48]	; (8008468 <pxPortInitialiseStack+0x64>)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3b14      	subs	r3, #20
 800843e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3b04      	subs	r3, #4
 800844a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f06f 0202 	mvn.w	r2, #2
 8008452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3b20      	subs	r3, #32
 8008458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800845a:	68fb      	ldr	r3, [r7, #12]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	0800846d 	.word	0x0800846d

0800846c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008476:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <prvTaskExitError+0x54>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847e:	d00a      	beq.n	8008496 <prvTaskExitError+0x2a>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60fb      	str	r3, [r7, #12]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <prvTaskExitError+0x28>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	60bb      	str	r3, [r7, #8]
}
 80084a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084aa:	bf00      	nop
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0fc      	beq.n	80084ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	2000000c 	.word	0x2000000c
	...

080084d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <pxCurrentTCBConst2>)
 80084d2:	6819      	ldr	r1, [r3, #0]
 80084d4:	6808      	ldr	r0, [r1, #0]
 80084d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084da:	f380 8809 	msr	PSP, r0
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8811 	msr	BASEPRI, r0
 80084ea:	4770      	bx	lr
 80084ec:	f3af 8000 	nop.w

080084f0 <pxCurrentTCBConst2>:
 80084f0:	20003574 	.word	0x20003574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop

080084f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084f8:	4808      	ldr	r0, [pc, #32]	; (800851c <prvPortStartFirstTask+0x24>)
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	f380 8808 	msr	MSP, r0
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f380 8814 	msr	CONTROL, r0
 800850a:	b662      	cpsie	i
 800850c:	b661      	cpsie	f
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	df00      	svc	0
 8008518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800851a:	bf00      	nop
 800851c:	e000ed08 	.word	0xe000ed08

08008520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008526:	4b46      	ldr	r3, [pc, #280]	; (8008640 <xPortStartScheduler+0x120>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a46      	ldr	r2, [pc, #280]	; (8008644 <xPortStartScheduler+0x124>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d10a      	bne.n	8008546 <xPortStartScheduler+0x26>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	613b      	str	r3, [r7, #16]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008546:	4b3e      	ldr	r3, [pc, #248]	; (8008640 <xPortStartScheduler+0x120>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a3f      	ldr	r2, [pc, #252]	; (8008648 <xPortStartScheduler+0x128>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d10a      	bne.n	8008566 <xPortStartScheduler+0x46>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60fb      	str	r3, [r7, #12]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008566:	4b39      	ldr	r3, [pc, #228]	; (800864c <xPortStartScheduler+0x12c>)
 8008568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	22ff      	movs	r2, #255	; 0xff
 8008576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008588:	b2da      	uxtb	r2, r3
 800858a:	4b31      	ldr	r3, [pc, #196]	; (8008650 <xPortStartScheduler+0x130>)
 800858c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800858e:	4b31      	ldr	r3, [pc, #196]	; (8008654 <xPortStartScheduler+0x134>)
 8008590:	2207      	movs	r2, #7
 8008592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008594:	e009      	b.n	80085aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008596:	4b2f      	ldr	r3, [pc, #188]	; (8008654 <xPortStartScheduler+0x134>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3b01      	subs	r3, #1
 800859c:	4a2d      	ldr	r2, [pc, #180]	; (8008654 <xPortStartScheduler+0x134>)
 800859e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	2b80      	cmp	r3, #128	; 0x80
 80085b4:	d0ef      	beq.n	8008596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085b6:	4b27      	ldr	r3, [pc, #156]	; (8008654 <xPortStartScheduler+0x134>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f1c3 0307 	rsb	r3, r3, #7
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d00a      	beq.n	80085d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	60bb      	str	r3, [r7, #8]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085d8:	4b1e      	ldr	r3, [pc, #120]	; (8008654 <xPortStartScheduler+0x134>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	4a1d      	ldr	r2, [pc, #116]	; (8008654 <xPortStartScheduler+0x134>)
 80085e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085e2:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <xPortStartScheduler+0x134>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085ea:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <xPortStartScheduler+0x134>)
 80085ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085f6:	4b18      	ldr	r3, [pc, #96]	; (8008658 <xPortStartScheduler+0x138>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a17      	ldr	r2, [pc, #92]	; (8008658 <xPortStartScheduler+0x138>)
 80085fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <xPortStartScheduler+0x138>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a14      	ldr	r2, [pc, #80]	; (8008658 <xPortStartScheduler+0x138>)
 8008608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800860c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800860e:	f000 f8dd 	bl	80087cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008612:	4b12      	ldr	r3, [pc, #72]	; (800865c <xPortStartScheduler+0x13c>)
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008618:	f000 f8fc 	bl	8008814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800861c:	4b10      	ldr	r3, [pc, #64]	; (8008660 <xPortStartScheduler+0x140>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a0f      	ldr	r2, [pc, #60]	; (8008660 <xPortStartScheduler+0x140>)
 8008622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008628:	f7ff ff66 	bl	80084f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800862c:	f7ff f846 	bl	80076bc <vTaskSwitchContext>
	prvTaskExitError();
 8008630:	f7ff ff1c 	bl	800846c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	e000ed00 	.word	0xe000ed00
 8008644:	410fc271 	.word	0x410fc271
 8008648:	410fc270 	.word	0x410fc270
 800864c:	e000e400 	.word	0xe000e400
 8008650:	20003ba0 	.word	0x20003ba0
 8008654:	20003ba4 	.word	0x20003ba4
 8008658:	e000ed20 	.word	0xe000ed20
 800865c:	2000000c 	.word	0x2000000c
 8008660:	e000ef34 	.word	0xe000ef34

08008664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	607b      	str	r3, [r7, #4]
}
 800867c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <vPortEnterCritical+0x58>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3301      	adds	r3, #1
 8008684:	4a0d      	ldr	r2, [pc, #52]	; (80086bc <vPortEnterCritical+0x58>)
 8008686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008688:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <vPortEnterCritical+0x58>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d10f      	bne.n	80086b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008690:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <vPortEnterCritical+0x5c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	603b      	str	r3, [r7, #0]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <vPortEnterCritical+0x4a>
	}
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000000c 	.word	0x2000000c
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086ca:	4b12      	ldr	r3, [pc, #72]	; (8008714 <vPortExitCritical+0x50>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <vPortExitCritical+0x24>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	607b      	str	r3, [r7, #4]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <vPortExitCritical+0x50>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	4a09      	ldr	r2, [pc, #36]	; (8008714 <vPortExitCritical+0x50>)
 80086f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086f2:	4b08      	ldr	r3, [pc, #32]	; (8008714 <vPortExitCritical+0x50>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d105      	bne.n	8008706 <vPortExitCritical+0x42>
 80086fa:	2300      	movs	r3, #0
 80086fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	f383 8811 	msr	BASEPRI, r3
}
 8008704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	2000000c 	.word	0x2000000c
	...

08008720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	; (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008744:	f380 8811 	msr	BASEPRI, r0
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f7fe ffb4 	bl	80076bc <vTaskSwitchContext>
 8008754:	f04f 0000 	mov.w	r0, #0
 8008758:	f380 8811 	msr	BASEPRI, r0
 800875c:	bc09      	pop	{r0, r3}
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	6808      	ldr	r0, [r1, #0]
 8008762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008766:	f01e 0f10 	tst.w	lr, #16
 800876a:	bf08      	it	eq
 800876c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008770:	f380 8809 	msr	PSP, r0
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst>:
 8008780:	20003574 	.word	0x20003574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	607b      	str	r3, [r7, #4]
}
 80087a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087a2:	f7fe fed1 	bl	8007548 <xTaskIncrementTick>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087ac:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <xPortSysTickHandler+0x40>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	2300      	movs	r3, #0
 80087b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f383 8811 	msr	BASEPRI, r3
}
 80087be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087d0:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <vPortSetupTimerInterrupt+0x34>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <vPortSetupTimerInterrupt+0x38>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <vPortSetupTimerInterrupt+0x3c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	; (800880c <vPortSetupTimerInterrupt+0x40>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	099b      	lsrs	r3, r3, #6
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <vPortSetupTimerInterrupt+0x44>)
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087ee:	4b04      	ldr	r3, [pc, #16]	; (8008800 <vPortSetupTimerInterrupt+0x34>)
 80087f0:	2207      	movs	r2, #7
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	e000e010 	.word	0xe000e010
 8008804:	e000e018 	.word	0xe000e018
 8008808:	20000000 	.word	0x20000000
 800880c:	10624dd3 	.word	0x10624dd3
 8008810:	e000e014 	.word	0xe000e014

08008814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008824 <vPortEnableVFP+0x10>
 8008818:	6801      	ldr	r1, [r0, #0]
 800881a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800881e:	6001      	str	r1, [r0, #0]
 8008820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008822:	bf00      	nop
 8008824:	e000ed88 	.word	0xe000ed88

08008828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800882e:	f3ef 8305 	mrs	r3, IPSR
 8008832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b0f      	cmp	r3, #15
 8008838:	d914      	bls.n	8008864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800883a:	4a17      	ldr	r2, [pc, #92]	; (8008898 <vPortValidateInterruptPriority+0x70>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008844:	4b15      	ldr	r3, [pc, #84]	; (800889c <vPortValidateInterruptPriority+0x74>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	7afa      	ldrb	r2, [r7, #11]
 800884a:	429a      	cmp	r2, r3
 800884c:	d20a      	bcs.n	8008864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008864:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <vPortValidateInterruptPriority+0x78>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800886c:	4b0d      	ldr	r3, [pc, #52]	; (80088a4 <vPortValidateInterruptPriority+0x7c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	429a      	cmp	r2, r3
 8008872:	d90a      	bls.n	800888a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	603b      	str	r3, [r7, #0]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <vPortValidateInterruptPriority+0x60>
	}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	e000e3f0 	.word	0xe000e3f0
 800889c:	20003ba0 	.word	0x20003ba0
 80088a0:	e000ed0c 	.word	0xe000ed0c
 80088a4:	20003ba4 	.word	0x20003ba4

080088a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088b4:	f7fe fd8c 	bl	80073d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088b8:	4b5b      	ldr	r3, [pc, #364]	; (8008a28 <pvPortMalloc+0x180>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088c0:	f000 f920 	bl	8008b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088c4:	4b59      	ldr	r3, [pc, #356]	; (8008a2c <pvPortMalloc+0x184>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f040 8093 	bne.w	80089f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01d      	beq.n	8008914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088d8:	2208      	movs	r2, #8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4413      	add	r3, r2
 80088de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d014      	beq.n	8008914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f023 0307 	bic.w	r3, r3, #7
 80088f0:	3308      	adds	r3, #8
 80088f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <pvPortMalloc+0x6c>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	617b      	str	r3, [r7, #20]
}
 8008910:	bf00      	nop
 8008912:	e7fe      	b.n	8008912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d06e      	beq.n	80089f8 <pvPortMalloc+0x150>
 800891a:	4b45      	ldr	r3, [pc, #276]	; (8008a30 <pvPortMalloc+0x188>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	429a      	cmp	r2, r3
 8008922:	d869      	bhi.n	80089f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008924:	4b43      	ldr	r3, [pc, #268]	; (8008a34 <pvPortMalloc+0x18c>)
 8008926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008928:	4b42      	ldr	r3, [pc, #264]	; (8008a34 <pvPortMalloc+0x18c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800892e:	e004      	b.n	800893a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d903      	bls.n	800894c <pvPortMalloc+0xa4>
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f1      	bne.n	8008930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800894c:	4b36      	ldr	r3, [pc, #216]	; (8008a28 <pvPortMalloc+0x180>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008952:	429a      	cmp	r2, r3
 8008954:	d050      	beq.n	80089f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2208      	movs	r2, #8
 800895c:	4413      	add	r3, r2
 800895e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	2308      	movs	r3, #8
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	429a      	cmp	r2, r3
 8008976:	d91f      	bls.n	80089b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <pvPortMalloc+0xf8>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	613b      	str	r3, [r7, #16]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	1ad2      	subs	r2, r2, r3
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089b2:	69b8      	ldr	r0, [r7, #24]
 80089b4:	f000 f908 	bl	8008bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089b8:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <pvPortMalloc+0x188>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	4a1b      	ldr	r2, [pc, #108]	; (8008a30 <pvPortMalloc+0x188>)
 80089c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089c6:	4b1a      	ldr	r3, [pc, #104]	; (8008a30 <pvPortMalloc+0x188>)
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <pvPortMalloc+0x190>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d203      	bcs.n	80089da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089d2:	4b17      	ldr	r3, [pc, #92]	; (8008a30 <pvPortMalloc+0x188>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a18      	ldr	r2, [pc, #96]	; (8008a38 <pvPortMalloc+0x190>)
 80089d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <pvPortMalloc+0x184>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	431a      	orrs	r2, r3
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089ee:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <pvPortMalloc+0x194>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3301      	adds	r3, #1
 80089f4:	4a11      	ldr	r2, [pc, #68]	; (8008a3c <pvPortMalloc+0x194>)
 80089f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089f8:	f7fe fcf8 	bl	80073ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <pvPortMalloc+0x174>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60fb      	str	r3, [r7, #12]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <pvPortMalloc+0x172>
	return pvReturn;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3728      	adds	r7, #40	; 0x28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20013998 	.word	0x20013998
 8008a2c:	200139ac 	.word	0x200139ac
 8008a30:	2001399c 	.word	0x2001399c
 8008a34:	20013990 	.word	0x20013990
 8008a38:	200139a0 	.word	0x200139a0
 8008a3c:	200139a4 	.word	0x200139a4

08008a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d04d      	beq.n	8008aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a52:	2308      	movs	r3, #8
 8008a54:	425b      	negs	r3, r3
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4413      	add	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <vPortFree+0xb8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <vPortFree+0x44>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	60fb      	str	r3, [r7, #12]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00a      	beq.n	8008aa2 <vPortFree+0x62>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	60bb      	str	r3, [r7, #8]
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <vPortFree+0xb8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01e      	beq.n	8008aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d11a      	bne.n	8008aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <vPortFree+0xb8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	401a      	ands	r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ac8:	f7fe fc82 	bl	80073d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <vPortFree+0xbc>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	4a09      	ldr	r2, [pc, #36]	; (8008afc <vPortFree+0xbc>)
 8008ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ada:	6938      	ldr	r0, [r7, #16]
 8008adc:	f000 f874 	bl	8008bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <vPortFree+0xc0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	4a06      	ldr	r2, [pc, #24]	; (8008b00 <vPortFree+0xc0>)
 8008ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008aea:	f7fe fc7f 	bl	80073ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008aee:	bf00      	nop
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	200139ac 	.word	0x200139ac
 8008afc:	2001399c 	.word	0x2001399c
 8008b00:	200139a8 	.word	0x200139a8

08008b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b0a:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8008b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b10:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <prvHeapInit+0xac>)
 8008b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00c      	beq.n	8008b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3307      	adds	r3, #7
 8008b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0307 	bic.w	r3, r3, #7
 8008b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	4a1f      	ldr	r2, [pc, #124]	; (8008bb0 <prvHeapInit+0xac>)
 8008b34:	4413      	add	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <prvHeapInit+0xb0>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <prvHeapInit+0xb0>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b50:	2208      	movs	r2, #8
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b66:	4b14      	ldr	r3, [pc, #80]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b6e:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <prvHeapInit+0xb8>)
 8008b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4a09      	ldr	r2, [pc, #36]	; (8008bc0 <prvHeapInit+0xbc>)
 8008b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b9c:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <prvHeapInit+0xc0>)
 8008b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20003ba8 	.word	0x20003ba8
 8008bb4:	20013990 	.word	0x20013990
 8008bb8:	20013998 	.word	0x20013998
 8008bbc:	200139a0 	.word	0x200139a0
 8008bc0:	2001399c 	.word	0x2001399c
 8008bc4:	200139ac 	.word	0x200139ac

08008bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bd0:	4b28      	ldr	r3, [pc, #160]	; (8008c74 <prvInsertBlockIntoFreeList+0xac>)
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e002      	b.n	8008bdc <prvInsertBlockIntoFreeList+0x14>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d8f7      	bhi.n	8008bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d108      	bne.n	8008c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	441a      	add	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d118      	bne.n	8008c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <prvInsertBlockIntoFreeList+0xb0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d00d      	beq.n	8008c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	441a      	add	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e008      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c46:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <prvInsertBlockIntoFreeList+0xb0>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	e003      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d002      	beq.n	8008c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20013990 	.word	0x20013990
 8008c78:	20013998 	.word	0x20013998

08008c7c <arm_max_f32>:
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	1e4f      	subs	r7, r1, #1
 8008c82:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8008c86:	f100 0e04 	add.w	lr, r0, #4
 8008c8a:	edd0 7a00 	vldr	s15, [r0]
 8008c8e:	d058      	beq.n	8008d42 <arm_max_f32+0xc6>
 8008c90:	3014      	adds	r0, #20
 8008c92:	46c4      	mov	ip, r8
 8008c94:	2604      	movs	r6, #4
 8008c96:	2400      	movs	r4, #0
 8008c98:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008c9c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008ca0:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008ca4:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008ca8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	bfc8      	it	gt
 8008cb2:	eef0 7a46 	vmovgt.f32	s15, s12
 8008cb6:	f1a6 0503 	sub.w	r5, r6, #3
 8008cba:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008cbe:	bfc8      	it	gt
 8008cc0:	462c      	movgt	r4, r5
 8008cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc6:	bf48      	it	mi
 8008cc8:	eef0 7a66 	vmovmi.f32	s15, s13
 8008ccc:	f1a6 0502 	sub.w	r5, r6, #2
 8008cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cd4:	bf48      	it	mi
 8008cd6:	462c      	movmi	r4, r5
 8008cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cdc:	bf48      	it	mi
 8008cde:	eef0 7a47 	vmovmi.f32	s15, s14
 8008ce2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ce6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008cea:	bf48      	it	mi
 8008cec:	462c      	movmi	r4, r5
 8008cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf2:	bf48      	it	mi
 8008cf4:	4634      	movmi	r4, r6
 8008cf6:	bf48      	it	mi
 8008cf8:	eef0 7a65 	vmovmi.f32	s15, s11
 8008cfc:	f1bc 0c01 	subs.w	ip, ip, #1
 8008d00:	f106 0604 	add.w	r6, r6, #4
 8008d04:	f100 0010 	add.w	r0, r0, #16
 8008d08:	d1c6      	bne.n	8008c98 <arm_max_f32+0x1c>
 8008d0a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8008d0e:	f017 0003 	ands.w	r0, r7, #3
 8008d12:	d018      	beq.n	8008d46 <arm_max_f32+0xca>
 8008d14:	1a08      	subs	r0, r1, r0
 8008d16:	ecbe 7a01 	vldmia	lr!, {s14}
 8008d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d22:	bfc8      	it	gt
 8008d24:	4604      	movgt	r4, r0
 8008d26:	f100 0001 	add.w	r0, r0, #1
 8008d2a:	bfd8      	it	le
 8008d2c:	eeb0 7a67 	vmovle.f32	s14, s15
 8008d30:	4288      	cmp	r0, r1
 8008d32:	eef0 7a47 	vmov.f32	s15, s14
 8008d36:	d1ee      	bne.n	8008d16 <arm_max_f32+0x9a>
 8008d38:	ed82 7a00 	vstr	s14, [r2]
 8008d3c:	601c      	str	r4, [r3, #0]
 8008d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d42:	4644      	mov	r4, r8
 8008d44:	e7e3      	b.n	8008d0e <arm_max_f32+0x92>
 8008d46:	eeb0 7a67 	vmov.f32	s14, s15
 8008d4a:	e7f5      	b.n	8008d38 <arm_max_f32+0xbc>

08008d4c <arm_rfft_fast_init_f32>:
 8008d4c:	084b      	lsrs	r3, r1, #1
 8008d4e:	2b80      	cmp	r3, #128	; 0x80
 8008d50:	b410      	push	{r4}
 8008d52:	8201      	strh	r1, [r0, #16]
 8008d54:	8003      	strh	r3, [r0, #0]
 8008d56:	d047      	beq.n	8008de8 <arm_rfft_fast_init_f32+0x9c>
 8008d58:	d917      	bls.n	8008d8a <arm_rfft_fast_init_f32+0x3e>
 8008d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d5e:	d03d      	beq.n	8008ddc <arm_rfft_fast_init_f32+0x90>
 8008d60:	d929      	bls.n	8008db6 <arm_rfft_fast_init_f32+0x6a>
 8008d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d66:	d020      	beq.n	8008daa <arm_rfft_fast_init_f32+0x5e>
 8008d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d6c:	d113      	bne.n	8008d96 <arm_rfft_fast_init_f32+0x4a>
 8008d6e:	4921      	ldr	r1, [pc, #132]	; (8008df4 <arm_rfft_fast_init_f32+0xa8>)
 8008d70:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <arm_rfft_fast_init_f32+0xac>)
 8008d72:	4b22      	ldr	r3, [pc, #136]	; (8008dfc <arm_rfft_fast_init_f32+0xb0>)
 8008d74:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008d78:	8184      	strh	r4, [r0, #12]
 8008d7a:	6081      	str	r1, [r0, #8]
 8008d7c:	6042      	str	r2, [r0, #4]
 8008d7e:	6143      	str	r3, [r0, #20]
 8008d80:	2000      	movs	r0, #0
 8008d82:	b240      	sxtb	r0, r0
 8008d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d01c      	beq.n	8008dc8 <arm_rfft_fast_init_f32+0x7c>
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d006      	beq.n	8008da0 <arm_rfft_fast_init_f32+0x54>
 8008d92:	2b10      	cmp	r3, #16
 8008d94:	d01d      	beq.n	8008dd2 <arm_rfft_fast_init_f32+0x86>
 8008d96:	20ff      	movs	r0, #255	; 0xff
 8008d98:	b240      	sxtb	r0, r0
 8008d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	2438      	movs	r4, #56	; 0x38
 8008da2:	4917      	ldr	r1, [pc, #92]	; (8008e00 <arm_rfft_fast_init_f32+0xb4>)
 8008da4:	4a17      	ldr	r2, [pc, #92]	; (8008e04 <arm_rfft_fast_init_f32+0xb8>)
 8008da6:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <arm_rfft_fast_init_f32+0xbc>)
 8008da8:	e7e6      	b.n	8008d78 <arm_rfft_fast_init_f32+0x2c>
 8008daa:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008dae:	4917      	ldr	r1, [pc, #92]	; (8008e0c <arm_rfft_fast_init_f32+0xc0>)
 8008db0:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <arm_rfft_fast_init_f32+0xc4>)
 8008db2:	4b18      	ldr	r3, [pc, #96]	; (8008e14 <arm_rfft_fast_init_f32+0xc8>)
 8008db4:	e7e0      	b.n	8008d78 <arm_rfft_fast_init_f32+0x2c>
 8008db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dba:	d1ec      	bne.n	8008d96 <arm_rfft_fast_init_f32+0x4a>
 8008dbc:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8008dc0:	4915      	ldr	r1, [pc, #84]	; (8008e18 <arm_rfft_fast_init_f32+0xcc>)
 8008dc2:	4a16      	ldr	r2, [pc, #88]	; (8008e1c <arm_rfft_fast_init_f32+0xd0>)
 8008dc4:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <arm_rfft_fast_init_f32+0xd4>)
 8008dc6:	e7d7      	b.n	8008d78 <arm_rfft_fast_init_f32+0x2c>
 8008dc8:	2430      	movs	r4, #48	; 0x30
 8008dca:	4916      	ldr	r1, [pc, #88]	; (8008e24 <arm_rfft_fast_init_f32+0xd8>)
 8008dcc:	4a16      	ldr	r2, [pc, #88]	; (8008e28 <arm_rfft_fast_init_f32+0xdc>)
 8008dce:	4b17      	ldr	r3, [pc, #92]	; (8008e2c <arm_rfft_fast_init_f32+0xe0>)
 8008dd0:	e7d2      	b.n	8008d78 <arm_rfft_fast_init_f32+0x2c>
 8008dd2:	2414      	movs	r4, #20
 8008dd4:	4916      	ldr	r1, [pc, #88]	; (8008e30 <arm_rfft_fast_init_f32+0xe4>)
 8008dd6:	4a17      	ldr	r2, [pc, #92]	; (8008e34 <arm_rfft_fast_init_f32+0xe8>)
 8008dd8:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <arm_rfft_fast_init_f32+0xec>)
 8008dda:	e7cd      	b.n	8008d78 <arm_rfft_fast_init_f32+0x2c>
 8008ddc:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8008de0:	4916      	ldr	r1, [pc, #88]	; (8008e3c <arm_rfft_fast_init_f32+0xf0>)
 8008de2:	4a17      	ldr	r2, [pc, #92]	; (8008e40 <arm_rfft_fast_init_f32+0xf4>)
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <arm_rfft_fast_init_f32+0xf8>)
 8008de6:	e7c7      	b.n	8008d78 <arm_rfft_fast_init_f32+0x2c>
 8008de8:	24d0      	movs	r4, #208	; 0xd0
 8008dea:	4917      	ldr	r1, [pc, #92]	; (8008e48 <arm_rfft_fast_init_f32+0xfc>)
 8008dec:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <arm_rfft_fast_init_f32+0x100>)
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <arm_rfft_fast_init_f32+0x104>)
 8008df0:	e7c2      	b.n	8008d78 <arm_rfft_fast_init_f32+0x2c>
 8008df2:	bf00      	nop
 8008df4:	0801ed10 	.word	0x0801ed10
 8008df8:	0800f708 	.word	0x0800f708
 8008dfc:	08015878 	.word	0x08015878
 8008e00:	08013808 	.word	0x08013808
 8008e04:	08020ad0 	.word	0x08020ad0
 8008e08:	08022fc0 	.word	0x08022fc0
 8008e0c:	0801c1f8 	.word	0x0801c1f8
 8008e10:	0801a0f8 	.word	0x0801a0f8
 8008e14:	08013878 	.word	0x08013878
 8008e18:	08022c50 	.word	0x08022c50
 8008e1c:	08019878 	.word	0x08019878
 8008e20:	08020cd0 	.word	0x08020cd0
 8008e24:	0801d0b0 	.word	0x0801d0b0
 8008e28:	0801c0f8 	.word	0x0801c0f8
 8008e2c:	08013708 	.word	0x08013708
 8008e30:	0801d008 	.word	0x0801d008
 8008e34:	0801a078 	.word	0x0801a078
 8008e38:	0801d030 	.word	0x0801d030
 8008e3c:	080214d0 	.word	0x080214d0
 8008e40:	0801dd10 	.word	0x0801dd10
 8008e44:	08021850 	.word	0x08021850
 8008e48:	080231c0 	.word	0x080231c0
 8008e4c:	0801d910 	.word	0x0801d910
 8008e50:	08022850 	.word	0x08022850

08008e54 <arm_cfft_radix4_init_f32>:
 8008e54:	b410      	push	{r4}
 8008e56:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008e5a:	4c2b      	ldr	r4, [pc, #172]	; (8008f08 <arm_cfft_radix4_init_f32+0xb4>)
 8008e5c:	7082      	strb	r2, [r0, #2]
 8008e5e:	70c3      	strb	r3, [r0, #3]
 8008e60:	8001      	strh	r1, [r0, #0]
 8008e62:	6044      	str	r4, [r0, #4]
 8008e64:	d043      	beq.n	8008eee <arm_cfft_radix4_init_f32+0x9a>
 8008e66:	d80f      	bhi.n	8008e88 <arm_cfft_radix4_init_f32+0x34>
 8008e68:	2910      	cmp	r1, #16
 8008e6a:	d032      	beq.n	8008ed2 <arm_cfft_radix4_init_f32+0x7e>
 8008e6c:	2940      	cmp	r1, #64	; 0x40
 8008e6e:	d11e      	bne.n	8008eae <arm_cfft_radix4_init_f32+0x5a>
 8008e70:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <arm_cfft_radix4_init_f32+0xb8>)
 8008e76:	8181      	strh	r1, [r0, #12]
 8008e78:	81c1      	strh	r1, [r0, #14]
 8008e7a:	6102      	str	r2, [r0, #16]
 8008e7c:	6083      	str	r3, [r0, #8]
 8008e7e:	2000      	movs	r0, #0
 8008e80:	b240      	sxtb	r0, r0
 8008e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e8c:	d014      	beq.n	8008eb8 <arm_cfft_radix4_init_f32+0x64>
 8008e8e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008e92:	d10c      	bne.n	8008eae <arm_cfft_radix4_init_f32+0x5a>
 8008e94:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8008e98:	6103      	str	r3, [r0, #16]
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <arm_cfft_radix4_init_f32+0xbc>)
 8008e9c:	6082      	str	r2, [r0, #8]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	8183      	strh	r3, [r0, #12]
 8008ea2:	81c3      	strh	r3, [r0, #14]
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	b240      	sxtb	r0, r0
 8008ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	20ff      	movs	r0, #255	; 0xff
 8008eb0:	b240      	sxtb	r0, r0
 8008eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8008ebc:	6103      	str	r3, [r0, #16]
 8008ebe:	4a15      	ldr	r2, [pc, #84]	; (8008f14 <arm_cfft_radix4_init_f32+0xc0>)
 8008ec0:	6082      	str	r2, [r0, #8]
 8008ec2:	2304      	movs	r3, #4
 8008ec4:	8183      	strh	r3, [r0, #12]
 8008ec6:	81c3      	strh	r3, [r0, #14]
 8008ec8:	2000      	movs	r0, #0
 8008eca:	b240      	sxtb	r0, r0
 8008ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8008ed6:	6103      	str	r3, [r0, #16]
 8008ed8:	4a0f      	ldr	r2, [pc, #60]	; (8008f18 <arm_cfft_radix4_init_f32+0xc4>)
 8008eda:	6082      	str	r2, [r0, #8]
 8008edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee0:	8183      	strh	r3, [r0, #12]
 8008ee2:	81c3      	strh	r3, [r0, #14]
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	b240      	sxtb	r0, r0
 8008ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8008ef2:	6103      	str	r3, [r0, #16]
 8008ef4:	4a09      	ldr	r2, [pc, #36]	; (8008f1c <arm_cfft_radix4_init_f32+0xc8>)
 8008ef6:	6082      	str	r2, [r0, #8]
 8008ef8:	2310      	movs	r3, #16
 8008efa:	8183      	strh	r3, [r0, #12]
 8008efc:	81c3      	strh	r3, [r0, #14]
 8008efe:	2000      	movs	r0, #0
 8008f00:	b240      	sxtb	r0, r0
 8008f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	08023360 	.word	0x08023360
 8008f0c:	0801d18e 	.word	0x0801d18e
 8008f10:	0801d110 	.word	0x0801d110
 8008f14:	0801d116 	.word	0x0801d116
 8008f18:	0801d30e 	.word	0x0801d30e
 8008f1c:	0801d12e 	.word	0x0801d12e

08008f20 <arm_radix4_butterfly_f32>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	ed2d 8b06 	vpush	{d8-d10}
 8008f28:	468a      	mov	sl, r1
 8008f2a:	0889      	lsrs	r1, r1, #2
 8008f2c:	b08d      	sub	sp, #52	; 0x34
 8008f2e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8008f32:	eb00 040c 	add.w	r4, r0, ip
 8008f36:	460d      	mov	r5, r1
 8008f38:	461f      	mov	r7, r3
 8008f3a:	4691      	mov	r9, r2
 8008f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f3e:	eb04 020c 	add.w	r2, r4, ip
 8008f42:	4606      	mov	r6, r0
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8008f4a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008f4e:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 8008f52:	9009      	str	r0, [sp, #36]	; 0x24
 8008f54:	f10c 0004 	add.w	r0, ip, #4
 8008f58:	9701      	str	r7, [sp, #4]
 8008f5a:	9103      	str	r1, [sp, #12]
 8008f5c:	4430      	add	r0, r6
 8008f5e:	4631      	mov	r1, r6
 8008f60:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8008f64:	1d37      	adds	r7, r6, #4
 8008f66:	9e00      	ldr	r6, [sp, #0]
 8008f68:	46ab      	mov	fp, r5
 8008f6a:	00f5      	lsls	r5, r6, #3
 8008f6c:	9502      	str	r5, [sp, #8]
 8008f6e:	f8cd b010 	str.w	fp, [sp, #16]
 8008f72:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008f76:	f8cd a008 	str.w	sl, [sp, #8]
 8008f7a:	f8dd a004 	ldr.w	sl, [sp, #4]
 8008f7e:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8008f82:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8008f86:	464e      	mov	r6, r9
 8008f88:	464d      	mov	r5, r9
 8008f8a:	edd1 4a01 	vldr	s9, [r1, #4]
 8008f8e:	ed10 4a01 	vldr	s8, [r0, #-4]
 8008f92:	ed17 6a01 	vldr	s12, [r7, #-4]
 8008f96:	edd2 6a00 	vldr	s13, [r2]
 8008f9a:	ed94 7a01 	vldr	s14, [r4, #4]
 8008f9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008fa2:	ed93 5a00 	vldr	s10, [r3]
 8008fa6:	edd2 5a01 	vldr	s11, [r2, #4]
 8008faa:	ed99 3a00 	vldr	s6, [r9]
 8008fae:	edd9 3a01 	vldr	s7, [r9, #4]
 8008fb2:	ee36 2a26 	vadd.f32	s4, s12, s13
 8008fb6:	ee74 2a05 	vadd.f32	s5, s8, s10
 8008fba:	ee34 1aa5 	vadd.f32	s2, s9, s11
 8008fbe:	ee77 1a27 	vadd.f32	s3, s14, s15
 8008fc2:	ee32 0a22 	vadd.f32	s0, s4, s5
 8008fc6:	ee71 0a21 	vadd.f32	s1, s2, s3
 8008fca:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008fce:	ee34 5a45 	vsub.f32	s10, s8, s10
 8008fd2:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8008fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fda:	ed07 0a01 	vstr	s0, [r7, #-4]
 8008fde:	edc1 0a01 	vstr	s1, [r1, #4]
 8008fe2:	ed95 4a00 	vldr	s8, [r5]
 8008fe6:	edd6 6a00 	vldr	s13, [r6]
 8008fea:	edd6 7a01 	vldr	s15, [r6, #4]
 8008fee:	ee72 4a62 	vsub.f32	s9, s4, s5
 8008ff2:	ee71 1a61 	vsub.f32	s3, s2, s3
 8008ff6:	ee75 2ac5 	vsub.f32	s5, s11, s10
 8008ffa:	ed95 1a01 	vldr	s2, [r5, #4]
 8008ffe:	ee36 2a07 	vadd.f32	s4, s12, s14
 8009002:	ee36 7a47 	vsub.f32	s14, s12, s14
 8009006:	ee35 6a25 	vadd.f32	s12, s10, s11
 800900a:	ee62 0a04 	vmul.f32	s1, s4, s8
 800900e:	ee21 5a83 	vmul.f32	s10, s3, s6
 8009012:	ee22 2a01 	vmul.f32	s4, s4, s2
 8009016:	ee22 4a84 	vmul.f32	s8, s5, s8
 800901a:	ee22 1a81 	vmul.f32	s2, s5, s2
 800901e:	ee67 5a26 	vmul.f32	s11, s14, s13
 8009022:	ee64 2a83 	vmul.f32	s5, s9, s6
 8009026:	ee66 6a26 	vmul.f32	s13, s12, s13
 800902a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800902e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009032:	ee61 1aa3 	vmul.f32	s3, s3, s7
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	ee30 3a81 	vadd.f32	s6, s1, s2
 800903e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009042:	ee72 3aa1 	vadd.f32	s7, s5, s3
 8009046:	ee35 5a64 	vsub.f32	s10, s10, s9
 800904a:	ee35 7a86 	vadd.f32	s14, s11, s12
 800904e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009052:	3108      	adds	r1, #8
 8009054:	4551      	cmp	r1, sl
 8009056:	ed40 3a01 	vstr	s7, [r0, #-4]
 800905a:	f107 0708 	add.w	r7, r7, #8
 800905e:	ed84 5a01 	vstr	s10, [r4, #4]
 8009062:	44c1      	add	r9, r8
 8009064:	ed82 3a00 	vstr	s6, [r2]
 8009068:	ed82 4a01 	vstr	s8, [r2, #4]
 800906c:	445d      	add	r5, fp
 800906e:	ed83 7a00 	vstr	s14, [r3]
 8009072:	edc3 7a01 	vstr	s15, [r3, #4]
 8009076:	4476      	add	r6, lr
 8009078:	f100 0008 	add.w	r0, r0, #8
 800907c:	f104 0408 	add.w	r4, r4, #8
 8009080:	f102 0208 	add.w	r2, r2, #8
 8009084:	f103 0308 	add.w	r3, r3, #8
 8009088:	f47f af7f 	bne.w	8008f8a <arm_radix4_butterfly_f32+0x6a>
 800908c:	9b00      	ldr	r3, [sp, #0]
 800908e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009092:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009096:	f8dd a008 	ldr.w	sl, [sp, #8]
 800909a:	920b      	str	r2, [sp, #44]	; 0x2c
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	b29b      	uxth	r3, r3
 80090a0:	2a04      	cmp	r2, #4
 80090a2:	9306      	str	r3, [sp, #24]
 80090a4:	f240 80b9 	bls.w	800921a <arm_radix4_butterfly_f32+0x2fa>
 80090a8:	9207      	str	r2, [sp, #28]
 80090aa:	9806      	ldr	r0, [sp, #24]
 80090ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80090ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80090b0:	ea4f 039b 	mov.w	r3, fp, lsr #2
 80090b4:	4619      	mov	r1, r3
 80090b6:	9308      	str	r3, [sp, #32]
 80090b8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80090bc:	1e4a      	subs	r2, r1, #1
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	9205      	str	r2, [sp, #20]
 80090c2:	9303      	str	r3, [sp, #12]
 80090c4:	010a      	lsls	r2, r1, #4
 80090c6:	0103      	lsls	r3, r0, #4
 80090c8:	9204      	str	r2, [sp, #16]
 80090ca:	9302      	str	r3, [sp, #8]
 80090cc:	00c2      	lsls	r2, r0, #3
 80090ce:	2300      	movs	r3, #0
 80090d0:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 80090d4:	9201      	str	r2, [sp, #4]
 80090d6:	46b8      	mov	r8, r7
 80090d8:	46be      	mov	lr, r7
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	ed97 1a00 	vldr	s2, [r7]
 80090e2:	edd7 1a01 	vldr	s3, [r7, #4]
 80090e6:	ed9e 2a00 	vldr	s4, [lr]
 80090ea:	edde 2a01 	vldr	s5, [lr, #4]
 80090ee:	ed98 3a00 	vldr	s6, [r8]
 80090f2:	edd8 3a01 	vldr	s7, [r8, #4]
 80090f6:	9d00      	ldr	r5, [sp, #0]
 80090f8:	18f1      	adds	r1, r6, r3
 80090fa:	eb09 0203 	add.w	r2, r9, r3
 80090fe:	1d34      	adds	r4, r6, #4
 8009100:	464b      	mov	r3, r9
 8009102:	4630      	mov	r0, r6
 8009104:	ed90 4a01 	vldr	s8, [r0, #4]
 8009108:	ed54 5a01 	vldr	s11, [r4, #-4]
 800910c:	ed91 7a00 	vldr	s14, [r1]
 8009110:	edd2 7a00 	vldr	s15, [r2]
 8009114:	edd3 4a01 	vldr	s9, [r3, #4]
 8009118:	ed92 5a01 	vldr	s10, [r2, #4]
 800911c:	ed93 6a00 	vldr	s12, [r3]
 8009120:	edd1 6a01 	vldr	s13, [r1, #4]
 8009124:	ee35 0a87 	vadd.f32	s0, s11, s14
 8009128:	ee34 8a26 	vadd.f32	s16, s8, s13
 800912c:	ee76 8a27 	vadd.f32	s17, s12, s15
 8009130:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009134:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009138:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800913c:	ee74 7ac5 	vsub.f32	s15, s9, s10
 8009140:	ee74 0a85 	vadd.f32	s1, s9, s10
 8009144:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8009148:	ee78 4a60 	vsub.f32	s9, s16, s1
 800914c:	ee35 5aa7 	vadd.f32	s10, s11, s15
 8009150:	ee30 4a68 	vsub.f32	s8, s0, s17
 8009154:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8009158:	ee76 7a26 	vadd.f32	s15, s12, s13
 800915c:	ee64 aa02 	vmul.f32	s21, s8, s4
 8009160:	ee24 aaa2 	vmul.f32	s20, s9, s5
 8009164:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009168:	ee65 9a01 	vmul.f32	s19, s10, s2
 800916c:	ee25 9aa1 	vmul.f32	s18, s11, s3
 8009170:	ee27 6a03 	vmul.f32	s12, s14, s6
 8009174:	ee67 6aa3 	vmul.f32	s13, s15, s7
 8009178:	ee64 4a82 	vmul.f32	s9, s9, s4
 800917c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009180:	ee65 5a81 	vmul.f32	s11, s11, s2
 8009184:	ee27 7a23 	vmul.f32	s14, s14, s7
 8009188:	ee67 7a83 	vmul.f32	s15, s15, s6
 800918c:	ee78 0a20 	vadd.f32	s1, s16, s1
 8009190:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8009194:	ee30 0a28 	vadd.f32	s0, s0, s17
 8009198:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 800919c:	ee39 4a89 	vadd.f32	s8, s19, s18
 80091a0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80091a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80091a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091ac:	445d      	add	r5, fp
 80091ae:	45aa      	cmp	sl, r5
 80091b0:	ed04 0a01 	vstr	s0, [r4, #-4]
 80091b4:	edc0 0a01 	vstr	s1, [r0, #4]
 80091b8:	4464      	add	r4, ip
 80091ba:	ed83 8a00 	vstr	s16, [r3]
 80091be:	edc3 4a01 	vstr	s9, [r3, #4]
 80091c2:	4460      	add	r0, ip
 80091c4:	ed81 4a00 	vstr	s8, [r1]
 80091c8:	edc1 5a01 	vstr	s11, [r1, #4]
 80091cc:	4463      	add	r3, ip
 80091ce:	edc2 6a00 	vstr	s13, [r2]
 80091d2:	edc2 7a01 	vstr	s15, [r2, #4]
 80091d6:	4461      	add	r1, ip
 80091d8:	4462      	add	r2, ip
 80091da:	d893      	bhi.n	8009104 <arm_radix4_butterfly_f32+0x1e4>
 80091dc:	9a01      	ldr	r2, [sp, #4]
 80091de:	9b00      	ldr	r3, [sp, #0]
 80091e0:	4417      	add	r7, r2
 80091e2:	9a02      	ldr	r2, [sp, #8]
 80091e4:	4496      	add	lr, r2
 80091e6:	9a03      	ldr	r2, [sp, #12]
 80091e8:	4490      	add	r8, r2
 80091ea:	9a05      	ldr	r2, [sp, #20]
 80091ec:	3301      	adds	r3, #1
 80091ee:	4293      	cmp	r3, r2
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	f106 0608 	add.w	r6, r6, #8
 80091f6:	f109 0908 	add.w	r9, r9, #8
 80091fa:	f67f af6f 	bls.w	80090dc <arm_radix4_butterfly_f32+0x1bc>
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	9a07      	ldr	r2, [sp, #28]
 8009202:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009206:	0892      	lsrs	r2, r2, #2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	b29b      	uxth	r3, r3
 800920c:	2a04      	cmp	r2, #4
 800920e:	9207      	str	r2, [sp, #28]
 8009210:	9306      	str	r3, [sp, #24]
 8009212:	d902      	bls.n	800921a <arm_radix4_butterfly_f32+0x2fa>
 8009214:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8009218:	e747      	b.n	80090aa <arm_radix4_butterfly_f32+0x18a>
 800921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800921e:	3320      	adds	r3, #32
 8009220:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009224:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 8009228:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800922c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009230:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 8009234:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 8009238:	ed13 7a02 	vldr	s14, [r3, #-8]
 800923c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8009240:	ee34 3a24 	vadd.f32	s6, s8, s9
 8009244:	ee76 3a07 	vadd.f32	s7, s12, s14
 8009248:	ee34 4a64 	vsub.f32	s8, s8, s9
 800924c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8009250:	ee75 4a65 	vsub.f32	s9, s10, s11
 8009254:	ee35 6a25 	vadd.f32	s12, s10, s11
 8009258:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800925c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009260:	ee73 2a23 	vadd.f32	s5, s6, s7
 8009264:	ee35 5a86 	vadd.f32	s10, s11, s12
 8009268:	ee73 3a63 	vsub.f32	s7, s6, s7
 800926c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009270:	ee34 3a24 	vadd.f32	s6, s8, s9
 8009274:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009278:	ee74 4a64 	vsub.f32	s9, s8, s9
 800927c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009280:	3a01      	subs	r2, #1
 8009282:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 8009286:	ed43 3a06 	vstr	s7, [r3, #-24]	; 0xffffffe8
 800928a:	ed03 3a04 	vstr	s6, [r3, #-16]
 800928e:	ed43 4a02 	vstr	s9, [r3, #-8]
 8009292:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
 8009296:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 800929a:	ed43 6a03 	vstr	s13, [r3, #-12]
 800929e:	ed43 7a01 	vstr	s15, [r3, #-4]
 80092a2:	f103 0320 	add.w	r3, r3, #32
 80092a6:	d1bb      	bne.n	8009220 <arm_radix4_butterfly_f32+0x300>
 80092a8:	b00d      	add	sp, #52	; 0x34
 80092aa:	ecbd 8b06 	vpop	{d8-d10}
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	bf00      	nop

080092b4 <arm_radix4_butterfly_inverse_f32>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	ed2d 8b08 	vpush	{d8-d11}
 80092bc:	b08d      	sub	sp, #52	; 0x34
 80092be:	468a      	mov	sl, r1
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	0889      	lsrs	r1, r1, #2
 80092c4:	9c00      	ldr	r4, [sp, #0]
 80092c6:	9103      	str	r1, [sp, #12]
 80092c8:	460d      	mov	r5, r1
 80092ca:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80092ce:	461f      	mov	r7, r3
 80092d0:	46ab      	mov	fp, r5
 80092d2:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 80092d6:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 80092da:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80092de:	0125      	lsls	r5, r4, #4
 80092e0:	00e4      	lsls	r4, r4, #3
 80092e2:	9402      	str	r4, [sp, #8]
 80092e4:	9501      	str	r5, [sp, #4]
 80092e6:	4606      	mov	r6, r0
 80092e8:	4691      	mov	r9, r2
 80092ea:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 80092ee:	9009      	str	r0, [sp, #36]	; 0x24
 80092f0:	f8cd b010 	str.w	fp, [sp, #16]
 80092f4:	f10c 0004 	add.w	r0, ip, #4
 80092f8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80092fc:	f8cd a008 	str.w	sl, [sp, #8]
 8009300:	f8dd a004 	ldr.w	sl, [sp, #4]
 8009304:	920a      	str	r2, [sp, #40]	; 0x28
 8009306:	4430      	add	r0, r6
 8009308:	4632      	mov	r2, r6
 800930a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800930e:	4647      	mov	r7, r8
 8009310:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8009314:	3604      	adds	r6, #4
 8009316:	464d      	mov	r5, r9
 8009318:	464c      	mov	r4, r9
 800931a:	edd2 4a01 	vldr	s9, [r2, #4]
 800931e:	ed10 4a01 	vldr	s8, [r0, #-4]
 8009322:	ed16 6a01 	vldr	s12, [r6, #-4]
 8009326:	edd1 6a00 	vldr	s13, [r1]
 800932a:	ed97 7a01 	vldr	s14, [r7, #4]
 800932e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009332:	edd3 5a00 	vldr	s11, [r3]
 8009336:	ed91 5a01 	vldr	s10, [r1, #4]
 800933a:	ed99 3a00 	vldr	s6, [r9]
 800933e:	edd9 3a01 	vldr	s7, [r9, #4]
 8009342:	ee36 2a26 	vadd.f32	s4, s12, s13
 8009346:	ee74 2a25 	vadd.f32	s5, s8, s11
 800934a:	ee34 1a85 	vadd.f32	s2, s9, s10
 800934e:	ee77 1a27 	vadd.f32	s3, s14, s15
 8009352:	ee32 8a22 	vadd.f32	s16, s4, s5
 8009356:	ee71 0a21 	vadd.f32	s1, s2, s3
 800935a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800935e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8009362:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8009366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800936a:	ed06 8a01 	vstr	s16, [r6, #-4]
 800936e:	edc2 0a01 	vstr	s1, [r2, #4]
 8009372:	ed94 4a00 	vldr	s8, [r4]
 8009376:	edd5 6a00 	vldr	s13, [r5]
 800937a:	edd5 7a01 	vldr	s15, [r5, #4]
 800937e:	ee72 4a62 	vsub.f32	s9, s4, s5
 8009382:	ee71 1a61 	vsub.f32	s3, s2, s3
 8009386:	ee75 2a25 	vadd.f32	s5, s10, s11
 800938a:	ed94 1a01 	vldr	s2, [r4, #4]
 800938e:	ee36 2a47 	vsub.f32	s4, s12, s14
 8009392:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009396:	ee35 6a65 	vsub.f32	s12, s10, s11
 800939a:	ee62 0a04 	vmul.f32	s1, s4, s8
 800939e:	ee21 5a83 	vmul.f32	s10, s3, s6
 80093a2:	ee22 2a01 	vmul.f32	s4, s4, s2
 80093a6:	ee22 4a84 	vmul.f32	s8, s5, s8
 80093aa:	ee22 1a81 	vmul.f32	s2, s5, s2
 80093ae:	ee67 5a26 	vmul.f32	s11, s14, s13
 80093b2:	ee64 2a83 	vmul.f32	s5, s9, s6
 80093b6:	ee66 6a26 	vmul.f32	s13, s12, s13
 80093ba:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80093be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80093c2:	ee61 1aa3 	vmul.f32	s3, s3, s7
 80093c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ca:	ee30 3ac1 	vsub.f32	s6, s1, s2
 80093ce:	ee34 4a02 	vadd.f32	s8, s8, s4
 80093d2:	ee72 3ae1 	vsub.f32	s7, s5, s3
 80093d6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80093da:	ee35 7ac6 	vsub.f32	s14, s11, s12
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	3208      	adds	r2, #8
 80093e4:	4542      	cmp	r2, r8
 80093e6:	ed40 3a01 	vstr	s7, [r0, #-4]
 80093ea:	f106 0608 	add.w	r6, r6, #8
 80093ee:	ed87 5a01 	vstr	s10, [r7, #4]
 80093f2:	44d1      	add	r9, sl
 80093f4:	ed81 3a00 	vstr	s6, [r1]
 80093f8:	ed81 4a01 	vstr	s8, [r1, #4]
 80093fc:	445c      	add	r4, fp
 80093fe:	ed83 7a00 	vstr	s14, [r3]
 8009402:	edc3 7a01 	vstr	s15, [r3, #4]
 8009406:	4475      	add	r5, lr
 8009408:	f100 0008 	add.w	r0, r0, #8
 800940c:	f107 0708 	add.w	r7, r7, #8
 8009410:	f101 0108 	add.w	r1, r1, #8
 8009414:	f103 0308 	add.w	r3, r3, #8
 8009418:	f47f af7f 	bne.w	800931a <arm_radix4_butterfly_inverse_f32+0x66>
 800941c:	9b00      	ldr	r3, [sp, #0]
 800941e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009422:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009426:	f8dd a008 	ldr.w	sl, [sp, #8]
 800942a:	920b      	str	r2, [sp, #44]	; 0x2c
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	b29b      	uxth	r3, r3
 8009430:	2a04      	cmp	r2, #4
 8009432:	9306      	str	r3, [sp, #24]
 8009434:	f240 80b9 	bls.w	80095aa <arm_radix4_butterfly_inverse_f32+0x2f6>
 8009438:	9207      	str	r2, [sp, #28]
 800943a:	9806      	ldr	r0, [sp, #24]
 800943c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800943e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009440:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8009444:	4619      	mov	r1, r3
 8009446:	9308      	str	r3, [sp, #32]
 8009448:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800944c:	1e4a      	subs	r2, r1, #1
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	9205      	str	r2, [sp, #20]
 8009452:	9303      	str	r3, [sp, #12]
 8009454:	010a      	lsls	r2, r1, #4
 8009456:	0103      	lsls	r3, r0, #4
 8009458:	9204      	str	r2, [sp, #16]
 800945a:	9302      	str	r3, [sp, #8]
 800945c:	00c2      	lsls	r2, r0, #3
 800945e:	2300      	movs	r3, #0
 8009460:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8009464:	9201      	str	r2, [sp, #4]
 8009466:	46b8      	mov	r8, r7
 8009468:	46be      	mov	lr, r7
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	9b04      	ldr	r3, [sp, #16]
 800946e:	ed97 1a00 	vldr	s2, [r7]
 8009472:	edd7 1a01 	vldr	s3, [r7, #4]
 8009476:	ed9e 2a00 	vldr	s4, [lr]
 800947a:	edde 2a01 	vldr	s5, [lr, #4]
 800947e:	ed98 3a00 	vldr	s6, [r8]
 8009482:	edd8 3a01 	vldr	s7, [r8, #4]
 8009486:	9d00      	ldr	r5, [sp, #0]
 8009488:	18f1      	adds	r1, r6, r3
 800948a:	eb09 0203 	add.w	r2, r9, r3
 800948e:	1d34      	adds	r4, r6, #4
 8009490:	464b      	mov	r3, r9
 8009492:	4630      	mov	r0, r6
 8009494:	ed90 4a01 	vldr	s8, [r0, #4]
 8009498:	ed14 6a01 	vldr	s12, [r4, #-4]
 800949c:	ed91 7a00 	vldr	s14, [r1]
 80094a0:	edd2 7a00 	vldr	s15, [r2]
 80094a4:	ed93 5a01 	vldr	s10, [r3, #4]
 80094a8:	edd1 4a01 	vldr	s9, [r1, #4]
 80094ac:	edd2 5a01 	vldr	s11, [r2, #4]
 80094b0:	edd3 6a00 	vldr	s13, [r3]
 80094b4:	ee76 0a07 	vadd.f32	s1, s12, s14
 80094b8:	ee36 8aa7 	vadd.f32	s16, s13, s15
 80094bc:	ee36 6a47 	vsub.f32	s12, s12, s14
 80094c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80094c4:	ee74 8a24 	vadd.f32	s17, s8, s9
 80094c8:	ee74 7a64 	vsub.f32	s15, s8, s9
 80094cc:	ee35 7a65 	vsub.f32	s14, s10, s11
 80094d0:	ee35 4a25 	vadd.f32	s8, s10, s11
 80094d4:	ee70 4ac8 	vsub.f32	s9, s1, s16
 80094d8:	ee76 5a47 	vsub.f32	s11, s12, s14
 80094dc:	ee38 5ac4 	vsub.f32	s10, s17, s8
 80094e0:	ee36 7a07 	vadd.f32	s14, s12, s14
 80094e4:	ee37 6aa6 	vadd.f32	s12, s15, s13
 80094e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80094ec:	ee24 ba82 	vmul.f32	s22, s9, s4
 80094f0:	ee65 aa22 	vmul.f32	s21, s10, s5
 80094f4:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80094f8:	ee25 aa81 	vmul.f32	s20, s11, s2
 80094fc:	ee66 9a21 	vmul.f32	s19, s12, s3
 8009500:	ee27 9a03 	vmul.f32	s18, s14, s6
 8009504:	ee67 6aa3 	vmul.f32	s13, s15, s7
 8009508:	ee25 5a02 	vmul.f32	s10, s10, s4
 800950c:	ee65 5aa1 	vmul.f32	s11, s11, s3
 8009510:	ee26 6a01 	vmul.f32	s12, s12, s2
 8009514:	ee27 7a23 	vmul.f32	s14, s14, s7
 8009518:	ee67 7a83 	vmul.f32	s15, s15, s6
 800951c:	ee70 0a88 	vadd.f32	s1, s1, s16
 8009520:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009524:	ee38 4a84 	vadd.f32	s8, s17, s8
 8009528:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 800952c:	ee7a 4a69 	vsub.f32	s9, s20, s19
 8009530:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009534:	ee79 6a66 	vsub.f32	s13, s18, s13
 8009538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800953c:	445d      	add	r5, fp
 800953e:	45aa      	cmp	sl, r5
 8009540:	ed44 0a01 	vstr	s1, [r4, #-4]
 8009544:	ed80 4a01 	vstr	s8, [r0, #4]
 8009548:	4464      	add	r4, ip
 800954a:	ed83 8a00 	vstr	s16, [r3]
 800954e:	ed83 5a01 	vstr	s10, [r3, #4]
 8009552:	4460      	add	r0, ip
 8009554:	edc1 4a00 	vstr	s9, [r1]
 8009558:	ed81 6a01 	vstr	s12, [r1, #4]
 800955c:	4463      	add	r3, ip
 800955e:	edc2 6a00 	vstr	s13, [r2]
 8009562:	edc2 7a01 	vstr	s15, [r2, #4]
 8009566:	4461      	add	r1, ip
 8009568:	4462      	add	r2, ip
 800956a:	d893      	bhi.n	8009494 <arm_radix4_butterfly_inverse_f32+0x1e0>
 800956c:	9a01      	ldr	r2, [sp, #4]
 800956e:	9b00      	ldr	r3, [sp, #0]
 8009570:	4417      	add	r7, r2
 8009572:	9a02      	ldr	r2, [sp, #8]
 8009574:	4496      	add	lr, r2
 8009576:	9a03      	ldr	r2, [sp, #12]
 8009578:	4490      	add	r8, r2
 800957a:	9a05      	ldr	r2, [sp, #20]
 800957c:	3301      	adds	r3, #1
 800957e:	4293      	cmp	r3, r2
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	f106 0608 	add.w	r6, r6, #8
 8009586:	f109 0908 	add.w	r9, r9, #8
 800958a:	f67f af6f 	bls.w	800946c <arm_radix4_butterfly_inverse_f32+0x1b8>
 800958e:	9b06      	ldr	r3, [sp, #24]
 8009590:	9a07      	ldr	r2, [sp, #28]
 8009592:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009596:	0892      	lsrs	r2, r2, #2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	b29b      	uxth	r3, r3
 800959c:	2a04      	cmp	r2, #4
 800959e:	9207      	str	r2, [sp, #28]
 80095a0:	9306      	str	r3, [sp, #24]
 80095a2:	d902      	bls.n	80095aa <arm_radix4_butterfly_inverse_f32+0x2f6>
 80095a4:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 80095a8:	e747      	b.n	800943a <arm_radix4_butterfly_inverse_f32+0x186>
 80095aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095ae:	3320      	adds	r3, #32
 80095b0:	ed53 4a04 	vldr	s9, [r3, #-16]
 80095b4:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 80095b8:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 80095bc:	ed53 5a01 	vldr	s11, [r3, #-4]
 80095c0:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 80095c4:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 80095c8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80095cc:	ed13 7a03 	vldr	s14, [r3, #-12]
 80095d0:	ee34 3a24 	vadd.f32	s6, s8, s9
 80095d4:	ee76 3a27 	vadd.f32	s7, s12, s15
 80095d8:	ee34 4a64 	vsub.f32	s8, s8, s9
 80095dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80095e0:	ee75 4a65 	vsub.f32	s9, s10, s11
 80095e4:	ee35 6a25 	vadd.f32	s12, s10, s11
 80095e8:	ee76 5a87 	vadd.f32	s11, s13, s14
 80095ec:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80095f0:	ee73 2a23 	vadd.f32	s5, s6, s7
 80095f4:	ee74 6a24 	vadd.f32	s13, s8, s9
 80095f8:	ee37 5a27 	vadd.f32	s10, s14, s15
 80095fc:	ee73 3a63 	vsub.f32	s7, s6, s7
 8009600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009604:	ee34 3a64 	vsub.f32	s6, s8, s9
 8009608:	ee75 4a86 	vadd.f32	s9, s11, s12
 800960c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009610:	ee62 2a80 	vmul.f32	s5, s5, s0
 8009614:	ee26 7a00 	vmul.f32	s14, s12, s0
 8009618:	ee63 5a80 	vmul.f32	s11, s7, s0
 800961c:	ee23 4a00 	vmul.f32	s8, s6, s0
 8009620:	ee66 6a80 	vmul.f32	s13, s13, s0
 8009624:	ee64 4a80 	vmul.f32	s9, s9, s0
 8009628:	ee25 6a00 	vmul.f32	s12, s10, s0
 800962c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009630:	3a01      	subs	r2, #1
 8009632:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 8009636:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
 800963a:	ed03 4a04 	vstr	s8, [r3, #-16]
 800963e:	ed43 6a02 	vstr	s13, [r3, #-8]
 8009642:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8009646:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800964a:	ed03 6a03 	vstr	s12, [r3, #-12]
 800964e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8009652:	f103 0320 	add.w	r3, r3, #32
 8009656:	d1ab      	bne.n	80095b0 <arm_radix4_butterfly_inverse_f32+0x2fc>
 8009658:	b00d      	add	sp, #52	; 0x34
 800965a:	ecbd 8b08 	vpop	{d8-d11}
 800965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009662:	bf00      	nop

08009664 <arm_cfft_radix4_f32>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	7883      	ldrb	r3, [r0, #2]
 8009668:	4604      	mov	r4, r0
 800966a:	2b01      	cmp	r3, #1
 800966c:	460d      	mov	r5, r1
 800966e:	4608      	mov	r0, r1
 8009670:	6862      	ldr	r2, [r4, #4]
 8009672:	8821      	ldrh	r1, [r4, #0]
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	d005      	beq.n	8009684 <arm_cfft_radix4_f32+0x20>
 8009678:	f7ff fc52 	bl	8008f20 <arm_radix4_butterfly_f32>
 800967c:	78e3      	ldrb	r3, [r4, #3]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d007      	beq.n	8009692 <arm_cfft_radix4_f32+0x2e>
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	ed94 0a04 	vldr	s0, [r4, #16]
 8009688:	f7ff fe14 	bl	80092b4 <arm_radix4_butterfly_inverse_f32>
 800968c:	78e3      	ldrb	r3, [r4, #3]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d1f7      	bne.n	8009682 <arm_cfft_radix4_f32+0x1e>
 8009692:	4628      	mov	r0, r5
 8009694:	8821      	ldrh	r1, [r4, #0]
 8009696:	89e2      	ldrh	r2, [r4, #14]
 8009698:	68a3      	ldr	r3, [r4, #8]
 800969a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800969e:	f000 b8e9 	b.w	8009874 <arm_bitreversal_f32>
 80096a2:	bf00      	nop

080096a4 <arm_cmplx_mag_f32>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80096ac:	b084      	sub	sp, #16
 80096ae:	d07f      	beq.n	80097b0 <arm_cmplx_mag_f32+0x10c>
 80096b0:	2700      	movs	r7, #0
 80096b2:	f100 0420 	add.w	r4, r0, #32
 80096b6:	f101 0510 	add.w	r5, r1, #16
 80096ba:	4646      	mov	r6, r8
 80096bc:	e05a      	b.n	8009774 <arm_cmplx_mag_f32+0xd0>
 80096be:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80096c2:	eeb4 0a40 	vcmp.f32	s0, s0
 80096c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ca:	f040 80a4 	bne.w	8009816 <arm_cmplx_mag_f32+0x172>
 80096ce:	ed05 0a04 	vstr	s0, [r5, #-16]
 80096d2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80096d6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80096da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80096de:	ee20 0a00 	vmul.f32	s0, s0, s0
 80096e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80096e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ee:	f2c0 808f 	blt.w	8009810 <arm_cmplx_mag_f32+0x16c>
 80096f2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80096f6:	eeb4 0a40 	vcmp.f32	s0, s0
 80096fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fe:	f040 80af 	bne.w	8009860 <arm_cmplx_mag_f32+0x1bc>
 8009702:	ed05 0a03 	vstr	s0, [r5, #-12]
 8009706:	ed54 7a04 	vldr	s15, [r4, #-16]
 800970a:	ed14 0a03 	vldr	s0, [r4, #-12]
 800970e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009712:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009716:	ee77 7a80 	vadd.f32	s15, s15, s0
 800971a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800971e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009722:	db72      	blt.n	800980a <arm_cmplx_mag_f32+0x166>
 8009724:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8009728:	eeb4 0a40 	vcmp.f32	s0, s0
 800972c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009730:	f040 808c 	bne.w	800984c <arm_cmplx_mag_f32+0x1a8>
 8009734:	ed05 0a02 	vstr	s0, [r5, #-8]
 8009738:	ed54 7a02 	vldr	s15, [r4, #-8]
 800973c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8009740:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009744:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009748:	ee77 7a80 	vadd.f32	s15, s15, s0
 800974c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009754:	db20      	blt.n	8009798 <arm_cmplx_mag_f32+0xf4>
 8009756:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800975a:	eeb4 0a40 	vcmp.f32	s0, s0
 800975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009762:	d169      	bne.n	8009838 <arm_cmplx_mag_f32+0x194>
 8009764:	3e01      	subs	r6, #1
 8009766:	ed05 0a01 	vstr	s0, [r5, #-4]
 800976a:	f104 0420 	add.w	r4, r4, #32
 800976e:	f105 0510 	add.w	r5, r5, #16
 8009772:	d019      	beq.n	80097a8 <arm_cmplx_mag_f32+0x104>
 8009774:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8009778:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800977c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009780:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009784:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009788:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800978c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009790:	da95      	bge.n	80096be <arm_cmplx_mag_f32+0x1a>
 8009792:	f845 7c10 	str.w	r7, [r5, #-16]
 8009796:	e79c      	b.n	80096d2 <arm_cmplx_mag_f32+0x2e>
 8009798:	3e01      	subs	r6, #1
 800979a:	f845 7c04 	str.w	r7, [r5, #-4]
 800979e:	f104 0420 	add.w	r4, r4, #32
 80097a2:	f105 0510 	add.w	r5, r5, #16
 80097a6:	d1e5      	bne.n	8009774 <arm_cmplx_mag_f32+0xd0>
 80097a8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80097ac:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80097b0:	f012 0503 	ands.w	r5, r2, #3
 80097b4:	d026      	beq.n	8009804 <arm_cmplx_mag_f32+0x160>
 80097b6:	2600      	movs	r6, #0
 80097b8:	f100 0408 	add.w	r4, r0, #8
 80097bc:	e00c      	b.n	80097d8 <arm_cmplx_mag_f32+0x134>
 80097be:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80097c2:	eeb4 0a40 	vcmp.f32	s0, s0
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	d12e      	bne.n	800982a <arm_cmplx_mag_f32+0x186>
 80097cc:	3d01      	subs	r5, #1
 80097ce:	ed01 0a01 	vstr	s0, [r1, #-4]
 80097d2:	f104 0408 	add.w	r4, r4, #8
 80097d6:	d015      	beq.n	8009804 <arm_cmplx_mag_f32+0x160>
 80097d8:	ed54 7a02 	vldr	s15, [r4, #-8]
 80097dc:	ed14 0a01 	vldr	s0, [r4, #-4]
 80097e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80097e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80097e8:	3104      	adds	r1, #4
 80097ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80097ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f6:	dae2      	bge.n	80097be <arm_cmplx_mag_f32+0x11a>
 80097f8:	3d01      	subs	r5, #1
 80097fa:	f841 6c04 	str.w	r6, [r1, #-4]
 80097fe:	f104 0408 	add.w	r4, r4, #8
 8009802:	d1e9      	bne.n	80097d8 <arm_cmplx_mag_f32+0x134>
 8009804:	b004      	add	sp, #16
 8009806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980a:	f845 7c08 	str.w	r7, [r5, #-8]
 800980e:	e793      	b.n	8009738 <arm_cmplx_mag_f32+0x94>
 8009810:	f845 7c0c 	str.w	r7, [r5, #-12]
 8009814:	e777      	b.n	8009706 <arm_cmplx_mag_f32+0x62>
 8009816:	eeb0 0a67 	vmov.f32	s0, s15
 800981a:	9203      	str	r2, [sp, #12]
 800981c:	9102      	str	r1, [sp, #8]
 800981e:	9001      	str	r0, [sp, #4]
 8009820:	f004 fe58 	bl	800e4d4 <sqrtf>
 8009824:	a801      	add	r0, sp, #4
 8009826:	c807      	ldmia	r0, {r0, r1, r2}
 8009828:	e751      	b.n	80096ce <arm_cmplx_mag_f32+0x2a>
 800982a:	eeb0 0a67 	vmov.f32	s0, s15
 800982e:	9101      	str	r1, [sp, #4]
 8009830:	f004 fe50 	bl	800e4d4 <sqrtf>
 8009834:	9901      	ldr	r1, [sp, #4]
 8009836:	e7c9      	b.n	80097cc <arm_cmplx_mag_f32+0x128>
 8009838:	eeb0 0a67 	vmov.f32	s0, s15
 800983c:	9203      	str	r2, [sp, #12]
 800983e:	9102      	str	r1, [sp, #8]
 8009840:	9001      	str	r0, [sp, #4]
 8009842:	f004 fe47 	bl	800e4d4 <sqrtf>
 8009846:	a801      	add	r0, sp, #4
 8009848:	c807      	ldmia	r0, {r0, r1, r2}
 800984a:	e78b      	b.n	8009764 <arm_cmplx_mag_f32+0xc0>
 800984c:	eeb0 0a67 	vmov.f32	s0, s15
 8009850:	9203      	str	r2, [sp, #12]
 8009852:	9102      	str	r1, [sp, #8]
 8009854:	9001      	str	r0, [sp, #4]
 8009856:	f004 fe3d 	bl	800e4d4 <sqrtf>
 800985a:	a801      	add	r0, sp, #4
 800985c:	c807      	ldmia	r0, {r0, r1, r2}
 800985e:	e769      	b.n	8009734 <arm_cmplx_mag_f32+0x90>
 8009860:	eeb0 0a67 	vmov.f32	s0, s15
 8009864:	9203      	str	r2, [sp, #12]
 8009866:	9102      	str	r1, [sp, #8]
 8009868:	9001      	str	r0, [sp, #4]
 800986a:	f004 fe33 	bl	800e4d4 <sqrtf>
 800986e:	a801      	add	r0, sp, #4
 8009870:	c807      	ldmia	r0, {r0, r1, r2}
 8009872:	e746      	b.n	8009702 <arm_cmplx_mag_f32+0x5e>

08009874 <arm_bitreversal_f32>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	b085      	sub	sp, #20
 800987a:	0849      	lsrs	r1, r1, #1
 800987c:	0052      	lsls	r2, r2, #1
 800987e:	2400      	movs	r4, #0
 8009880:	9203      	str	r2, [sp, #12]
 8009882:	1e8a      	subs	r2, r1, #2
 8009884:	9101      	str	r1, [sp, #4]
 8009886:	f101 0c01 	add.w	ip, r1, #1
 800988a:	9202      	str	r2, [sp, #8]
 800988c:	4621      	mov	r1, r4
 800988e:	4622      	mov	r2, r4
 8009890:	9d01      	ldr	r5, [sp, #4]
 8009892:	3101      	adds	r1, #1
 8009894:	442a      	add	r2, r5
 8009896:	00c9      	lsls	r1, r1, #3
 8009898:	00d2      	lsls	r2, r2, #3
 800989a:	1846      	adds	r6, r0, r1
 800989c:	1885      	adds	r5, r0, r2
 800989e:	3104      	adds	r1, #4
 80098a0:	3204      	adds	r2, #4
 80098a2:	6837      	ldr	r7, [r6, #0]
 80098a4:	f8d5 e000 	ldr.w	lr, [r5]
 80098a8:	f8c6 e000 	str.w	lr, [r6]
 80098ac:	4401      	add	r1, r0
 80098ae:	4402      	add	r2, r0
 80098b0:	602f      	str	r7, [r5, #0]
 80098b2:	3402      	adds	r4, #2
 80098b4:	680e      	ldr	r6, [r1, #0]
 80098b6:	f8d2 9000 	ldr.w	r9, [r2]
 80098ba:	f8c1 9000 	str.w	r9, [r1]
 80098be:	b2a4      	uxth	r4, r4
 80098c0:	6016      	str	r6, [r2, #0]
 80098c2:	eb04 050c 	add.w	r5, r4, ip
 80098c6:	881a      	ldrh	r2, [r3, #0]
 80098c8:	00ed      	lsls	r5, r5, #3
 80098ca:	eb00 0e05 	add.w	lr, r0, r5
 80098ce:	3504      	adds	r5, #4
 80098d0:	9500      	str	r5, [sp, #0]
 80098d2:	eb0c 0102 	add.w	r1, ip, r2
 80098d6:	9d02      	ldr	r5, [sp, #8]
 80098d8:	00c9      	lsls	r1, r1, #3
 80098da:	00e7      	lsls	r7, r4, #3
 80098dc:	00d6      	lsls	r6, r2, #3
 80098de:	f101 0b04 	add.w	fp, r1, #4
 80098e2:	eb00 0901 	add.w	r9, r0, r1
 80098e6:	42ac      	cmp	r4, r5
 80098e8:	9903      	ldr	r1, [sp, #12]
 80098ea:	9d00      	ldr	r5, [sp, #0]
 80098ec:	eb00 0807 	add.w	r8, r0, r7
 80098f0:	eb00 0a06 	add.w	sl, r0, r6
 80098f4:	f107 0704 	add.w	r7, r7, #4
 80098f8:	f106 0604 	add.w	r6, r6, #4
 80098fc:	440b      	add	r3, r1
 80098fe:	4407      	add	r7, r0
 8009900:	4406      	add	r6, r0
 8009902:	4621      	mov	r1, r4
 8009904:	4405      	add	r5, r0
 8009906:	4483      	add	fp, r0
 8009908:	d820      	bhi.n	800994c <arm_bitreversal_f32+0xd8>
 800990a:	42a2      	cmp	r2, r4
 800990c:	d9c0      	bls.n	8009890 <arm_bitreversal_f32+0x1c>
 800990e:	edd8 7a00 	vldr	s15, [r8]
 8009912:	ed9a 7a00 	vldr	s14, [sl]
 8009916:	ed88 7a00 	vstr	s14, [r8]
 800991a:	edca 7a00 	vstr	s15, [sl]
 800991e:	f8d7 8000 	ldr.w	r8, [r7]
 8009922:	f8d6 a000 	ldr.w	sl, [r6]
 8009926:	f8c7 a000 	str.w	sl, [r7]
 800992a:	f8c6 8000 	str.w	r8, [r6]
 800992e:	f8de 6000 	ldr.w	r6, [lr]
 8009932:	f8d9 7000 	ldr.w	r7, [r9]
 8009936:	f8ce 7000 	str.w	r7, [lr]
 800993a:	f8c9 6000 	str.w	r6, [r9]
 800993e:	682e      	ldr	r6, [r5, #0]
 8009940:	f8db 7000 	ldr.w	r7, [fp]
 8009944:	602f      	str	r7, [r5, #0]
 8009946:	f8cb 6000 	str.w	r6, [fp]
 800994a:	e7a1      	b.n	8009890 <arm_bitreversal_f32+0x1c>
 800994c:	b005      	add	sp, #20
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	bf00      	nop

08009954 <__errno>:
 8009954:	4b01      	ldr	r3, [pc, #4]	; (800995c <__errno+0x8>)
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20000010 	.word	0x20000010

08009960 <std>:
 8009960:	2300      	movs	r3, #0
 8009962:	b510      	push	{r4, lr}
 8009964:	4604      	mov	r4, r0
 8009966:	e9c0 3300 	strd	r3, r3, [r0]
 800996a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800996e:	6083      	str	r3, [r0, #8]
 8009970:	8181      	strh	r1, [r0, #12]
 8009972:	6643      	str	r3, [r0, #100]	; 0x64
 8009974:	81c2      	strh	r2, [r0, #14]
 8009976:	6183      	str	r3, [r0, #24]
 8009978:	4619      	mov	r1, r3
 800997a:	2208      	movs	r2, #8
 800997c:	305c      	adds	r0, #92	; 0x5c
 800997e:	f000 f91a 	bl	8009bb6 <memset>
 8009982:	4b05      	ldr	r3, [pc, #20]	; (8009998 <std+0x38>)
 8009984:	6263      	str	r3, [r4, #36]	; 0x24
 8009986:	4b05      	ldr	r3, [pc, #20]	; (800999c <std+0x3c>)
 8009988:	62a3      	str	r3, [r4, #40]	; 0x28
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <std+0x40>)
 800998c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <std+0x44>)
 8009990:	6224      	str	r4, [r4, #32]
 8009992:	6323      	str	r3, [r4, #48]	; 0x30
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	0800ab25 	.word	0x0800ab25
 800999c:	0800ab47 	.word	0x0800ab47
 80099a0:	0800ab7f 	.word	0x0800ab7f
 80099a4:	0800aba3 	.word	0x0800aba3

080099a8 <_cleanup_r>:
 80099a8:	4901      	ldr	r1, [pc, #4]	; (80099b0 <_cleanup_r+0x8>)
 80099aa:	f000 b8af 	b.w	8009b0c <_fwalk_reent>
 80099ae:	bf00      	nop
 80099b0:	0800c751 	.word	0x0800c751

080099b4 <__sfmoreglue>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	2268      	movs	r2, #104	; 0x68
 80099b8:	1e4d      	subs	r5, r1, #1
 80099ba:	4355      	muls	r5, r2
 80099bc:	460e      	mov	r6, r1
 80099be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099c2:	f000 f921 	bl	8009c08 <_malloc_r>
 80099c6:	4604      	mov	r4, r0
 80099c8:	b140      	cbz	r0, 80099dc <__sfmoreglue+0x28>
 80099ca:	2100      	movs	r1, #0
 80099cc:	e9c0 1600 	strd	r1, r6, [r0]
 80099d0:	300c      	adds	r0, #12
 80099d2:	60a0      	str	r0, [r4, #8]
 80099d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099d8:	f000 f8ed 	bl	8009bb6 <memset>
 80099dc:	4620      	mov	r0, r4
 80099de:	bd70      	pop	{r4, r5, r6, pc}

080099e0 <__sfp_lock_acquire>:
 80099e0:	4801      	ldr	r0, [pc, #4]	; (80099e8 <__sfp_lock_acquire+0x8>)
 80099e2:	f000 b8d8 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 80099e6:	bf00      	nop
 80099e8:	200139b1 	.word	0x200139b1

080099ec <__sfp_lock_release>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__sfp_lock_release+0x8>)
 80099ee:	f000 b8d3 	b.w	8009b98 <__retarget_lock_release_recursive>
 80099f2:	bf00      	nop
 80099f4:	200139b1 	.word	0x200139b1

080099f8 <__sinit_lock_acquire>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__sinit_lock_acquire+0x8>)
 80099fa:	f000 b8cc 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	200139b2 	.word	0x200139b2

08009a04 <__sinit_lock_release>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__sinit_lock_release+0x8>)
 8009a06:	f000 b8c7 	b.w	8009b98 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	200139b2 	.word	0x200139b2

08009a10 <__sinit>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	4604      	mov	r4, r0
 8009a14:	f7ff fff0 	bl	80099f8 <__sinit_lock_acquire>
 8009a18:	69a3      	ldr	r3, [r4, #24]
 8009a1a:	b11b      	cbz	r3, 8009a24 <__sinit+0x14>
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f7ff bff0 	b.w	8009a04 <__sinit_lock_release>
 8009a24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a28:	6523      	str	r3, [r4, #80]	; 0x50
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <__sinit+0x68>)
 8009a2c:	4a13      	ldr	r2, [pc, #76]	; (8009a7c <__sinit+0x6c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	bf04      	itt	eq
 8009a36:	2301      	moveq	r3, #1
 8009a38:	61a3      	streq	r3, [r4, #24]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f820 	bl	8009a80 <__sfp>
 8009a40:	6060      	str	r0, [r4, #4]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 f81c 	bl	8009a80 <__sfp>
 8009a48:	60a0      	str	r0, [r4, #8]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f818 	bl	8009a80 <__sfp>
 8009a50:	2200      	movs	r2, #0
 8009a52:	60e0      	str	r0, [r4, #12]
 8009a54:	2104      	movs	r1, #4
 8009a56:	6860      	ldr	r0, [r4, #4]
 8009a58:	f7ff ff82 	bl	8009960 <std>
 8009a5c:	68a0      	ldr	r0, [r4, #8]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	2109      	movs	r1, #9
 8009a62:	f7ff ff7d 	bl	8009960 <std>
 8009a66:	68e0      	ldr	r0, [r4, #12]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	2112      	movs	r1, #18
 8009a6c:	f7ff ff78 	bl	8009960 <std>
 8009a70:	2301      	movs	r3, #1
 8009a72:	61a3      	str	r3, [r4, #24]
 8009a74:	e7d2      	b.n	8009a1c <__sinit+0xc>
 8009a76:	bf00      	nop
 8009a78:	0802b3c0 	.word	0x0802b3c0
 8009a7c:	080099a9 	.word	0x080099a9

08009a80 <__sfp>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	4607      	mov	r7, r0
 8009a84:	f7ff ffac 	bl	80099e0 <__sfp_lock_acquire>
 8009a88:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <__sfp+0x84>)
 8009a8a:	681e      	ldr	r6, [r3, #0]
 8009a8c:	69b3      	ldr	r3, [r6, #24]
 8009a8e:	b913      	cbnz	r3, 8009a96 <__sfp+0x16>
 8009a90:	4630      	mov	r0, r6
 8009a92:	f7ff ffbd 	bl	8009a10 <__sinit>
 8009a96:	3648      	adds	r6, #72	; 0x48
 8009a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	d503      	bpl.n	8009aa8 <__sfp+0x28>
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	b30b      	cbz	r3, 8009ae8 <__sfp+0x68>
 8009aa4:	6836      	ldr	r6, [r6, #0]
 8009aa6:	e7f7      	b.n	8009a98 <__sfp+0x18>
 8009aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009aac:	b9d5      	cbnz	r5, 8009ae4 <__sfp+0x64>
 8009aae:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <__sfp+0x88>)
 8009ab0:	60e3      	str	r3, [r4, #12]
 8009ab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ab6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ab8:	f000 f86c 	bl	8009b94 <__retarget_lock_init_recursive>
 8009abc:	f7ff ff96 	bl	80099ec <__sfp_lock_release>
 8009ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ac8:	6025      	str	r5, [r4, #0]
 8009aca:	61a5      	str	r5, [r4, #24]
 8009acc:	2208      	movs	r2, #8
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ad4:	f000 f86f 	bl	8009bb6 <memset>
 8009ad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009adc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae4:	3468      	adds	r4, #104	; 0x68
 8009ae6:	e7d9      	b.n	8009a9c <__sfp+0x1c>
 8009ae8:	2104      	movs	r1, #4
 8009aea:	4638      	mov	r0, r7
 8009aec:	f7ff ff62 	bl	80099b4 <__sfmoreglue>
 8009af0:	4604      	mov	r4, r0
 8009af2:	6030      	str	r0, [r6, #0]
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d1d5      	bne.n	8009aa4 <__sfp+0x24>
 8009af8:	f7ff ff78 	bl	80099ec <__sfp_lock_release>
 8009afc:	230c      	movs	r3, #12
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	e7ee      	b.n	8009ae0 <__sfp+0x60>
 8009b02:	bf00      	nop
 8009b04:	0802b3c0 	.word	0x0802b3c0
 8009b08:	ffff0001 	.word	0xffff0001

08009b0c <_fwalk_reent>:
 8009b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b10:	4606      	mov	r6, r0
 8009b12:	4688      	mov	r8, r1
 8009b14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b18:	2700      	movs	r7, #0
 8009b1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b1e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b22:	d505      	bpl.n	8009b30 <_fwalk_reent+0x24>
 8009b24:	6824      	ldr	r4, [r4, #0]
 8009b26:	2c00      	cmp	r4, #0
 8009b28:	d1f7      	bne.n	8009b1a <_fwalk_reent+0xe>
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b30:	89ab      	ldrh	r3, [r5, #12]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d907      	bls.n	8009b46 <_fwalk_reent+0x3a>
 8009b36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	d003      	beq.n	8009b46 <_fwalk_reent+0x3a>
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4630      	mov	r0, r6
 8009b42:	47c0      	blx	r8
 8009b44:	4307      	orrs	r7, r0
 8009b46:	3568      	adds	r5, #104	; 0x68
 8009b48:	e7e9      	b.n	8009b1e <_fwalk_reent+0x12>
	...

08009b4c <__libc_init_array>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	4d0d      	ldr	r5, [pc, #52]	; (8009b84 <__libc_init_array+0x38>)
 8009b50:	4c0d      	ldr	r4, [pc, #52]	; (8009b88 <__libc_init_array+0x3c>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	2600      	movs	r6, #0
 8009b58:	42a6      	cmp	r6, r4
 8009b5a:	d109      	bne.n	8009b70 <__libc_init_array+0x24>
 8009b5c:	4d0b      	ldr	r5, [pc, #44]	; (8009b8c <__libc_init_array+0x40>)
 8009b5e:	4c0c      	ldr	r4, [pc, #48]	; (8009b90 <__libc_init_array+0x44>)
 8009b60:	f005 fd40 	bl	800f5e4 <_init>
 8009b64:	1b64      	subs	r4, r4, r5
 8009b66:	10a4      	asrs	r4, r4, #2
 8009b68:	2600      	movs	r6, #0
 8009b6a:	42a6      	cmp	r6, r4
 8009b6c:	d105      	bne.n	8009b7a <__libc_init_array+0x2e>
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b74:	4798      	blx	r3
 8009b76:	3601      	adds	r6, #1
 8009b78:	e7ee      	b.n	8009b58 <__libc_init_array+0xc>
 8009b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7e:	4798      	blx	r3
 8009b80:	3601      	adds	r6, #1
 8009b82:	e7f2      	b.n	8009b6a <__libc_init_array+0x1e>
 8009b84:	0802b840 	.word	0x0802b840
 8009b88:	0802b840 	.word	0x0802b840
 8009b8c:	0802b840 	.word	0x0802b840
 8009b90:	0802b844 	.word	0x0802b844

08009b94 <__retarget_lock_init_recursive>:
 8009b94:	4770      	bx	lr

08009b96 <__retarget_lock_acquire_recursive>:
 8009b96:	4770      	bx	lr

08009b98 <__retarget_lock_release_recursive>:
 8009b98:	4770      	bx	lr

08009b9a <memcpy>:
 8009b9a:	440a      	add	r2, r1
 8009b9c:	4291      	cmp	r1, r2
 8009b9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ba2:	d100      	bne.n	8009ba6 <memcpy+0xc>
 8009ba4:	4770      	bx	lr
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bb0:	4291      	cmp	r1, r2
 8009bb2:	d1f9      	bne.n	8009ba8 <memcpy+0xe>
 8009bb4:	bd10      	pop	{r4, pc}

08009bb6 <memset>:
 8009bb6:	4402      	add	r2, r0
 8009bb8:	4603      	mov	r3, r0
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d100      	bne.n	8009bc0 <memset+0xa>
 8009bbe:	4770      	bx	lr
 8009bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc4:	e7f9      	b.n	8009bba <memset+0x4>
	...

08009bc8 <sbrk_aligned>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4e0e      	ldr	r6, [pc, #56]	; (8009c04 <sbrk_aligned+0x3c>)
 8009bcc:	460c      	mov	r4, r1
 8009bce:	6831      	ldr	r1, [r6, #0]
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	b911      	cbnz	r1, 8009bda <sbrk_aligned+0x12>
 8009bd4:	f000 ff70 	bl	800aab8 <_sbrk_r>
 8009bd8:	6030      	str	r0, [r6, #0]
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4628      	mov	r0, r5
 8009bde:	f000 ff6b 	bl	800aab8 <_sbrk_r>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	d00a      	beq.n	8009bfc <sbrk_aligned+0x34>
 8009be6:	1cc4      	adds	r4, r0, #3
 8009be8:	f024 0403 	bic.w	r4, r4, #3
 8009bec:	42a0      	cmp	r0, r4
 8009bee:	d007      	beq.n	8009c00 <sbrk_aligned+0x38>
 8009bf0:	1a21      	subs	r1, r4, r0
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 ff60 	bl	800aab8 <_sbrk_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d101      	bne.n	8009c00 <sbrk_aligned+0x38>
 8009bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8009c00:	4620      	mov	r0, r4
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	200139b8 	.word	0x200139b8

08009c08 <_malloc_r>:
 8009c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0c:	1ccd      	adds	r5, r1, #3
 8009c0e:	f025 0503 	bic.w	r5, r5, #3
 8009c12:	3508      	adds	r5, #8
 8009c14:	2d0c      	cmp	r5, #12
 8009c16:	bf38      	it	cc
 8009c18:	250c      	movcc	r5, #12
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	db01      	blt.n	8009c24 <_malloc_r+0x1c>
 8009c20:	42a9      	cmp	r1, r5
 8009c22:	d905      	bls.n	8009c30 <_malloc_r+0x28>
 8009c24:	230c      	movs	r3, #12
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	2600      	movs	r6, #0
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c30:	4e2e      	ldr	r6, [pc, #184]	; (8009cec <_malloc_r+0xe4>)
 8009c32:	f003 f969 	bl	800cf08 <__malloc_lock>
 8009c36:	6833      	ldr	r3, [r6, #0]
 8009c38:	461c      	mov	r4, r3
 8009c3a:	bb34      	cbnz	r4, 8009c8a <_malloc_r+0x82>
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	4638      	mov	r0, r7
 8009c40:	f7ff ffc2 	bl	8009bc8 <sbrk_aligned>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	4604      	mov	r4, r0
 8009c48:	d14d      	bne.n	8009ce6 <_malloc_r+0xde>
 8009c4a:	6834      	ldr	r4, [r6, #0]
 8009c4c:	4626      	mov	r6, r4
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	d140      	bne.n	8009cd4 <_malloc_r+0xcc>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	4631      	mov	r1, r6
 8009c56:	4638      	mov	r0, r7
 8009c58:	eb04 0803 	add.w	r8, r4, r3
 8009c5c:	f000 ff2c 	bl	800aab8 <_sbrk_r>
 8009c60:	4580      	cmp	r8, r0
 8009c62:	d13a      	bne.n	8009cda <_malloc_r+0xd2>
 8009c64:	6821      	ldr	r1, [r4, #0]
 8009c66:	3503      	adds	r5, #3
 8009c68:	1a6d      	subs	r5, r5, r1
 8009c6a:	f025 0503 	bic.w	r5, r5, #3
 8009c6e:	3508      	adds	r5, #8
 8009c70:	2d0c      	cmp	r5, #12
 8009c72:	bf38      	it	cc
 8009c74:	250c      	movcc	r5, #12
 8009c76:	4629      	mov	r1, r5
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff ffa5 	bl	8009bc8 <sbrk_aligned>
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d02b      	beq.n	8009cda <_malloc_r+0xd2>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	442b      	add	r3, r5
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	e00e      	b.n	8009ca8 <_malloc_r+0xa0>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	1b52      	subs	r2, r2, r5
 8009c8e:	d41e      	bmi.n	8009cce <_malloc_r+0xc6>
 8009c90:	2a0b      	cmp	r2, #11
 8009c92:	d916      	bls.n	8009cc2 <_malloc_r+0xba>
 8009c94:	1961      	adds	r1, r4, r5
 8009c96:	42a3      	cmp	r3, r4
 8009c98:	6025      	str	r5, [r4, #0]
 8009c9a:	bf18      	it	ne
 8009c9c:	6059      	strne	r1, [r3, #4]
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	bf08      	it	eq
 8009ca2:	6031      	streq	r1, [r6, #0]
 8009ca4:	5162      	str	r2, [r4, r5]
 8009ca6:	604b      	str	r3, [r1, #4]
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f104 060b 	add.w	r6, r4, #11
 8009cae:	f003 f931 	bl	800cf14 <__malloc_unlock>
 8009cb2:	f026 0607 	bic.w	r6, r6, #7
 8009cb6:	1d23      	adds	r3, r4, #4
 8009cb8:	1af2      	subs	r2, r6, r3
 8009cba:	d0b6      	beq.n	8009c2a <_malloc_r+0x22>
 8009cbc:	1b9b      	subs	r3, r3, r6
 8009cbe:	50a3      	str	r3, [r4, r2]
 8009cc0:	e7b3      	b.n	8009c2a <_malloc_r+0x22>
 8009cc2:	6862      	ldr	r2, [r4, #4]
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	bf0c      	ite	eq
 8009cc8:	6032      	streq	r2, [r6, #0]
 8009cca:	605a      	strne	r2, [r3, #4]
 8009ccc:	e7ec      	b.n	8009ca8 <_malloc_r+0xa0>
 8009cce:	4623      	mov	r3, r4
 8009cd0:	6864      	ldr	r4, [r4, #4]
 8009cd2:	e7b2      	b.n	8009c3a <_malloc_r+0x32>
 8009cd4:	4634      	mov	r4, r6
 8009cd6:	6876      	ldr	r6, [r6, #4]
 8009cd8:	e7b9      	b.n	8009c4e <_malloc_r+0x46>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	603b      	str	r3, [r7, #0]
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f003 f918 	bl	800cf14 <__malloc_unlock>
 8009ce4:	e7a1      	b.n	8009c2a <_malloc_r+0x22>
 8009ce6:	6025      	str	r5, [r4, #0]
 8009ce8:	e7de      	b.n	8009ca8 <_malloc_r+0xa0>
 8009cea:	bf00      	nop
 8009cec:	200139b4 	.word	0x200139b4

08009cf0 <__cvt>:
 8009cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf4:	ec55 4b10 	vmov	r4, r5, d0
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	460e      	mov	r6, r1
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	462b      	mov	r3, r5
 8009d00:	bfbb      	ittet	lt
 8009d02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d06:	461d      	movlt	r5, r3
 8009d08:	2300      	movge	r3, #0
 8009d0a:	232d      	movlt	r3, #45	; 0x2d
 8009d0c:	700b      	strb	r3, [r1, #0]
 8009d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d14:	4691      	mov	r9, r2
 8009d16:	f023 0820 	bic.w	r8, r3, #32
 8009d1a:	bfbc      	itt	lt
 8009d1c:	4622      	movlt	r2, r4
 8009d1e:	4614      	movlt	r4, r2
 8009d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d24:	d005      	beq.n	8009d32 <__cvt+0x42>
 8009d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d2a:	d100      	bne.n	8009d2e <__cvt+0x3e>
 8009d2c:	3601      	adds	r6, #1
 8009d2e:	2102      	movs	r1, #2
 8009d30:	e000      	b.n	8009d34 <__cvt+0x44>
 8009d32:	2103      	movs	r1, #3
 8009d34:	ab03      	add	r3, sp, #12
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	ab02      	add	r3, sp, #8
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	ec45 4b10 	vmov	d0, r4, r5
 8009d40:	4653      	mov	r3, sl
 8009d42:	4632      	mov	r2, r6
 8009d44:	f001 fe90 	bl	800ba68 <_dtoa_r>
 8009d48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	d102      	bne.n	8009d56 <__cvt+0x66>
 8009d50:	f019 0f01 	tst.w	r9, #1
 8009d54:	d022      	beq.n	8009d9c <__cvt+0xac>
 8009d56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d5a:	eb07 0906 	add.w	r9, r7, r6
 8009d5e:	d110      	bne.n	8009d82 <__cvt+0x92>
 8009d60:	783b      	ldrb	r3, [r7, #0]
 8009d62:	2b30      	cmp	r3, #48	; 0x30
 8009d64:	d10a      	bne.n	8009d7c <__cvt+0x8c>
 8009d66:	2200      	movs	r2, #0
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7f6 fecb 	bl	8000b08 <__aeabi_dcmpeq>
 8009d72:	b918      	cbnz	r0, 8009d7c <__cvt+0x8c>
 8009d74:	f1c6 0601 	rsb	r6, r6, #1
 8009d78:	f8ca 6000 	str.w	r6, [sl]
 8009d7c:	f8da 3000 	ldr.w	r3, [sl]
 8009d80:	4499      	add	r9, r3
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f6 febd 	bl	8000b08 <__aeabi_dcmpeq>
 8009d8e:	b108      	cbz	r0, 8009d94 <__cvt+0xa4>
 8009d90:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d94:	2230      	movs	r2, #48	; 0x30
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	454b      	cmp	r3, r9
 8009d9a:	d307      	bcc.n	8009dac <__cvt+0xbc>
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009da0:	1bdb      	subs	r3, r3, r7
 8009da2:	4638      	mov	r0, r7
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	b004      	add	sp, #16
 8009da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dac:	1c59      	adds	r1, r3, #1
 8009dae:	9103      	str	r1, [sp, #12]
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	e7f0      	b.n	8009d96 <__cvt+0xa6>

08009db4 <__exponent>:
 8009db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009db6:	4603      	mov	r3, r0
 8009db8:	2900      	cmp	r1, #0
 8009dba:	bfb8      	it	lt
 8009dbc:	4249      	neglt	r1, r1
 8009dbe:	f803 2b02 	strb.w	r2, [r3], #2
 8009dc2:	bfb4      	ite	lt
 8009dc4:	222d      	movlt	r2, #45	; 0x2d
 8009dc6:	222b      	movge	r2, #43	; 0x2b
 8009dc8:	2909      	cmp	r1, #9
 8009dca:	7042      	strb	r2, [r0, #1]
 8009dcc:	dd2a      	ble.n	8009e24 <__exponent+0x70>
 8009dce:	f10d 0407 	add.w	r4, sp, #7
 8009dd2:	46a4      	mov	ip, r4
 8009dd4:	270a      	movs	r7, #10
 8009dd6:	46a6      	mov	lr, r4
 8009dd8:	460a      	mov	r2, r1
 8009dda:	fb91 f6f7 	sdiv	r6, r1, r7
 8009dde:	fb07 1516 	mls	r5, r7, r6, r1
 8009de2:	3530      	adds	r5, #48	; 0x30
 8009de4:	2a63      	cmp	r2, #99	; 0x63
 8009de6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009dea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009dee:	4631      	mov	r1, r6
 8009df0:	dcf1      	bgt.n	8009dd6 <__exponent+0x22>
 8009df2:	3130      	adds	r1, #48	; 0x30
 8009df4:	f1ae 0502 	sub.w	r5, lr, #2
 8009df8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009dfc:	1c44      	adds	r4, r0, #1
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4561      	cmp	r1, ip
 8009e02:	d30a      	bcc.n	8009e1a <__exponent+0x66>
 8009e04:	f10d 0209 	add.w	r2, sp, #9
 8009e08:	eba2 020e 	sub.w	r2, r2, lr
 8009e0c:	4565      	cmp	r5, ip
 8009e0e:	bf88      	it	hi
 8009e10:	2200      	movhi	r2, #0
 8009e12:	4413      	add	r3, r2
 8009e14:	1a18      	subs	r0, r3, r0
 8009e16:	b003      	add	sp, #12
 8009e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e22:	e7ed      	b.n	8009e00 <__exponent+0x4c>
 8009e24:	2330      	movs	r3, #48	; 0x30
 8009e26:	3130      	adds	r1, #48	; 0x30
 8009e28:	7083      	strb	r3, [r0, #2]
 8009e2a:	70c1      	strb	r1, [r0, #3]
 8009e2c:	1d03      	adds	r3, r0, #4
 8009e2e:	e7f1      	b.n	8009e14 <__exponent+0x60>

08009e30 <_printf_float>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	ed2d 8b02 	vpush	{d8}
 8009e38:	b08d      	sub	sp, #52	; 0x34
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e40:	4616      	mov	r6, r2
 8009e42:	461f      	mov	r7, r3
 8009e44:	4605      	mov	r5, r0
 8009e46:	f003 f82f 	bl	800cea8 <_localeconv_r>
 8009e4a:	f8d0 a000 	ldr.w	sl, [r0]
 8009e4e:	4650      	mov	r0, sl
 8009e50:	f7f6 f9de 	bl	8000210 <strlen>
 8009e54:	2300      	movs	r3, #0
 8009e56:	930a      	str	r3, [sp, #40]	; 0x28
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	9305      	str	r3, [sp, #20]
 8009e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e64:	3307      	adds	r3, #7
 8009e66:	f023 0307 	bic.w	r3, r3, #7
 8009e6a:	f103 0208 	add.w	r2, r3, #8
 8009e6e:	f8c8 2000 	str.w	r2, [r8]
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e82:	9307      	str	r3, [sp, #28]
 8009e84:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e88:	ee08 0a10 	vmov	s16, r0
 8009e8c:	4b9f      	ldr	r3, [pc, #636]	; (800a10c <_printf_float+0x2dc>)
 8009e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e92:	f04f 32ff 	mov.w	r2, #4294967295
 8009e96:	f7f6 fe69 	bl	8000b6c <__aeabi_dcmpun>
 8009e9a:	bb88      	cbnz	r0, 8009f00 <_printf_float+0xd0>
 8009e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ea0:	4b9a      	ldr	r3, [pc, #616]	; (800a10c <_printf_float+0x2dc>)
 8009ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea6:	f7f6 fe43 	bl	8000b30 <__aeabi_dcmple>
 8009eaa:	bb48      	cbnz	r0, 8009f00 <_printf_float+0xd0>
 8009eac:	2200      	movs	r2, #0
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fe32 	bl	8000b1c <__aeabi_dcmplt>
 8009eb8:	b110      	cbz	r0, 8009ec0 <_printf_float+0x90>
 8009eba:	232d      	movs	r3, #45	; 0x2d
 8009ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec0:	4b93      	ldr	r3, [pc, #588]	; (800a110 <_printf_float+0x2e0>)
 8009ec2:	4894      	ldr	r0, [pc, #592]	; (800a114 <_printf_float+0x2e4>)
 8009ec4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ec8:	bf94      	ite	ls
 8009eca:	4698      	movls	r8, r3
 8009ecc:	4680      	movhi	r8, r0
 8009ece:	2303      	movs	r3, #3
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	9b05      	ldr	r3, [sp, #20]
 8009ed4:	f023 0204 	bic.w	r2, r3, #4
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	f04f 0900 	mov.w	r9, #0
 8009ede:	9700      	str	r7, [sp, #0]
 8009ee0:	4633      	mov	r3, r6
 8009ee2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 f9d8 	bl	800a29c <_printf_common>
 8009eec:	3001      	adds	r0, #1
 8009eee:	f040 8090 	bne.w	800a012 <_printf_float+0x1e2>
 8009ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef6:	b00d      	add	sp, #52	; 0x34
 8009ef8:	ecbd 8b02 	vpop	{d8}
 8009efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f00:	4642      	mov	r2, r8
 8009f02:	464b      	mov	r3, r9
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 fe30 	bl	8000b6c <__aeabi_dcmpun>
 8009f0c:	b140      	cbz	r0, 8009f20 <_printf_float+0xf0>
 8009f0e:	464b      	mov	r3, r9
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	bfbc      	itt	lt
 8009f14:	232d      	movlt	r3, #45	; 0x2d
 8009f16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f1a:	487f      	ldr	r0, [pc, #508]	; (800a118 <_printf_float+0x2e8>)
 8009f1c:	4b7f      	ldr	r3, [pc, #508]	; (800a11c <_printf_float+0x2ec>)
 8009f1e:	e7d1      	b.n	8009ec4 <_printf_float+0x94>
 8009f20:	6863      	ldr	r3, [r4, #4]
 8009f22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f26:	9206      	str	r2, [sp, #24]
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	d13f      	bne.n	8009fac <_printf_float+0x17c>
 8009f2c:	2306      	movs	r3, #6
 8009f2e:	6063      	str	r3, [r4, #4]
 8009f30:	9b05      	ldr	r3, [sp, #20]
 8009f32:	6861      	ldr	r1, [r4, #4]
 8009f34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9303      	str	r3, [sp, #12]
 8009f3c:	ab0a      	add	r3, sp, #40	; 0x28
 8009f3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f42:	ab09      	add	r3, sp, #36	; 0x24
 8009f44:	ec49 8b10 	vmov	d0, r8, r9
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	6022      	str	r2, [r4, #0]
 8009f4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f50:	4628      	mov	r0, r5
 8009f52:	f7ff fecd 	bl	8009cf0 <__cvt>
 8009f56:	9b06      	ldr	r3, [sp, #24]
 8009f58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f5a:	2b47      	cmp	r3, #71	; 0x47
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	d108      	bne.n	8009f72 <_printf_float+0x142>
 8009f60:	1cc8      	adds	r0, r1, #3
 8009f62:	db02      	blt.n	8009f6a <_printf_float+0x13a>
 8009f64:	6863      	ldr	r3, [r4, #4]
 8009f66:	4299      	cmp	r1, r3
 8009f68:	dd41      	ble.n	8009fee <_printf_float+0x1be>
 8009f6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f6e:	fa5f fb8b 	uxtb.w	fp, fp
 8009f72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f76:	d820      	bhi.n	8009fba <_printf_float+0x18a>
 8009f78:	3901      	subs	r1, #1
 8009f7a:	465a      	mov	r2, fp
 8009f7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f80:	9109      	str	r1, [sp, #36]	; 0x24
 8009f82:	f7ff ff17 	bl	8009db4 <__exponent>
 8009f86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f88:	1813      	adds	r3, r2, r0
 8009f8a:	2a01      	cmp	r2, #1
 8009f8c:	4681      	mov	r9, r0
 8009f8e:	6123      	str	r3, [r4, #16]
 8009f90:	dc02      	bgt.n	8009f98 <_printf_float+0x168>
 8009f92:	6822      	ldr	r2, [r4, #0]
 8009f94:	07d2      	lsls	r2, r2, #31
 8009f96:	d501      	bpl.n	8009f9c <_printf_float+0x16c>
 8009f98:	3301      	adds	r3, #1
 8009f9a:	6123      	str	r3, [r4, #16]
 8009f9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d09c      	beq.n	8009ede <_printf_float+0xae>
 8009fa4:	232d      	movs	r3, #45	; 0x2d
 8009fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009faa:	e798      	b.n	8009ede <_printf_float+0xae>
 8009fac:	9a06      	ldr	r2, [sp, #24]
 8009fae:	2a47      	cmp	r2, #71	; 0x47
 8009fb0:	d1be      	bne.n	8009f30 <_printf_float+0x100>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1bc      	bne.n	8009f30 <_printf_float+0x100>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e7b9      	b.n	8009f2e <_printf_float+0xfe>
 8009fba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fbe:	d118      	bne.n	8009ff2 <_printf_float+0x1c2>
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	dd0b      	ble.n	8009fde <_printf_float+0x1ae>
 8009fc6:	6121      	str	r1, [r4, #16]
 8009fc8:	b913      	cbnz	r3, 8009fd0 <_printf_float+0x1a0>
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	07d0      	lsls	r0, r2, #31
 8009fce:	d502      	bpl.n	8009fd6 <_printf_float+0x1a6>
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	440b      	add	r3, r1
 8009fd4:	6123      	str	r3, [r4, #16]
 8009fd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fd8:	f04f 0900 	mov.w	r9, #0
 8009fdc:	e7de      	b.n	8009f9c <_printf_float+0x16c>
 8009fde:	b913      	cbnz	r3, 8009fe6 <_printf_float+0x1b6>
 8009fe0:	6822      	ldr	r2, [r4, #0]
 8009fe2:	07d2      	lsls	r2, r2, #31
 8009fe4:	d501      	bpl.n	8009fea <_printf_float+0x1ba>
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	e7f4      	b.n	8009fd4 <_printf_float+0x1a4>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e7f2      	b.n	8009fd4 <_printf_float+0x1a4>
 8009fee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff4:	4299      	cmp	r1, r3
 8009ff6:	db05      	blt.n	800a004 <_printf_float+0x1d4>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	6121      	str	r1, [r4, #16]
 8009ffc:	07d8      	lsls	r0, r3, #31
 8009ffe:	d5ea      	bpl.n	8009fd6 <_printf_float+0x1a6>
 800a000:	1c4b      	adds	r3, r1, #1
 800a002:	e7e7      	b.n	8009fd4 <_printf_float+0x1a4>
 800a004:	2900      	cmp	r1, #0
 800a006:	bfd4      	ite	le
 800a008:	f1c1 0202 	rsble	r2, r1, #2
 800a00c:	2201      	movgt	r2, #1
 800a00e:	4413      	add	r3, r2
 800a010:	e7e0      	b.n	8009fd4 <_printf_float+0x1a4>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	055a      	lsls	r2, r3, #21
 800a016:	d407      	bmi.n	800a028 <_printf_float+0x1f8>
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	4642      	mov	r2, r8
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	d12c      	bne.n	800a080 <_printf_float+0x250>
 800a026:	e764      	b.n	8009ef2 <_printf_float+0xc2>
 800a028:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a02c:	f240 80e0 	bls.w	800a1f0 <_printf_float+0x3c0>
 800a030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a034:	2200      	movs	r2, #0
 800a036:	2300      	movs	r3, #0
 800a038:	f7f6 fd66 	bl	8000b08 <__aeabi_dcmpeq>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d034      	beq.n	800a0aa <_printf_float+0x27a>
 800a040:	4a37      	ldr	r2, [pc, #220]	; (800a120 <_printf_float+0x2f0>)
 800a042:	2301      	movs	r3, #1
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	f43f af51 	beq.w	8009ef2 <_printf_float+0xc2>
 800a050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a054:	429a      	cmp	r2, r3
 800a056:	db02      	blt.n	800a05e <_printf_float+0x22e>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	07d8      	lsls	r0, r3, #31
 800a05c:	d510      	bpl.n	800a080 <_printf_float+0x250>
 800a05e:	ee18 3a10 	vmov	r3, s16
 800a062:	4652      	mov	r2, sl
 800a064:	4631      	mov	r1, r6
 800a066:	4628      	mov	r0, r5
 800a068:	47b8      	blx	r7
 800a06a:	3001      	adds	r0, #1
 800a06c:	f43f af41 	beq.w	8009ef2 <_printf_float+0xc2>
 800a070:	f04f 0800 	mov.w	r8, #0
 800a074:	f104 091a 	add.w	r9, r4, #26
 800a078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07a:	3b01      	subs	r3, #1
 800a07c:	4543      	cmp	r3, r8
 800a07e:	dc09      	bgt.n	800a094 <_printf_float+0x264>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	079b      	lsls	r3, r3, #30
 800a084:	f100 8105 	bmi.w	800a292 <_printf_float+0x462>
 800a088:	68e0      	ldr	r0, [r4, #12]
 800a08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a08c:	4298      	cmp	r0, r3
 800a08e:	bfb8      	it	lt
 800a090:	4618      	movlt	r0, r3
 800a092:	e730      	b.n	8009ef6 <_printf_float+0xc6>
 800a094:	2301      	movs	r3, #1
 800a096:	464a      	mov	r2, r9
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f af27 	beq.w	8009ef2 <_printf_float+0xc2>
 800a0a4:	f108 0801 	add.w	r8, r8, #1
 800a0a8:	e7e6      	b.n	800a078 <_printf_float+0x248>
 800a0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dc39      	bgt.n	800a124 <_printf_float+0x2f4>
 800a0b0:	4a1b      	ldr	r2, [pc, #108]	; (800a120 <_printf_float+0x2f0>)
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b8      	blx	r7
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	f43f af19 	beq.w	8009ef2 <_printf_float+0xc2>
 800a0c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	d102      	bne.n	800a0ce <_printf_float+0x29e>
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	07d9      	lsls	r1, r3, #31
 800a0cc:	d5d8      	bpl.n	800a080 <_printf_float+0x250>
 800a0ce:	ee18 3a10 	vmov	r3, s16
 800a0d2:	4652      	mov	r2, sl
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	47b8      	blx	r7
 800a0da:	3001      	adds	r0, #1
 800a0dc:	f43f af09 	beq.w	8009ef2 <_printf_float+0xc2>
 800a0e0:	f04f 0900 	mov.w	r9, #0
 800a0e4:	f104 0a1a 	add.w	sl, r4, #26
 800a0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ea:	425b      	negs	r3, r3
 800a0ec:	454b      	cmp	r3, r9
 800a0ee:	dc01      	bgt.n	800a0f4 <_printf_float+0x2c4>
 800a0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f2:	e792      	b.n	800a01a <_printf_float+0x1ea>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4652      	mov	r2, sl
 800a0f8:	4631      	mov	r1, r6
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	47b8      	blx	r7
 800a0fe:	3001      	adds	r0, #1
 800a100:	f43f aef7 	beq.w	8009ef2 <_printf_float+0xc2>
 800a104:	f109 0901 	add.w	r9, r9, #1
 800a108:	e7ee      	b.n	800a0e8 <_printf_float+0x2b8>
 800a10a:	bf00      	nop
 800a10c:	7fefffff 	.word	0x7fefffff
 800a110:	0802b3c4 	.word	0x0802b3c4
 800a114:	0802b3c8 	.word	0x0802b3c8
 800a118:	0802b3d0 	.word	0x0802b3d0
 800a11c:	0802b3cc 	.word	0x0802b3cc
 800a120:	0802b3d4 	.word	0x0802b3d4
 800a124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a128:	429a      	cmp	r2, r3
 800a12a:	bfa8      	it	ge
 800a12c:	461a      	movge	r2, r3
 800a12e:	2a00      	cmp	r2, #0
 800a130:	4691      	mov	r9, r2
 800a132:	dc37      	bgt.n	800a1a4 <_printf_float+0x374>
 800a134:	f04f 0b00 	mov.w	fp, #0
 800a138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a13c:	f104 021a 	add.w	r2, r4, #26
 800a140:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	eba3 0309 	sub.w	r3, r3, r9
 800a148:	455b      	cmp	r3, fp
 800a14a:	dc33      	bgt.n	800a1b4 <_printf_float+0x384>
 800a14c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a150:	429a      	cmp	r2, r3
 800a152:	db3b      	blt.n	800a1cc <_printf_float+0x39c>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	07da      	lsls	r2, r3, #31
 800a158:	d438      	bmi.n	800a1cc <_printf_float+0x39c>
 800a15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15c:	9a05      	ldr	r2, [sp, #20]
 800a15e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a160:	1a9a      	subs	r2, r3, r2
 800a162:	eba3 0901 	sub.w	r9, r3, r1
 800a166:	4591      	cmp	r9, r2
 800a168:	bfa8      	it	ge
 800a16a:	4691      	movge	r9, r2
 800a16c:	f1b9 0f00 	cmp.w	r9, #0
 800a170:	dc35      	bgt.n	800a1de <_printf_float+0x3ae>
 800a172:	f04f 0800 	mov.w	r8, #0
 800a176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a17a:	f104 0a1a 	add.w	sl, r4, #26
 800a17e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	eba3 0309 	sub.w	r3, r3, r9
 800a188:	4543      	cmp	r3, r8
 800a18a:	f77f af79 	ble.w	800a080 <_printf_float+0x250>
 800a18e:	2301      	movs	r3, #1
 800a190:	4652      	mov	r2, sl
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	f43f aeaa 	beq.w	8009ef2 <_printf_float+0xc2>
 800a19e:	f108 0801 	add.w	r8, r8, #1
 800a1a2:	e7ec      	b.n	800a17e <_printf_float+0x34e>
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4642      	mov	r2, r8
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d1c0      	bne.n	800a134 <_printf_float+0x304>
 800a1b2:	e69e      	b.n	8009ef2 <_printf_float+0xc2>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	9205      	str	r2, [sp, #20]
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f43f ae97 	beq.w	8009ef2 <_printf_float+0xc2>
 800a1c4:	9a05      	ldr	r2, [sp, #20]
 800a1c6:	f10b 0b01 	add.w	fp, fp, #1
 800a1ca:	e7b9      	b.n	800a140 <_printf_float+0x310>
 800a1cc:	ee18 3a10 	vmov	r3, s16
 800a1d0:	4652      	mov	r2, sl
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b8      	blx	r7
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d1be      	bne.n	800a15a <_printf_float+0x32a>
 800a1dc:	e689      	b.n	8009ef2 <_printf_float+0xc2>
 800a1de:	9a05      	ldr	r2, [sp, #20]
 800a1e0:	464b      	mov	r3, r9
 800a1e2:	4442      	add	r2, r8
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d1c1      	bne.n	800a172 <_printf_float+0x342>
 800a1ee:	e680      	b.n	8009ef2 <_printf_float+0xc2>
 800a1f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f2:	2a01      	cmp	r2, #1
 800a1f4:	dc01      	bgt.n	800a1fa <_printf_float+0x3ca>
 800a1f6:	07db      	lsls	r3, r3, #31
 800a1f8:	d538      	bpl.n	800a26c <_printf_float+0x43c>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	4631      	mov	r1, r6
 800a200:	4628      	mov	r0, r5
 800a202:	47b8      	blx	r7
 800a204:	3001      	adds	r0, #1
 800a206:	f43f ae74 	beq.w	8009ef2 <_printf_float+0xc2>
 800a20a:	ee18 3a10 	vmov	r3, s16
 800a20e:	4652      	mov	r2, sl
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f ae6b 	beq.w	8009ef2 <_printf_float+0xc2>
 800a21c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a220:	2200      	movs	r2, #0
 800a222:	2300      	movs	r3, #0
 800a224:	f7f6 fc70 	bl	8000b08 <__aeabi_dcmpeq>
 800a228:	b9d8      	cbnz	r0, 800a262 <_printf_float+0x432>
 800a22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22c:	f108 0201 	add.w	r2, r8, #1
 800a230:	3b01      	subs	r3, #1
 800a232:	4631      	mov	r1, r6
 800a234:	4628      	mov	r0, r5
 800a236:	47b8      	blx	r7
 800a238:	3001      	adds	r0, #1
 800a23a:	d10e      	bne.n	800a25a <_printf_float+0x42a>
 800a23c:	e659      	b.n	8009ef2 <_printf_float+0xc2>
 800a23e:	2301      	movs	r3, #1
 800a240:	4652      	mov	r2, sl
 800a242:	4631      	mov	r1, r6
 800a244:	4628      	mov	r0, r5
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	f43f ae52 	beq.w	8009ef2 <_printf_float+0xc2>
 800a24e:	f108 0801 	add.w	r8, r8, #1
 800a252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a254:	3b01      	subs	r3, #1
 800a256:	4543      	cmp	r3, r8
 800a258:	dcf1      	bgt.n	800a23e <_printf_float+0x40e>
 800a25a:	464b      	mov	r3, r9
 800a25c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a260:	e6dc      	b.n	800a01c <_printf_float+0x1ec>
 800a262:	f04f 0800 	mov.w	r8, #0
 800a266:	f104 0a1a 	add.w	sl, r4, #26
 800a26a:	e7f2      	b.n	800a252 <_printf_float+0x422>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4642      	mov	r2, r8
 800a270:	e7df      	b.n	800a232 <_printf_float+0x402>
 800a272:	2301      	movs	r3, #1
 800a274:	464a      	mov	r2, r9
 800a276:	4631      	mov	r1, r6
 800a278:	4628      	mov	r0, r5
 800a27a:	47b8      	blx	r7
 800a27c:	3001      	adds	r0, #1
 800a27e:	f43f ae38 	beq.w	8009ef2 <_printf_float+0xc2>
 800a282:	f108 0801 	add.w	r8, r8, #1
 800a286:	68e3      	ldr	r3, [r4, #12]
 800a288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a28a:	1a5b      	subs	r3, r3, r1
 800a28c:	4543      	cmp	r3, r8
 800a28e:	dcf0      	bgt.n	800a272 <_printf_float+0x442>
 800a290:	e6fa      	b.n	800a088 <_printf_float+0x258>
 800a292:	f04f 0800 	mov.w	r8, #0
 800a296:	f104 0919 	add.w	r9, r4, #25
 800a29a:	e7f4      	b.n	800a286 <_printf_float+0x456>

0800a29c <_printf_common>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	4699      	mov	r9, r3
 800a2a4:	688a      	ldr	r2, [r1, #8]
 800a2a6:	690b      	ldr	r3, [r1, #16]
 800a2a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bfb8      	it	lt
 800a2b0:	4613      	movlt	r3, r2
 800a2b2:	6033      	str	r3, [r6, #0]
 800a2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	b10a      	cbz	r2, 800a2c2 <_printf_common+0x26>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	6033      	str	r3, [r6, #0]
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	0699      	lsls	r1, r3, #26
 800a2c6:	bf42      	ittt	mi
 800a2c8:	6833      	ldrmi	r3, [r6, #0]
 800a2ca:	3302      	addmi	r3, #2
 800a2cc:	6033      	strmi	r3, [r6, #0]
 800a2ce:	6825      	ldr	r5, [r4, #0]
 800a2d0:	f015 0506 	ands.w	r5, r5, #6
 800a2d4:	d106      	bne.n	800a2e4 <_printf_common+0x48>
 800a2d6:	f104 0a19 	add.w	sl, r4, #25
 800a2da:	68e3      	ldr	r3, [r4, #12]
 800a2dc:	6832      	ldr	r2, [r6, #0]
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	42ab      	cmp	r3, r5
 800a2e2:	dc26      	bgt.n	800a332 <_printf_common+0x96>
 800a2e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2e8:	1e13      	subs	r3, r2, #0
 800a2ea:	6822      	ldr	r2, [r4, #0]
 800a2ec:	bf18      	it	ne
 800a2ee:	2301      	movne	r3, #1
 800a2f0:	0692      	lsls	r2, r2, #26
 800a2f2:	d42b      	bmi.n	800a34c <_printf_common+0xb0>
 800a2f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d01e      	beq.n	800a340 <_printf_common+0xa4>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	68e5      	ldr	r5, [r4, #12]
 800a306:	6832      	ldr	r2, [r6, #0]
 800a308:	f003 0306 	and.w	r3, r3, #6
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	bf08      	it	eq
 800a310:	1aad      	subeq	r5, r5, r2
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	bf0c      	ite	eq
 800a318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a31c:	2500      	movne	r5, #0
 800a31e:	4293      	cmp	r3, r2
 800a320:	bfc4      	itt	gt
 800a322:	1a9b      	subgt	r3, r3, r2
 800a324:	18ed      	addgt	r5, r5, r3
 800a326:	2600      	movs	r6, #0
 800a328:	341a      	adds	r4, #26
 800a32a:	42b5      	cmp	r5, r6
 800a32c:	d11a      	bne.n	800a364 <_printf_common+0xc8>
 800a32e:	2000      	movs	r0, #0
 800a330:	e008      	b.n	800a344 <_printf_common+0xa8>
 800a332:	2301      	movs	r3, #1
 800a334:	4652      	mov	r2, sl
 800a336:	4649      	mov	r1, r9
 800a338:	4638      	mov	r0, r7
 800a33a:	47c0      	blx	r8
 800a33c:	3001      	adds	r0, #1
 800a33e:	d103      	bne.n	800a348 <_printf_common+0xac>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	3501      	adds	r5, #1
 800a34a:	e7c6      	b.n	800a2da <_printf_common+0x3e>
 800a34c:	18e1      	adds	r1, r4, r3
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	2030      	movs	r0, #48	; 0x30
 800a352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a356:	4422      	add	r2, r4
 800a358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a35c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a360:	3302      	adds	r3, #2
 800a362:	e7c7      	b.n	800a2f4 <_printf_common+0x58>
 800a364:	2301      	movs	r3, #1
 800a366:	4622      	mov	r2, r4
 800a368:	4649      	mov	r1, r9
 800a36a:	4638      	mov	r0, r7
 800a36c:	47c0      	blx	r8
 800a36e:	3001      	adds	r0, #1
 800a370:	d0e6      	beq.n	800a340 <_printf_common+0xa4>
 800a372:	3601      	adds	r6, #1
 800a374:	e7d9      	b.n	800a32a <_printf_common+0x8e>
	...

0800a378 <_printf_i>:
 800a378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	7e0f      	ldrb	r7, [r1, #24]
 800a37e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a380:	2f78      	cmp	r7, #120	; 0x78
 800a382:	4691      	mov	r9, r2
 800a384:	4680      	mov	r8, r0
 800a386:	460c      	mov	r4, r1
 800a388:	469a      	mov	sl, r3
 800a38a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a38e:	d807      	bhi.n	800a3a0 <_printf_i+0x28>
 800a390:	2f62      	cmp	r7, #98	; 0x62
 800a392:	d80a      	bhi.n	800a3aa <_printf_i+0x32>
 800a394:	2f00      	cmp	r7, #0
 800a396:	f000 80d8 	beq.w	800a54a <_printf_i+0x1d2>
 800a39a:	2f58      	cmp	r7, #88	; 0x58
 800a39c:	f000 80a3 	beq.w	800a4e6 <_printf_i+0x16e>
 800a3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3a8:	e03a      	b.n	800a420 <_printf_i+0xa8>
 800a3aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3ae:	2b15      	cmp	r3, #21
 800a3b0:	d8f6      	bhi.n	800a3a0 <_printf_i+0x28>
 800a3b2:	a101      	add	r1, pc, #4	; (adr r1, 800a3b8 <_printf_i+0x40>)
 800a3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a425 	.word	0x0800a425
 800a3c0:	0800a3a1 	.word	0x0800a3a1
 800a3c4:	0800a3a1 	.word	0x0800a3a1
 800a3c8:	0800a3a1 	.word	0x0800a3a1
 800a3cc:	0800a3a1 	.word	0x0800a3a1
 800a3d0:	0800a425 	.word	0x0800a425
 800a3d4:	0800a3a1 	.word	0x0800a3a1
 800a3d8:	0800a3a1 	.word	0x0800a3a1
 800a3dc:	0800a3a1 	.word	0x0800a3a1
 800a3e0:	0800a3a1 	.word	0x0800a3a1
 800a3e4:	0800a531 	.word	0x0800a531
 800a3e8:	0800a455 	.word	0x0800a455
 800a3ec:	0800a513 	.word	0x0800a513
 800a3f0:	0800a3a1 	.word	0x0800a3a1
 800a3f4:	0800a3a1 	.word	0x0800a3a1
 800a3f8:	0800a553 	.word	0x0800a553
 800a3fc:	0800a3a1 	.word	0x0800a3a1
 800a400:	0800a455 	.word	0x0800a455
 800a404:	0800a3a1 	.word	0x0800a3a1
 800a408:	0800a3a1 	.word	0x0800a3a1
 800a40c:	0800a51b 	.word	0x0800a51b
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	1d1a      	adds	r2, r3, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	602a      	str	r2, [r5, #0]
 800a418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a41c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a420:	2301      	movs	r3, #1
 800a422:	e0a3      	b.n	800a56c <_printf_i+0x1f4>
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	6829      	ldr	r1, [r5, #0]
 800a428:	0606      	lsls	r6, r0, #24
 800a42a:	f101 0304 	add.w	r3, r1, #4
 800a42e:	d50a      	bpl.n	800a446 <_printf_i+0xce>
 800a430:	680e      	ldr	r6, [r1, #0]
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	2e00      	cmp	r6, #0
 800a436:	da03      	bge.n	800a440 <_printf_i+0xc8>
 800a438:	232d      	movs	r3, #45	; 0x2d
 800a43a:	4276      	negs	r6, r6
 800a43c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a440:	485e      	ldr	r0, [pc, #376]	; (800a5bc <_printf_i+0x244>)
 800a442:	230a      	movs	r3, #10
 800a444:	e019      	b.n	800a47a <_printf_i+0x102>
 800a446:	680e      	ldr	r6, [r1, #0]
 800a448:	602b      	str	r3, [r5, #0]
 800a44a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a44e:	bf18      	it	ne
 800a450:	b236      	sxthne	r6, r6
 800a452:	e7ef      	b.n	800a434 <_printf_i+0xbc>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	6820      	ldr	r0, [r4, #0]
 800a458:	1d19      	adds	r1, r3, #4
 800a45a:	6029      	str	r1, [r5, #0]
 800a45c:	0601      	lsls	r1, r0, #24
 800a45e:	d501      	bpl.n	800a464 <_printf_i+0xec>
 800a460:	681e      	ldr	r6, [r3, #0]
 800a462:	e002      	b.n	800a46a <_printf_i+0xf2>
 800a464:	0646      	lsls	r6, r0, #25
 800a466:	d5fb      	bpl.n	800a460 <_printf_i+0xe8>
 800a468:	881e      	ldrh	r6, [r3, #0]
 800a46a:	4854      	ldr	r0, [pc, #336]	; (800a5bc <_printf_i+0x244>)
 800a46c:	2f6f      	cmp	r7, #111	; 0x6f
 800a46e:	bf0c      	ite	eq
 800a470:	2308      	moveq	r3, #8
 800a472:	230a      	movne	r3, #10
 800a474:	2100      	movs	r1, #0
 800a476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a47a:	6865      	ldr	r5, [r4, #4]
 800a47c:	60a5      	str	r5, [r4, #8]
 800a47e:	2d00      	cmp	r5, #0
 800a480:	bfa2      	ittt	ge
 800a482:	6821      	ldrge	r1, [r4, #0]
 800a484:	f021 0104 	bicge.w	r1, r1, #4
 800a488:	6021      	strge	r1, [r4, #0]
 800a48a:	b90e      	cbnz	r6, 800a490 <_printf_i+0x118>
 800a48c:	2d00      	cmp	r5, #0
 800a48e:	d04d      	beq.n	800a52c <_printf_i+0x1b4>
 800a490:	4615      	mov	r5, r2
 800a492:	fbb6 f1f3 	udiv	r1, r6, r3
 800a496:	fb03 6711 	mls	r7, r3, r1, r6
 800a49a:	5dc7      	ldrb	r7, [r0, r7]
 800a49c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4a0:	4637      	mov	r7, r6
 800a4a2:	42bb      	cmp	r3, r7
 800a4a4:	460e      	mov	r6, r1
 800a4a6:	d9f4      	bls.n	800a492 <_printf_i+0x11a>
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d10b      	bne.n	800a4c4 <_printf_i+0x14c>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	07de      	lsls	r6, r3, #31
 800a4b0:	d508      	bpl.n	800a4c4 <_printf_i+0x14c>
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	6861      	ldr	r1, [r4, #4]
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	bfde      	ittt	le
 800a4ba:	2330      	movle	r3, #48	; 0x30
 800a4bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4c4:	1b52      	subs	r2, r2, r5
 800a4c6:	6122      	str	r2, [r4, #16]
 800a4c8:	f8cd a000 	str.w	sl, [sp]
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	aa03      	add	r2, sp, #12
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	f7ff fee2 	bl	800a29c <_printf_common>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d14c      	bne.n	800a576 <_printf_i+0x1fe>
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	b004      	add	sp, #16
 800a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e6:	4835      	ldr	r0, [pc, #212]	; (800a5bc <_printf_i+0x244>)
 800a4e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4ec:	6829      	ldr	r1, [r5, #0]
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4f4:	6029      	str	r1, [r5, #0]
 800a4f6:	061d      	lsls	r5, r3, #24
 800a4f8:	d514      	bpl.n	800a524 <_printf_i+0x1ac>
 800a4fa:	07df      	lsls	r7, r3, #31
 800a4fc:	bf44      	itt	mi
 800a4fe:	f043 0320 	orrmi.w	r3, r3, #32
 800a502:	6023      	strmi	r3, [r4, #0]
 800a504:	b91e      	cbnz	r6, 800a50e <_printf_i+0x196>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	f023 0320 	bic.w	r3, r3, #32
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	2310      	movs	r3, #16
 800a510:	e7b0      	b.n	800a474 <_printf_i+0xfc>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	f043 0320 	orr.w	r3, r3, #32
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	2378      	movs	r3, #120	; 0x78
 800a51c:	4828      	ldr	r0, [pc, #160]	; (800a5c0 <_printf_i+0x248>)
 800a51e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a522:	e7e3      	b.n	800a4ec <_printf_i+0x174>
 800a524:	0659      	lsls	r1, r3, #25
 800a526:	bf48      	it	mi
 800a528:	b2b6      	uxthmi	r6, r6
 800a52a:	e7e6      	b.n	800a4fa <_printf_i+0x182>
 800a52c:	4615      	mov	r5, r2
 800a52e:	e7bb      	b.n	800a4a8 <_printf_i+0x130>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	6826      	ldr	r6, [r4, #0]
 800a534:	6961      	ldr	r1, [r4, #20]
 800a536:	1d18      	adds	r0, r3, #4
 800a538:	6028      	str	r0, [r5, #0]
 800a53a:	0635      	lsls	r5, r6, #24
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	d501      	bpl.n	800a544 <_printf_i+0x1cc>
 800a540:	6019      	str	r1, [r3, #0]
 800a542:	e002      	b.n	800a54a <_printf_i+0x1d2>
 800a544:	0670      	lsls	r0, r6, #25
 800a546:	d5fb      	bpl.n	800a540 <_printf_i+0x1c8>
 800a548:	8019      	strh	r1, [r3, #0]
 800a54a:	2300      	movs	r3, #0
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	4615      	mov	r5, r2
 800a550:	e7ba      	b.n	800a4c8 <_printf_i+0x150>
 800a552:	682b      	ldr	r3, [r5, #0]
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	602a      	str	r2, [r5, #0]
 800a558:	681d      	ldr	r5, [r3, #0]
 800a55a:	6862      	ldr	r2, [r4, #4]
 800a55c:	2100      	movs	r1, #0
 800a55e:	4628      	mov	r0, r5
 800a560:	f7f5 fe5e 	bl	8000220 <memchr>
 800a564:	b108      	cbz	r0, 800a56a <_printf_i+0x1f2>
 800a566:	1b40      	subs	r0, r0, r5
 800a568:	6060      	str	r0, [r4, #4]
 800a56a:	6863      	ldr	r3, [r4, #4]
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	2300      	movs	r3, #0
 800a570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a574:	e7a8      	b.n	800a4c8 <_printf_i+0x150>
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	462a      	mov	r2, r5
 800a57a:	4649      	mov	r1, r9
 800a57c:	4640      	mov	r0, r8
 800a57e:	47d0      	blx	sl
 800a580:	3001      	adds	r0, #1
 800a582:	d0ab      	beq.n	800a4dc <_printf_i+0x164>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	079b      	lsls	r3, r3, #30
 800a588:	d413      	bmi.n	800a5b2 <_printf_i+0x23a>
 800a58a:	68e0      	ldr	r0, [r4, #12]
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	4298      	cmp	r0, r3
 800a590:	bfb8      	it	lt
 800a592:	4618      	movlt	r0, r3
 800a594:	e7a4      	b.n	800a4e0 <_printf_i+0x168>
 800a596:	2301      	movs	r3, #1
 800a598:	4632      	mov	r2, r6
 800a59a:	4649      	mov	r1, r9
 800a59c:	4640      	mov	r0, r8
 800a59e:	47d0      	blx	sl
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d09b      	beq.n	800a4dc <_printf_i+0x164>
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	68e3      	ldr	r3, [r4, #12]
 800a5a8:	9903      	ldr	r1, [sp, #12]
 800a5aa:	1a5b      	subs	r3, r3, r1
 800a5ac:	42ab      	cmp	r3, r5
 800a5ae:	dcf2      	bgt.n	800a596 <_printf_i+0x21e>
 800a5b0:	e7eb      	b.n	800a58a <_printf_i+0x212>
 800a5b2:	2500      	movs	r5, #0
 800a5b4:	f104 0619 	add.w	r6, r4, #25
 800a5b8:	e7f5      	b.n	800a5a6 <_printf_i+0x22e>
 800a5ba:	bf00      	nop
 800a5bc:	0802b3d6 	.word	0x0802b3d6
 800a5c0:	0802b3e7 	.word	0x0802b3e7

0800a5c4 <_scanf_float>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	b087      	sub	sp, #28
 800a5ca:	4617      	mov	r7, r2
 800a5cc:	9303      	str	r3, [sp, #12]
 800a5ce:	688b      	ldr	r3, [r1, #8]
 800a5d0:	1e5a      	subs	r2, r3, #1
 800a5d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a5d6:	bf83      	ittte	hi
 800a5d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a5dc:	195b      	addhi	r3, r3, r5
 800a5de:	9302      	strhi	r3, [sp, #8]
 800a5e0:	2300      	movls	r3, #0
 800a5e2:	bf86      	itte	hi
 800a5e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a5e8:	608b      	strhi	r3, [r1, #8]
 800a5ea:	9302      	strls	r3, [sp, #8]
 800a5ec:	680b      	ldr	r3, [r1, #0]
 800a5ee:	468b      	mov	fp, r1
 800a5f0:	2500      	movs	r5, #0
 800a5f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a5f6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a5fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5fe:	4680      	mov	r8, r0
 800a600:	460c      	mov	r4, r1
 800a602:	465e      	mov	r6, fp
 800a604:	46aa      	mov	sl, r5
 800a606:	46a9      	mov	r9, r5
 800a608:	9501      	str	r5, [sp, #4]
 800a60a:	68a2      	ldr	r2, [r4, #8]
 800a60c:	b152      	cbz	r2, 800a624 <_scanf_float+0x60>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b4e      	cmp	r3, #78	; 0x4e
 800a614:	d864      	bhi.n	800a6e0 <_scanf_float+0x11c>
 800a616:	2b40      	cmp	r3, #64	; 0x40
 800a618:	d83c      	bhi.n	800a694 <_scanf_float+0xd0>
 800a61a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a61e:	b2c8      	uxtb	r0, r1
 800a620:	280e      	cmp	r0, #14
 800a622:	d93a      	bls.n	800a69a <_scanf_float+0xd6>
 800a624:	f1b9 0f00 	cmp.w	r9, #0
 800a628:	d003      	beq.n	800a632 <_scanf_float+0x6e>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a636:	f1ba 0f01 	cmp.w	sl, #1
 800a63a:	f200 8113 	bhi.w	800a864 <_scanf_float+0x2a0>
 800a63e:	455e      	cmp	r6, fp
 800a640:	f200 8105 	bhi.w	800a84e <_scanf_float+0x28a>
 800a644:	2501      	movs	r5, #1
 800a646:	4628      	mov	r0, r5
 800a648:	b007      	add	sp, #28
 800a64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a652:	2a0d      	cmp	r2, #13
 800a654:	d8e6      	bhi.n	800a624 <_scanf_float+0x60>
 800a656:	a101      	add	r1, pc, #4	; (adr r1, 800a65c <_scanf_float+0x98>)
 800a658:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a65c:	0800a79b 	.word	0x0800a79b
 800a660:	0800a625 	.word	0x0800a625
 800a664:	0800a625 	.word	0x0800a625
 800a668:	0800a625 	.word	0x0800a625
 800a66c:	0800a7fb 	.word	0x0800a7fb
 800a670:	0800a7d3 	.word	0x0800a7d3
 800a674:	0800a625 	.word	0x0800a625
 800a678:	0800a625 	.word	0x0800a625
 800a67c:	0800a7a9 	.word	0x0800a7a9
 800a680:	0800a625 	.word	0x0800a625
 800a684:	0800a625 	.word	0x0800a625
 800a688:	0800a625 	.word	0x0800a625
 800a68c:	0800a625 	.word	0x0800a625
 800a690:	0800a761 	.word	0x0800a761
 800a694:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a698:	e7db      	b.n	800a652 <_scanf_float+0x8e>
 800a69a:	290e      	cmp	r1, #14
 800a69c:	d8c2      	bhi.n	800a624 <_scanf_float+0x60>
 800a69e:	a001      	add	r0, pc, #4	; (adr r0, 800a6a4 <_scanf_float+0xe0>)
 800a6a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a6a4:	0800a753 	.word	0x0800a753
 800a6a8:	0800a625 	.word	0x0800a625
 800a6ac:	0800a753 	.word	0x0800a753
 800a6b0:	0800a7e7 	.word	0x0800a7e7
 800a6b4:	0800a625 	.word	0x0800a625
 800a6b8:	0800a701 	.word	0x0800a701
 800a6bc:	0800a73d 	.word	0x0800a73d
 800a6c0:	0800a73d 	.word	0x0800a73d
 800a6c4:	0800a73d 	.word	0x0800a73d
 800a6c8:	0800a73d 	.word	0x0800a73d
 800a6cc:	0800a73d 	.word	0x0800a73d
 800a6d0:	0800a73d 	.word	0x0800a73d
 800a6d4:	0800a73d 	.word	0x0800a73d
 800a6d8:	0800a73d 	.word	0x0800a73d
 800a6dc:	0800a73d 	.word	0x0800a73d
 800a6e0:	2b6e      	cmp	r3, #110	; 0x6e
 800a6e2:	d809      	bhi.n	800a6f8 <_scanf_float+0x134>
 800a6e4:	2b60      	cmp	r3, #96	; 0x60
 800a6e6:	d8b2      	bhi.n	800a64e <_scanf_float+0x8a>
 800a6e8:	2b54      	cmp	r3, #84	; 0x54
 800a6ea:	d077      	beq.n	800a7dc <_scanf_float+0x218>
 800a6ec:	2b59      	cmp	r3, #89	; 0x59
 800a6ee:	d199      	bne.n	800a624 <_scanf_float+0x60>
 800a6f0:	2d07      	cmp	r5, #7
 800a6f2:	d197      	bne.n	800a624 <_scanf_float+0x60>
 800a6f4:	2508      	movs	r5, #8
 800a6f6:	e029      	b.n	800a74c <_scanf_float+0x188>
 800a6f8:	2b74      	cmp	r3, #116	; 0x74
 800a6fa:	d06f      	beq.n	800a7dc <_scanf_float+0x218>
 800a6fc:	2b79      	cmp	r3, #121	; 0x79
 800a6fe:	e7f6      	b.n	800a6ee <_scanf_float+0x12a>
 800a700:	6821      	ldr	r1, [r4, #0]
 800a702:	05c8      	lsls	r0, r1, #23
 800a704:	d51a      	bpl.n	800a73c <_scanf_float+0x178>
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a70c:	6021      	str	r1, [r4, #0]
 800a70e:	f109 0901 	add.w	r9, r9, #1
 800a712:	b11b      	cbz	r3, 800a71c <_scanf_float+0x158>
 800a714:	3b01      	subs	r3, #1
 800a716:	3201      	adds	r2, #1
 800a718:	9302      	str	r3, [sp, #8]
 800a71a:	60a2      	str	r2, [r4, #8]
 800a71c:	68a3      	ldr	r3, [r4, #8]
 800a71e:	3b01      	subs	r3, #1
 800a720:	60a3      	str	r3, [r4, #8]
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	3301      	adds	r3, #1
 800a726:	6123      	str	r3, [r4, #16]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	607b      	str	r3, [r7, #4]
 800a730:	f340 8084 	ble.w	800a83c <_scanf_float+0x278>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	603b      	str	r3, [r7, #0]
 800a73a:	e766      	b.n	800a60a <_scanf_float+0x46>
 800a73c:	eb1a 0f05 	cmn.w	sl, r5
 800a740:	f47f af70 	bne.w	800a624 <_scanf_float+0x60>
 800a744:	6822      	ldr	r2, [r4, #0]
 800a746:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a74a:	6022      	str	r2, [r4, #0]
 800a74c:	f806 3b01 	strb.w	r3, [r6], #1
 800a750:	e7e4      	b.n	800a71c <_scanf_float+0x158>
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	0610      	lsls	r0, r2, #24
 800a756:	f57f af65 	bpl.w	800a624 <_scanf_float+0x60>
 800a75a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a75e:	e7f4      	b.n	800a74a <_scanf_float+0x186>
 800a760:	f1ba 0f00 	cmp.w	sl, #0
 800a764:	d10e      	bne.n	800a784 <_scanf_float+0x1c0>
 800a766:	f1b9 0f00 	cmp.w	r9, #0
 800a76a:	d10e      	bne.n	800a78a <_scanf_float+0x1c6>
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a772:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a776:	d108      	bne.n	800a78a <_scanf_float+0x1c6>
 800a778:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a77c:	6022      	str	r2, [r4, #0]
 800a77e:	f04f 0a01 	mov.w	sl, #1
 800a782:	e7e3      	b.n	800a74c <_scanf_float+0x188>
 800a784:	f1ba 0f02 	cmp.w	sl, #2
 800a788:	d055      	beq.n	800a836 <_scanf_float+0x272>
 800a78a:	2d01      	cmp	r5, #1
 800a78c:	d002      	beq.n	800a794 <_scanf_float+0x1d0>
 800a78e:	2d04      	cmp	r5, #4
 800a790:	f47f af48 	bne.w	800a624 <_scanf_float+0x60>
 800a794:	3501      	adds	r5, #1
 800a796:	b2ed      	uxtb	r5, r5
 800a798:	e7d8      	b.n	800a74c <_scanf_float+0x188>
 800a79a:	f1ba 0f01 	cmp.w	sl, #1
 800a79e:	f47f af41 	bne.w	800a624 <_scanf_float+0x60>
 800a7a2:	f04f 0a02 	mov.w	sl, #2
 800a7a6:	e7d1      	b.n	800a74c <_scanf_float+0x188>
 800a7a8:	b97d      	cbnz	r5, 800a7ca <_scanf_float+0x206>
 800a7aa:	f1b9 0f00 	cmp.w	r9, #0
 800a7ae:	f47f af3c 	bne.w	800a62a <_scanf_float+0x66>
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7bc:	f47f af39 	bne.w	800a632 <_scanf_float+0x6e>
 800a7c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7c4:	6022      	str	r2, [r4, #0]
 800a7c6:	2501      	movs	r5, #1
 800a7c8:	e7c0      	b.n	800a74c <_scanf_float+0x188>
 800a7ca:	2d03      	cmp	r5, #3
 800a7cc:	d0e2      	beq.n	800a794 <_scanf_float+0x1d0>
 800a7ce:	2d05      	cmp	r5, #5
 800a7d0:	e7de      	b.n	800a790 <_scanf_float+0x1cc>
 800a7d2:	2d02      	cmp	r5, #2
 800a7d4:	f47f af26 	bne.w	800a624 <_scanf_float+0x60>
 800a7d8:	2503      	movs	r5, #3
 800a7da:	e7b7      	b.n	800a74c <_scanf_float+0x188>
 800a7dc:	2d06      	cmp	r5, #6
 800a7de:	f47f af21 	bne.w	800a624 <_scanf_float+0x60>
 800a7e2:	2507      	movs	r5, #7
 800a7e4:	e7b2      	b.n	800a74c <_scanf_float+0x188>
 800a7e6:	6822      	ldr	r2, [r4, #0]
 800a7e8:	0591      	lsls	r1, r2, #22
 800a7ea:	f57f af1b 	bpl.w	800a624 <_scanf_float+0x60>
 800a7ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a7f2:	6022      	str	r2, [r4, #0]
 800a7f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7f8:	e7a8      	b.n	800a74c <_scanf_float+0x188>
 800a7fa:	6822      	ldr	r2, [r4, #0]
 800a7fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a800:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a804:	d006      	beq.n	800a814 <_scanf_float+0x250>
 800a806:	0550      	lsls	r0, r2, #21
 800a808:	f57f af0c 	bpl.w	800a624 <_scanf_float+0x60>
 800a80c:	f1b9 0f00 	cmp.w	r9, #0
 800a810:	f43f af0f 	beq.w	800a632 <_scanf_float+0x6e>
 800a814:	0591      	lsls	r1, r2, #22
 800a816:	bf58      	it	pl
 800a818:	9901      	ldrpl	r1, [sp, #4]
 800a81a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a81e:	bf58      	it	pl
 800a820:	eba9 0101 	subpl.w	r1, r9, r1
 800a824:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a828:	bf58      	it	pl
 800a82a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a82e:	6022      	str	r2, [r4, #0]
 800a830:	f04f 0900 	mov.w	r9, #0
 800a834:	e78a      	b.n	800a74c <_scanf_float+0x188>
 800a836:	f04f 0a03 	mov.w	sl, #3
 800a83a:	e787      	b.n	800a74c <_scanf_float+0x188>
 800a83c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a840:	4639      	mov	r1, r7
 800a842:	4640      	mov	r0, r8
 800a844:	4798      	blx	r3
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f aedf 	beq.w	800a60a <_scanf_float+0x46>
 800a84c:	e6ea      	b.n	800a624 <_scanf_float+0x60>
 800a84e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a856:	463a      	mov	r2, r7
 800a858:	4640      	mov	r0, r8
 800a85a:	4798      	blx	r3
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	3b01      	subs	r3, #1
 800a860:	6123      	str	r3, [r4, #16]
 800a862:	e6ec      	b.n	800a63e <_scanf_float+0x7a>
 800a864:	1e6b      	subs	r3, r5, #1
 800a866:	2b06      	cmp	r3, #6
 800a868:	d825      	bhi.n	800a8b6 <_scanf_float+0x2f2>
 800a86a:	2d02      	cmp	r5, #2
 800a86c:	d836      	bhi.n	800a8dc <_scanf_float+0x318>
 800a86e:	455e      	cmp	r6, fp
 800a870:	f67f aee8 	bls.w	800a644 <_scanf_float+0x80>
 800a874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a878:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a87c:	463a      	mov	r2, r7
 800a87e:	4640      	mov	r0, r8
 800a880:	4798      	blx	r3
 800a882:	6923      	ldr	r3, [r4, #16]
 800a884:	3b01      	subs	r3, #1
 800a886:	6123      	str	r3, [r4, #16]
 800a888:	e7f1      	b.n	800a86e <_scanf_float+0x2aa>
 800a88a:	9802      	ldr	r0, [sp, #8]
 800a88c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a890:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a894:	9002      	str	r0, [sp, #8]
 800a896:	463a      	mov	r2, r7
 800a898:	4640      	mov	r0, r8
 800a89a:	4798      	blx	r3
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	6123      	str	r3, [r4, #16]
 800a8a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8a6:	fa5f fa8a 	uxtb.w	sl, sl
 800a8aa:	f1ba 0f02 	cmp.w	sl, #2
 800a8ae:	d1ec      	bne.n	800a88a <_scanf_float+0x2c6>
 800a8b0:	3d03      	subs	r5, #3
 800a8b2:	b2ed      	uxtb	r5, r5
 800a8b4:	1b76      	subs	r6, r6, r5
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	05da      	lsls	r2, r3, #23
 800a8ba:	d52f      	bpl.n	800a91c <_scanf_float+0x358>
 800a8bc:	055b      	lsls	r3, r3, #21
 800a8be:	d510      	bpl.n	800a8e2 <_scanf_float+0x31e>
 800a8c0:	455e      	cmp	r6, fp
 800a8c2:	f67f aebf 	bls.w	800a644 <_scanf_float+0x80>
 800a8c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8ce:	463a      	mov	r2, r7
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	4798      	blx	r3
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	e7f1      	b.n	800a8c0 <_scanf_float+0x2fc>
 800a8dc:	46aa      	mov	sl, r5
 800a8de:	9602      	str	r6, [sp, #8]
 800a8e0:	e7df      	b.n	800a8a2 <_scanf_float+0x2de>
 800a8e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	2965      	cmp	r1, #101	; 0x65
 800a8ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800a8f2:	6123      	str	r3, [r4, #16]
 800a8f4:	d00c      	beq.n	800a910 <_scanf_float+0x34c>
 800a8f6:	2945      	cmp	r1, #69	; 0x45
 800a8f8:	d00a      	beq.n	800a910 <_scanf_float+0x34c>
 800a8fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8fe:	463a      	mov	r2, r7
 800a900:	4640      	mov	r0, r8
 800a902:	4798      	blx	r3
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a90a:	3b01      	subs	r3, #1
 800a90c:	1eb5      	subs	r5, r6, #2
 800a90e:	6123      	str	r3, [r4, #16]
 800a910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a914:	463a      	mov	r2, r7
 800a916:	4640      	mov	r0, r8
 800a918:	4798      	blx	r3
 800a91a:	462e      	mov	r6, r5
 800a91c:	6825      	ldr	r5, [r4, #0]
 800a91e:	f015 0510 	ands.w	r5, r5, #16
 800a922:	d159      	bne.n	800a9d8 <_scanf_float+0x414>
 800a924:	7035      	strb	r5, [r6, #0]
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a92c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a930:	d11b      	bne.n	800a96a <_scanf_float+0x3a6>
 800a932:	9b01      	ldr	r3, [sp, #4]
 800a934:	454b      	cmp	r3, r9
 800a936:	eba3 0209 	sub.w	r2, r3, r9
 800a93a:	d123      	bne.n	800a984 <_scanf_float+0x3c0>
 800a93c:	2200      	movs	r2, #0
 800a93e:	4659      	mov	r1, fp
 800a940:	4640      	mov	r0, r8
 800a942:	f000 ff57 	bl	800b7f4 <_strtod_r>
 800a946:	6822      	ldr	r2, [r4, #0]
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	f012 0f02 	tst.w	r2, #2
 800a94e:	ec57 6b10 	vmov	r6, r7, d0
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	d021      	beq.n	800a99a <_scanf_float+0x3d6>
 800a956:	9903      	ldr	r1, [sp, #12]
 800a958:	1d1a      	adds	r2, r3, #4
 800a95a:	600a      	str	r2, [r1, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	e9c3 6700 	strd	r6, r7, [r3]
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	60e3      	str	r3, [r4, #12]
 800a968:	e66d      	b.n	800a646 <_scanf_float+0x82>
 800a96a:	9b04      	ldr	r3, [sp, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0e5      	beq.n	800a93c <_scanf_float+0x378>
 800a970:	9905      	ldr	r1, [sp, #20]
 800a972:	230a      	movs	r3, #10
 800a974:	462a      	mov	r2, r5
 800a976:	3101      	adds	r1, #1
 800a978:	4640      	mov	r0, r8
 800a97a:	f000 ffc3 	bl	800b904 <_strtol_r>
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	9e05      	ldr	r6, [sp, #20]
 800a982:	1ac2      	subs	r2, r0, r3
 800a984:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a988:	429e      	cmp	r6, r3
 800a98a:	bf28      	it	cs
 800a98c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a990:	4912      	ldr	r1, [pc, #72]	; (800a9dc <_scanf_float+0x418>)
 800a992:	4630      	mov	r0, r6
 800a994:	f000 f8a6 	bl	800aae4 <siprintf>
 800a998:	e7d0      	b.n	800a93c <_scanf_float+0x378>
 800a99a:	9903      	ldr	r1, [sp, #12]
 800a99c:	f012 0f04 	tst.w	r2, #4
 800a9a0:	f103 0204 	add.w	r2, r3, #4
 800a9a4:	600a      	str	r2, [r1, #0]
 800a9a6:	d1d9      	bne.n	800a95c <_scanf_float+0x398>
 800a9a8:	f8d3 8000 	ldr.w	r8, [r3]
 800a9ac:	ee10 2a10 	vmov	r2, s0
 800a9b0:	ee10 0a10 	vmov	r0, s0
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	f7f6 f8d8 	bl	8000b6c <__aeabi_dcmpun>
 800a9bc:	b128      	cbz	r0, 800a9ca <_scanf_float+0x406>
 800a9be:	4808      	ldr	r0, [pc, #32]	; (800a9e0 <_scanf_float+0x41c>)
 800a9c0:	f000 f88a 	bl	800aad8 <nanf>
 800a9c4:	ed88 0a00 	vstr	s0, [r8]
 800a9c8:	e7cb      	b.n	800a962 <_scanf_float+0x39e>
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f6 f92b 	bl	8000c28 <__aeabi_d2f>
 800a9d2:	f8c8 0000 	str.w	r0, [r8]
 800a9d6:	e7c4      	b.n	800a962 <_scanf_float+0x39e>
 800a9d8:	2500      	movs	r5, #0
 800a9da:	e634      	b.n	800a646 <_scanf_float+0x82>
 800a9dc:	0802b3f8 	.word	0x0802b3f8
 800a9e0:	0802b800 	.word	0x0802b800

0800a9e4 <cleanup_glue>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	6809      	ldr	r1, [r1, #0]
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	b109      	cbz	r1, 800a9f2 <cleanup_glue+0xe>
 800a9ee:	f7ff fff9 	bl	800a9e4 <cleanup_glue>
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9fa:	f002 bf69 	b.w	800d8d0 <_free_r>
	...

0800aa00 <_reclaim_reent>:
 800aa00:	4b2c      	ldr	r3, [pc, #176]	; (800aab4 <_reclaim_reent+0xb4>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4283      	cmp	r3, r0
 800aa06:	b570      	push	{r4, r5, r6, lr}
 800aa08:	4604      	mov	r4, r0
 800aa0a:	d051      	beq.n	800aab0 <_reclaim_reent+0xb0>
 800aa0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa0e:	b143      	cbz	r3, 800aa22 <_reclaim_reent+0x22>
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d14a      	bne.n	800aaac <_reclaim_reent+0xac>
 800aa16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa18:	6819      	ldr	r1, [r3, #0]
 800aa1a:	b111      	cbz	r1, 800aa22 <_reclaim_reent+0x22>
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f002 ff57 	bl	800d8d0 <_free_r>
 800aa22:	6961      	ldr	r1, [r4, #20]
 800aa24:	b111      	cbz	r1, 800aa2c <_reclaim_reent+0x2c>
 800aa26:	4620      	mov	r0, r4
 800aa28:	f002 ff52 	bl	800d8d0 <_free_r>
 800aa2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa2e:	b111      	cbz	r1, 800aa36 <_reclaim_reent+0x36>
 800aa30:	4620      	mov	r0, r4
 800aa32:	f002 ff4d 	bl	800d8d0 <_free_r>
 800aa36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa38:	b111      	cbz	r1, 800aa40 <_reclaim_reent+0x40>
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f002 ff48 	bl	800d8d0 <_free_r>
 800aa40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aa42:	b111      	cbz	r1, 800aa4a <_reclaim_reent+0x4a>
 800aa44:	4620      	mov	r0, r4
 800aa46:	f002 ff43 	bl	800d8d0 <_free_r>
 800aa4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aa4c:	b111      	cbz	r1, 800aa54 <_reclaim_reent+0x54>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f002 ff3e 	bl	800d8d0 <_free_r>
 800aa54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aa56:	b111      	cbz	r1, 800aa5e <_reclaim_reent+0x5e>
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f002 ff39 	bl	800d8d0 <_free_r>
 800aa5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aa60:	b111      	cbz	r1, 800aa68 <_reclaim_reent+0x68>
 800aa62:	4620      	mov	r0, r4
 800aa64:	f002 ff34 	bl	800d8d0 <_free_r>
 800aa68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa6a:	b111      	cbz	r1, 800aa72 <_reclaim_reent+0x72>
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f002 ff2f 	bl	800d8d0 <_free_r>
 800aa72:	69a3      	ldr	r3, [r4, #24]
 800aa74:	b1e3      	cbz	r3, 800aab0 <_reclaim_reent+0xb0>
 800aa76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4798      	blx	r3
 800aa7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa7e:	b1b9      	cbz	r1, 800aab0 <_reclaim_reent+0xb0>
 800aa80:	4620      	mov	r0, r4
 800aa82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa86:	f7ff bfad 	b.w	800a9e4 <cleanup_glue>
 800aa8a:	5949      	ldr	r1, [r1, r5]
 800aa8c:	b941      	cbnz	r1, 800aaa0 <_reclaim_reent+0xa0>
 800aa8e:	3504      	adds	r5, #4
 800aa90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa92:	2d80      	cmp	r5, #128	; 0x80
 800aa94:	68d9      	ldr	r1, [r3, #12]
 800aa96:	d1f8      	bne.n	800aa8a <_reclaim_reent+0x8a>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f002 ff19 	bl	800d8d0 <_free_r>
 800aa9e:	e7ba      	b.n	800aa16 <_reclaim_reent+0x16>
 800aaa0:	680e      	ldr	r6, [r1, #0]
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f002 ff14 	bl	800d8d0 <_free_r>
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	e7ef      	b.n	800aa8c <_reclaim_reent+0x8c>
 800aaac:	2500      	movs	r5, #0
 800aaae:	e7ef      	b.n	800aa90 <_reclaim_reent+0x90>
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
 800aab2:	bf00      	nop
 800aab4:	20000010 	.word	0x20000010

0800aab8 <_sbrk_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d06      	ldr	r5, [pc, #24]	; (800aad4 <_sbrk_r+0x1c>)
 800aabc:	2300      	movs	r3, #0
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	f7f7 fdee 	bl	80026a4 <_sbrk>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_sbrk_r+0x1a>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_sbrk_r+0x1a>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	200139bc 	.word	0x200139bc

0800aad8 <nanf>:
 800aad8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aae0 <nanf+0x8>
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	7fc00000 	.word	0x7fc00000

0800aae4 <siprintf>:
 800aae4:	b40e      	push	{r1, r2, r3}
 800aae6:	b500      	push	{lr}
 800aae8:	b09c      	sub	sp, #112	; 0x70
 800aaea:	ab1d      	add	r3, sp, #116	; 0x74
 800aaec:	9002      	str	r0, [sp, #8]
 800aaee:	9006      	str	r0, [sp, #24]
 800aaf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aaf4:	4809      	ldr	r0, [pc, #36]	; (800ab1c <siprintf+0x38>)
 800aaf6:	9107      	str	r1, [sp, #28]
 800aaf8:	9104      	str	r1, [sp, #16]
 800aafa:	4909      	ldr	r1, [pc, #36]	; (800ab20 <siprintf+0x3c>)
 800aafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab00:	9105      	str	r1, [sp, #20]
 800ab02:	6800      	ldr	r0, [r0, #0]
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	a902      	add	r1, sp, #8
 800ab08:	f002 ff8a 	bl	800da20 <_svfiprintf_r>
 800ab0c:	9b02      	ldr	r3, [sp, #8]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
 800ab12:	b01c      	add	sp, #112	; 0x70
 800ab14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab18:	b003      	add	sp, #12
 800ab1a:	4770      	bx	lr
 800ab1c:	20000010 	.word	0x20000010
 800ab20:	ffff0208 	.word	0xffff0208

0800ab24 <__sread>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	460c      	mov	r4, r1
 800ab28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2c:	f003 f878 	bl	800dc20 <_read_r>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	bfab      	itete	ge
 800ab34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab36:	89a3      	ldrhlt	r3, [r4, #12]
 800ab38:	181b      	addge	r3, r3, r0
 800ab3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab3e:	bfac      	ite	ge
 800ab40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab42:	81a3      	strhlt	r3, [r4, #12]
 800ab44:	bd10      	pop	{r4, pc}

0800ab46 <__swrite>:
 800ab46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4a:	461f      	mov	r7, r3
 800ab4c:	898b      	ldrh	r3, [r1, #12]
 800ab4e:	05db      	lsls	r3, r3, #23
 800ab50:	4605      	mov	r5, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	4616      	mov	r6, r2
 800ab56:	d505      	bpl.n	800ab64 <__swrite+0x1e>
 800ab58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f002 f9a6 	bl	800ceb0 <_lseek_r>
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	4632      	mov	r2, r6
 800ab72:	463b      	mov	r3, r7
 800ab74:	4628      	mov	r0, r5
 800ab76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7a:	f000 bec5 	b.w	800b908 <_write_r>

0800ab7e <__sseek>:
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	460c      	mov	r4, r1
 800ab82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab86:	f002 f993 	bl	800ceb0 <_lseek_r>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	bf15      	itete	ne
 800ab90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab9a:	81a3      	strheq	r3, [r4, #12]
 800ab9c:	bf18      	it	ne
 800ab9e:	81a3      	strhne	r3, [r4, #12]
 800aba0:	bd10      	pop	{r4, pc}

0800aba2 <__sclose>:
 800aba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba6:	f000 bec1 	b.w	800b92c <_close_r>

0800abaa <sulp>:
 800abaa:	b570      	push	{r4, r5, r6, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	ec45 4b10 	vmov	d0, r4, r5
 800abb4:	4616      	mov	r6, r2
 800abb6:	f002 fd25 	bl	800d604 <__ulp>
 800abba:	ec51 0b10 	vmov	r0, r1, d0
 800abbe:	b17e      	cbz	r6, 800abe0 <sulp+0x36>
 800abc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800abc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dd09      	ble.n	800abe0 <sulp+0x36>
 800abcc:	051b      	lsls	r3, r3, #20
 800abce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800abd2:	2400      	movs	r4, #0
 800abd4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800abd8:	4622      	mov	r2, r4
 800abda:	462b      	mov	r3, r5
 800abdc:	f7f5 fd2c 	bl	8000638 <__aeabi_dmul>
 800abe0:	bd70      	pop	{r4, r5, r6, pc}
 800abe2:	0000      	movs	r0, r0
 800abe4:	0000      	movs	r0, r0
	...

0800abe8 <_strtod_l>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	ed2d 8b02 	vpush	{d8}
 800abf0:	b09d      	sub	sp, #116	; 0x74
 800abf2:	461f      	mov	r7, r3
 800abf4:	2300      	movs	r3, #0
 800abf6:	9318      	str	r3, [sp, #96]	; 0x60
 800abf8:	4ba2      	ldr	r3, [pc, #648]	; (800ae84 <_strtod_l+0x29c>)
 800abfa:	9213      	str	r2, [sp, #76]	; 0x4c
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	9305      	str	r3, [sp, #20]
 800ac00:	4604      	mov	r4, r0
 800ac02:	4618      	mov	r0, r3
 800ac04:	4688      	mov	r8, r1
 800ac06:	f7f5 fb03 	bl	8000210 <strlen>
 800ac0a:	f04f 0a00 	mov.w	sl, #0
 800ac0e:	4605      	mov	r5, r0
 800ac10:	f04f 0b00 	mov.w	fp, #0
 800ac14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac1a:	781a      	ldrb	r2, [r3, #0]
 800ac1c:	2a2b      	cmp	r2, #43	; 0x2b
 800ac1e:	d04e      	beq.n	800acbe <_strtod_l+0xd6>
 800ac20:	d83b      	bhi.n	800ac9a <_strtod_l+0xb2>
 800ac22:	2a0d      	cmp	r2, #13
 800ac24:	d834      	bhi.n	800ac90 <_strtod_l+0xa8>
 800ac26:	2a08      	cmp	r2, #8
 800ac28:	d834      	bhi.n	800ac94 <_strtod_l+0xac>
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	d03e      	beq.n	800acac <_strtod_l+0xc4>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	930a      	str	r3, [sp, #40]	; 0x28
 800ac32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ac34:	7833      	ldrb	r3, [r6, #0]
 800ac36:	2b30      	cmp	r3, #48	; 0x30
 800ac38:	f040 80b0 	bne.w	800ad9c <_strtod_l+0x1b4>
 800ac3c:	7873      	ldrb	r3, [r6, #1]
 800ac3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac42:	2b58      	cmp	r3, #88	; 0x58
 800ac44:	d168      	bne.n	800ad18 <_strtod_l+0x130>
 800ac46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	ab18      	add	r3, sp, #96	; 0x60
 800ac4c:	9702      	str	r7, [sp, #8]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4a8d      	ldr	r2, [pc, #564]	; (800ae88 <_strtod_l+0x2a0>)
 800ac52:	ab19      	add	r3, sp, #100	; 0x64
 800ac54:	a917      	add	r1, sp, #92	; 0x5c
 800ac56:	4620      	mov	r0, r4
 800ac58:	f001 fe1e 	bl	800c898 <__gethex>
 800ac5c:	f010 0707 	ands.w	r7, r0, #7
 800ac60:	4605      	mov	r5, r0
 800ac62:	d005      	beq.n	800ac70 <_strtod_l+0x88>
 800ac64:	2f06      	cmp	r7, #6
 800ac66:	d12c      	bne.n	800acc2 <_strtod_l+0xda>
 800ac68:	3601      	adds	r6, #1
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ac6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 8590 	bne.w	800b798 <_strtod_l+0xbb0>
 800ac78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac7a:	b1eb      	cbz	r3, 800acb8 <_strtod_l+0xd0>
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ac82:	ec43 2b10 	vmov	d0, r2, r3
 800ac86:	b01d      	add	sp, #116	; 0x74
 800ac88:	ecbd 8b02 	vpop	{d8}
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	2a20      	cmp	r2, #32
 800ac92:	d1cc      	bne.n	800ac2e <_strtod_l+0x46>
 800ac94:	3301      	adds	r3, #1
 800ac96:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac98:	e7be      	b.n	800ac18 <_strtod_l+0x30>
 800ac9a:	2a2d      	cmp	r2, #45	; 0x2d
 800ac9c:	d1c7      	bne.n	800ac2e <_strtod_l+0x46>
 800ac9e:	2201      	movs	r2, #1
 800aca0:	920a      	str	r2, [sp, #40]	; 0x28
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	9217      	str	r2, [sp, #92]	; 0x5c
 800aca6:	785b      	ldrb	r3, [r3, #1]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1c2      	bne.n	800ac32 <_strtod_l+0x4a>
 800acac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f040 856e 	bne.w	800b794 <_strtod_l+0xbac>
 800acb8:	4652      	mov	r2, sl
 800acba:	465b      	mov	r3, fp
 800acbc:	e7e1      	b.n	800ac82 <_strtod_l+0x9a>
 800acbe:	2200      	movs	r2, #0
 800acc0:	e7ee      	b.n	800aca0 <_strtod_l+0xb8>
 800acc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800acc4:	b13a      	cbz	r2, 800acd6 <_strtod_l+0xee>
 800acc6:	2135      	movs	r1, #53	; 0x35
 800acc8:	a81a      	add	r0, sp, #104	; 0x68
 800acca:	f002 fda6 	bl	800d81a <__copybits>
 800acce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acd0:	4620      	mov	r0, r4
 800acd2:	f002 f965 	bl	800cfa0 <_Bfree>
 800acd6:	3f01      	subs	r7, #1
 800acd8:	2f04      	cmp	r7, #4
 800acda:	d806      	bhi.n	800acea <_strtod_l+0x102>
 800acdc:	e8df f007 	tbb	[pc, r7]
 800ace0:	1714030a 	.word	0x1714030a
 800ace4:	0a          	.byte	0x0a
 800ace5:	00          	.byte	0x00
 800ace6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800acea:	0728      	lsls	r0, r5, #28
 800acec:	d5c0      	bpl.n	800ac70 <_strtod_l+0x88>
 800acee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800acf2:	e7bd      	b.n	800ac70 <_strtod_l+0x88>
 800acf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800acf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800acfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ad06:	e7f0      	b.n	800acea <_strtod_l+0x102>
 800ad08:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ae8c <_strtod_l+0x2a4>
 800ad0c:	e7ed      	b.n	800acea <_strtod_l+0x102>
 800ad0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ad12:	f04f 3aff 	mov.w	sl, #4294967295
 800ad16:	e7e8      	b.n	800acea <_strtod_l+0x102>
 800ad18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad1e:	785b      	ldrb	r3, [r3, #1]
 800ad20:	2b30      	cmp	r3, #48	; 0x30
 800ad22:	d0f9      	beq.n	800ad18 <_strtod_l+0x130>
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d0a3      	beq.n	800ac70 <_strtod_l+0x88>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	f04f 0900 	mov.w	r9, #0
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad32:	9308      	str	r3, [sp, #32]
 800ad34:	f8cd 901c 	str.w	r9, [sp, #28]
 800ad38:	464f      	mov	r7, r9
 800ad3a:	220a      	movs	r2, #10
 800ad3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ad3e:	7806      	ldrb	r6, [r0, #0]
 800ad40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ad44:	b2d9      	uxtb	r1, r3
 800ad46:	2909      	cmp	r1, #9
 800ad48:	d92a      	bls.n	800ada0 <_strtod_l+0x1b8>
 800ad4a:	9905      	ldr	r1, [sp, #20]
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	f002 ff83 	bl	800dc58 <strncmp>
 800ad52:	b398      	cbz	r0, 800adbc <_strtod_l+0x1d4>
 800ad54:	2000      	movs	r0, #0
 800ad56:	4632      	mov	r2, r6
 800ad58:	463d      	mov	r5, r7
 800ad5a:	9005      	str	r0, [sp, #20]
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2a65      	cmp	r2, #101	; 0x65
 800ad60:	d001      	beq.n	800ad66 <_strtod_l+0x17e>
 800ad62:	2a45      	cmp	r2, #69	; 0x45
 800ad64:	d118      	bne.n	800ad98 <_strtod_l+0x1b0>
 800ad66:	b91d      	cbnz	r5, 800ad70 <_strtod_l+0x188>
 800ad68:	9a04      	ldr	r2, [sp, #16]
 800ad6a:	4302      	orrs	r2, r0
 800ad6c:	d09e      	beq.n	800acac <_strtod_l+0xc4>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ad74:	f108 0201 	add.w	r2, r8, #1
 800ad78:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ad7e:	2a2b      	cmp	r2, #43	; 0x2b
 800ad80:	d075      	beq.n	800ae6e <_strtod_l+0x286>
 800ad82:	2a2d      	cmp	r2, #45	; 0x2d
 800ad84:	d07b      	beq.n	800ae7e <_strtod_l+0x296>
 800ad86:	f04f 0c00 	mov.w	ip, #0
 800ad8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad8e:	2909      	cmp	r1, #9
 800ad90:	f240 8082 	bls.w	800ae98 <_strtod_l+0x2b0>
 800ad94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad98:	2600      	movs	r6, #0
 800ad9a:	e09d      	b.n	800aed8 <_strtod_l+0x2f0>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	e7c4      	b.n	800ad2a <_strtod_l+0x142>
 800ada0:	2f08      	cmp	r7, #8
 800ada2:	bfd8      	it	le
 800ada4:	9907      	ldrle	r1, [sp, #28]
 800ada6:	f100 0001 	add.w	r0, r0, #1
 800adaa:	bfda      	itte	le
 800adac:	fb02 3301 	mlale	r3, r2, r1, r3
 800adb0:	9307      	strle	r3, [sp, #28]
 800adb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800adb6:	3701      	adds	r7, #1
 800adb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800adba:	e7bf      	b.n	800ad3c <_strtod_l+0x154>
 800adbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adbe:	195a      	adds	r2, r3, r5
 800adc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800adc2:	5d5a      	ldrb	r2, [r3, r5]
 800adc4:	2f00      	cmp	r7, #0
 800adc6:	d037      	beq.n	800ae38 <_strtod_l+0x250>
 800adc8:	9005      	str	r0, [sp, #20]
 800adca:	463d      	mov	r5, r7
 800adcc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800add0:	2b09      	cmp	r3, #9
 800add2:	d912      	bls.n	800adfa <_strtod_l+0x212>
 800add4:	2301      	movs	r3, #1
 800add6:	e7c2      	b.n	800ad5e <_strtod_l+0x176>
 800add8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	9217      	str	r2, [sp, #92]	; 0x5c
 800adde:	785a      	ldrb	r2, [r3, #1]
 800ade0:	3001      	adds	r0, #1
 800ade2:	2a30      	cmp	r2, #48	; 0x30
 800ade4:	d0f8      	beq.n	800add8 <_strtod_l+0x1f0>
 800ade6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800adea:	2b08      	cmp	r3, #8
 800adec:	f200 84d9 	bhi.w	800b7a2 <_strtod_l+0xbba>
 800adf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adf2:	9005      	str	r0, [sp, #20]
 800adf4:	2000      	movs	r0, #0
 800adf6:	9308      	str	r3, [sp, #32]
 800adf8:	4605      	mov	r5, r0
 800adfa:	3a30      	subs	r2, #48	; 0x30
 800adfc:	f100 0301 	add.w	r3, r0, #1
 800ae00:	d014      	beq.n	800ae2c <_strtod_l+0x244>
 800ae02:	9905      	ldr	r1, [sp, #20]
 800ae04:	4419      	add	r1, r3
 800ae06:	9105      	str	r1, [sp, #20]
 800ae08:	462b      	mov	r3, r5
 800ae0a:	eb00 0e05 	add.w	lr, r0, r5
 800ae0e:	210a      	movs	r1, #10
 800ae10:	4573      	cmp	r3, lr
 800ae12:	d113      	bne.n	800ae3c <_strtod_l+0x254>
 800ae14:	182b      	adds	r3, r5, r0
 800ae16:	2b08      	cmp	r3, #8
 800ae18:	f105 0501 	add.w	r5, r5, #1
 800ae1c:	4405      	add	r5, r0
 800ae1e:	dc1c      	bgt.n	800ae5a <_strtod_l+0x272>
 800ae20:	9907      	ldr	r1, [sp, #28]
 800ae22:	230a      	movs	r3, #10
 800ae24:	fb03 2301 	mla	r3, r3, r1, r2
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae2e:	1c51      	adds	r1, r2, #1
 800ae30:	9117      	str	r1, [sp, #92]	; 0x5c
 800ae32:	7852      	ldrb	r2, [r2, #1]
 800ae34:	4618      	mov	r0, r3
 800ae36:	e7c9      	b.n	800adcc <_strtod_l+0x1e4>
 800ae38:	4638      	mov	r0, r7
 800ae3a:	e7d2      	b.n	800ade2 <_strtod_l+0x1fa>
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	dc04      	bgt.n	800ae4a <_strtod_l+0x262>
 800ae40:	9e07      	ldr	r6, [sp, #28]
 800ae42:	434e      	muls	r6, r1
 800ae44:	9607      	str	r6, [sp, #28]
 800ae46:	3301      	adds	r3, #1
 800ae48:	e7e2      	b.n	800ae10 <_strtod_l+0x228>
 800ae4a:	f103 0c01 	add.w	ip, r3, #1
 800ae4e:	f1bc 0f10 	cmp.w	ip, #16
 800ae52:	bfd8      	it	le
 800ae54:	fb01 f909 	mulle.w	r9, r1, r9
 800ae58:	e7f5      	b.n	800ae46 <_strtod_l+0x25e>
 800ae5a:	2d10      	cmp	r5, #16
 800ae5c:	bfdc      	itt	le
 800ae5e:	230a      	movle	r3, #10
 800ae60:	fb03 2909 	mlale	r9, r3, r9, r2
 800ae64:	e7e1      	b.n	800ae2a <_strtod_l+0x242>
 800ae66:	2300      	movs	r3, #0
 800ae68:	9305      	str	r3, [sp, #20]
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e77c      	b.n	800ad68 <_strtod_l+0x180>
 800ae6e:	f04f 0c00 	mov.w	ip, #0
 800ae72:	f108 0202 	add.w	r2, r8, #2
 800ae76:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae78:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ae7c:	e785      	b.n	800ad8a <_strtod_l+0x1a2>
 800ae7e:	f04f 0c01 	mov.w	ip, #1
 800ae82:	e7f6      	b.n	800ae72 <_strtod_l+0x28a>
 800ae84:	0802b648 	.word	0x0802b648
 800ae88:	0802b400 	.word	0x0802b400
 800ae8c:	7ff00000 	.word	0x7ff00000
 800ae90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae92:	1c51      	adds	r1, r2, #1
 800ae94:	9117      	str	r1, [sp, #92]	; 0x5c
 800ae96:	7852      	ldrb	r2, [r2, #1]
 800ae98:	2a30      	cmp	r2, #48	; 0x30
 800ae9a:	d0f9      	beq.n	800ae90 <_strtod_l+0x2a8>
 800ae9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aea0:	2908      	cmp	r1, #8
 800aea2:	f63f af79 	bhi.w	800ad98 <_strtod_l+0x1b0>
 800aea6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aeaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aeac:	9206      	str	r2, [sp, #24]
 800aeae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aeb0:	1c51      	adds	r1, r2, #1
 800aeb2:	9117      	str	r1, [sp, #92]	; 0x5c
 800aeb4:	7852      	ldrb	r2, [r2, #1]
 800aeb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aeba:	2e09      	cmp	r6, #9
 800aebc:	d937      	bls.n	800af2e <_strtod_l+0x346>
 800aebe:	9e06      	ldr	r6, [sp, #24]
 800aec0:	1b89      	subs	r1, r1, r6
 800aec2:	2908      	cmp	r1, #8
 800aec4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aec8:	dc02      	bgt.n	800aed0 <_strtod_l+0x2e8>
 800aeca:	4576      	cmp	r6, lr
 800aecc:	bfa8      	it	ge
 800aece:	4676      	movge	r6, lr
 800aed0:	f1bc 0f00 	cmp.w	ip, #0
 800aed4:	d000      	beq.n	800aed8 <_strtod_l+0x2f0>
 800aed6:	4276      	negs	r6, r6
 800aed8:	2d00      	cmp	r5, #0
 800aeda:	d14d      	bne.n	800af78 <_strtod_l+0x390>
 800aedc:	9904      	ldr	r1, [sp, #16]
 800aede:	4301      	orrs	r1, r0
 800aee0:	f47f aec6 	bne.w	800ac70 <_strtod_l+0x88>
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f47f aee1 	bne.w	800acac <_strtod_l+0xc4>
 800aeea:	2a69      	cmp	r2, #105	; 0x69
 800aeec:	d027      	beq.n	800af3e <_strtod_l+0x356>
 800aeee:	dc24      	bgt.n	800af3a <_strtod_l+0x352>
 800aef0:	2a49      	cmp	r2, #73	; 0x49
 800aef2:	d024      	beq.n	800af3e <_strtod_l+0x356>
 800aef4:	2a4e      	cmp	r2, #78	; 0x4e
 800aef6:	f47f aed9 	bne.w	800acac <_strtod_l+0xc4>
 800aefa:	499f      	ldr	r1, [pc, #636]	; (800b178 <_strtod_l+0x590>)
 800aefc:	a817      	add	r0, sp, #92	; 0x5c
 800aefe:	f001 ff23 	bl	800cd48 <__match>
 800af02:	2800      	cmp	r0, #0
 800af04:	f43f aed2 	beq.w	800acac <_strtod_l+0xc4>
 800af08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b28      	cmp	r3, #40	; 0x28
 800af0e:	d12d      	bne.n	800af6c <_strtod_l+0x384>
 800af10:	499a      	ldr	r1, [pc, #616]	; (800b17c <_strtod_l+0x594>)
 800af12:	aa1a      	add	r2, sp, #104	; 0x68
 800af14:	a817      	add	r0, sp, #92	; 0x5c
 800af16:	f001 ff2b 	bl	800cd70 <__hexnan>
 800af1a:	2805      	cmp	r0, #5
 800af1c:	d126      	bne.n	800af6c <_strtod_l+0x384>
 800af1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800af24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800af28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800af2c:	e6a0      	b.n	800ac70 <_strtod_l+0x88>
 800af2e:	210a      	movs	r1, #10
 800af30:	fb01 2e0e 	mla	lr, r1, lr, r2
 800af34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800af38:	e7b9      	b.n	800aeae <_strtod_l+0x2c6>
 800af3a:	2a6e      	cmp	r2, #110	; 0x6e
 800af3c:	e7db      	b.n	800aef6 <_strtod_l+0x30e>
 800af3e:	4990      	ldr	r1, [pc, #576]	; (800b180 <_strtod_l+0x598>)
 800af40:	a817      	add	r0, sp, #92	; 0x5c
 800af42:	f001 ff01 	bl	800cd48 <__match>
 800af46:	2800      	cmp	r0, #0
 800af48:	f43f aeb0 	beq.w	800acac <_strtod_l+0xc4>
 800af4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af4e:	498d      	ldr	r1, [pc, #564]	; (800b184 <_strtod_l+0x59c>)
 800af50:	3b01      	subs	r3, #1
 800af52:	a817      	add	r0, sp, #92	; 0x5c
 800af54:	9317      	str	r3, [sp, #92]	; 0x5c
 800af56:	f001 fef7 	bl	800cd48 <__match>
 800af5a:	b910      	cbnz	r0, 800af62 <_strtod_l+0x37a>
 800af5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af5e:	3301      	adds	r3, #1
 800af60:	9317      	str	r3, [sp, #92]	; 0x5c
 800af62:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b194 <_strtod_l+0x5ac>
 800af66:	f04f 0a00 	mov.w	sl, #0
 800af6a:	e681      	b.n	800ac70 <_strtod_l+0x88>
 800af6c:	4886      	ldr	r0, [pc, #536]	; (800b188 <_strtod_l+0x5a0>)
 800af6e:	f002 fe6b 	bl	800dc48 <nan>
 800af72:	ec5b ab10 	vmov	sl, fp, d0
 800af76:	e67b      	b.n	800ac70 <_strtod_l+0x88>
 800af78:	9b05      	ldr	r3, [sp, #20]
 800af7a:	9807      	ldr	r0, [sp, #28]
 800af7c:	1af3      	subs	r3, r6, r3
 800af7e:	2f00      	cmp	r7, #0
 800af80:	bf08      	it	eq
 800af82:	462f      	moveq	r7, r5
 800af84:	2d10      	cmp	r5, #16
 800af86:	9306      	str	r3, [sp, #24]
 800af88:	46a8      	mov	r8, r5
 800af8a:	bfa8      	it	ge
 800af8c:	f04f 0810 	movge.w	r8, #16
 800af90:	f7f5 fad8 	bl	8000544 <__aeabi_ui2d>
 800af94:	2d09      	cmp	r5, #9
 800af96:	4682      	mov	sl, r0
 800af98:	468b      	mov	fp, r1
 800af9a:	dd13      	ble.n	800afc4 <_strtod_l+0x3dc>
 800af9c:	4b7b      	ldr	r3, [pc, #492]	; (800b18c <_strtod_l+0x5a4>)
 800af9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800afa2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800afa6:	f7f5 fb47 	bl	8000638 <__aeabi_dmul>
 800afaa:	4682      	mov	sl, r0
 800afac:	4648      	mov	r0, r9
 800afae:	468b      	mov	fp, r1
 800afb0:	f7f5 fac8 	bl	8000544 <__aeabi_ui2d>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4650      	mov	r0, sl
 800afba:	4659      	mov	r1, fp
 800afbc:	f7f5 f986 	bl	80002cc <__adddf3>
 800afc0:	4682      	mov	sl, r0
 800afc2:	468b      	mov	fp, r1
 800afc4:	2d0f      	cmp	r5, #15
 800afc6:	dc38      	bgt.n	800b03a <_strtod_l+0x452>
 800afc8:	9b06      	ldr	r3, [sp, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f43f ae50 	beq.w	800ac70 <_strtod_l+0x88>
 800afd0:	dd24      	ble.n	800b01c <_strtod_l+0x434>
 800afd2:	2b16      	cmp	r3, #22
 800afd4:	dc0b      	bgt.n	800afee <_strtod_l+0x406>
 800afd6:	496d      	ldr	r1, [pc, #436]	; (800b18c <_strtod_l+0x5a4>)
 800afd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afe0:	4652      	mov	r2, sl
 800afe2:	465b      	mov	r3, fp
 800afe4:	f7f5 fb28 	bl	8000638 <__aeabi_dmul>
 800afe8:	4682      	mov	sl, r0
 800afea:	468b      	mov	fp, r1
 800afec:	e640      	b.n	800ac70 <_strtod_l+0x88>
 800afee:	9a06      	ldr	r2, [sp, #24]
 800aff0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aff4:	4293      	cmp	r3, r2
 800aff6:	db20      	blt.n	800b03a <_strtod_l+0x452>
 800aff8:	4c64      	ldr	r4, [pc, #400]	; (800b18c <_strtod_l+0x5a4>)
 800affa:	f1c5 050f 	rsb	r5, r5, #15
 800affe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b002:	4652      	mov	r2, sl
 800b004:	465b      	mov	r3, fp
 800b006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00a:	f7f5 fb15 	bl	8000638 <__aeabi_dmul>
 800b00e:	9b06      	ldr	r3, [sp, #24]
 800b010:	1b5d      	subs	r5, r3, r5
 800b012:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b016:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b01a:	e7e3      	b.n	800afe4 <_strtod_l+0x3fc>
 800b01c:	9b06      	ldr	r3, [sp, #24]
 800b01e:	3316      	adds	r3, #22
 800b020:	db0b      	blt.n	800b03a <_strtod_l+0x452>
 800b022:	9b05      	ldr	r3, [sp, #20]
 800b024:	1b9e      	subs	r6, r3, r6
 800b026:	4b59      	ldr	r3, [pc, #356]	; (800b18c <_strtod_l+0x5a4>)
 800b028:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b02c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b030:	4650      	mov	r0, sl
 800b032:	4659      	mov	r1, fp
 800b034:	f7f5 fc2a 	bl	800088c <__aeabi_ddiv>
 800b038:	e7d6      	b.n	800afe8 <_strtod_l+0x400>
 800b03a:	9b06      	ldr	r3, [sp, #24]
 800b03c:	eba5 0808 	sub.w	r8, r5, r8
 800b040:	4498      	add	r8, r3
 800b042:	f1b8 0f00 	cmp.w	r8, #0
 800b046:	dd74      	ble.n	800b132 <_strtod_l+0x54a>
 800b048:	f018 030f 	ands.w	r3, r8, #15
 800b04c:	d00a      	beq.n	800b064 <_strtod_l+0x47c>
 800b04e:	494f      	ldr	r1, [pc, #316]	; (800b18c <_strtod_l+0x5a4>)
 800b050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b054:	4652      	mov	r2, sl
 800b056:	465b      	mov	r3, fp
 800b058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b05c:	f7f5 faec 	bl	8000638 <__aeabi_dmul>
 800b060:	4682      	mov	sl, r0
 800b062:	468b      	mov	fp, r1
 800b064:	f038 080f 	bics.w	r8, r8, #15
 800b068:	d04f      	beq.n	800b10a <_strtod_l+0x522>
 800b06a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b06e:	dd22      	ble.n	800b0b6 <_strtod_l+0x4ce>
 800b070:	2500      	movs	r5, #0
 800b072:	462e      	mov	r6, r5
 800b074:	9507      	str	r5, [sp, #28]
 800b076:	9505      	str	r5, [sp, #20]
 800b078:	2322      	movs	r3, #34	; 0x22
 800b07a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b194 <_strtod_l+0x5ac>
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	f04f 0a00 	mov.w	sl, #0
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	2b00      	cmp	r3, #0
 800b088:	f43f adf2 	beq.w	800ac70 <_strtod_l+0x88>
 800b08c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b08e:	4620      	mov	r0, r4
 800b090:	f001 ff86 	bl	800cfa0 <_Bfree>
 800b094:	9905      	ldr	r1, [sp, #20]
 800b096:	4620      	mov	r0, r4
 800b098:	f001 ff82 	bl	800cfa0 <_Bfree>
 800b09c:	4631      	mov	r1, r6
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f001 ff7e 	bl	800cfa0 <_Bfree>
 800b0a4:	9907      	ldr	r1, [sp, #28]
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f001 ff7a 	bl	800cfa0 <_Bfree>
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f001 ff76 	bl	800cfa0 <_Bfree>
 800b0b4:	e5dc      	b.n	800ac70 <_strtod_l+0x88>
 800b0b6:	4b36      	ldr	r3, [pc, #216]	; (800b190 <_strtod_l+0x5a8>)
 800b0b8:	9304      	str	r3, [sp, #16]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	4659      	mov	r1, fp
 800b0c4:	4699      	mov	r9, r3
 800b0c6:	f1b8 0f01 	cmp.w	r8, #1
 800b0ca:	dc21      	bgt.n	800b110 <_strtod_l+0x528>
 800b0cc:	b10b      	cbz	r3, 800b0d2 <_strtod_l+0x4ea>
 800b0ce:	4682      	mov	sl, r0
 800b0d0:	468b      	mov	fp, r1
 800b0d2:	4b2f      	ldr	r3, [pc, #188]	; (800b190 <_strtod_l+0x5a8>)
 800b0d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b0d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b0dc:	4652      	mov	r2, sl
 800b0de:	465b      	mov	r3, fp
 800b0e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b0e4:	f7f5 faa8 	bl	8000638 <__aeabi_dmul>
 800b0e8:	4b2a      	ldr	r3, [pc, #168]	; (800b194 <_strtod_l+0x5ac>)
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	400b      	ands	r3, r1
 800b0ee:	492a      	ldr	r1, [pc, #168]	; (800b198 <_strtod_l+0x5b0>)
 800b0f0:	428b      	cmp	r3, r1
 800b0f2:	4682      	mov	sl, r0
 800b0f4:	d8bc      	bhi.n	800b070 <_strtod_l+0x488>
 800b0f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b0fa:	428b      	cmp	r3, r1
 800b0fc:	bf86      	itte	hi
 800b0fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b19c <_strtod_l+0x5b4>
 800b102:	f04f 3aff 	movhi.w	sl, #4294967295
 800b106:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b10a:	2300      	movs	r3, #0
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	e084      	b.n	800b21a <_strtod_l+0x632>
 800b110:	f018 0f01 	tst.w	r8, #1
 800b114:	d005      	beq.n	800b122 <_strtod_l+0x53a>
 800b116:	9b04      	ldr	r3, [sp, #16]
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	f7f5 fa8c 	bl	8000638 <__aeabi_dmul>
 800b120:	2301      	movs	r3, #1
 800b122:	9a04      	ldr	r2, [sp, #16]
 800b124:	3208      	adds	r2, #8
 800b126:	f109 0901 	add.w	r9, r9, #1
 800b12a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b12e:	9204      	str	r2, [sp, #16]
 800b130:	e7c9      	b.n	800b0c6 <_strtod_l+0x4de>
 800b132:	d0ea      	beq.n	800b10a <_strtod_l+0x522>
 800b134:	f1c8 0800 	rsb	r8, r8, #0
 800b138:	f018 020f 	ands.w	r2, r8, #15
 800b13c:	d00a      	beq.n	800b154 <_strtod_l+0x56c>
 800b13e:	4b13      	ldr	r3, [pc, #76]	; (800b18c <_strtod_l+0x5a4>)
 800b140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b144:	4650      	mov	r0, sl
 800b146:	4659      	mov	r1, fp
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 fb9e 	bl	800088c <__aeabi_ddiv>
 800b150:	4682      	mov	sl, r0
 800b152:	468b      	mov	fp, r1
 800b154:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b158:	d0d7      	beq.n	800b10a <_strtod_l+0x522>
 800b15a:	f1b8 0f1f 	cmp.w	r8, #31
 800b15e:	dd1f      	ble.n	800b1a0 <_strtod_l+0x5b8>
 800b160:	2500      	movs	r5, #0
 800b162:	462e      	mov	r6, r5
 800b164:	9507      	str	r5, [sp, #28]
 800b166:	9505      	str	r5, [sp, #20]
 800b168:	2322      	movs	r3, #34	; 0x22
 800b16a:	f04f 0a00 	mov.w	sl, #0
 800b16e:	f04f 0b00 	mov.w	fp, #0
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	e786      	b.n	800b084 <_strtod_l+0x49c>
 800b176:	bf00      	nop
 800b178:	0802b3d1 	.word	0x0802b3d1
 800b17c:	0802b414 	.word	0x0802b414
 800b180:	0802b3c9 	.word	0x0802b3c9
 800b184:	0802b554 	.word	0x0802b554
 800b188:	0802b800 	.word	0x0802b800
 800b18c:	0802b6e0 	.word	0x0802b6e0
 800b190:	0802b6b8 	.word	0x0802b6b8
 800b194:	7ff00000 	.word	0x7ff00000
 800b198:	7ca00000 	.word	0x7ca00000
 800b19c:	7fefffff 	.word	0x7fefffff
 800b1a0:	f018 0310 	ands.w	r3, r8, #16
 800b1a4:	bf18      	it	ne
 800b1a6:	236a      	movne	r3, #106	; 0x6a
 800b1a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b558 <_strtod_l+0x970>
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	4659      	mov	r1, fp
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	f018 0f01 	tst.w	r8, #1
 800b1b8:	d004      	beq.n	800b1c4 <_strtod_l+0x5dc>
 800b1ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b1be:	f7f5 fa3b 	bl	8000638 <__aeabi_dmul>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b1c8:	f109 0908 	add.w	r9, r9, #8
 800b1cc:	d1f2      	bne.n	800b1b4 <_strtod_l+0x5cc>
 800b1ce:	b10b      	cbz	r3, 800b1d4 <_strtod_l+0x5ec>
 800b1d0:	4682      	mov	sl, r0
 800b1d2:	468b      	mov	fp, r1
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	b1c3      	cbz	r3, 800b20a <_strtod_l+0x622>
 800b1d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b1dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	dd11      	ble.n	800b20a <_strtod_l+0x622>
 800b1e6:	2b1f      	cmp	r3, #31
 800b1e8:	f340 8124 	ble.w	800b434 <_strtod_l+0x84c>
 800b1ec:	2b34      	cmp	r3, #52	; 0x34
 800b1ee:	bfde      	ittt	le
 800b1f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b1f4:	f04f 33ff 	movle.w	r3, #4294967295
 800b1f8:	fa03 f202 	lslle.w	r2, r3, r2
 800b1fc:	f04f 0a00 	mov.w	sl, #0
 800b200:	bfcc      	ite	gt
 800b202:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b206:	ea02 0b01 	andle.w	fp, r2, r1
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	4650      	mov	r0, sl
 800b210:	4659      	mov	r1, fp
 800b212:	f7f5 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 800b216:	2800      	cmp	r0, #0
 800b218:	d1a2      	bne.n	800b160 <_strtod_l+0x578>
 800b21a:	9b07      	ldr	r3, [sp, #28]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	9908      	ldr	r1, [sp, #32]
 800b220:	462b      	mov	r3, r5
 800b222:	463a      	mov	r2, r7
 800b224:	4620      	mov	r0, r4
 800b226:	f001 ff23 	bl	800d070 <__s2b>
 800b22a:	9007      	str	r0, [sp, #28]
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f43f af1f 	beq.w	800b070 <_strtod_l+0x488>
 800b232:	9b05      	ldr	r3, [sp, #20]
 800b234:	1b9e      	subs	r6, r3, r6
 800b236:	9b06      	ldr	r3, [sp, #24]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	bfb4      	ite	lt
 800b23c:	4633      	movlt	r3, r6
 800b23e:	2300      	movge	r3, #0
 800b240:	930c      	str	r3, [sp, #48]	; 0x30
 800b242:	9b06      	ldr	r3, [sp, #24]
 800b244:	2500      	movs	r5, #0
 800b246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b24a:	9312      	str	r3, [sp, #72]	; 0x48
 800b24c:	462e      	mov	r6, r5
 800b24e:	9b07      	ldr	r3, [sp, #28]
 800b250:	4620      	mov	r0, r4
 800b252:	6859      	ldr	r1, [r3, #4]
 800b254:	f001 fe64 	bl	800cf20 <_Balloc>
 800b258:	9005      	str	r0, [sp, #20]
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f43f af0c 	beq.w	800b078 <_strtod_l+0x490>
 800b260:	9b07      	ldr	r3, [sp, #28]
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	3202      	adds	r2, #2
 800b266:	f103 010c 	add.w	r1, r3, #12
 800b26a:	0092      	lsls	r2, r2, #2
 800b26c:	300c      	adds	r0, #12
 800b26e:	f7fe fc94 	bl	8009b9a <memcpy>
 800b272:	ec4b ab10 	vmov	d0, sl, fp
 800b276:	aa1a      	add	r2, sp, #104	; 0x68
 800b278:	a919      	add	r1, sp, #100	; 0x64
 800b27a:	4620      	mov	r0, r4
 800b27c:	f002 fa3e 	bl	800d6fc <__d2b>
 800b280:	ec4b ab18 	vmov	d8, sl, fp
 800b284:	9018      	str	r0, [sp, #96]	; 0x60
 800b286:	2800      	cmp	r0, #0
 800b288:	f43f aef6 	beq.w	800b078 <_strtod_l+0x490>
 800b28c:	2101      	movs	r1, #1
 800b28e:	4620      	mov	r0, r4
 800b290:	f001 ff88 	bl	800d1a4 <__i2b>
 800b294:	4606      	mov	r6, r0
 800b296:	2800      	cmp	r0, #0
 800b298:	f43f aeee 	beq.w	800b078 <_strtod_l+0x490>
 800b29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b29e:	9904      	ldr	r1, [sp, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	bfab      	itete	ge
 800b2a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b2a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b2a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b2aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b2ae:	bfac      	ite	ge
 800b2b0:	eb03 0902 	addge.w	r9, r3, r2
 800b2b4:	1ad7      	sublt	r7, r2, r3
 800b2b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b2b8:	eba3 0801 	sub.w	r8, r3, r1
 800b2bc:	4490      	add	r8, r2
 800b2be:	4ba1      	ldr	r3, [pc, #644]	; (800b544 <_strtod_l+0x95c>)
 800b2c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2c4:	4598      	cmp	r8, r3
 800b2c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b2ca:	f280 80c7 	bge.w	800b45c <_strtod_l+0x874>
 800b2ce:	eba3 0308 	sub.w	r3, r3, r8
 800b2d2:	2b1f      	cmp	r3, #31
 800b2d4:	eba2 0203 	sub.w	r2, r2, r3
 800b2d8:	f04f 0101 	mov.w	r1, #1
 800b2dc:	f300 80b1 	bgt.w	800b442 <_strtod_l+0x85a>
 800b2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e4:	930d      	str	r3, [sp, #52]	; 0x34
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9308      	str	r3, [sp, #32]
 800b2ea:	eb09 0802 	add.w	r8, r9, r2
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	45c1      	cmp	r9, r8
 800b2f2:	4417      	add	r7, r2
 800b2f4:	441f      	add	r7, r3
 800b2f6:	464b      	mov	r3, r9
 800b2f8:	bfa8      	it	ge
 800b2fa:	4643      	movge	r3, r8
 800b2fc:	42bb      	cmp	r3, r7
 800b2fe:	bfa8      	it	ge
 800b300:	463b      	movge	r3, r7
 800b302:	2b00      	cmp	r3, #0
 800b304:	bfc2      	ittt	gt
 800b306:	eba8 0803 	subgt.w	r8, r8, r3
 800b30a:	1aff      	subgt	r7, r7, r3
 800b30c:	eba9 0903 	subgt.w	r9, r9, r3
 800b310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b312:	2b00      	cmp	r3, #0
 800b314:	dd17      	ble.n	800b346 <_strtod_l+0x75e>
 800b316:	4631      	mov	r1, r6
 800b318:	461a      	mov	r2, r3
 800b31a:	4620      	mov	r0, r4
 800b31c:	f002 f802 	bl	800d324 <__pow5mult>
 800b320:	4606      	mov	r6, r0
 800b322:	2800      	cmp	r0, #0
 800b324:	f43f aea8 	beq.w	800b078 <_strtod_l+0x490>
 800b328:	4601      	mov	r1, r0
 800b32a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b32c:	4620      	mov	r0, r4
 800b32e:	f001 ff4f 	bl	800d1d0 <__multiply>
 800b332:	900b      	str	r0, [sp, #44]	; 0x2c
 800b334:	2800      	cmp	r0, #0
 800b336:	f43f ae9f 	beq.w	800b078 <_strtod_l+0x490>
 800b33a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b33c:	4620      	mov	r0, r4
 800b33e:	f001 fe2f 	bl	800cfa0 <_Bfree>
 800b342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b344:	9318      	str	r3, [sp, #96]	; 0x60
 800b346:	f1b8 0f00 	cmp.w	r8, #0
 800b34a:	f300 808c 	bgt.w	800b466 <_strtod_l+0x87e>
 800b34e:	9b06      	ldr	r3, [sp, #24]
 800b350:	2b00      	cmp	r3, #0
 800b352:	dd08      	ble.n	800b366 <_strtod_l+0x77e>
 800b354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b356:	9905      	ldr	r1, [sp, #20]
 800b358:	4620      	mov	r0, r4
 800b35a:	f001 ffe3 	bl	800d324 <__pow5mult>
 800b35e:	9005      	str	r0, [sp, #20]
 800b360:	2800      	cmp	r0, #0
 800b362:	f43f ae89 	beq.w	800b078 <_strtod_l+0x490>
 800b366:	2f00      	cmp	r7, #0
 800b368:	dd08      	ble.n	800b37c <_strtod_l+0x794>
 800b36a:	9905      	ldr	r1, [sp, #20]
 800b36c:	463a      	mov	r2, r7
 800b36e:	4620      	mov	r0, r4
 800b370:	f002 f832 	bl	800d3d8 <__lshift>
 800b374:	9005      	str	r0, [sp, #20]
 800b376:	2800      	cmp	r0, #0
 800b378:	f43f ae7e 	beq.w	800b078 <_strtod_l+0x490>
 800b37c:	f1b9 0f00 	cmp.w	r9, #0
 800b380:	dd08      	ble.n	800b394 <_strtod_l+0x7ac>
 800b382:	4631      	mov	r1, r6
 800b384:	464a      	mov	r2, r9
 800b386:	4620      	mov	r0, r4
 800b388:	f002 f826 	bl	800d3d8 <__lshift>
 800b38c:	4606      	mov	r6, r0
 800b38e:	2800      	cmp	r0, #0
 800b390:	f43f ae72 	beq.w	800b078 <_strtod_l+0x490>
 800b394:	9a05      	ldr	r2, [sp, #20]
 800b396:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b398:	4620      	mov	r0, r4
 800b39a:	f002 f8a9 	bl	800d4f0 <__mdiff>
 800b39e:	4605      	mov	r5, r0
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	f43f ae69 	beq.w	800b078 <_strtod_l+0x490>
 800b3a6:	68c3      	ldr	r3, [r0, #12]
 800b3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60c3      	str	r3, [r0, #12]
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	f002 f882 	bl	800d4b8 <__mcmp>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	da60      	bge.n	800b47a <_strtod_l+0x892>
 800b3b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b3be:	f040 8082 	bne.w	800b4c6 <_strtod_l+0x8de>
 800b3c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d17d      	bne.n	800b4c6 <_strtod_l+0x8de>
 800b3ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3ce:	0d1b      	lsrs	r3, r3, #20
 800b3d0:	051b      	lsls	r3, r3, #20
 800b3d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b3d6:	d976      	bls.n	800b4c6 <_strtod_l+0x8de>
 800b3d8:	696b      	ldr	r3, [r5, #20]
 800b3da:	b913      	cbnz	r3, 800b3e2 <_strtod_l+0x7fa>
 800b3dc:	692b      	ldr	r3, [r5, #16]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	dd71      	ble.n	800b4c6 <_strtod_l+0x8de>
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f001 fff6 	bl	800d3d8 <__lshift>
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	f002 f862 	bl	800d4b8 <__mcmp>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	dd66      	ble.n	800b4c6 <_strtod_l+0x8de>
 800b3f8:	9904      	ldr	r1, [sp, #16]
 800b3fa:	4a53      	ldr	r2, [pc, #332]	; (800b548 <_strtod_l+0x960>)
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	2900      	cmp	r1, #0
 800b400:	f000 8081 	beq.w	800b506 <_strtod_l+0x91e>
 800b404:	ea02 010b 	and.w	r1, r2, fp
 800b408:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b40c:	dc7b      	bgt.n	800b506 <_strtod_l+0x91e>
 800b40e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b412:	f77f aea9 	ble.w	800b168 <_strtod_l+0x580>
 800b416:	4b4d      	ldr	r3, [pc, #308]	; (800b54c <_strtod_l+0x964>)
 800b418:	4650      	mov	r0, sl
 800b41a:	4659      	mov	r1, fp
 800b41c:	2200      	movs	r2, #0
 800b41e:	f7f5 f90b 	bl	8000638 <__aeabi_dmul>
 800b422:	460b      	mov	r3, r1
 800b424:	4303      	orrs	r3, r0
 800b426:	bf08      	it	eq
 800b428:	2322      	moveq	r3, #34	; 0x22
 800b42a:	4682      	mov	sl, r0
 800b42c:	468b      	mov	fp, r1
 800b42e:	bf08      	it	eq
 800b430:	6023      	streq	r3, [r4, #0]
 800b432:	e62b      	b.n	800b08c <_strtod_l+0x4a4>
 800b434:	f04f 32ff 	mov.w	r2, #4294967295
 800b438:	fa02 f303 	lsl.w	r3, r2, r3
 800b43c:	ea03 0a0a 	and.w	sl, r3, sl
 800b440:	e6e3      	b.n	800b20a <_strtod_l+0x622>
 800b442:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b446:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b44a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b44e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b452:	fa01 f308 	lsl.w	r3, r1, r8
 800b456:	9308      	str	r3, [sp, #32]
 800b458:	910d      	str	r1, [sp, #52]	; 0x34
 800b45a:	e746      	b.n	800b2ea <_strtod_l+0x702>
 800b45c:	2300      	movs	r3, #0
 800b45e:	9308      	str	r3, [sp, #32]
 800b460:	2301      	movs	r3, #1
 800b462:	930d      	str	r3, [sp, #52]	; 0x34
 800b464:	e741      	b.n	800b2ea <_strtod_l+0x702>
 800b466:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b468:	4642      	mov	r2, r8
 800b46a:	4620      	mov	r0, r4
 800b46c:	f001 ffb4 	bl	800d3d8 <__lshift>
 800b470:	9018      	str	r0, [sp, #96]	; 0x60
 800b472:	2800      	cmp	r0, #0
 800b474:	f47f af6b 	bne.w	800b34e <_strtod_l+0x766>
 800b478:	e5fe      	b.n	800b078 <_strtod_l+0x490>
 800b47a:	465f      	mov	r7, fp
 800b47c:	d16e      	bne.n	800b55c <_strtod_l+0x974>
 800b47e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b484:	b342      	cbz	r2, 800b4d8 <_strtod_l+0x8f0>
 800b486:	4a32      	ldr	r2, [pc, #200]	; (800b550 <_strtod_l+0x968>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d128      	bne.n	800b4de <_strtod_l+0x8f6>
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	4651      	mov	r1, sl
 800b490:	b1eb      	cbz	r3, 800b4ce <_strtod_l+0x8e6>
 800b492:	4b2d      	ldr	r3, [pc, #180]	; (800b548 <_strtod_l+0x960>)
 800b494:	403b      	ands	r3, r7
 800b496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	d819      	bhi.n	800b4d4 <_strtod_l+0x8ec>
 800b4a0:	0d1b      	lsrs	r3, r3, #20
 800b4a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4aa:	4299      	cmp	r1, r3
 800b4ac:	d117      	bne.n	800b4de <_strtod_l+0x8f6>
 800b4ae:	4b29      	ldr	r3, [pc, #164]	; (800b554 <_strtod_l+0x96c>)
 800b4b0:	429f      	cmp	r7, r3
 800b4b2:	d102      	bne.n	800b4ba <_strtod_l+0x8d2>
 800b4b4:	3101      	adds	r1, #1
 800b4b6:	f43f addf 	beq.w	800b078 <_strtod_l+0x490>
 800b4ba:	4b23      	ldr	r3, [pc, #140]	; (800b548 <_strtod_l+0x960>)
 800b4bc:	403b      	ands	r3, r7
 800b4be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b4c2:	f04f 0a00 	mov.w	sl, #0
 800b4c6:	9b04      	ldr	r3, [sp, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1a4      	bne.n	800b416 <_strtod_l+0x82e>
 800b4cc:	e5de      	b.n	800b08c <_strtod_l+0x4a4>
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d2:	e7ea      	b.n	800b4aa <_strtod_l+0x8c2>
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	e7e8      	b.n	800b4aa <_strtod_l+0x8c2>
 800b4d8:	ea53 030a 	orrs.w	r3, r3, sl
 800b4dc:	d08c      	beq.n	800b3f8 <_strtod_l+0x810>
 800b4de:	9b08      	ldr	r3, [sp, #32]
 800b4e0:	b1db      	cbz	r3, 800b51a <_strtod_l+0x932>
 800b4e2:	423b      	tst	r3, r7
 800b4e4:	d0ef      	beq.n	800b4c6 <_strtod_l+0x8de>
 800b4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e8:	9a04      	ldr	r2, [sp, #16]
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	4659      	mov	r1, fp
 800b4ee:	b1c3      	cbz	r3, 800b522 <_strtod_l+0x93a>
 800b4f0:	f7ff fb5b 	bl	800abaa <sulp>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	ec51 0b18 	vmov	r0, r1, d8
 800b4fc:	f7f4 fee6 	bl	80002cc <__adddf3>
 800b500:	4682      	mov	sl, r0
 800b502:	468b      	mov	fp, r1
 800b504:	e7df      	b.n	800b4c6 <_strtod_l+0x8de>
 800b506:	4013      	ands	r3, r2
 800b508:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b50c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b510:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b514:	f04f 3aff 	mov.w	sl, #4294967295
 800b518:	e7d5      	b.n	800b4c6 <_strtod_l+0x8de>
 800b51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51c:	ea13 0f0a 	tst.w	r3, sl
 800b520:	e7e0      	b.n	800b4e4 <_strtod_l+0x8fc>
 800b522:	f7ff fb42 	bl	800abaa <sulp>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	ec51 0b18 	vmov	r0, r1, d8
 800b52e:	f7f4 fecb 	bl	80002c8 <__aeabi_dsub>
 800b532:	2200      	movs	r2, #0
 800b534:	2300      	movs	r3, #0
 800b536:	4682      	mov	sl, r0
 800b538:	468b      	mov	fp, r1
 800b53a:	f7f5 fae5 	bl	8000b08 <__aeabi_dcmpeq>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d0c1      	beq.n	800b4c6 <_strtod_l+0x8de>
 800b542:	e611      	b.n	800b168 <_strtod_l+0x580>
 800b544:	fffffc02 	.word	0xfffffc02
 800b548:	7ff00000 	.word	0x7ff00000
 800b54c:	39500000 	.word	0x39500000
 800b550:	000fffff 	.word	0x000fffff
 800b554:	7fefffff 	.word	0x7fefffff
 800b558:	0802b428 	.word	0x0802b428
 800b55c:	4631      	mov	r1, r6
 800b55e:	4628      	mov	r0, r5
 800b560:	f002 f928 	bl	800d7b4 <__ratio>
 800b564:	ec59 8b10 	vmov	r8, r9, d0
 800b568:	ee10 0a10 	vmov	r0, s0
 800b56c:	2200      	movs	r2, #0
 800b56e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b572:	4649      	mov	r1, r9
 800b574:	f7f5 fadc 	bl	8000b30 <__aeabi_dcmple>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d07a      	beq.n	800b672 <_strtod_l+0xa8a>
 800b57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d04a      	beq.n	800b618 <_strtod_l+0xa30>
 800b582:	4b95      	ldr	r3, [pc, #596]	; (800b7d8 <_strtod_l+0xbf0>)
 800b584:	2200      	movs	r2, #0
 800b586:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b58a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b7d8 <_strtod_l+0xbf0>
 800b58e:	f04f 0800 	mov.w	r8, #0
 800b592:	4b92      	ldr	r3, [pc, #584]	; (800b7dc <_strtod_l+0xbf4>)
 800b594:	403b      	ands	r3, r7
 800b596:	930d      	str	r3, [sp, #52]	; 0x34
 800b598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b59a:	4b91      	ldr	r3, [pc, #580]	; (800b7e0 <_strtod_l+0xbf8>)
 800b59c:	429a      	cmp	r2, r3
 800b59e:	f040 80b0 	bne.w	800b702 <_strtod_l+0xb1a>
 800b5a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b5aa:	ec4b ab10 	vmov	d0, sl, fp
 800b5ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5b2:	f002 f827 	bl	800d604 <__ulp>
 800b5b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5ba:	ec53 2b10 	vmov	r2, r3, d0
 800b5be:	f7f5 f83b 	bl	8000638 <__aeabi_dmul>
 800b5c2:	4652      	mov	r2, sl
 800b5c4:	465b      	mov	r3, fp
 800b5c6:	f7f4 fe81 	bl	80002cc <__adddf3>
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4983      	ldr	r1, [pc, #524]	; (800b7dc <_strtod_l+0xbf4>)
 800b5ce:	4a85      	ldr	r2, [pc, #532]	; (800b7e4 <_strtod_l+0xbfc>)
 800b5d0:	4019      	ands	r1, r3
 800b5d2:	4291      	cmp	r1, r2
 800b5d4:	4682      	mov	sl, r0
 800b5d6:	d960      	bls.n	800b69a <_strtod_l+0xab2>
 800b5d8:	ee18 3a90 	vmov	r3, s17
 800b5dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d104      	bne.n	800b5ee <_strtod_l+0xa06>
 800b5e4:	ee18 3a10 	vmov	r3, s16
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	f43f ad45 	beq.w	800b078 <_strtod_l+0x490>
 800b5ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b7f0 <_strtod_l+0xc08>
 800b5f2:	f04f 3aff 	mov.w	sl, #4294967295
 800b5f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f001 fcd1 	bl	800cfa0 <_Bfree>
 800b5fe:	9905      	ldr	r1, [sp, #20]
 800b600:	4620      	mov	r0, r4
 800b602:	f001 fccd 	bl	800cfa0 <_Bfree>
 800b606:	4631      	mov	r1, r6
 800b608:	4620      	mov	r0, r4
 800b60a:	f001 fcc9 	bl	800cfa0 <_Bfree>
 800b60e:	4629      	mov	r1, r5
 800b610:	4620      	mov	r0, r4
 800b612:	f001 fcc5 	bl	800cfa0 <_Bfree>
 800b616:	e61a      	b.n	800b24e <_strtod_l+0x666>
 800b618:	f1ba 0f00 	cmp.w	sl, #0
 800b61c:	d11b      	bne.n	800b656 <_strtod_l+0xa6e>
 800b61e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b622:	b9f3      	cbnz	r3, 800b662 <_strtod_l+0xa7a>
 800b624:	4b6c      	ldr	r3, [pc, #432]	; (800b7d8 <_strtod_l+0xbf0>)
 800b626:	2200      	movs	r2, #0
 800b628:	4640      	mov	r0, r8
 800b62a:	4649      	mov	r1, r9
 800b62c:	f7f5 fa76 	bl	8000b1c <__aeabi_dcmplt>
 800b630:	b9d0      	cbnz	r0, 800b668 <_strtod_l+0xa80>
 800b632:	4640      	mov	r0, r8
 800b634:	4649      	mov	r1, r9
 800b636:	4b6c      	ldr	r3, [pc, #432]	; (800b7e8 <_strtod_l+0xc00>)
 800b638:	2200      	movs	r2, #0
 800b63a:	f7f4 fffd 	bl	8000638 <__aeabi_dmul>
 800b63e:	4680      	mov	r8, r0
 800b640:	4689      	mov	r9, r1
 800b642:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b646:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b64a:	9315      	str	r3, [sp, #84]	; 0x54
 800b64c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b650:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b654:	e79d      	b.n	800b592 <_strtod_l+0x9aa>
 800b656:	f1ba 0f01 	cmp.w	sl, #1
 800b65a:	d102      	bne.n	800b662 <_strtod_l+0xa7a>
 800b65c:	2f00      	cmp	r7, #0
 800b65e:	f43f ad83 	beq.w	800b168 <_strtod_l+0x580>
 800b662:	4b62      	ldr	r3, [pc, #392]	; (800b7ec <_strtod_l+0xc04>)
 800b664:	2200      	movs	r2, #0
 800b666:	e78e      	b.n	800b586 <_strtod_l+0x99e>
 800b668:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b7e8 <_strtod_l+0xc00>
 800b66c:	f04f 0800 	mov.w	r8, #0
 800b670:	e7e7      	b.n	800b642 <_strtod_l+0xa5a>
 800b672:	4b5d      	ldr	r3, [pc, #372]	; (800b7e8 <_strtod_l+0xc00>)
 800b674:	4640      	mov	r0, r8
 800b676:	4649      	mov	r1, r9
 800b678:	2200      	movs	r2, #0
 800b67a:	f7f4 ffdd 	bl	8000638 <__aeabi_dmul>
 800b67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b680:	4680      	mov	r8, r0
 800b682:	4689      	mov	r9, r1
 800b684:	b933      	cbnz	r3, 800b694 <_strtod_l+0xaac>
 800b686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b68a:	900e      	str	r0, [sp, #56]	; 0x38
 800b68c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b68e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b692:	e7dd      	b.n	800b650 <_strtod_l+0xa68>
 800b694:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b698:	e7f9      	b.n	800b68e <_strtod_l+0xaa6>
 800b69a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1a8      	bne.n	800b5f6 <_strtod_l+0xa0e>
 800b6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6aa:	0d1b      	lsrs	r3, r3, #20
 800b6ac:	051b      	lsls	r3, r3, #20
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d1a1      	bne.n	800b5f6 <_strtod_l+0xa0e>
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	f7f5 fb1f 	bl	8000cf8 <__aeabi_d2lz>
 800b6ba:	f7f4 ff8f 	bl	80005dc <__aeabi_l2d>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	f7f4 fdff 	bl	80002c8 <__aeabi_dsub>
 800b6ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6d0:	ea43 030a 	orr.w	r3, r3, sl
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	4689      	mov	r9, r1
 800b6da:	d055      	beq.n	800b788 <_strtod_l+0xba0>
 800b6dc:	a336      	add	r3, pc, #216	; (adr r3, 800b7b8 <_strtod_l+0xbd0>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	f7f5 fa1b 	bl	8000b1c <__aeabi_dcmplt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f47f acd0 	bne.w	800b08c <_strtod_l+0x4a4>
 800b6ec:	a334      	add	r3, pc, #208	; (adr r3, 800b7c0 <_strtod_l+0xbd8>)
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f5 fa2f 	bl	8000b58 <__aeabi_dcmpgt>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	f43f af7b 	beq.w	800b5f6 <_strtod_l+0xa0e>
 800b700:	e4c4      	b.n	800b08c <_strtod_l+0x4a4>
 800b702:	9b04      	ldr	r3, [sp, #16]
 800b704:	b333      	cbz	r3, 800b754 <_strtod_l+0xb6c>
 800b706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b708:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b70c:	d822      	bhi.n	800b754 <_strtod_l+0xb6c>
 800b70e:	a32e      	add	r3, pc, #184	; (adr r3, 800b7c8 <_strtod_l+0xbe0>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	4640      	mov	r0, r8
 800b716:	4649      	mov	r1, r9
 800b718:	f7f5 fa0a 	bl	8000b30 <__aeabi_dcmple>
 800b71c:	b1a0      	cbz	r0, 800b748 <_strtod_l+0xb60>
 800b71e:	4649      	mov	r1, r9
 800b720:	4640      	mov	r0, r8
 800b722:	f7f5 fa61 	bl	8000be8 <__aeabi_d2uiz>
 800b726:	2801      	cmp	r0, #1
 800b728:	bf38      	it	cc
 800b72a:	2001      	movcc	r0, #1
 800b72c:	f7f4 ff0a 	bl	8000544 <__aeabi_ui2d>
 800b730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b732:	4680      	mov	r8, r0
 800b734:	4689      	mov	r9, r1
 800b736:	bb23      	cbnz	r3, 800b782 <_strtod_l+0xb9a>
 800b738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b73c:	9010      	str	r0, [sp, #64]	; 0x40
 800b73e:	9311      	str	r3, [sp, #68]	; 0x44
 800b740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b744:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b74c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b750:	1a9b      	subs	r3, r3, r2
 800b752:	9309      	str	r3, [sp, #36]	; 0x24
 800b754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b758:	eeb0 0a48 	vmov.f32	s0, s16
 800b75c:	eef0 0a68 	vmov.f32	s1, s17
 800b760:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b764:	f001 ff4e 	bl	800d604 <__ulp>
 800b768:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b76c:	ec53 2b10 	vmov	r2, r3, d0
 800b770:	f7f4 ff62 	bl	8000638 <__aeabi_dmul>
 800b774:	ec53 2b18 	vmov	r2, r3, d8
 800b778:	f7f4 fda8 	bl	80002cc <__adddf3>
 800b77c:	4682      	mov	sl, r0
 800b77e:	468b      	mov	fp, r1
 800b780:	e78d      	b.n	800b69e <_strtod_l+0xab6>
 800b782:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b786:	e7db      	b.n	800b740 <_strtod_l+0xb58>
 800b788:	a311      	add	r3, pc, #68	; (adr r3, 800b7d0 <_strtod_l+0xbe8>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f5 f9c5 	bl	8000b1c <__aeabi_dcmplt>
 800b792:	e7b2      	b.n	800b6fa <_strtod_l+0xb12>
 800b794:	2300      	movs	r3, #0
 800b796:	930a      	str	r3, [sp, #40]	; 0x28
 800b798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b79a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	f7ff ba6b 	b.w	800ac78 <_strtod_l+0x90>
 800b7a2:	2a65      	cmp	r2, #101	; 0x65
 800b7a4:	f43f ab5f 	beq.w	800ae66 <_strtod_l+0x27e>
 800b7a8:	2a45      	cmp	r2, #69	; 0x45
 800b7aa:	f43f ab5c 	beq.w	800ae66 <_strtod_l+0x27e>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	f7ff bb94 	b.w	800aedc <_strtod_l+0x2f4>
 800b7b4:	f3af 8000 	nop.w
 800b7b8:	94a03595 	.word	0x94a03595
 800b7bc:	3fdfffff 	.word	0x3fdfffff
 800b7c0:	35afe535 	.word	0x35afe535
 800b7c4:	3fe00000 	.word	0x3fe00000
 800b7c8:	ffc00000 	.word	0xffc00000
 800b7cc:	41dfffff 	.word	0x41dfffff
 800b7d0:	94a03595 	.word	0x94a03595
 800b7d4:	3fcfffff 	.word	0x3fcfffff
 800b7d8:	3ff00000 	.word	0x3ff00000
 800b7dc:	7ff00000 	.word	0x7ff00000
 800b7e0:	7fe00000 	.word	0x7fe00000
 800b7e4:	7c9fffff 	.word	0x7c9fffff
 800b7e8:	3fe00000 	.word	0x3fe00000
 800b7ec:	bff00000 	.word	0xbff00000
 800b7f0:	7fefffff 	.word	0x7fefffff

0800b7f4 <_strtod_r>:
 800b7f4:	4b01      	ldr	r3, [pc, #4]	; (800b7fc <_strtod_r+0x8>)
 800b7f6:	f7ff b9f7 	b.w	800abe8 <_strtod_l>
 800b7fa:	bf00      	nop
 800b7fc:	20000078 	.word	0x20000078

0800b800 <_strtol_l.constprop.0>:
 800b800:	2b01      	cmp	r3, #1
 800b802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b806:	d001      	beq.n	800b80c <_strtol_l.constprop.0+0xc>
 800b808:	2b24      	cmp	r3, #36	; 0x24
 800b80a:	d906      	bls.n	800b81a <_strtol_l.constprop.0+0x1a>
 800b80c:	f7fe f8a2 	bl	8009954 <__errno>
 800b810:	2316      	movs	r3, #22
 800b812:	6003      	str	r3, [r0, #0]
 800b814:	2000      	movs	r0, #0
 800b816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b900 <_strtol_l.constprop.0+0x100>
 800b81e:	460d      	mov	r5, r1
 800b820:	462e      	mov	r6, r5
 800b822:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b826:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b82a:	f017 0708 	ands.w	r7, r7, #8
 800b82e:	d1f7      	bne.n	800b820 <_strtol_l.constprop.0+0x20>
 800b830:	2c2d      	cmp	r4, #45	; 0x2d
 800b832:	d132      	bne.n	800b89a <_strtol_l.constprop.0+0x9a>
 800b834:	782c      	ldrb	r4, [r5, #0]
 800b836:	2701      	movs	r7, #1
 800b838:	1cb5      	adds	r5, r6, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d05b      	beq.n	800b8f6 <_strtol_l.constprop.0+0xf6>
 800b83e:	2b10      	cmp	r3, #16
 800b840:	d109      	bne.n	800b856 <_strtol_l.constprop.0+0x56>
 800b842:	2c30      	cmp	r4, #48	; 0x30
 800b844:	d107      	bne.n	800b856 <_strtol_l.constprop.0+0x56>
 800b846:	782c      	ldrb	r4, [r5, #0]
 800b848:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b84c:	2c58      	cmp	r4, #88	; 0x58
 800b84e:	d14d      	bne.n	800b8ec <_strtol_l.constprop.0+0xec>
 800b850:	786c      	ldrb	r4, [r5, #1]
 800b852:	2310      	movs	r3, #16
 800b854:	3502      	adds	r5, #2
 800b856:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b85a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b85e:	f04f 0c00 	mov.w	ip, #0
 800b862:	fbb8 f9f3 	udiv	r9, r8, r3
 800b866:	4666      	mov	r6, ip
 800b868:	fb03 8a19 	mls	sl, r3, r9, r8
 800b86c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b870:	f1be 0f09 	cmp.w	lr, #9
 800b874:	d816      	bhi.n	800b8a4 <_strtol_l.constprop.0+0xa4>
 800b876:	4674      	mov	r4, lr
 800b878:	42a3      	cmp	r3, r4
 800b87a:	dd24      	ble.n	800b8c6 <_strtol_l.constprop.0+0xc6>
 800b87c:	f1bc 0f00 	cmp.w	ip, #0
 800b880:	db1e      	blt.n	800b8c0 <_strtol_l.constprop.0+0xc0>
 800b882:	45b1      	cmp	r9, r6
 800b884:	d31c      	bcc.n	800b8c0 <_strtol_l.constprop.0+0xc0>
 800b886:	d101      	bne.n	800b88c <_strtol_l.constprop.0+0x8c>
 800b888:	45a2      	cmp	sl, r4
 800b88a:	db19      	blt.n	800b8c0 <_strtol_l.constprop.0+0xc0>
 800b88c:	fb06 4603 	mla	r6, r6, r3, r4
 800b890:	f04f 0c01 	mov.w	ip, #1
 800b894:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b898:	e7e8      	b.n	800b86c <_strtol_l.constprop.0+0x6c>
 800b89a:	2c2b      	cmp	r4, #43	; 0x2b
 800b89c:	bf04      	itt	eq
 800b89e:	782c      	ldrbeq	r4, [r5, #0]
 800b8a0:	1cb5      	addeq	r5, r6, #2
 800b8a2:	e7ca      	b.n	800b83a <_strtol_l.constprop.0+0x3a>
 800b8a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b8a8:	f1be 0f19 	cmp.w	lr, #25
 800b8ac:	d801      	bhi.n	800b8b2 <_strtol_l.constprop.0+0xb2>
 800b8ae:	3c37      	subs	r4, #55	; 0x37
 800b8b0:	e7e2      	b.n	800b878 <_strtol_l.constprop.0+0x78>
 800b8b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b8b6:	f1be 0f19 	cmp.w	lr, #25
 800b8ba:	d804      	bhi.n	800b8c6 <_strtol_l.constprop.0+0xc6>
 800b8bc:	3c57      	subs	r4, #87	; 0x57
 800b8be:	e7db      	b.n	800b878 <_strtol_l.constprop.0+0x78>
 800b8c0:	f04f 3cff 	mov.w	ip, #4294967295
 800b8c4:	e7e6      	b.n	800b894 <_strtol_l.constprop.0+0x94>
 800b8c6:	f1bc 0f00 	cmp.w	ip, #0
 800b8ca:	da05      	bge.n	800b8d8 <_strtol_l.constprop.0+0xd8>
 800b8cc:	2322      	movs	r3, #34	; 0x22
 800b8ce:	6003      	str	r3, [r0, #0]
 800b8d0:	4646      	mov	r6, r8
 800b8d2:	b942      	cbnz	r2, 800b8e6 <_strtol_l.constprop.0+0xe6>
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	e79e      	b.n	800b816 <_strtol_l.constprop.0+0x16>
 800b8d8:	b107      	cbz	r7, 800b8dc <_strtol_l.constprop.0+0xdc>
 800b8da:	4276      	negs	r6, r6
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	d0f9      	beq.n	800b8d4 <_strtol_l.constprop.0+0xd4>
 800b8e0:	f1bc 0f00 	cmp.w	ip, #0
 800b8e4:	d000      	beq.n	800b8e8 <_strtol_l.constprop.0+0xe8>
 800b8e6:	1e69      	subs	r1, r5, #1
 800b8e8:	6011      	str	r1, [r2, #0]
 800b8ea:	e7f3      	b.n	800b8d4 <_strtol_l.constprop.0+0xd4>
 800b8ec:	2430      	movs	r4, #48	; 0x30
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1b1      	bne.n	800b856 <_strtol_l.constprop.0+0x56>
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	e7af      	b.n	800b856 <_strtol_l.constprop.0+0x56>
 800b8f6:	2c30      	cmp	r4, #48	; 0x30
 800b8f8:	d0a5      	beq.n	800b846 <_strtol_l.constprop.0+0x46>
 800b8fa:	230a      	movs	r3, #10
 800b8fc:	e7ab      	b.n	800b856 <_strtol_l.constprop.0+0x56>
 800b8fe:	bf00      	nop
 800b900:	0802b451 	.word	0x0802b451

0800b904 <_strtol_r>:
 800b904:	f7ff bf7c 	b.w	800b800 <_strtol_l.constprop.0>

0800b908 <_write_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_write_r+0x20>)
 800b90c:	4604      	mov	r4, r0
 800b90e:	4608      	mov	r0, r1
 800b910:	4611      	mov	r1, r2
 800b912:	2200      	movs	r2, #0
 800b914:	602a      	str	r2, [r5, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f7f6 fe73 	bl	8002602 <_write>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_write_r+0x1e>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_write_r+0x1e>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	200139bc 	.word	0x200139bc

0800b92c <_close_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4d06      	ldr	r5, [pc, #24]	; (800b948 <_close_r+0x1c>)
 800b930:	2300      	movs	r3, #0
 800b932:	4604      	mov	r4, r0
 800b934:	4608      	mov	r0, r1
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	f7f6 fe7f 	bl	800263a <_close>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_close_r+0x1a>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_close_r+0x1a>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	200139bc 	.word	0x200139bc

0800b94c <quorem>:
 800b94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	6903      	ldr	r3, [r0, #16]
 800b952:	690c      	ldr	r4, [r1, #16]
 800b954:	42a3      	cmp	r3, r4
 800b956:	4607      	mov	r7, r0
 800b958:	f2c0 8081 	blt.w	800ba5e <quorem+0x112>
 800b95c:	3c01      	subs	r4, #1
 800b95e:	f101 0814 	add.w	r8, r1, #20
 800b962:	f100 0514 	add.w	r5, r0, #20
 800b966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b974:	3301      	adds	r3, #1
 800b976:	429a      	cmp	r2, r3
 800b978:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b97c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b980:	fbb2 f6f3 	udiv	r6, r2, r3
 800b984:	d331      	bcc.n	800b9ea <quorem+0x9e>
 800b986:	f04f 0e00 	mov.w	lr, #0
 800b98a:	4640      	mov	r0, r8
 800b98c:	46ac      	mov	ip, r5
 800b98e:	46f2      	mov	sl, lr
 800b990:	f850 2b04 	ldr.w	r2, [r0], #4
 800b994:	b293      	uxth	r3, r2
 800b996:	fb06 e303 	mla	r3, r6, r3, lr
 800b99a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	ebaa 0303 	sub.w	r3, sl, r3
 800b9a4:	f8dc a000 	ldr.w	sl, [ip]
 800b9a8:	0c12      	lsrs	r2, r2, #16
 800b9aa:	fa13 f38a 	uxtah	r3, r3, sl
 800b9ae:	fb06 e202 	mla	r2, r6, r2, lr
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	9b00      	ldr	r3, [sp, #0]
 800b9b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9ba:	b292      	uxth	r2, r2
 800b9bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b9c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9c4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b9c8:	4581      	cmp	r9, r0
 800b9ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9ce:	f84c 3b04 	str.w	r3, [ip], #4
 800b9d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9d6:	d2db      	bcs.n	800b990 <quorem+0x44>
 800b9d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9dc:	b92b      	cbnz	r3, 800b9ea <quorem+0x9e>
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	3b04      	subs	r3, #4
 800b9e2:	429d      	cmp	r5, r3
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	d32e      	bcc.n	800ba46 <quorem+0xfa>
 800b9e8:	613c      	str	r4, [r7, #16]
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f001 fd64 	bl	800d4b8 <__mcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	db24      	blt.n	800ba3e <quorem+0xf2>
 800b9f4:	3601      	adds	r6, #1
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f04f 0c00 	mov.w	ip, #0
 800b9fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba00:	f8d0 e000 	ldr.w	lr, [r0]
 800ba04:	b293      	uxth	r3, r2
 800ba06:	ebac 0303 	sub.w	r3, ip, r3
 800ba0a:	0c12      	lsrs	r2, r2, #16
 800ba0c:	fa13 f38e 	uxtah	r3, r3, lr
 800ba10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba1e:	45c1      	cmp	r9, r8
 800ba20:	f840 3b04 	str.w	r3, [r0], #4
 800ba24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba28:	d2e8      	bcs.n	800b9fc <quorem+0xb0>
 800ba2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba32:	b922      	cbnz	r2, 800ba3e <quorem+0xf2>
 800ba34:	3b04      	subs	r3, #4
 800ba36:	429d      	cmp	r5, r3
 800ba38:	461a      	mov	r2, r3
 800ba3a:	d30a      	bcc.n	800ba52 <quorem+0x106>
 800ba3c:	613c      	str	r4, [r7, #16]
 800ba3e:	4630      	mov	r0, r6
 800ba40:	b003      	add	sp, #12
 800ba42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba46:	6812      	ldr	r2, [r2, #0]
 800ba48:	3b04      	subs	r3, #4
 800ba4a:	2a00      	cmp	r2, #0
 800ba4c:	d1cc      	bne.n	800b9e8 <quorem+0x9c>
 800ba4e:	3c01      	subs	r4, #1
 800ba50:	e7c7      	b.n	800b9e2 <quorem+0x96>
 800ba52:	6812      	ldr	r2, [r2, #0]
 800ba54:	3b04      	subs	r3, #4
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	d1f0      	bne.n	800ba3c <quorem+0xf0>
 800ba5a:	3c01      	subs	r4, #1
 800ba5c:	e7eb      	b.n	800ba36 <quorem+0xea>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e7ee      	b.n	800ba40 <quorem+0xf4>
 800ba62:	0000      	movs	r0, r0
 800ba64:	0000      	movs	r0, r0
	...

0800ba68 <_dtoa_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	ed2d 8b04 	vpush	{d8-d9}
 800ba70:	ec57 6b10 	vmov	r6, r7, d0
 800ba74:	b093      	sub	sp, #76	; 0x4c
 800ba76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba7c:	9106      	str	r1, [sp, #24]
 800ba7e:	ee10 aa10 	vmov	sl, s0
 800ba82:	4604      	mov	r4, r0
 800ba84:	9209      	str	r2, [sp, #36]	; 0x24
 800ba86:	930c      	str	r3, [sp, #48]	; 0x30
 800ba88:	46bb      	mov	fp, r7
 800ba8a:	b975      	cbnz	r5, 800baaa <_dtoa_r+0x42>
 800ba8c:	2010      	movs	r0, #16
 800ba8e:	f001 fa21 	bl	800ced4 <malloc>
 800ba92:	4602      	mov	r2, r0
 800ba94:	6260      	str	r0, [r4, #36]	; 0x24
 800ba96:	b920      	cbnz	r0, 800baa2 <_dtoa_r+0x3a>
 800ba98:	4ba7      	ldr	r3, [pc, #668]	; (800bd38 <_dtoa_r+0x2d0>)
 800ba9a:	21ea      	movs	r1, #234	; 0xea
 800ba9c:	48a7      	ldr	r0, [pc, #668]	; (800bd3c <_dtoa_r+0x2d4>)
 800ba9e:	f002 f8fd 	bl	800dc9c <__assert_func>
 800baa2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800baa6:	6005      	str	r5, [r0, #0]
 800baa8:	60c5      	str	r5, [r0, #12]
 800baaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baac:	6819      	ldr	r1, [r3, #0]
 800baae:	b151      	cbz	r1, 800bac6 <_dtoa_r+0x5e>
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	604a      	str	r2, [r1, #4]
 800bab4:	2301      	movs	r3, #1
 800bab6:	4093      	lsls	r3, r2
 800bab8:	608b      	str	r3, [r1, #8]
 800baba:	4620      	mov	r0, r4
 800babc:	f001 fa70 	bl	800cfa0 <_Bfree>
 800bac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	1e3b      	subs	r3, r7, #0
 800bac8:	bfaa      	itet	ge
 800baca:	2300      	movge	r3, #0
 800bacc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bad0:	f8c8 3000 	strge.w	r3, [r8]
 800bad4:	4b9a      	ldr	r3, [pc, #616]	; (800bd40 <_dtoa_r+0x2d8>)
 800bad6:	bfbc      	itt	lt
 800bad8:	2201      	movlt	r2, #1
 800bada:	f8c8 2000 	strlt.w	r2, [r8]
 800bade:	ea33 030b 	bics.w	r3, r3, fp
 800bae2:	d11b      	bne.n	800bb1c <_dtoa_r+0xb4>
 800bae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bae6:	f242 730f 	movw	r3, #9999	; 0x270f
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baf0:	4333      	orrs	r3, r6
 800baf2:	f000 8592 	beq.w	800c61a <_dtoa_r+0xbb2>
 800baf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800baf8:	b963      	cbnz	r3, 800bb14 <_dtoa_r+0xac>
 800bafa:	4b92      	ldr	r3, [pc, #584]	; (800bd44 <_dtoa_r+0x2dc>)
 800bafc:	e022      	b.n	800bb44 <_dtoa_r+0xdc>
 800bafe:	4b92      	ldr	r3, [pc, #584]	; (800bd48 <_dtoa_r+0x2e0>)
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	3308      	adds	r3, #8
 800bb04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	9801      	ldr	r0, [sp, #4]
 800bb0a:	b013      	add	sp, #76	; 0x4c
 800bb0c:	ecbd 8b04 	vpop	{d8-d9}
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	4b8b      	ldr	r3, [pc, #556]	; (800bd44 <_dtoa_r+0x2dc>)
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	3303      	adds	r3, #3
 800bb1a:	e7f3      	b.n	800bb04 <_dtoa_r+0x9c>
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	2300      	movs	r3, #0
 800bb20:	4650      	mov	r0, sl
 800bb22:	4659      	mov	r1, fp
 800bb24:	f7f4 fff0 	bl	8000b08 <__aeabi_dcmpeq>
 800bb28:	ec4b ab19 	vmov	d9, sl, fp
 800bb2c:	4680      	mov	r8, r0
 800bb2e:	b158      	cbz	r0, 800bb48 <_dtoa_r+0xe0>
 800bb30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb32:	2301      	movs	r3, #1
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 856b 	beq.w	800c614 <_dtoa_r+0xbac>
 800bb3e:	4883      	ldr	r0, [pc, #524]	; (800bd4c <_dtoa_r+0x2e4>)
 800bb40:	6018      	str	r0, [r3, #0]
 800bb42:	1e43      	subs	r3, r0, #1
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	e7df      	b.n	800bb08 <_dtoa_r+0xa0>
 800bb48:	ec4b ab10 	vmov	d0, sl, fp
 800bb4c:	aa10      	add	r2, sp, #64	; 0x40
 800bb4e:	a911      	add	r1, sp, #68	; 0x44
 800bb50:	4620      	mov	r0, r4
 800bb52:	f001 fdd3 	bl	800d6fc <__d2b>
 800bb56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bb5a:	ee08 0a10 	vmov	s16, r0
 800bb5e:	2d00      	cmp	r5, #0
 800bb60:	f000 8084 	beq.w	800bc6c <_dtoa_r+0x204>
 800bb64:	ee19 3a90 	vmov	r3, s19
 800bb68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bb70:	4656      	mov	r6, sl
 800bb72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bb76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bb7e:	4b74      	ldr	r3, [pc, #464]	; (800bd50 <_dtoa_r+0x2e8>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	4630      	mov	r0, r6
 800bb84:	4639      	mov	r1, r7
 800bb86:	f7f4 fb9f 	bl	80002c8 <__aeabi_dsub>
 800bb8a:	a365      	add	r3, pc, #404	; (adr r3, 800bd20 <_dtoa_r+0x2b8>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	f7f4 fd52 	bl	8000638 <__aeabi_dmul>
 800bb94:	a364      	add	r3, pc, #400	; (adr r3, 800bd28 <_dtoa_r+0x2c0>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	f7f4 fb97 	bl	80002cc <__adddf3>
 800bb9e:	4606      	mov	r6, r0
 800bba0:	4628      	mov	r0, r5
 800bba2:	460f      	mov	r7, r1
 800bba4:	f7f4 fcde 	bl	8000564 <__aeabi_i2d>
 800bba8:	a361      	add	r3, pc, #388	; (adr r3, 800bd30 <_dtoa_r+0x2c8>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	f7f4 fd43 	bl	8000638 <__aeabi_dmul>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	4639      	mov	r1, r7
 800bbba:	f7f4 fb87 	bl	80002cc <__adddf3>
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	f7f4 ffe9 	bl	8000b98 <__aeabi_d2iz>
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	9000      	str	r0, [sp, #0]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	4630      	mov	r0, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	f7f4 ffa4 	bl	8000b1c <__aeabi_dcmplt>
 800bbd4:	b150      	cbz	r0, 800bbec <_dtoa_r+0x184>
 800bbd6:	9800      	ldr	r0, [sp, #0]
 800bbd8:	f7f4 fcc4 	bl	8000564 <__aeabi_i2d>
 800bbdc:	4632      	mov	r2, r6
 800bbde:	463b      	mov	r3, r7
 800bbe0:	f7f4 ff92 	bl	8000b08 <__aeabi_dcmpeq>
 800bbe4:	b910      	cbnz	r0, 800bbec <_dtoa_r+0x184>
 800bbe6:	9b00      	ldr	r3, [sp, #0]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	9b00      	ldr	r3, [sp, #0]
 800bbee:	2b16      	cmp	r3, #22
 800bbf0:	d85a      	bhi.n	800bca8 <_dtoa_r+0x240>
 800bbf2:	9a00      	ldr	r2, [sp, #0]
 800bbf4:	4b57      	ldr	r3, [pc, #348]	; (800bd54 <_dtoa_r+0x2ec>)
 800bbf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	ec51 0b19 	vmov	r0, r1, d9
 800bc02:	f7f4 ff8b 	bl	8000b1c <__aeabi_dcmplt>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d050      	beq.n	800bcac <_dtoa_r+0x244>
 800bc0a:	9b00      	ldr	r3, [sp, #0]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	2300      	movs	r3, #0
 800bc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc16:	1b5d      	subs	r5, r3, r5
 800bc18:	1e6b      	subs	r3, r5, #1
 800bc1a:	9305      	str	r3, [sp, #20]
 800bc1c:	bf45      	ittet	mi
 800bc1e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bc22:	9304      	strmi	r3, [sp, #16]
 800bc24:	2300      	movpl	r3, #0
 800bc26:	2300      	movmi	r3, #0
 800bc28:	bf4c      	ite	mi
 800bc2a:	9305      	strmi	r3, [sp, #20]
 800bc2c:	9304      	strpl	r3, [sp, #16]
 800bc2e:	9b00      	ldr	r3, [sp, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	db3d      	blt.n	800bcb0 <_dtoa_r+0x248>
 800bc34:	9b05      	ldr	r3, [sp, #20]
 800bc36:	9a00      	ldr	r2, [sp, #0]
 800bc38:	920a      	str	r2, [sp, #40]	; 0x28
 800bc3a:	4413      	add	r3, r2
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9307      	str	r3, [sp, #28]
 800bc42:	9b06      	ldr	r3, [sp, #24]
 800bc44:	2b09      	cmp	r3, #9
 800bc46:	f200 8089 	bhi.w	800bd5c <_dtoa_r+0x2f4>
 800bc4a:	2b05      	cmp	r3, #5
 800bc4c:	bfc4      	itt	gt
 800bc4e:	3b04      	subgt	r3, #4
 800bc50:	9306      	strgt	r3, [sp, #24]
 800bc52:	9b06      	ldr	r3, [sp, #24]
 800bc54:	f1a3 0302 	sub.w	r3, r3, #2
 800bc58:	bfcc      	ite	gt
 800bc5a:	2500      	movgt	r5, #0
 800bc5c:	2501      	movle	r5, #1
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	f200 8087 	bhi.w	800bd72 <_dtoa_r+0x30a>
 800bc64:	e8df f003 	tbb	[pc, r3]
 800bc68:	59383a2d 	.word	0x59383a2d
 800bc6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bc70:	441d      	add	r5, r3
 800bc72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	bfc1      	itttt	gt
 800bc7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bc82:	fa0b f303 	lslgt.w	r3, fp, r3
 800bc86:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bc8a:	bfda      	itte	le
 800bc8c:	f1c3 0320 	rsble	r3, r3, #32
 800bc90:	fa06 f003 	lslle.w	r0, r6, r3
 800bc94:	4318      	orrgt	r0, r3
 800bc96:	f7f4 fc55 	bl	8000544 <__aeabi_ui2d>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bca2:	3d01      	subs	r5, #1
 800bca4:	930e      	str	r3, [sp, #56]	; 0x38
 800bca6:	e76a      	b.n	800bb7e <_dtoa_r+0x116>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e7b2      	b.n	800bc12 <_dtoa_r+0x1aa>
 800bcac:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcae:	e7b1      	b.n	800bc14 <_dtoa_r+0x1ac>
 800bcb0:	9b04      	ldr	r3, [sp, #16]
 800bcb2:	9a00      	ldr	r2, [sp, #0]
 800bcb4:	1a9b      	subs	r3, r3, r2
 800bcb6:	9304      	str	r3, [sp, #16]
 800bcb8:	4253      	negs	r3, r2
 800bcba:	9307      	str	r3, [sp, #28]
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc0:	e7bf      	b.n	800bc42 <_dtoa_r+0x1da>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	9308      	str	r3, [sp, #32]
 800bcc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	dc55      	bgt.n	800bd78 <_dtoa_r+0x310>
 800bccc:	2301      	movs	r3, #1
 800bcce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd6:	e00c      	b.n	800bcf2 <_dtoa_r+0x28a>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e7f3      	b.n	800bcc4 <_dtoa_r+0x25c>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bce0:	9308      	str	r3, [sp, #32]
 800bce2:	9b00      	ldr	r3, [sp, #0]
 800bce4:	4413      	add	r3, r2
 800bce6:	9302      	str	r3, [sp, #8]
 800bce8:	3301      	adds	r3, #1
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	9303      	str	r3, [sp, #12]
 800bcee:	bfb8      	it	lt
 800bcf0:	2301      	movlt	r3, #1
 800bcf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	6042      	str	r2, [r0, #4]
 800bcf8:	2204      	movs	r2, #4
 800bcfa:	f102 0614 	add.w	r6, r2, #20
 800bcfe:	429e      	cmp	r6, r3
 800bd00:	6841      	ldr	r1, [r0, #4]
 800bd02:	d93d      	bls.n	800bd80 <_dtoa_r+0x318>
 800bd04:	4620      	mov	r0, r4
 800bd06:	f001 f90b 	bl	800cf20 <_Balloc>
 800bd0a:	9001      	str	r0, [sp, #4]
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d13b      	bne.n	800bd88 <_dtoa_r+0x320>
 800bd10:	4b11      	ldr	r3, [pc, #68]	; (800bd58 <_dtoa_r+0x2f0>)
 800bd12:	4602      	mov	r2, r0
 800bd14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd18:	e6c0      	b.n	800ba9c <_dtoa_r+0x34>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e7df      	b.n	800bcde <_dtoa_r+0x276>
 800bd1e:	bf00      	nop
 800bd20:	636f4361 	.word	0x636f4361
 800bd24:	3fd287a7 	.word	0x3fd287a7
 800bd28:	8b60c8b3 	.word	0x8b60c8b3
 800bd2c:	3fc68a28 	.word	0x3fc68a28
 800bd30:	509f79fb 	.word	0x509f79fb
 800bd34:	3fd34413 	.word	0x3fd34413
 800bd38:	0802b55e 	.word	0x0802b55e
 800bd3c:	0802b575 	.word	0x0802b575
 800bd40:	7ff00000 	.word	0x7ff00000
 800bd44:	0802b55a 	.word	0x0802b55a
 800bd48:	0802b551 	.word	0x0802b551
 800bd4c:	0802b3d5 	.word	0x0802b3d5
 800bd50:	3ff80000 	.word	0x3ff80000
 800bd54:	0802b6e0 	.word	0x0802b6e0
 800bd58:	0802b5d0 	.word	0x0802b5d0
 800bd5c:	2501      	movs	r5, #1
 800bd5e:	2300      	movs	r3, #0
 800bd60:	9306      	str	r3, [sp, #24]
 800bd62:	9508      	str	r5, [sp, #32]
 800bd64:	f04f 33ff 	mov.w	r3, #4294967295
 800bd68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2312      	movs	r3, #18
 800bd70:	e7b0      	b.n	800bcd4 <_dtoa_r+0x26c>
 800bd72:	2301      	movs	r3, #1
 800bd74:	9308      	str	r3, [sp, #32]
 800bd76:	e7f5      	b.n	800bd64 <_dtoa_r+0x2fc>
 800bd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd7e:	e7b8      	b.n	800bcf2 <_dtoa_r+0x28a>
 800bd80:	3101      	adds	r1, #1
 800bd82:	6041      	str	r1, [r0, #4]
 800bd84:	0052      	lsls	r2, r2, #1
 800bd86:	e7b8      	b.n	800bcfa <_dtoa_r+0x292>
 800bd88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd8a:	9a01      	ldr	r2, [sp, #4]
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	2b0e      	cmp	r3, #14
 800bd92:	f200 809d 	bhi.w	800bed0 <_dtoa_r+0x468>
 800bd96:	2d00      	cmp	r5, #0
 800bd98:	f000 809a 	beq.w	800bed0 <_dtoa_r+0x468>
 800bd9c:	9b00      	ldr	r3, [sp, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	dd32      	ble.n	800be08 <_dtoa_r+0x3a0>
 800bda2:	4ab7      	ldr	r2, [pc, #732]	; (800c080 <_dtoa_r+0x618>)
 800bda4:	f003 030f 	and.w	r3, r3, #15
 800bda8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bdac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdb0:	9b00      	ldr	r3, [sp, #0]
 800bdb2:	05d8      	lsls	r0, r3, #23
 800bdb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bdb8:	d516      	bpl.n	800bde8 <_dtoa_r+0x380>
 800bdba:	4bb2      	ldr	r3, [pc, #712]	; (800c084 <_dtoa_r+0x61c>)
 800bdbc:	ec51 0b19 	vmov	r0, r1, d9
 800bdc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdc4:	f7f4 fd62 	bl	800088c <__aeabi_ddiv>
 800bdc8:	f007 070f 	and.w	r7, r7, #15
 800bdcc:	4682      	mov	sl, r0
 800bdce:	468b      	mov	fp, r1
 800bdd0:	2503      	movs	r5, #3
 800bdd2:	4eac      	ldr	r6, [pc, #688]	; (800c084 <_dtoa_r+0x61c>)
 800bdd4:	b957      	cbnz	r7, 800bdec <_dtoa_r+0x384>
 800bdd6:	4642      	mov	r2, r8
 800bdd8:	464b      	mov	r3, r9
 800bdda:	4650      	mov	r0, sl
 800bddc:	4659      	mov	r1, fp
 800bdde:	f7f4 fd55 	bl	800088c <__aeabi_ddiv>
 800bde2:	4682      	mov	sl, r0
 800bde4:	468b      	mov	fp, r1
 800bde6:	e028      	b.n	800be3a <_dtoa_r+0x3d2>
 800bde8:	2502      	movs	r5, #2
 800bdea:	e7f2      	b.n	800bdd2 <_dtoa_r+0x36a>
 800bdec:	07f9      	lsls	r1, r7, #31
 800bdee:	d508      	bpl.n	800be02 <_dtoa_r+0x39a>
 800bdf0:	4640      	mov	r0, r8
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdf8:	f7f4 fc1e 	bl	8000638 <__aeabi_dmul>
 800bdfc:	3501      	adds	r5, #1
 800bdfe:	4680      	mov	r8, r0
 800be00:	4689      	mov	r9, r1
 800be02:	107f      	asrs	r7, r7, #1
 800be04:	3608      	adds	r6, #8
 800be06:	e7e5      	b.n	800bdd4 <_dtoa_r+0x36c>
 800be08:	f000 809b 	beq.w	800bf42 <_dtoa_r+0x4da>
 800be0c:	9b00      	ldr	r3, [sp, #0]
 800be0e:	4f9d      	ldr	r7, [pc, #628]	; (800c084 <_dtoa_r+0x61c>)
 800be10:	425e      	negs	r6, r3
 800be12:	4b9b      	ldr	r3, [pc, #620]	; (800c080 <_dtoa_r+0x618>)
 800be14:	f006 020f 	and.w	r2, r6, #15
 800be18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	ec51 0b19 	vmov	r0, r1, d9
 800be24:	f7f4 fc08 	bl	8000638 <__aeabi_dmul>
 800be28:	1136      	asrs	r6, r6, #4
 800be2a:	4682      	mov	sl, r0
 800be2c:	468b      	mov	fp, r1
 800be2e:	2300      	movs	r3, #0
 800be30:	2502      	movs	r5, #2
 800be32:	2e00      	cmp	r6, #0
 800be34:	d17a      	bne.n	800bf2c <_dtoa_r+0x4c4>
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1d3      	bne.n	800bde2 <_dtoa_r+0x37a>
 800be3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 8082 	beq.w	800bf46 <_dtoa_r+0x4de>
 800be42:	4b91      	ldr	r3, [pc, #580]	; (800c088 <_dtoa_r+0x620>)
 800be44:	2200      	movs	r2, #0
 800be46:	4650      	mov	r0, sl
 800be48:	4659      	mov	r1, fp
 800be4a:	f7f4 fe67 	bl	8000b1c <__aeabi_dcmplt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d079      	beq.n	800bf46 <_dtoa_r+0x4de>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d076      	beq.n	800bf46 <_dtoa_r+0x4de>
 800be58:	9b02      	ldr	r3, [sp, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	dd36      	ble.n	800becc <_dtoa_r+0x464>
 800be5e:	9b00      	ldr	r3, [sp, #0]
 800be60:	4650      	mov	r0, sl
 800be62:	4659      	mov	r1, fp
 800be64:	1e5f      	subs	r7, r3, #1
 800be66:	2200      	movs	r2, #0
 800be68:	4b88      	ldr	r3, [pc, #544]	; (800c08c <_dtoa_r+0x624>)
 800be6a:	f7f4 fbe5 	bl	8000638 <__aeabi_dmul>
 800be6e:	9e02      	ldr	r6, [sp, #8]
 800be70:	4682      	mov	sl, r0
 800be72:	468b      	mov	fp, r1
 800be74:	3501      	adds	r5, #1
 800be76:	4628      	mov	r0, r5
 800be78:	f7f4 fb74 	bl	8000564 <__aeabi_i2d>
 800be7c:	4652      	mov	r2, sl
 800be7e:	465b      	mov	r3, fp
 800be80:	f7f4 fbda 	bl	8000638 <__aeabi_dmul>
 800be84:	4b82      	ldr	r3, [pc, #520]	; (800c090 <_dtoa_r+0x628>)
 800be86:	2200      	movs	r2, #0
 800be88:	f7f4 fa20 	bl	80002cc <__adddf3>
 800be8c:	46d0      	mov	r8, sl
 800be8e:	46d9      	mov	r9, fp
 800be90:	4682      	mov	sl, r0
 800be92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800be96:	2e00      	cmp	r6, #0
 800be98:	d158      	bne.n	800bf4c <_dtoa_r+0x4e4>
 800be9a:	4b7e      	ldr	r3, [pc, #504]	; (800c094 <_dtoa_r+0x62c>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	4640      	mov	r0, r8
 800bea0:	4649      	mov	r1, r9
 800bea2:	f7f4 fa11 	bl	80002c8 <__aeabi_dsub>
 800bea6:	4652      	mov	r2, sl
 800bea8:	465b      	mov	r3, fp
 800beaa:	4680      	mov	r8, r0
 800beac:	4689      	mov	r9, r1
 800beae:	f7f4 fe53 	bl	8000b58 <__aeabi_dcmpgt>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	f040 8295 	bne.w	800c3e2 <_dtoa_r+0x97a>
 800beb8:	4652      	mov	r2, sl
 800beba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bebe:	4640      	mov	r0, r8
 800bec0:	4649      	mov	r1, r9
 800bec2:	f7f4 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f040 8289 	bne.w	800c3de <_dtoa_r+0x976>
 800becc:	ec5b ab19 	vmov	sl, fp, d9
 800bed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f2c0 8148 	blt.w	800c168 <_dtoa_r+0x700>
 800bed8:	9a00      	ldr	r2, [sp, #0]
 800beda:	2a0e      	cmp	r2, #14
 800bedc:	f300 8144 	bgt.w	800c168 <_dtoa_r+0x700>
 800bee0:	4b67      	ldr	r3, [pc, #412]	; (800c080 <_dtoa_r+0x618>)
 800bee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bee6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800beea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beec:	2b00      	cmp	r3, #0
 800beee:	f280 80d5 	bge.w	800c09c <_dtoa_r+0x634>
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f300 80d1 	bgt.w	800c09c <_dtoa_r+0x634>
 800befa:	f040 826f 	bne.w	800c3dc <_dtoa_r+0x974>
 800befe:	4b65      	ldr	r3, [pc, #404]	; (800c094 <_dtoa_r+0x62c>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	4640      	mov	r0, r8
 800bf04:	4649      	mov	r1, r9
 800bf06:	f7f4 fb97 	bl	8000638 <__aeabi_dmul>
 800bf0a:	4652      	mov	r2, sl
 800bf0c:	465b      	mov	r3, fp
 800bf0e:	f7f4 fe19 	bl	8000b44 <__aeabi_dcmpge>
 800bf12:	9e03      	ldr	r6, [sp, #12]
 800bf14:	4637      	mov	r7, r6
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f040 8245 	bne.w	800c3a6 <_dtoa_r+0x93e>
 800bf1c:	9d01      	ldr	r5, [sp, #4]
 800bf1e:	2331      	movs	r3, #49	; 0x31
 800bf20:	f805 3b01 	strb.w	r3, [r5], #1
 800bf24:	9b00      	ldr	r3, [sp, #0]
 800bf26:	3301      	adds	r3, #1
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	e240      	b.n	800c3ae <_dtoa_r+0x946>
 800bf2c:	07f2      	lsls	r2, r6, #31
 800bf2e:	d505      	bpl.n	800bf3c <_dtoa_r+0x4d4>
 800bf30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf34:	f7f4 fb80 	bl	8000638 <__aeabi_dmul>
 800bf38:	3501      	adds	r5, #1
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	1076      	asrs	r6, r6, #1
 800bf3e:	3708      	adds	r7, #8
 800bf40:	e777      	b.n	800be32 <_dtoa_r+0x3ca>
 800bf42:	2502      	movs	r5, #2
 800bf44:	e779      	b.n	800be3a <_dtoa_r+0x3d2>
 800bf46:	9f00      	ldr	r7, [sp, #0]
 800bf48:	9e03      	ldr	r6, [sp, #12]
 800bf4a:	e794      	b.n	800be76 <_dtoa_r+0x40e>
 800bf4c:	9901      	ldr	r1, [sp, #4]
 800bf4e:	4b4c      	ldr	r3, [pc, #304]	; (800c080 <_dtoa_r+0x618>)
 800bf50:	4431      	add	r1, r6
 800bf52:	910d      	str	r1, [sp, #52]	; 0x34
 800bf54:	9908      	ldr	r1, [sp, #32]
 800bf56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	d043      	beq.n	800bfea <_dtoa_r+0x582>
 800bf62:	494d      	ldr	r1, [pc, #308]	; (800c098 <_dtoa_r+0x630>)
 800bf64:	2000      	movs	r0, #0
 800bf66:	f7f4 fc91 	bl	800088c <__aeabi_ddiv>
 800bf6a:	4652      	mov	r2, sl
 800bf6c:	465b      	mov	r3, fp
 800bf6e:	f7f4 f9ab 	bl	80002c8 <__aeabi_dsub>
 800bf72:	9d01      	ldr	r5, [sp, #4]
 800bf74:	4682      	mov	sl, r0
 800bf76:	468b      	mov	fp, r1
 800bf78:	4649      	mov	r1, r9
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	f7f4 fe0c 	bl	8000b98 <__aeabi_d2iz>
 800bf80:	4606      	mov	r6, r0
 800bf82:	f7f4 faef 	bl	8000564 <__aeabi_i2d>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	4649      	mov	r1, r9
 800bf8e:	f7f4 f99b 	bl	80002c8 <__aeabi_dsub>
 800bf92:	3630      	adds	r6, #48	; 0x30
 800bf94:	f805 6b01 	strb.w	r6, [r5], #1
 800bf98:	4652      	mov	r2, sl
 800bf9a:	465b      	mov	r3, fp
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	4689      	mov	r9, r1
 800bfa0:	f7f4 fdbc 	bl	8000b1c <__aeabi_dcmplt>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d163      	bne.n	800c070 <_dtoa_r+0x608>
 800bfa8:	4642      	mov	r2, r8
 800bfaa:	464b      	mov	r3, r9
 800bfac:	4936      	ldr	r1, [pc, #216]	; (800c088 <_dtoa_r+0x620>)
 800bfae:	2000      	movs	r0, #0
 800bfb0:	f7f4 f98a 	bl	80002c8 <__aeabi_dsub>
 800bfb4:	4652      	mov	r2, sl
 800bfb6:	465b      	mov	r3, fp
 800bfb8:	f7f4 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	f040 80b5 	bne.w	800c12c <_dtoa_r+0x6c4>
 800bfc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfc4:	429d      	cmp	r5, r3
 800bfc6:	d081      	beq.n	800becc <_dtoa_r+0x464>
 800bfc8:	4b30      	ldr	r3, [pc, #192]	; (800c08c <_dtoa_r+0x624>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	4650      	mov	r0, sl
 800bfce:	4659      	mov	r1, fp
 800bfd0:	f7f4 fb32 	bl	8000638 <__aeabi_dmul>
 800bfd4:	4b2d      	ldr	r3, [pc, #180]	; (800c08c <_dtoa_r+0x624>)
 800bfd6:	4682      	mov	sl, r0
 800bfd8:	468b      	mov	fp, r1
 800bfda:	4640      	mov	r0, r8
 800bfdc:	4649      	mov	r1, r9
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f7f4 fb2a 	bl	8000638 <__aeabi_dmul>
 800bfe4:	4680      	mov	r8, r0
 800bfe6:	4689      	mov	r9, r1
 800bfe8:	e7c6      	b.n	800bf78 <_dtoa_r+0x510>
 800bfea:	4650      	mov	r0, sl
 800bfec:	4659      	mov	r1, fp
 800bfee:	f7f4 fb23 	bl	8000638 <__aeabi_dmul>
 800bff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bff4:	9d01      	ldr	r5, [sp, #4]
 800bff6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bff8:	4682      	mov	sl, r0
 800bffa:	468b      	mov	fp, r1
 800bffc:	4649      	mov	r1, r9
 800bffe:	4640      	mov	r0, r8
 800c000:	f7f4 fdca 	bl	8000b98 <__aeabi_d2iz>
 800c004:	4606      	mov	r6, r0
 800c006:	f7f4 faad 	bl	8000564 <__aeabi_i2d>
 800c00a:	3630      	adds	r6, #48	; 0x30
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4640      	mov	r0, r8
 800c012:	4649      	mov	r1, r9
 800c014:	f7f4 f958 	bl	80002c8 <__aeabi_dsub>
 800c018:	f805 6b01 	strb.w	r6, [r5], #1
 800c01c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c01e:	429d      	cmp	r5, r3
 800c020:	4680      	mov	r8, r0
 800c022:	4689      	mov	r9, r1
 800c024:	f04f 0200 	mov.w	r2, #0
 800c028:	d124      	bne.n	800c074 <_dtoa_r+0x60c>
 800c02a:	4b1b      	ldr	r3, [pc, #108]	; (800c098 <_dtoa_r+0x630>)
 800c02c:	4650      	mov	r0, sl
 800c02e:	4659      	mov	r1, fp
 800c030:	f7f4 f94c 	bl	80002cc <__adddf3>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f7f4 fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 800c040:	2800      	cmp	r0, #0
 800c042:	d173      	bne.n	800c12c <_dtoa_r+0x6c4>
 800c044:	4652      	mov	r2, sl
 800c046:	465b      	mov	r3, fp
 800c048:	4913      	ldr	r1, [pc, #76]	; (800c098 <_dtoa_r+0x630>)
 800c04a:	2000      	movs	r0, #0
 800c04c:	f7f4 f93c 	bl	80002c8 <__aeabi_dsub>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4640      	mov	r0, r8
 800c056:	4649      	mov	r1, r9
 800c058:	f7f4 fd60 	bl	8000b1c <__aeabi_dcmplt>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	f43f af35 	beq.w	800becc <_dtoa_r+0x464>
 800c062:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c064:	1e6b      	subs	r3, r5, #1
 800c066:	930f      	str	r3, [sp, #60]	; 0x3c
 800c068:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c06c:	2b30      	cmp	r3, #48	; 0x30
 800c06e:	d0f8      	beq.n	800c062 <_dtoa_r+0x5fa>
 800c070:	9700      	str	r7, [sp, #0]
 800c072:	e049      	b.n	800c108 <_dtoa_r+0x6a0>
 800c074:	4b05      	ldr	r3, [pc, #20]	; (800c08c <_dtoa_r+0x624>)
 800c076:	f7f4 fadf 	bl	8000638 <__aeabi_dmul>
 800c07a:	4680      	mov	r8, r0
 800c07c:	4689      	mov	r9, r1
 800c07e:	e7bd      	b.n	800bffc <_dtoa_r+0x594>
 800c080:	0802b6e0 	.word	0x0802b6e0
 800c084:	0802b6b8 	.word	0x0802b6b8
 800c088:	3ff00000 	.word	0x3ff00000
 800c08c:	40240000 	.word	0x40240000
 800c090:	401c0000 	.word	0x401c0000
 800c094:	40140000 	.word	0x40140000
 800c098:	3fe00000 	.word	0x3fe00000
 800c09c:	9d01      	ldr	r5, [sp, #4]
 800c09e:	4656      	mov	r6, sl
 800c0a0:	465f      	mov	r7, fp
 800c0a2:	4642      	mov	r2, r8
 800c0a4:	464b      	mov	r3, r9
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 fbef 	bl	800088c <__aeabi_ddiv>
 800c0ae:	f7f4 fd73 	bl	8000b98 <__aeabi_d2iz>
 800c0b2:	4682      	mov	sl, r0
 800c0b4:	f7f4 fa56 	bl	8000564 <__aeabi_i2d>
 800c0b8:	4642      	mov	r2, r8
 800c0ba:	464b      	mov	r3, r9
 800c0bc:	f7f4 fabc 	bl	8000638 <__aeabi_dmul>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c0cc:	f7f4 f8fc 	bl	80002c8 <__aeabi_dsub>
 800c0d0:	f805 6b01 	strb.w	r6, [r5], #1
 800c0d4:	9e01      	ldr	r6, [sp, #4]
 800c0d6:	9f03      	ldr	r7, [sp, #12]
 800c0d8:	1bae      	subs	r6, r5, r6
 800c0da:	42b7      	cmp	r7, r6
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	d135      	bne.n	800c14e <_dtoa_r+0x6e6>
 800c0e2:	f7f4 f8f3 	bl	80002cc <__adddf3>
 800c0e6:	4642      	mov	r2, r8
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	f7f4 fd33 	bl	8000b58 <__aeabi_dcmpgt>
 800c0f2:	b9d0      	cbnz	r0, 800c12a <_dtoa_r+0x6c2>
 800c0f4:	4642      	mov	r2, r8
 800c0f6:	464b      	mov	r3, r9
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 fd04 	bl	8000b08 <__aeabi_dcmpeq>
 800c100:	b110      	cbz	r0, 800c108 <_dtoa_r+0x6a0>
 800c102:	f01a 0f01 	tst.w	sl, #1
 800c106:	d110      	bne.n	800c12a <_dtoa_r+0x6c2>
 800c108:	4620      	mov	r0, r4
 800c10a:	ee18 1a10 	vmov	r1, s16
 800c10e:	f000 ff47 	bl	800cfa0 <_Bfree>
 800c112:	2300      	movs	r3, #0
 800c114:	9800      	ldr	r0, [sp, #0]
 800c116:	702b      	strb	r3, [r5, #0]
 800c118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c11a:	3001      	adds	r0, #1
 800c11c:	6018      	str	r0, [r3, #0]
 800c11e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c120:	2b00      	cmp	r3, #0
 800c122:	f43f acf1 	beq.w	800bb08 <_dtoa_r+0xa0>
 800c126:	601d      	str	r5, [r3, #0]
 800c128:	e4ee      	b.n	800bb08 <_dtoa_r+0xa0>
 800c12a:	9f00      	ldr	r7, [sp, #0]
 800c12c:	462b      	mov	r3, r5
 800c12e:	461d      	mov	r5, r3
 800c130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c134:	2a39      	cmp	r2, #57	; 0x39
 800c136:	d106      	bne.n	800c146 <_dtoa_r+0x6de>
 800c138:	9a01      	ldr	r2, [sp, #4]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d1f7      	bne.n	800c12e <_dtoa_r+0x6c6>
 800c13e:	9901      	ldr	r1, [sp, #4]
 800c140:	2230      	movs	r2, #48	; 0x30
 800c142:	3701      	adds	r7, #1
 800c144:	700a      	strb	r2, [r1, #0]
 800c146:	781a      	ldrb	r2, [r3, #0]
 800c148:	3201      	adds	r2, #1
 800c14a:	701a      	strb	r2, [r3, #0]
 800c14c:	e790      	b.n	800c070 <_dtoa_r+0x608>
 800c14e:	4ba6      	ldr	r3, [pc, #664]	; (800c3e8 <_dtoa_r+0x980>)
 800c150:	2200      	movs	r2, #0
 800c152:	f7f4 fa71 	bl	8000638 <__aeabi_dmul>
 800c156:	2200      	movs	r2, #0
 800c158:	2300      	movs	r3, #0
 800c15a:	4606      	mov	r6, r0
 800c15c:	460f      	mov	r7, r1
 800c15e:	f7f4 fcd3 	bl	8000b08 <__aeabi_dcmpeq>
 800c162:	2800      	cmp	r0, #0
 800c164:	d09d      	beq.n	800c0a2 <_dtoa_r+0x63a>
 800c166:	e7cf      	b.n	800c108 <_dtoa_r+0x6a0>
 800c168:	9a08      	ldr	r2, [sp, #32]
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	f000 80d7 	beq.w	800c31e <_dtoa_r+0x8b6>
 800c170:	9a06      	ldr	r2, [sp, #24]
 800c172:	2a01      	cmp	r2, #1
 800c174:	f300 80ba 	bgt.w	800c2ec <_dtoa_r+0x884>
 800c178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c17a:	2a00      	cmp	r2, #0
 800c17c:	f000 80b2 	beq.w	800c2e4 <_dtoa_r+0x87c>
 800c180:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c184:	9e07      	ldr	r6, [sp, #28]
 800c186:	9d04      	ldr	r5, [sp, #16]
 800c188:	9a04      	ldr	r2, [sp, #16]
 800c18a:	441a      	add	r2, r3
 800c18c:	9204      	str	r2, [sp, #16]
 800c18e:	9a05      	ldr	r2, [sp, #20]
 800c190:	2101      	movs	r1, #1
 800c192:	441a      	add	r2, r3
 800c194:	4620      	mov	r0, r4
 800c196:	9205      	str	r2, [sp, #20]
 800c198:	f001 f804 	bl	800d1a4 <__i2b>
 800c19c:	4607      	mov	r7, r0
 800c19e:	2d00      	cmp	r5, #0
 800c1a0:	dd0c      	ble.n	800c1bc <_dtoa_r+0x754>
 800c1a2:	9b05      	ldr	r3, [sp, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd09      	ble.n	800c1bc <_dtoa_r+0x754>
 800c1a8:	42ab      	cmp	r3, r5
 800c1aa:	9a04      	ldr	r2, [sp, #16]
 800c1ac:	bfa8      	it	ge
 800c1ae:	462b      	movge	r3, r5
 800c1b0:	1ad2      	subs	r2, r2, r3
 800c1b2:	9204      	str	r2, [sp, #16]
 800c1b4:	9a05      	ldr	r2, [sp, #20]
 800c1b6:	1aed      	subs	r5, r5, r3
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	9305      	str	r3, [sp, #20]
 800c1bc:	9b07      	ldr	r3, [sp, #28]
 800c1be:	b31b      	cbz	r3, 800c208 <_dtoa_r+0x7a0>
 800c1c0:	9b08      	ldr	r3, [sp, #32]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 80af 	beq.w	800c326 <_dtoa_r+0x8be>
 800c1c8:	2e00      	cmp	r6, #0
 800c1ca:	dd13      	ble.n	800c1f4 <_dtoa_r+0x78c>
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	4632      	mov	r2, r6
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f001 f8a7 	bl	800d324 <__pow5mult>
 800c1d6:	ee18 2a10 	vmov	r2, s16
 800c1da:	4601      	mov	r1, r0
 800c1dc:	4607      	mov	r7, r0
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 fff6 	bl	800d1d0 <__multiply>
 800c1e4:	ee18 1a10 	vmov	r1, s16
 800c1e8:	4680      	mov	r8, r0
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 fed8 	bl	800cfa0 <_Bfree>
 800c1f0:	ee08 8a10 	vmov	s16, r8
 800c1f4:	9b07      	ldr	r3, [sp, #28]
 800c1f6:	1b9a      	subs	r2, r3, r6
 800c1f8:	d006      	beq.n	800c208 <_dtoa_r+0x7a0>
 800c1fa:	ee18 1a10 	vmov	r1, s16
 800c1fe:	4620      	mov	r0, r4
 800c200:	f001 f890 	bl	800d324 <__pow5mult>
 800c204:	ee08 0a10 	vmov	s16, r0
 800c208:	2101      	movs	r1, #1
 800c20a:	4620      	mov	r0, r4
 800c20c:	f000 ffca 	bl	800d1a4 <__i2b>
 800c210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c212:	2b00      	cmp	r3, #0
 800c214:	4606      	mov	r6, r0
 800c216:	f340 8088 	ble.w	800c32a <_dtoa_r+0x8c2>
 800c21a:	461a      	mov	r2, r3
 800c21c:	4601      	mov	r1, r0
 800c21e:	4620      	mov	r0, r4
 800c220:	f001 f880 	bl	800d324 <__pow5mult>
 800c224:	9b06      	ldr	r3, [sp, #24]
 800c226:	2b01      	cmp	r3, #1
 800c228:	4606      	mov	r6, r0
 800c22a:	f340 8081 	ble.w	800c330 <_dtoa_r+0x8c8>
 800c22e:	f04f 0800 	mov.w	r8, #0
 800c232:	6933      	ldr	r3, [r6, #16]
 800c234:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c238:	6918      	ldr	r0, [r3, #16]
 800c23a:	f000 ff63 	bl	800d104 <__hi0bits>
 800c23e:	f1c0 0020 	rsb	r0, r0, #32
 800c242:	9b05      	ldr	r3, [sp, #20]
 800c244:	4418      	add	r0, r3
 800c246:	f010 001f 	ands.w	r0, r0, #31
 800c24a:	f000 8092 	beq.w	800c372 <_dtoa_r+0x90a>
 800c24e:	f1c0 0320 	rsb	r3, r0, #32
 800c252:	2b04      	cmp	r3, #4
 800c254:	f340 808a 	ble.w	800c36c <_dtoa_r+0x904>
 800c258:	f1c0 001c 	rsb	r0, r0, #28
 800c25c:	9b04      	ldr	r3, [sp, #16]
 800c25e:	4403      	add	r3, r0
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	9b05      	ldr	r3, [sp, #20]
 800c264:	4403      	add	r3, r0
 800c266:	4405      	add	r5, r0
 800c268:	9305      	str	r3, [sp, #20]
 800c26a:	9b04      	ldr	r3, [sp, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	dd07      	ble.n	800c280 <_dtoa_r+0x818>
 800c270:	ee18 1a10 	vmov	r1, s16
 800c274:	461a      	mov	r2, r3
 800c276:	4620      	mov	r0, r4
 800c278:	f001 f8ae 	bl	800d3d8 <__lshift>
 800c27c:	ee08 0a10 	vmov	s16, r0
 800c280:	9b05      	ldr	r3, [sp, #20]
 800c282:	2b00      	cmp	r3, #0
 800c284:	dd05      	ble.n	800c292 <_dtoa_r+0x82a>
 800c286:	4631      	mov	r1, r6
 800c288:	461a      	mov	r2, r3
 800c28a:	4620      	mov	r0, r4
 800c28c:	f001 f8a4 	bl	800d3d8 <__lshift>
 800c290:	4606      	mov	r6, r0
 800c292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d06e      	beq.n	800c376 <_dtoa_r+0x90e>
 800c298:	ee18 0a10 	vmov	r0, s16
 800c29c:	4631      	mov	r1, r6
 800c29e:	f001 f90b 	bl	800d4b8 <__mcmp>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	da67      	bge.n	800c376 <_dtoa_r+0x90e>
 800c2a6:	9b00      	ldr	r3, [sp, #0]
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	ee18 1a10 	vmov	r1, s16
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	220a      	movs	r2, #10
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f000 fe95 	bl	800cfe4 <__multadd>
 800c2ba:	9b08      	ldr	r3, [sp, #32]
 800c2bc:	ee08 0a10 	vmov	s16, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 81b1 	beq.w	800c628 <_dtoa_r+0xbc0>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	220a      	movs	r2, #10
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fe89 	bl	800cfe4 <__multadd>
 800c2d2:	9b02      	ldr	r3, [sp, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	f300 808e 	bgt.w	800c3f8 <_dtoa_r+0x990>
 800c2dc:	9b06      	ldr	r3, [sp, #24]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	dc51      	bgt.n	800c386 <_dtoa_r+0x91e>
 800c2e2:	e089      	b.n	800c3f8 <_dtoa_r+0x990>
 800c2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2ea:	e74b      	b.n	800c184 <_dtoa_r+0x71c>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	1e5e      	subs	r6, r3, #1
 800c2f0:	9b07      	ldr	r3, [sp, #28]
 800c2f2:	42b3      	cmp	r3, r6
 800c2f4:	bfbf      	itttt	lt
 800c2f6:	9b07      	ldrlt	r3, [sp, #28]
 800c2f8:	9607      	strlt	r6, [sp, #28]
 800c2fa:	1af2      	sublt	r2, r6, r3
 800c2fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c2fe:	bfb6      	itet	lt
 800c300:	189b      	addlt	r3, r3, r2
 800c302:	1b9e      	subge	r6, r3, r6
 800c304:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c306:	9b03      	ldr	r3, [sp, #12]
 800c308:	bfb8      	it	lt
 800c30a:	2600      	movlt	r6, #0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bfb7      	itett	lt
 800c310:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c314:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c318:	1a9d      	sublt	r5, r3, r2
 800c31a:	2300      	movlt	r3, #0
 800c31c:	e734      	b.n	800c188 <_dtoa_r+0x720>
 800c31e:	9e07      	ldr	r6, [sp, #28]
 800c320:	9d04      	ldr	r5, [sp, #16]
 800c322:	9f08      	ldr	r7, [sp, #32]
 800c324:	e73b      	b.n	800c19e <_dtoa_r+0x736>
 800c326:	9a07      	ldr	r2, [sp, #28]
 800c328:	e767      	b.n	800c1fa <_dtoa_r+0x792>
 800c32a:	9b06      	ldr	r3, [sp, #24]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	dc18      	bgt.n	800c362 <_dtoa_r+0x8fa>
 800c330:	f1ba 0f00 	cmp.w	sl, #0
 800c334:	d115      	bne.n	800c362 <_dtoa_r+0x8fa>
 800c336:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c33a:	b993      	cbnz	r3, 800c362 <_dtoa_r+0x8fa>
 800c33c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c340:	0d1b      	lsrs	r3, r3, #20
 800c342:	051b      	lsls	r3, r3, #20
 800c344:	b183      	cbz	r3, 800c368 <_dtoa_r+0x900>
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	3301      	adds	r3, #1
 800c34a:	9304      	str	r3, [sp, #16]
 800c34c:	9b05      	ldr	r3, [sp, #20]
 800c34e:	3301      	adds	r3, #1
 800c350:	9305      	str	r3, [sp, #20]
 800c352:	f04f 0801 	mov.w	r8, #1
 800c356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f47f af6a 	bne.w	800c232 <_dtoa_r+0x7ca>
 800c35e:	2001      	movs	r0, #1
 800c360:	e76f      	b.n	800c242 <_dtoa_r+0x7da>
 800c362:	f04f 0800 	mov.w	r8, #0
 800c366:	e7f6      	b.n	800c356 <_dtoa_r+0x8ee>
 800c368:	4698      	mov	r8, r3
 800c36a:	e7f4      	b.n	800c356 <_dtoa_r+0x8ee>
 800c36c:	f43f af7d 	beq.w	800c26a <_dtoa_r+0x802>
 800c370:	4618      	mov	r0, r3
 800c372:	301c      	adds	r0, #28
 800c374:	e772      	b.n	800c25c <_dtoa_r+0x7f4>
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	dc37      	bgt.n	800c3ec <_dtoa_r+0x984>
 800c37c:	9b06      	ldr	r3, [sp, #24]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	dd34      	ble.n	800c3ec <_dtoa_r+0x984>
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	9302      	str	r3, [sp, #8]
 800c386:	9b02      	ldr	r3, [sp, #8]
 800c388:	b96b      	cbnz	r3, 800c3a6 <_dtoa_r+0x93e>
 800c38a:	4631      	mov	r1, r6
 800c38c:	2205      	movs	r2, #5
 800c38e:	4620      	mov	r0, r4
 800c390:	f000 fe28 	bl	800cfe4 <__multadd>
 800c394:	4601      	mov	r1, r0
 800c396:	4606      	mov	r6, r0
 800c398:	ee18 0a10 	vmov	r0, s16
 800c39c:	f001 f88c 	bl	800d4b8 <__mcmp>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	f73f adbb 	bgt.w	800bf1c <_dtoa_r+0x4b4>
 800c3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a8:	9d01      	ldr	r5, [sp, #4]
 800c3aa:	43db      	mvns	r3, r3
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	f04f 0800 	mov.w	r8, #0
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f000 fdf3 	bl	800cfa0 <_Bfree>
 800c3ba:	2f00      	cmp	r7, #0
 800c3bc:	f43f aea4 	beq.w	800c108 <_dtoa_r+0x6a0>
 800c3c0:	f1b8 0f00 	cmp.w	r8, #0
 800c3c4:	d005      	beq.n	800c3d2 <_dtoa_r+0x96a>
 800c3c6:	45b8      	cmp	r8, r7
 800c3c8:	d003      	beq.n	800c3d2 <_dtoa_r+0x96a>
 800c3ca:	4641      	mov	r1, r8
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f000 fde7 	bl	800cfa0 <_Bfree>
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f000 fde3 	bl	800cfa0 <_Bfree>
 800c3da:	e695      	b.n	800c108 <_dtoa_r+0x6a0>
 800c3dc:	2600      	movs	r6, #0
 800c3de:	4637      	mov	r7, r6
 800c3e0:	e7e1      	b.n	800c3a6 <_dtoa_r+0x93e>
 800c3e2:	9700      	str	r7, [sp, #0]
 800c3e4:	4637      	mov	r7, r6
 800c3e6:	e599      	b.n	800bf1c <_dtoa_r+0x4b4>
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	9b08      	ldr	r3, [sp, #32]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 80ca 	beq.w	800c588 <_dtoa_r+0xb20>
 800c3f4:	9b03      	ldr	r3, [sp, #12]
 800c3f6:	9302      	str	r3, [sp, #8]
 800c3f8:	2d00      	cmp	r5, #0
 800c3fa:	dd05      	ble.n	800c408 <_dtoa_r+0x9a0>
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	462a      	mov	r2, r5
 800c400:	4620      	mov	r0, r4
 800c402:	f000 ffe9 	bl	800d3d8 <__lshift>
 800c406:	4607      	mov	r7, r0
 800c408:	f1b8 0f00 	cmp.w	r8, #0
 800c40c:	d05b      	beq.n	800c4c6 <_dtoa_r+0xa5e>
 800c40e:	6879      	ldr	r1, [r7, #4]
 800c410:	4620      	mov	r0, r4
 800c412:	f000 fd85 	bl	800cf20 <_Balloc>
 800c416:	4605      	mov	r5, r0
 800c418:	b928      	cbnz	r0, 800c426 <_dtoa_r+0x9be>
 800c41a:	4b87      	ldr	r3, [pc, #540]	; (800c638 <_dtoa_r+0xbd0>)
 800c41c:	4602      	mov	r2, r0
 800c41e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c422:	f7ff bb3b 	b.w	800ba9c <_dtoa_r+0x34>
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	3202      	adds	r2, #2
 800c42a:	0092      	lsls	r2, r2, #2
 800c42c:	f107 010c 	add.w	r1, r7, #12
 800c430:	300c      	adds	r0, #12
 800c432:	f7fd fbb2 	bl	8009b9a <memcpy>
 800c436:	2201      	movs	r2, #1
 800c438:	4629      	mov	r1, r5
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 ffcc 	bl	800d3d8 <__lshift>
 800c440:	9b01      	ldr	r3, [sp, #4]
 800c442:	f103 0901 	add.w	r9, r3, #1
 800c446:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c44a:	4413      	add	r3, r2
 800c44c:	9305      	str	r3, [sp, #20]
 800c44e:	f00a 0301 	and.w	r3, sl, #1
 800c452:	46b8      	mov	r8, r7
 800c454:	9304      	str	r3, [sp, #16]
 800c456:	4607      	mov	r7, r0
 800c458:	4631      	mov	r1, r6
 800c45a:	ee18 0a10 	vmov	r0, s16
 800c45e:	f7ff fa75 	bl	800b94c <quorem>
 800c462:	4641      	mov	r1, r8
 800c464:	9002      	str	r0, [sp, #8]
 800c466:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c46a:	ee18 0a10 	vmov	r0, s16
 800c46e:	f001 f823 	bl	800d4b8 <__mcmp>
 800c472:	463a      	mov	r2, r7
 800c474:	9003      	str	r0, [sp, #12]
 800c476:	4631      	mov	r1, r6
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 f839 	bl	800d4f0 <__mdiff>
 800c47e:	68c2      	ldr	r2, [r0, #12]
 800c480:	f109 3bff 	add.w	fp, r9, #4294967295
 800c484:	4605      	mov	r5, r0
 800c486:	bb02      	cbnz	r2, 800c4ca <_dtoa_r+0xa62>
 800c488:	4601      	mov	r1, r0
 800c48a:	ee18 0a10 	vmov	r0, s16
 800c48e:	f001 f813 	bl	800d4b8 <__mcmp>
 800c492:	4602      	mov	r2, r0
 800c494:	4629      	mov	r1, r5
 800c496:	4620      	mov	r0, r4
 800c498:	9207      	str	r2, [sp, #28]
 800c49a:	f000 fd81 	bl	800cfa0 <_Bfree>
 800c49e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c4a2:	ea43 0102 	orr.w	r1, r3, r2
 800c4a6:	9b04      	ldr	r3, [sp, #16]
 800c4a8:	430b      	orrs	r3, r1
 800c4aa:	464d      	mov	r5, r9
 800c4ac:	d10f      	bne.n	800c4ce <_dtoa_r+0xa66>
 800c4ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c4b2:	d02a      	beq.n	800c50a <_dtoa_r+0xaa2>
 800c4b4:	9b03      	ldr	r3, [sp, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	dd02      	ble.n	800c4c0 <_dtoa_r+0xa58>
 800c4ba:	9b02      	ldr	r3, [sp, #8]
 800c4bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c4c0:	f88b a000 	strb.w	sl, [fp]
 800c4c4:	e775      	b.n	800c3b2 <_dtoa_r+0x94a>
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	e7ba      	b.n	800c440 <_dtoa_r+0x9d8>
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	e7e2      	b.n	800c494 <_dtoa_r+0xa2c>
 800c4ce:	9b03      	ldr	r3, [sp, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	db04      	blt.n	800c4de <_dtoa_r+0xa76>
 800c4d4:	9906      	ldr	r1, [sp, #24]
 800c4d6:	430b      	orrs	r3, r1
 800c4d8:	9904      	ldr	r1, [sp, #16]
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	d122      	bne.n	800c524 <_dtoa_r+0xabc>
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	ddee      	ble.n	800c4c0 <_dtoa_r+0xa58>
 800c4e2:	ee18 1a10 	vmov	r1, s16
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 ff75 	bl	800d3d8 <__lshift>
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	ee08 0a10 	vmov	s16, r0
 800c4f4:	f000 ffe0 	bl	800d4b8 <__mcmp>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	dc03      	bgt.n	800c504 <_dtoa_r+0xa9c>
 800c4fc:	d1e0      	bne.n	800c4c0 <_dtoa_r+0xa58>
 800c4fe:	f01a 0f01 	tst.w	sl, #1
 800c502:	d0dd      	beq.n	800c4c0 <_dtoa_r+0xa58>
 800c504:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c508:	d1d7      	bne.n	800c4ba <_dtoa_r+0xa52>
 800c50a:	2339      	movs	r3, #57	; 0x39
 800c50c:	f88b 3000 	strb.w	r3, [fp]
 800c510:	462b      	mov	r3, r5
 800c512:	461d      	mov	r5, r3
 800c514:	3b01      	subs	r3, #1
 800c516:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c51a:	2a39      	cmp	r2, #57	; 0x39
 800c51c:	d071      	beq.n	800c602 <_dtoa_r+0xb9a>
 800c51e:	3201      	adds	r2, #1
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	e746      	b.n	800c3b2 <_dtoa_r+0x94a>
 800c524:	2a00      	cmp	r2, #0
 800c526:	dd07      	ble.n	800c538 <_dtoa_r+0xad0>
 800c528:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c52c:	d0ed      	beq.n	800c50a <_dtoa_r+0xaa2>
 800c52e:	f10a 0301 	add.w	r3, sl, #1
 800c532:	f88b 3000 	strb.w	r3, [fp]
 800c536:	e73c      	b.n	800c3b2 <_dtoa_r+0x94a>
 800c538:	9b05      	ldr	r3, [sp, #20]
 800c53a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c53e:	4599      	cmp	r9, r3
 800c540:	d047      	beq.n	800c5d2 <_dtoa_r+0xb6a>
 800c542:	ee18 1a10 	vmov	r1, s16
 800c546:	2300      	movs	r3, #0
 800c548:	220a      	movs	r2, #10
 800c54a:	4620      	mov	r0, r4
 800c54c:	f000 fd4a 	bl	800cfe4 <__multadd>
 800c550:	45b8      	cmp	r8, r7
 800c552:	ee08 0a10 	vmov	s16, r0
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	f04f 020a 	mov.w	r2, #10
 800c55e:	4641      	mov	r1, r8
 800c560:	4620      	mov	r0, r4
 800c562:	d106      	bne.n	800c572 <_dtoa_r+0xb0a>
 800c564:	f000 fd3e 	bl	800cfe4 <__multadd>
 800c568:	4680      	mov	r8, r0
 800c56a:	4607      	mov	r7, r0
 800c56c:	f109 0901 	add.w	r9, r9, #1
 800c570:	e772      	b.n	800c458 <_dtoa_r+0x9f0>
 800c572:	f000 fd37 	bl	800cfe4 <__multadd>
 800c576:	4639      	mov	r1, r7
 800c578:	4680      	mov	r8, r0
 800c57a:	2300      	movs	r3, #0
 800c57c:	220a      	movs	r2, #10
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 fd30 	bl	800cfe4 <__multadd>
 800c584:	4607      	mov	r7, r0
 800c586:	e7f1      	b.n	800c56c <_dtoa_r+0xb04>
 800c588:	9b03      	ldr	r3, [sp, #12]
 800c58a:	9302      	str	r3, [sp, #8]
 800c58c:	9d01      	ldr	r5, [sp, #4]
 800c58e:	ee18 0a10 	vmov	r0, s16
 800c592:	4631      	mov	r1, r6
 800c594:	f7ff f9da 	bl	800b94c <quorem>
 800c598:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c59c:	9b01      	ldr	r3, [sp, #4]
 800c59e:	f805 ab01 	strb.w	sl, [r5], #1
 800c5a2:	1aea      	subs	r2, r5, r3
 800c5a4:	9b02      	ldr	r3, [sp, #8]
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	dd09      	ble.n	800c5be <_dtoa_r+0xb56>
 800c5aa:	ee18 1a10 	vmov	r1, s16
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	220a      	movs	r2, #10
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 fd16 	bl	800cfe4 <__multadd>
 800c5b8:	ee08 0a10 	vmov	s16, r0
 800c5bc:	e7e7      	b.n	800c58e <_dtoa_r+0xb26>
 800c5be:	9b02      	ldr	r3, [sp, #8]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	bfc8      	it	gt
 800c5c4:	461d      	movgt	r5, r3
 800c5c6:	9b01      	ldr	r3, [sp, #4]
 800c5c8:	bfd8      	it	le
 800c5ca:	2501      	movle	r5, #1
 800c5cc:	441d      	add	r5, r3
 800c5ce:	f04f 0800 	mov.w	r8, #0
 800c5d2:	ee18 1a10 	vmov	r1, s16
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f000 fefd 	bl	800d3d8 <__lshift>
 800c5de:	4631      	mov	r1, r6
 800c5e0:	ee08 0a10 	vmov	s16, r0
 800c5e4:	f000 ff68 	bl	800d4b8 <__mcmp>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	dc91      	bgt.n	800c510 <_dtoa_r+0xaa8>
 800c5ec:	d102      	bne.n	800c5f4 <_dtoa_r+0xb8c>
 800c5ee:	f01a 0f01 	tst.w	sl, #1
 800c5f2:	d18d      	bne.n	800c510 <_dtoa_r+0xaa8>
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	461d      	mov	r5, r3
 800c5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5fc:	2a30      	cmp	r2, #48	; 0x30
 800c5fe:	d0fa      	beq.n	800c5f6 <_dtoa_r+0xb8e>
 800c600:	e6d7      	b.n	800c3b2 <_dtoa_r+0x94a>
 800c602:	9a01      	ldr	r2, [sp, #4]
 800c604:	429a      	cmp	r2, r3
 800c606:	d184      	bne.n	800c512 <_dtoa_r+0xaaa>
 800c608:	9b00      	ldr	r3, [sp, #0]
 800c60a:	3301      	adds	r3, #1
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	2331      	movs	r3, #49	; 0x31
 800c610:	7013      	strb	r3, [r2, #0]
 800c612:	e6ce      	b.n	800c3b2 <_dtoa_r+0x94a>
 800c614:	4b09      	ldr	r3, [pc, #36]	; (800c63c <_dtoa_r+0xbd4>)
 800c616:	f7ff ba95 	b.w	800bb44 <_dtoa_r+0xdc>
 800c61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f47f aa6e 	bne.w	800bafe <_dtoa_r+0x96>
 800c622:	4b07      	ldr	r3, [pc, #28]	; (800c640 <_dtoa_r+0xbd8>)
 800c624:	f7ff ba8e 	b.w	800bb44 <_dtoa_r+0xdc>
 800c628:	9b02      	ldr	r3, [sp, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	dcae      	bgt.n	800c58c <_dtoa_r+0xb24>
 800c62e:	9b06      	ldr	r3, [sp, #24]
 800c630:	2b02      	cmp	r3, #2
 800c632:	f73f aea8 	bgt.w	800c386 <_dtoa_r+0x91e>
 800c636:	e7a9      	b.n	800c58c <_dtoa_r+0xb24>
 800c638:	0802b5d0 	.word	0x0802b5d0
 800c63c:	0802b3d4 	.word	0x0802b3d4
 800c640:	0802b551 	.word	0x0802b551

0800c644 <__sflush_r>:
 800c644:	898a      	ldrh	r2, [r1, #12]
 800c646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c64a:	4605      	mov	r5, r0
 800c64c:	0710      	lsls	r0, r2, #28
 800c64e:	460c      	mov	r4, r1
 800c650:	d458      	bmi.n	800c704 <__sflush_r+0xc0>
 800c652:	684b      	ldr	r3, [r1, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	dc05      	bgt.n	800c664 <__sflush_r+0x20>
 800c658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	dc02      	bgt.n	800c664 <__sflush_r+0x20>
 800c65e:	2000      	movs	r0, #0
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c666:	2e00      	cmp	r6, #0
 800c668:	d0f9      	beq.n	800c65e <__sflush_r+0x1a>
 800c66a:	2300      	movs	r3, #0
 800c66c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c670:	682f      	ldr	r7, [r5, #0]
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	d032      	beq.n	800c6dc <__sflush_r+0x98>
 800c676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	075a      	lsls	r2, r3, #29
 800c67c:	d505      	bpl.n	800c68a <__sflush_r+0x46>
 800c67e:	6863      	ldr	r3, [r4, #4]
 800c680:	1ac0      	subs	r0, r0, r3
 800c682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c684:	b10b      	cbz	r3, 800c68a <__sflush_r+0x46>
 800c686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c688:	1ac0      	subs	r0, r0, r3
 800c68a:	2300      	movs	r3, #0
 800c68c:	4602      	mov	r2, r0
 800c68e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c690:	6a21      	ldr	r1, [r4, #32]
 800c692:	4628      	mov	r0, r5
 800c694:	47b0      	blx	r6
 800c696:	1c43      	adds	r3, r0, #1
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	d106      	bne.n	800c6aa <__sflush_r+0x66>
 800c69c:	6829      	ldr	r1, [r5, #0]
 800c69e:	291d      	cmp	r1, #29
 800c6a0:	d82c      	bhi.n	800c6fc <__sflush_r+0xb8>
 800c6a2:	4a2a      	ldr	r2, [pc, #168]	; (800c74c <__sflush_r+0x108>)
 800c6a4:	40ca      	lsrs	r2, r1
 800c6a6:	07d6      	lsls	r6, r2, #31
 800c6a8:	d528      	bpl.n	800c6fc <__sflush_r+0xb8>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	6062      	str	r2, [r4, #4]
 800c6ae:	04d9      	lsls	r1, r3, #19
 800c6b0:	6922      	ldr	r2, [r4, #16]
 800c6b2:	6022      	str	r2, [r4, #0]
 800c6b4:	d504      	bpl.n	800c6c0 <__sflush_r+0x7c>
 800c6b6:	1c42      	adds	r2, r0, #1
 800c6b8:	d101      	bne.n	800c6be <__sflush_r+0x7a>
 800c6ba:	682b      	ldr	r3, [r5, #0]
 800c6bc:	b903      	cbnz	r3, 800c6c0 <__sflush_r+0x7c>
 800c6be:	6560      	str	r0, [r4, #84]	; 0x54
 800c6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6c2:	602f      	str	r7, [r5, #0]
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	d0ca      	beq.n	800c65e <__sflush_r+0x1a>
 800c6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6cc:	4299      	cmp	r1, r3
 800c6ce:	d002      	beq.n	800c6d6 <__sflush_r+0x92>
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f001 f8fd 	bl	800d8d0 <_free_r>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c6da:	e7c1      	b.n	800c660 <__sflush_r+0x1c>
 800c6dc:	6a21      	ldr	r1, [r4, #32]
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b0      	blx	r6
 800c6e4:	1c41      	adds	r1, r0, #1
 800c6e6:	d1c7      	bne.n	800c678 <__sflush_r+0x34>
 800c6e8:	682b      	ldr	r3, [r5, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0c4      	beq.n	800c678 <__sflush_r+0x34>
 800c6ee:	2b1d      	cmp	r3, #29
 800c6f0:	d001      	beq.n	800c6f6 <__sflush_r+0xb2>
 800c6f2:	2b16      	cmp	r3, #22
 800c6f4:	d101      	bne.n	800c6fa <__sflush_r+0xb6>
 800c6f6:	602f      	str	r7, [r5, #0]
 800c6f8:	e7b1      	b.n	800c65e <__sflush_r+0x1a>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c700:	81a3      	strh	r3, [r4, #12]
 800c702:	e7ad      	b.n	800c660 <__sflush_r+0x1c>
 800c704:	690f      	ldr	r7, [r1, #16]
 800c706:	2f00      	cmp	r7, #0
 800c708:	d0a9      	beq.n	800c65e <__sflush_r+0x1a>
 800c70a:	0793      	lsls	r3, r2, #30
 800c70c:	680e      	ldr	r6, [r1, #0]
 800c70e:	bf08      	it	eq
 800c710:	694b      	ldreq	r3, [r1, #20]
 800c712:	600f      	str	r7, [r1, #0]
 800c714:	bf18      	it	ne
 800c716:	2300      	movne	r3, #0
 800c718:	eba6 0807 	sub.w	r8, r6, r7
 800c71c:	608b      	str	r3, [r1, #8]
 800c71e:	f1b8 0f00 	cmp.w	r8, #0
 800c722:	dd9c      	ble.n	800c65e <__sflush_r+0x1a>
 800c724:	6a21      	ldr	r1, [r4, #32]
 800c726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c728:	4643      	mov	r3, r8
 800c72a:	463a      	mov	r2, r7
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b0      	blx	r6
 800c730:	2800      	cmp	r0, #0
 800c732:	dc06      	bgt.n	800c742 <__sflush_r+0xfe>
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	e78e      	b.n	800c660 <__sflush_r+0x1c>
 800c742:	4407      	add	r7, r0
 800c744:	eba8 0800 	sub.w	r8, r8, r0
 800c748:	e7e9      	b.n	800c71e <__sflush_r+0xda>
 800c74a:	bf00      	nop
 800c74c:	20400001 	.word	0x20400001

0800c750 <_fflush_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	690b      	ldr	r3, [r1, #16]
 800c754:	4605      	mov	r5, r0
 800c756:	460c      	mov	r4, r1
 800c758:	b913      	cbnz	r3, 800c760 <_fflush_r+0x10>
 800c75a:	2500      	movs	r5, #0
 800c75c:	4628      	mov	r0, r5
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	b118      	cbz	r0, 800c76a <_fflush_r+0x1a>
 800c762:	6983      	ldr	r3, [r0, #24]
 800c764:	b90b      	cbnz	r3, 800c76a <_fflush_r+0x1a>
 800c766:	f7fd f953 	bl	8009a10 <__sinit>
 800c76a:	4b14      	ldr	r3, [pc, #80]	; (800c7bc <_fflush_r+0x6c>)
 800c76c:	429c      	cmp	r4, r3
 800c76e:	d11b      	bne.n	800c7a8 <_fflush_r+0x58>
 800c770:	686c      	ldr	r4, [r5, #4]
 800c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d0ef      	beq.n	800c75a <_fflush_r+0xa>
 800c77a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c77c:	07d0      	lsls	r0, r2, #31
 800c77e:	d404      	bmi.n	800c78a <_fflush_r+0x3a>
 800c780:	0599      	lsls	r1, r3, #22
 800c782:	d402      	bmi.n	800c78a <_fflush_r+0x3a>
 800c784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c786:	f7fd fa06 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800c78a:	4628      	mov	r0, r5
 800c78c:	4621      	mov	r1, r4
 800c78e:	f7ff ff59 	bl	800c644 <__sflush_r>
 800c792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c794:	07da      	lsls	r2, r3, #31
 800c796:	4605      	mov	r5, r0
 800c798:	d4e0      	bmi.n	800c75c <_fflush_r+0xc>
 800c79a:	89a3      	ldrh	r3, [r4, #12]
 800c79c:	059b      	lsls	r3, r3, #22
 800c79e:	d4dd      	bmi.n	800c75c <_fflush_r+0xc>
 800c7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7a2:	f7fd f9f9 	bl	8009b98 <__retarget_lock_release_recursive>
 800c7a6:	e7d9      	b.n	800c75c <_fflush_r+0xc>
 800c7a8:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <_fflush_r+0x70>)
 800c7aa:	429c      	cmp	r4, r3
 800c7ac:	d101      	bne.n	800c7b2 <_fflush_r+0x62>
 800c7ae:	68ac      	ldr	r4, [r5, #8]
 800c7b0:	e7df      	b.n	800c772 <_fflush_r+0x22>
 800c7b2:	4b04      	ldr	r3, [pc, #16]	; (800c7c4 <_fflush_r+0x74>)
 800c7b4:	429c      	cmp	r4, r3
 800c7b6:	bf08      	it	eq
 800c7b8:	68ec      	ldreq	r4, [r5, #12]
 800c7ba:	e7da      	b.n	800c772 <_fflush_r+0x22>
 800c7bc:	0802b380 	.word	0x0802b380
 800c7c0:	0802b3a0 	.word	0x0802b3a0
 800c7c4:	0802b360 	.word	0x0802b360

0800c7c8 <rshift>:
 800c7c8:	6903      	ldr	r3, [r0, #16]
 800c7ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7d6:	f100 0414 	add.w	r4, r0, #20
 800c7da:	dd45      	ble.n	800c868 <rshift+0xa0>
 800c7dc:	f011 011f 	ands.w	r1, r1, #31
 800c7e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7e8:	d10c      	bne.n	800c804 <rshift+0x3c>
 800c7ea:	f100 0710 	add.w	r7, r0, #16
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	42b1      	cmp	r1, r6
 800c7f2:	d334      	bcc.n	800c85e <rshift+0x96>
 800c7f4:	1a9b      	subs	r3, r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	1eea      	subs	r2, r5, #3
 800c7fa:	4296      	cmp	r6, r2
 800c7fc:	bf38      	it	cc
 800c7fe:	2300      	movcc	r3, #0
 800c800:	4423      	add	r3, r4
 800c802:	e015      	b.n	800c830 <rshift+0x68>
 800c804:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c808:	f1c1 0820 	rsb	r8, r1, #32
 800c80c:	40cf      	lsrs	r7, r1
 800c80e:	f105 0e04 	add.w	lr, r5, #4
 800c812:	46a1      	mov	r9, r4
 800c814:	4576      	cmp	r6, lr
 800c816:	46f4      	mov	ip, lr
 800c818:	d815      	bhi.n	800c846 <rshift+0x7e>
 800c81a:	1a9a      	subs	r2, r3, r2
 800c81c:	0092      	lsls	r2, r2, #2
 800c81e:	3a04      	subs	r2, #4
 800c820:	3501      	adds	r5, #1
 800c822:	42ae      	cmp	r6, r5
 800c824:	bf38      	it	cc
 800c826:	2200      	movcc	r2, #0
 800c828:	18a3      	adds	r3, r4, r2
 800c82a:	50a7      	str	r7, [r4, r2]
 800c82c:	b107      	cbz	r7, 800c830 <rshift+0x68>
 800c82e:	3304      	adds	r3, #4
 800c830:	1b1a      	subs	r2, r3, r4
 800c832:	42a3      	cmp	r3, r4
 800c834:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c838:	bf08      	it	eq
 800c83a:	2300      	moveq	r3, #0
 800c83c:	6102      	str	r2, [r0, #16]
 800c83e:	bf08      	it	eq
 800c840:	6143      	streq	r3, [r0, #20]
 800c842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c846:	f8dc c000 	ldr.w	ip, [ip]
 800c84a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c84e:	ea4c 0707 	orr.w	r7, ip, r7
 800c852:	f849 7b04 	str.w	r7, [r9], #4
 800c856:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c85a:	40cf      	lsrs	r7, r1
 800c85c:	e7da      	b.n	800c814 <rshift+0x4c>
 800c85e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c862:	f847 cf04 	str.w	ip, [r7, #4]!
 800c866:	e7c3      	b.n	800c7f0 <rshift+0x28>
 800c868:	4623      	mov	r3, r4
 800c86a:	e7e1      	b.n	800c830 <rshift+0x68>

0800c86c <__hexdig_fun>:
 800c86c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c870:	2b09      	cmp	r3, #9
 800c872:	d802      	bhi.n	800c87a <__hexdig_fun+0xe>
 800c874:	3820      	subs	r0, #32
 800c876:	b2c0      	uxtb	r0, r0
 800c878:	4770      	bx	lr
 800c87a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c87e:	2b05      	cmp	r3, #5
 800c880:	d801      	bhi.n	800c886 <__hexdig_fun+0x1a>
 800c882:	3847      	subs	r0, #71	; 0x47
 800c884:	e7f7      	b.n	800c876 <__hexdig_fun+0xa>
 800c886:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c88a:	2b05      	cmp	r3, #5
 800c88c:	d801      	bhi.n	800c892 <__hexdig_fun+0x26>
 800c88e:	3827      	subs	r0, #39	; 0x27
 800c890:	e7f1      	b.n	800c876 <__hexdig_fun+0xa>
 800c892:	2000      	movs	r0, #0
 800c894:	4770      	bx	lr
	...

0800c898 <__gethex>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	ed2d 8b02 	vpush	{d8}
 800c8a0:	b089      	sub	sp, #36	; 0x24
 800c8a2:	ee08 0a10 	vmov	s16, r0
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	4bb4      	ldr	r3, [pc, #720]	; (800cb7c <__gethex+0x2e4>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9301      	str	r3, [sp, #4]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	468b      	mov	fp, r1
 800c8b2:	4690      	mov	r8, r2
 800c8b4:	f7f3 fcac 	bl	8000210 <strlen>
 800c8b8:	9b01      	ldr	r3, [sp, #4]
 800c8ba:	f8db 2000 	ldr.w	r2, [fp]
 800c8be:	4403      	add	r3, r0
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c8c6:	9305      	str	r3, [sp, #20]
 800c8c8:	1c93      	adds	r3, r2, #2
 800c8ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c8ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8d2:	32fe      	adds	r2, #254	; 0xfe
 800c8d4:	18d1      	adds	r1, r2, r3
 800c8d6:	461f      	mov	r7, r3
 800c8d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c8dc:	9100      	str	r1, [sp, #0]
 800c8de:	2830      	cmp	r0, #48	; 0x30
 800c8e0:	d0f8      	beq.n	800c8d4 <__gethex+0x3c>
 800c8e2:	f7ff ffc3 	bl	800c86c <__hexdig_fun>
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d13a      	bne.n	800c962 <__gethex+0xca>
 800c8ec:	9901      	ldr	r1, [sp, #4]
 800c8ee:	4652      	mov	r2, sl
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f001 f9b1 	bl	800dc58 <strncmp>
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d168      	bne.n	800c9ce <__gethex+0x136>
 800c8fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c900:	eb07 060a 	add.w	r6, r7, sl
 800c904:	f7ff ffb2 	bl	800c86c <__hexdig_fun>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d062      	beq.n	800c9d2 <__gethex+0x13a>
 800c90c:	4633      	mov	r3, r6
 800c90e:	7818      	ldrb	r0, [r3, #0]
 800c910:	2830      	cmp	r0, #48	; 0x30
 800c912:	461f      	mov	r7, r3
 800c914:	f103 0301 	add.w	r3, r3, #1
 800c918:	d0f9      	beq.n	800c90e <__gethex+0x76>
 800c91a:	f7ff ffa7 	bl	800c86c <__hexdig_fun>
 800c91e:	2301      	movs	r3, #1
 800c920:	fab0 f480 	clz	r4, r0
 800c924:	0964      	lsrs	r4, r4, #5
 800c926:	4635      	mov	r5, r6
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	463a      	mov	r2, r7
 800c92c:	4616      	mov	r6, r2
 800c92e:	3201      	adds	r2, #1
 800c930:	7830      	ldrb	r0, [r6, #0]
 800c932:	f7ff ff9b 	bl	800c86c <__hexdig_fun>
 800c936:	2800      	cmp	r0, #0
 800c938:	d1f8      	bne.n	800c92c <__gethex+0x94>
 800c93a:	9901      	ldr	r1, [sp, #4]
 800c93c:	4652      	mov	r2, sl
 800c93e:	4630      	mov	r0, r6
 800c940:	f001 f98a 	bl	800dc58 <strncmp>
 800c944:	b980      	cbnz	r0, 800c968 <__gethex+0xd0>
 800c946:	b94d      	cbnz	r5, 800c95c <__gethex+0xc4>
 800c948:	eb06 050a 	add.w	r5, r6, sl
 800c94c:	462a      	mov	r2, r5
 800c94e:	4616      	mov	r6, r2
 800c950:	3201      	adds	r2, #1
 800c952:	7830      	ldrb	r0, [r6, #0]
 800c954:	f7ff ff8a 	bl	800c86c <__hexdig_fun>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d1f8      	bne.n	800c94e <__gethex+0xb6>
 800c95c:	1bad      	subs	r5, r5, r6
 800c95e:	00ad      	lsls	r5, r5, #2
 800c960:	e004      	b.n	800c96c <__gethex+0xd4>
 800c962:	2400      	movs	r4, #0
 800c964:	4625      	mov	r5, r4
 800c966:	e7e0      	b.n	800c92a <__gethex+0x92>
 800c968:	2d00      	cmp	r5, #0
 800c96a:	d1f7      	bne.n	800c95c <__gethex+0xc4>
 800c96c:	7833      	ldrb	r3, [r6, #0]
 800c96e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c972:	2b50      	cmp	r3, #80	; 0x50
 800c974:	d13b      	bne.n	800c9ee <__gethex+0x156>
 800c976:	7873      	ldrb	r3, [r6, #1]
 800c978:	2b2b      	cmp	r3, #43	; 0x2b
 800c97a:	d02c      	beq.n	800c9d6 <__gethex+0x13e>
 800c97c:	2b2d      	cmp	r3, #45	; 0x2d
 800c97e:	d02e      	beq.n	800c9de <__gethex+0x146>
 800c980:	1c71      	adds	r1, r6, #1
 800c982:	f04f 0900 	mov.w	r9, #0
 800c986:	7808      	ldrb	r0, [r1, #0]
 800c988:	f7ff ff70 	bl	800c86c <__hexdig_fun>
 800c98c:	1e43      	subs	r3, r0, #1
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b18      	cmp	r3, #24
 800c992:	d82c      	bhi.n	800c9ee <__gethex+0x156>
 800c994:	f1a0 0210 	sub.w	r2, r0, #16
 800c998:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c99c:	f7ff ff66 	bl	800c86c <__hexdig_fun>
 800c9a0:	1e43      	subs	r3, r0, #1
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b18      	cmp	r3, #24
 800c9a6:	d91d      	bls.n	800c9e4 <__gethex+0x14c>
 800c9a8:	f1b9 0f00 	cmp.w	r9, #0
 800c9ac:	d000      	beq.n	800c9b0 <__gethex+0x118>
 800c9ae:	4252      	negs	r2, r2
 800c9b0:	4415      	add	r5, r2
 800c9b2:	f8cb 1000 	str.w	r1, [fp]
 800c9b6:	b1e4      	cbz	r4, 800c9f2 <__gethex+0x15a>
 800c9b8:	9b00      	ldr	r3, [sp, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bf14      	ite	ne
 800c9be:	2700      	movne	r7, #0
 800c9c0:	2706      	moveq	r7, #6
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	b009      	add	sp, #36	; 0x24
 800c9c6:	ecbd 8b02 	vpop	{d8}
 800c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ce:	463e      	mov	r6, r7
 800c9d0:	4625      	mov	r5, r4
 800c9d2:	2401      	movs	r4, #1
 800c9d4:	e7ca      	b.n	800c96c <__gethex+0xd4>
 800c9d6:	f04f 0900 	mov.w	r9, #0
 800c9da:	1cb1      	adds	r1, r6, #2
 800c9dc:	e7d3      	b.n	800c986 <__gethex+0xee>
 800c9de:	f04f 0901 	mov.w	r9, #1
 800c9e2:	e7fa      	b.n	800c9da <__gethex+0x142>
 800c9e4:	230a      	movs	r3, #10
 800c9e6:	fb03 0202 	mla	r2, r3, r2, r0
 800c9ea:	3a10      	subs	r2, #16
 800c9ec:	e7d4      	b.n	800c998 <__gethex+0x100>
 800c9ee:	4631      	mov	r1, r6
 800c9f0:	e7df      	b.n	800c9b2 <__gethex+0x11a>
 800c9f2:	1bf3      	subs	r3, r6, r7
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	2b07      	cmp	r3, #7
 800c9fa:	dc0b      	bgt.n	800ca14 <__gethex+0x17c>
 800c9fc:	ee18 0a10 	vmov	r0, s16
 800ca00:	f000 fa8e 	bl	800cf20 <_Balloc>
 800ca04:	4604      	mov	r4, r0
 800ca06:	b940      	cbnz	r0, 800ca1a <__gethex+0x182>
 800ca08:	4b5d      	ldr	r3, [pc, #372]	; (800cb80 <__gethex+0x2e8>)
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	21de      	movs	r1, #222	; 0xde
 800ca0e:	485d      	ldr	r0, [pc, #372]	; (800cb84 <__gethex+0x2ec>)
 800ca10:	f001 f944 	bl	800dc9c <__assert_func>
 800ca14:	3101      	adds	r1, #1
 800ca16:	105b      	asrs	r3, r3, #1
 800ca18:	e7ee      	b.n	800c9f8 <__gethex+0x160>
 800ca1a:	f100 0914 	add.w	r9, r0, #20
 800ca1e:	f04f 0b00 	mov.w	fp, #0
 800ca22:	f1ca 0301 	rsb	r3, sl, #1
 800ca26:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca2a:	f8cd b000 	str.w	fp, [sp]
 800ca2e:	9306      	str	r3, [sp, #24]
 800ca30:	42b7      	cmp	r7, r6
 800ca32:	d340      	bcc.n	800cab6 <__gethex+0x21e>
 800ca34:	9802      	ldr	r0, [sp, #8]
 800ca36:	9b00      	ldr	r3, [sp, #0]
 800ca38:	f840 3b04 	str.w	r3, [r0], #4
 800ca3c:	eba0 0009 	sub.w	r0, r0, r9
 800ca40:	1080      	asrs	r0, r0, #2
 800ca42:	0146      	lsls	r6, r0, #5
 800ca44:	6120      	str	r0, [r4, #16]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 fb5c 	bl	800d104 <__hi0bits>
 800ca4c:	1a30      	subs	r0, r6, r0
 800ca4e:	f8d8 6000 	ldr.w	r6, [r8]
 800ca52:	42b0      	cmp	r0, r6
 800ca54:	dd63      	ble.n	800cb1e <__gethex+0x286>
 800ca56:	1b87      	subs	r7, r0, r6
 800ca58:	4639      	mov	r1, r7
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 ff00 	bl	800d860 <__any_on>
 800ca60:	4682      	mov	sl, r0
 800ca62:	b1a8      	cbz	r0, 800ca90 <__gethex+0x1f8>
 800ca64:	1e7b      	subs	r3, r7, #1
 800ca66:	1159      	asrs	r1, r3, #5
 800ca68:	f003 021f 	and.w	r2, r3, #31
 800ca6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ca70:	f04f 0a01 	mov.w	sl, #1
 800ca74:	fa0a f202 	lsl.w	r2, sl, r2
 800ca78:	420a      	tst	r2, r1
 800ca7a:	d009      	beq.n	800ca90 <__gethex+0x1f8>
 800ca7c:	4553      	cmp	r3, sl
 800ca7e:	dd05      	ble.n	800ca8c <__gethex+0x1f4>
 800ca80:	1eb9      	subs	r1, r7, #2
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 feec 	bl	800d860 <__any_on>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d145      	bne.n	800cb18 <__gethex+0x280>
 800ca8c:	f04f 0a02 	mov.w	sl, #2
 800ca90:	4639      	mov	r1, r7
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7ff fe98 	bl	800c7c8 <rshift>
 800ca98:	443d      	add	r5, r7
 800ca9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca9e:	42ab      	cmp	r3, r5
 800caa0:	da4c      	bge.n	800cb3c <__gethex+0x2a4>
 800caa2:	ee18 0a10 	vmov	r0, s16
 800caa6:	4621      	mov	r1, r4
 800caa8:	f000 fa7a 	bl	800cfa0 <_Bfree>
 800caac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800caae:	2300      	movs	r3, #0
 800cab0:	6013      	str	r3, [r2, #0]
 800cab2:	27a3      	movs	r7, #163	; 0xa3
 800cab4:	e785      	b.n	800c9c2 <__gethex+0x12a>
 800cab6:	1e73      	subs	r3, r6, #1
 800cab8:	9a05      	ldr	r2, [sp, #20]
 800caba:	9303      	str	r3, [sp, #12]
 800cabc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d019      	beq.n	800caf8 <__gethex+0x260>
 800cac4:	f1bb 0f20 	cmp.w	fp, #32
 800cac8:	d107      	bne.n	800cada <__gethex+0x242>
 800caca:	9b02      	ldr	r3, [sp, #8]
 800cacc:	9a00      	ldr	r2, [sp, #0]
 800cace:	f843 2b04 	str.w	r2, [r3], #4
 800cad2:	9302      	str	r3, [sp, #8]
 800cad4:	2300      	movs	r3, #0
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	469b      	mov	fp, r3
 800cada:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cade:	f7ff fec5 	bl	800c86c <__hexdig_fun>
 800cae2:	9b00      	ldr	r3, [sp, #0]
 800cae4:	f000 000f 	and.w	r0, r0, #15
 800cae8:	fa00 f00b 	lsl.w	r0, r0, fp
 800caec:	4303      	orrs	r3, r0
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	f10b 0b04 	add.w	fp, fp, #4
 800caf4:	9b03      	ldr	r3, [sp, #12]
 800caf6:	e00d      	b.n	800cb14 <__gethex+0x27c>
 800caf8:	9b03      	ldr	r3, [sp, #12]
 800cafa:	9a06      	ldr	r2, [sp, #24]
 800cafc:	4413      	add	r3, r2
 800cafe:	42bb      	cmp	r3, r7
 800cb00:	d3e0      	bcc.n	800cac4 <__gethex+0x22c>
 800cb02:	4618      	mov	r0, r3
 800cb04:	9901      	ldr	r1, [sp, #4]
 800cb06:	9307      	str	r3, [sp, #28]
 800cb08:	4652      	mov	r2, sl
 800cb0a:	f001 f8a5 	bl	800dc58 <strncmp>
 800cb0e:	9b07      	ldr	r3, [sp, #28]
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d1d7      	bne.n	800cac4 <__gethex+0x22c>
 800cb14:	461e      	mov	r6, r3
 800cb16:	e78b      	b.n	800ca30 <__gethex+0x198>
 800cb18:	f04f 0a03 	mov.w	sl, #3
 800cb1c:	e7b8      	b.n	800ca90 <__gethex+0x1f8>
 800cb1e:	da0a      	bge.n	800cb36 <__gethex+0x29e>
 800cb20:	1a37      	subs	r7, r6, r0
 800cb22:	4621      	mov	r1, r4
 800cb24:	ee18 0a10 	vmov	r0, s16
 800cb28:	463a      	mov	r2, r7
 800cb2a:	f000 fc55 	bl	800d3d8 <__lshift>
 800cb2e:	1bed      	subs	r5, r5, r7
 800cb30:	4604      	mov	r4, r0
 800cb32:	f100 0914 	add.w	r9, r0, #20
 800cb36:	f04f 0a00 	mov.w	sl, #0
 800cb3a:	e7ae      	b.n	800ca9a <__gethex+0x202>
 800cb3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb40:	42a8      	cmp	r0, r5
 800cb42:	dd72      	ble.n	800cc2a <__gethex+0x392>
 800cb44:	1b45      	subs	r5, r0, r5
 800cb46:	42ae      	cmp	r6, r5
 800cb48:	dc36      	bgt.n	800cbb8 <__gethex+0x320>
 800cb4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d02a      	beq.n	800cba8 <__gethex+0x310>
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d02c      	beq.n	800cbb0 <__gethex+0x318>
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d11c      	bne.n	800cb94 <__gethex+0x2fc>
 800cb5a:	42ae      	cmp	r6, r5
 800cb5c:	d11a      	bne.n	800cb94 <__gethex+0x2fc>
 800cb5e:	2e01      	cmp	r6, #1
 800cb60:	d112      	bne.n	800cb88 <__gethex+0x2f0>
 800cb62:	9a04      	ldr	r2, [sp, #16]
 800cb64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb68:	6013      	str	r3, [r2, #0]
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	6123      	str	r3, [r4, #16]
 800cb6e:	f8c9 3000 	str.w	r3, [r9]
 800cb72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb74:	2762      	movs	r7, #98	; 0x62
 800cb76:	601c      	str	r4, [r3, #0]
 800cb78:	e723      	b.n	800c9c2 <__gethex+0x12a>
 800cb7a:	bf00      	nop
 800cb7c:	0802b648 	.word	0x0802b648
 800cb80:	0802b5d0 	.word	0x0802b5d0
 800cb84:	0802b5e1 	.word	0x0802b5e1
 800cb88:	1e71      	subs	r1, r6, #1
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 fe68 	bl	800d860 <__any_on>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d1e6      	bne.n	800cb62 <__gethex+0x2ca>
 800cb94:	ee18 0a10 	vmov	r0, s16
 800cb98:	4621      	mov	r1, r4
 800cb9a:	f000 fa01 	bl	800cfa0 <_Bfree>
 800cb9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cba0:	2300      	movs	r3, #0
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	2750      	movs	r7, #80	; 0x50
 800cba6:	e70c      	b.n	800c9c2 <__gethex+0x12a>
 800cba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1f2      	bne.n	800cb94 <__gethex+0x2fc>
 800cbae:	e7d8      	b.n	800cb62 <__gethex+0x2ca>
 800cbb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1d5      	bne.n	800cb62 <__gethex+0x2ca>
 800cbb6:	e7ed      	b.n	800cb94 <__gethex+0x2fc>
 800cbb8:	1e6f      	subs	r7, r5, #1
 800cbba:	f1ba 0f00 	cmp.w	sl, #0
 800cbbe:	d131      	bne.n	800cc24 <__gethex+0x38c>
 800cbc0:	b127      	cbz	r7, 800cbcc <__gethex+0x334>
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f000 fe4b 	bl	800d860 <__any_on>
 800cbca:	4682      	mov	sl, r0
 800cbcc:	117b      	asrs	r3, r7, #5
 800cbce:	2101      	movs	r1, #1
 800cbd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cbd4:	f007 071f 	and.w	r7, r7, #31
 800cbd8:	fa01 f707 	lsl.w	r7, r1, r7
 800cbdc:	421f      	tst	r7, r3
 800cbde:	4629      	mov	r1, r5
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	bf18      	it	ne
 800cbe4:	f04a 0a02 	orrne.w	sl, sl, #2
 800cbe8:	1b76      	subs	r6, r6, r5
 800cbea:	f7ff fded 	bl	800c7c8 <rshift>
 800cbee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbf2:	2702      	movs	r7, #2
 800cbf4:	f1ba 0f00 	cmp.w	sl, #0
 800cbf8:	d048      	beq.n	800cc8c <__gethex+0x3f4>
 800cbfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	d015      	beq.n	800cc2e <__gethex+0x396>
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d017      	beq.n	800cc36 <__gethex+0x39e>
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d109      	bne.n	800cc1e <__gethex+0x386>
 800cc0a:	f01a 0f02 	tst.w	sl, #2
 800cc0e:	d006      	beq.n	800cc1e <__gethex+0x386>
 800cc10:	f8d9 0000 	ldr.w	r0, [r9]
 800cc14:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc18:	f01a 0f01 	tst.w	sl, #1
 800cc1c:	d10e      	bne.n	800cc3c <__gethex+0x3a4>
 800cc1e:	f047 0710 	orr.w	r7, r7, #16
 800cc22:	e033      	b.n	800cc8c <__gethex+0x3f4>
 800cc24:	f04f 0a01 	mov.w	sl, #1
 800cc28:	e7d0      	b.n	800cbcc <__gethex+0x334>
 800cc2a:	2701      	movs	r7, #1
 800cc2c:	e7e2      	b.n	800cbf4 <__gethex+0x35c>
 800cc2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc30:	f1c3 0301 	rsb	r3, r3, #1
 800cc34:	9315      	str	r3, [sp, #84]	; 0x54
 800cc36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d0f0      	beq.n	800cc1e <__gethex+0x386>
 800cc3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc40:	f104 0314 	add.w	r3, r4, #20
 800cc44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc4c:	f04f 0c00 	mov.w	ip, #0
 800cc50:	4618      	mov	r0, r3
 800cc52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc56:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc5a:	d01c      	beq.n	800cc96 <__gethex+0x3fe>
 800cc5c:	3201      	adds	r2, #1
 800cc5e:	6002      	str	r2, [r0, #0]
 800cc60:	2f02      	cmp	r7, #2
 800cc62:	f104 0314 	add.w	r3, r4, #20
 800cc66:	d13f      	bne.n	800cce8 <__gethex+0x450>
 800cc68:	f8d8 2000 	ldr.w	r2, [r8]
 800cc6c:	3a01      	subs	r2, #1
 800cc6e:	42b2      	cmp	r2, r6
 800cc70:	d10a      	bne.n	800cc88 <__gethex+0x3f0>
 800cc72:	1171      	asrs	r1, r6, #5
 800cc74:	2201      	movs	r2, #1
 800cc76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc7a:	f006 061f 	and.w	r6, r6, #31
 800cc7e:	fa02 f606 	lsl.w	r6, r2, r6
 800cc82:	421e      	tst	r6, r3
 800cc84:	bf18      	it	ne
 800cc86:	4617      	movne	r7, r2
 800cc88:	f047 0720 	orr.w	r7, r7, #32
 800cc8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc8e:	601c      	str	r4, [r3, #0]
 800cc90:	9b04      	ldr	r3, [sp, #16]
 800cc92:	601d      	str	r5, [r3, #0]
 800cc94:	e695      	b.n	800c9c2 <__gethex+0x12a>
 800cc96:	4299      	cmp	r1, r3
 800cc98:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc9c:	d8d8      	bhi.n	800cc50 <__gethex+0x3b8>
 800cc9e:	68a3      	ldr	r3, [r4, #8]
 800cca0:	459b      	cmp	fp, r3
 800cca2:	db19      	blt.n	800ccd8 <__gethex+0x440>
 800cca4:	6861      	ldr	r1, [r4, #4]
 800cca6:	ee18 0a10 	vmov	r0, s16
 800ccaa:	3101      	adds	r1, #1
 800ccac:	f000 f938 	bl	800cf20 <_Balloc>
 800ccb0:	4681      	mov	r9, r0
 800ccb2:	b918      	cbnz	r0, 800ccbc <__gethex+0x424>
 800ccb4:	4b1a      	ldr	r3, [pc, #104]	; (800cd20 <__gethex+0x488>)
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	2184      	movs	r1, #132	; 0x84
 800ccba:	e6a8      	b.n	800ca0e <__gethex+0x176>
 800ccbc:	6922      	ldr	r2, [r4, #16]
 800ccbe:	3202      	adds	r2, #2
 800ccc0:	f104 010c 	add.w	r1, r4, #12
 800ccc4:	0092      	lsls	r2, r2, #2
 800ccc6:	300c      	adds	r0, #12
 800ccc8:	f7fc ff67 	bl	8009b9a <memcpy>
 800cccc:	4621      	mov	r1, r4
 800ccce:	ee18 0a10 	vmov	r0, s16
 800ccd2:	f000 f965 	bl	800cfa0 <_Bfree>
 800ccd6:	464c      	mov	r4, r9
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cce0:	6122      	str	r2, [r4, #16]
 800cce2:	2201      	movs	r2, #1
 800cce4:	615a      	str	r2, [r3, #20]
 800cce6:	e7bb      	b.n	800cc60 <__gethex+0x3c8>
 800cce8:	6922      	ldr	r2, [r4, #16]
 800ccea:	455a      	cmp	r2, fp
 800ccec:	dd0b      	ble.n	800cd06 <__gethex+0x46e>
 800ccee:	2101      	movs	r1, #1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f7ff fd69 	bl	800c7c8 <rshift>
 800ccf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccfa:	3501      	adds	r5, #1
 800ccfc:	42ab      	cmp	r3, r5
 800ccfe:	f6ff aed0 	blt.w	800caa2 <__gethex+0x20a>
 800cd02:	2701      	movs	r7, #1
 800cd04:	e7c0      	b.n	800cc88 <__gethex+0x3f0>
 800cd06:	f016 061f 	ands.w	r6, r6, #31
 800cd0a:	d0fa      	beq.n	800cd02 <__gethex+0x46a>
 800cd0c:	4453      	add	r3, sl
 800cd0e:	f1c6 0620 	rsb	r6, r6, #32
 800cd12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd16:	f000 f9f5 	bl	800d104 <__hi0bits>
 800cd1a:	42b0      	cmp	r0, r6
 800cd1c:	dbe7      	blt.n	800ccee <__gethex+0x456>
 800cd1e:	e7f0      	b.n	800cd02 <__gethex+0x46a>
 800cd20:	0802b5d0 	.word	0x0802b5d0

0800cd24 <L_shift>:
 800cd24:	f1c2 0208 	rsb	r2, r2, #8
 800cd28:	0092      	lsls	r2, r2, #2
 800cd2a:	b570      	push	{r4, r5, r6, lr}
 800cd2c:	f1c2 0620 	rsb	r6, r2, #32
 800cd30:	6843      	ldr	r3, [r0, #4]
 800cd32:	6804      	ldr	r4, [r0, #0]
 800cd34:	fa03 f506 	lsl.w	r5, r3, r6
 800cd38:	432c      	orrs	r4, r5
 800cd3a:	40d3      	lsrs	r3, r2
 800cd3c:	6004      	str	r4, [r0, #0]
 800cd3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd42:	4288      	cmp	r0, r1
 800cd44:	d3f4      	bcc.n	800cd30 <L_shift+0xc>
 800cd46:	bd70      	pop	{r4, r5, r6, pc}

0800cd48 <__match>:
 800cd48:	b530      	push	{r4, r5, lr}
 800cd4a:	6803      	ldr	r3, [r0, #0]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd52:	b914      	cbnz	r4, 800cd5a <__match+0x12>
 800cd54:	6003      	str	r3, [r0, #0]
 800cd56:	2001      	movs	r0, #1
 800cd58:	bd30      	pop	{r4, r5, pc}
 800cd5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd62:	2d19      	cmp	r5, #25
 800cd64:	bf98      	it	ls
 800cd66:	3220      	addls	r2, #32
 800cd68:	42a2      	cmp	r2, r4
 800cd6a:	d0f0      	beq.n	800cd4e <__match+0x6>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e7f3      	b.n	800cd58 <__match+0x10>

0800cd70 <__hexnan>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	680b      	ldr	r3, [r1, #0]
 800cd76:	115e      	asrs	r6, r3, #5
 800cd78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd7c:	f013 031f 	ands.w	r3, r3, #31
 800cd80:	b087      	sub	sp, #28
 800cd82:	bf18      	it	ne
 800cd84:	3604      	addne	r6, #4
 800cd86:	2500      	movs	r5, #0
 800cd88:	1f37      	subs	r7, r6, #4
 800cd8a:	4690      	mov	r8, r2
 800cd8c:	6802      	ldr	r2, [r0, #0]
 800cd8e:	9301      	str	r3, [sp, #4]
 800cd90:	4682      	mov	sl, r0
 800cd92:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd96:	46b9      	mov	r9, r7
 800cd98:	463c      	mov	r4, r7
 800cd9a:	9502      	str	r5, [sp, #8]
 800cd9c:	46ab      	mov	fp, r5
 800cd9e:	7851      	ldrb	r1, [r2, #1]
 800cda0:	1c53      	adds	r3, r2, #1
 800cda2:	9303      	str	r3, [sp, #12]
 800cda4:	b341      	cbz	r1, 800cdf8 <__hexnan+0x88>
 800cda6:	4608      	mov	r0, r1
 800cda8:	9205      	str	r2, [sp, #20]
 800cdaa:	9104      	str	r1, [sp, #16]
 800cdac:	f7ff fd5e 	bl	800c86c <__hexdig_fun>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d14f      	bne.n	800ce54 <__hexnan+0xe4>
 800cdb4:	9904      	ldr	r1, [sp, #16]
 800cdb6:	9a05      	ldr	r2, [sp, #20]
 800cdb8:	2920      	cmp	r1, #32
 800cdba:	d818      	bhi.n	800cdee <__hexnan+0x7e>
 800cdbc:	9b02      	ldr	r3, [sp, #8]
 800cdbe:	459b      	cmp	fp, r3
 800cdc0:	dd13      	ble.n	800cdea <__hexnan+0x7a>
 800cdc2:	454c      	cmp	r4, r9
 800cdc4:	d206      	bcs.n	800cdd4 <__hexnan+0x64>
 800cdc6:	2d07      	cmp	r5, #7
 800cdc8:	dc04      	bgt.n	800cdd4 <__hexnan+0x64>
 800cdca:	462a      	mov	r2, r5
 800cdcc:	4649      	mov	r1, r9
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f7ff ffa8 	bl	800cd24 <L_shift>
 800cdd4:	4544      	cmp	r4, r8
 800cdd6:	d950      	bls.n	800ce7a <__hexnan+0x10a>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f1a4 0904 	sub.w	r9, r4, #4
 800cdde:	f844 3c04 	str.w	r3, [r4, #-4]
 800cde2:	f8cd b008 	str.w	fp, [sp, #8]
 800cde6:	464c      	mov	r4, r9
 800cde8:	461d      	mov	r5, r3
 800cdea:	9a03      	ldr	r2, [sp, #12]
 800cdec:	e7d7      	b.n	800cd9e <__hexnan+0x2e>
 800cdee:	2929      	cmp	r1, #41	; 0x29
 800cdf0:	d156      	bne.n	800cea0 <__hexnan+0x130>
 800cdf2:	3202      	adds	r2, #2
 800cdf4:	f8ca 2000 	str.w	r2, [sl]
 800cdf8:	f1bb 0f00 	cmp.w	fp, #0
 800cdfc:	d050      	beq.n	800cea0 <__hexnan+0x130>
 800cdfe:	454c      	cmp	r4, r9
 800ce00:	d206      	bcs.n	800ce10 <__hexnan+0xa0>
 800ce02:	2d07      	cmp	r5, #7
 800ce04:	dc04      	bgt.n	800ce10 <__hexnan+0xa0>
 800ce06:	462a      	mov	r2, r5
 800ce08:	4649      	mov	r1, r9
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f7ff ff8a 	bl	800cd24 <L_shift>
 800ce10:	4544      	cmp	r4, r8
 800ce12:	d934      	bls.n	800ce7e <__hexnan+0x10e>
 800ce14:	f1a8 0204 	sub.w	r2, r8, #4
 800ce18:	4623      	mov	r3, r4
 800ce1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce22:	429f      	cmp	r7, r3
 800ce24:	d2f9      	bcs.n	800ce1a <__hexnan+0xaa>
 800ce26:	1b3b      	subs	r3, r7, r4
 800ce28:	f023 0303 	bic.w	r3, r3, #3
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	3401      	adds	r4, #1
 800ce30:	3e03      	subs	r6, #3
 800ce32:	42b4      	cmp	r4, r6
 800ce34:	bf88      	it	hi
 800ce36:	2304      	movhi	r3, #4
 800ce38:	4443      	add	r3, r8
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f843 2b04 	str.w	r2, [r3], #4
 800ce40:	429f      	cmp	r7, r3
 800ce42:	d2fb      	bcs.n	800ce3c <__hexnan+0xcc>
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	b91b      	cbnz	r3, 800ce50 <__hexnan+0xe0>
 800ce48:	4547      	cmp	r7, r8
 800ce4a:	d127      	bne.n	800ce9c <__hexnan+0x12c>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	2005      	movs	r0, #5
 800ce52:	e026      	b.n	800cea2 <__hexnan+0x132>
 800ce54:	3501      	adds	r5, #1
 800ce56:	2d08      	cmp	r5, #8
 800ce58:	f10b 0b01 	add.w	fp, fp, #1
 800ce5c:	dd06      	ble.n	800ce6c <__hexnan+0xfc>
 800ce5e:	4544      	cmp	r4, r8
 800ce60:	d9c3      	bls.n	800cdea <__hexnan+0x7a>
 800ce62:	2300      	movs	r3, #0
 800ce64:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce68:	2501      	movs	r5, #1
 800ce6a:	3c04      	subs	r4, #4
 800ce6c:	6822      	ldr	r2, [r4, #0]
 800ce6e:	f000 000f 	and.w	r0, r0, #15
 800ce72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ce76:	6022      	str	r2, [r4, #0]
 800ce78:	e7b7      	b.n	800cdea <__hexnan+0x7a>
 800ce7a:	2508      	movs	r5, #8
 800ce7c:	e7b5      	b.n	800cdea <__hexnan+0x7a>
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d0df      	beq.n	800ce44 <__hexnan+0xd4>
 800ce84:	f04f 32ff 	mov.w	r2, #4294967295
 800ce88:	f1c3 0320 	rsb	r3, r3, #32
 800ce8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ce90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce94:	401a      	ands	r2, r3
 800ce96:	f846 2c04 	str.w	r2, [r6, #-4]
 800ce9a:	e7d3      	b.n	800ce44 <__hexnan+0xd4>
 800ce9c:	3f04      	subs	r7, #4
 800ce9e:	e7d1      	b.n	800ce44 <__hexnan+0xd4>
 800cea0:	2004      	movs	r0, #4
 800cea2:	b007      	add	sp, #28
 800cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cea8 <_localeconv_r>:
 800cea8:	4800      	ldr	r0, [pc, #0]	; (800ceac <_localeconv_r+0x4>)
 800ceaa:	4770      	bx	lr
 800ceac:	20000168 	.word	0x20000168

0800ceb0 <_lseek_r>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4d07      	ldr	r5, [pc, #28]	; (800ced0 <_lseek_r+0x20>)
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	4608      	mov	r0, r1
 800ceb8:	4611      	mov	r1, r2
 800ceba:	2200      	movs	r2, #0
 800cebc:	602a      	str	r2, [r5, #0]
 800cebe:	461a      	mov	r2, r3
 800cec0:	f7f5 fbe2 	bl	8002688 <_lseek>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d102      	bne.n	800cece <_lseek_r+0x1e>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	b103      	cbz	r3, 800cece <_lseek_r+0x1e>
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	200139bc 	.word	0x200139bc

0800ced4 <malloc>:
 800ced4:	4b02      	ldr	r3, [pc, #8]	; (800cee0 <malloc+0xc>)
 800ced6:	4601      	mov	r1, r0
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	f7fc be95 	b.w	8009c08 <_malloc_r>
 800cede:	bf00      	nop
 800cee0:	20000010 	.word	0x20000010

0800cee4 <__ascii_mbtowc>:
 800cee4:	b082      	sub	sp, #8
 800cee6:	b901      	cbnz	r1, 800ceea <__ascii_mbtowc+0x6>
 800cee8:	a901      	add	r1, sp, #4
 800ceea:	b142      	cbz	r2, 800cefe <__ascii_mbtowc+0x1a>
 800ceec:	b14b      	cbz	r3, 800cf02 <__ascii_mbtowc+0x1e>
 800ceee:	7813      	ldrb	r3, [r2, #0]
 800cef0:	600b      	str	r3, [r1, #0]
 800cef2:	7812      	ldrb	r2, [r2, #0]
 800cef4:	1e10      	subs	r0, r2, #0
 800cef6:	bf18      	it	ne
 800cef8:	2001      	movne	r0, #1
 800cefa:	b002      	add	sp, #8
 800cefc:	4770      	bx	lr
 800cefe:	4610      	mov	r0, r2
 800cf00:	e7fb      	b.n	800cefa <__ascii_mbtowc+0x16>
 800cf02:	f06f 0001 	mvn.w	r0, #1
 800cf06:	e7f8      	b.n	800cefa <__ascii_mbtowc+0x16>

0800cf08 <__malloc_lock>:
 800cf08:	4801      	ldr	r0, [pc, #4]	; (800cf10 <__malloc_lock+0x8>)
 800cf0a:	f7fc be44 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 800cf0e:	bf00      	nop
 800cf10:	200139b0 	.word	0x200139b0

0800cf14 <__malloc_unlock>:
 800cf14:	4801      	ldr	r0, [pc, #4]	; (800cf1c <__malloc_unlock+0x8>)
 800cf16:	f7fc be3f 	b.w	8009b98 <__retarget_lock_release_recursive>
 800cf1a:	bf00      	nop
 800cf1c:	200139b0 	.word	0x200139b0

0800cf20 <_Balloc>:
 800cf20:	b570      	push	{r4, r5, r6, lr}
 800cf22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf24:	4604      	mov	r4, r0
 800cf26:	460d      	mov	r5, r1
 800cf28:	b976      	cbnz	r6, 800cf48 <_Balloc+0x28>
 800cf2a:	2010      	movs	r0, #16
 800cf2c:	f7ff ffd2 	bl	800ced4 <malloc>
 800cf30:	4602      	mov	r2, r0
 800cf32:	6260      	str	r0, [r4, #36]	; 0x24
 800cf34:	b920      	cbnz	r0, 800cf40 <_Balloc+0x20>
 800cf36:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <_Balloc+0x78>)
 800cf38:	4818      	ldr	r0, [pc, #96]	; (800cf9c <_Balloc+0x7c>)
 800cf3a:	2166      	movs	r1, #102	; 0x66
 800cf3c:	f000 feae 	bl	800dc9c <__assert_func>
 800cf40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf44:	6006      	str	r6, [r0, #0]
 800cf46:	60c6      	str	r6, [r0, #12]
 800cf48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf4a:	68f3      	ldr	r3, [r6, #12]
 800cf4c:	b183      	cbz	r3, 800cf70 <_Balloc+0x50>
 800cf4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf56:	b9b8      	cbnz	r0, 800cf88 <_Balloc+0x68>
 800cf58:	2101      	movs	r1, #1
 800cf5a:	fa01 f605 	lsl.w	r6, r1, r5
 800cf5e:	1d72      	adds	r2, r6, #5
 800cf60:	0092      	lsls	r2, r2, #2
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 fc9d 	bl	800d8a2 <_calloc_r>
 800cf68:	b160      	cbz	r0, 800cf84 <_Balloc+0x64>
 800cf6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf6e:	e00e      	b.n	800cf8e <_Balloc+0x6e>
 800cf70:	2221      	movs	r2, #33	; 0x21
 800cf72:	2104      	movs	r1, #4
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 fc94 	bl	800d8a2 <_calloc_r>
 800cf7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf7c:	60f0      	str	r0, [r6, #12]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1e4      	bne.n	800cf4e <_Balloc+0x2e>
 800cf84:	2000      	movs	r0, #0
 800cf86:	bd70      	pop	{r4, r5, r6, pc}
 800cf88:	6802      	ldr	r2, [r0, #0]
 800cf8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf94:	e7f7      	b.n	800cf86 <_Balloc+0x66>
 800cf96:	bf00      	nop
 800cf98:	0802b55e 	.word	0x0802b55e
 800cf9c:	0802b65c 	.word	0x0802b65c

0800cfa0 <_Bfree>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfa4:	4605      	mov	r5, r0
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	b976      	cbnz	r6, 800cfc8 <_Bfree+0x28>
 800cfaa:	2010      	movs	r0, #16
 800cfac:	f7ff ff92 	bl	800ced4 <malloc>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	6268      	str	r0, [r5, #36]	; 0x24
 800cfb4:	b920      	cbnz	r0, 800cfc0 <_Bfree+0x20>
 800cfb6:	4b09      	ldr	r3, [pc, #36]	; (800cfdc <_Bfree+0x3c>)
 800cfb8:	4809      	ldr	r0, [pc, #36]	; (800cfe0 <_Bfree+0x40>)
 800cfba:	218a      	movs	r1, #138	; 0x8a
 800cfbc:	f000 fe6e 	bl	800dc9c <__assert_func>
 800cfc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfc4:	6006      	str	r6, [r0, #0]
 800cfc6:	60c6      	str	r6, [r0, #12]
 800cfc8:	b13c      	cbz	r4, 800cfda <_Bfree+0x3a>
 800cfca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfcc:	6862      	ldr	r2, [r4, #4]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfd4:	6021      	str	r1, [r4, #0]
 800cfd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	0802b55e 	.word	0x0802b55e
 800cfe0:	0802b65c 	.word	0x0802b65c

0800cfe4 <__multadd>:
 800cfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe8:	690d      	ldr	r5, [r1, #16]
 800cfea:	4607      	mov	r7, r0
 800cfec:	460c      	mov	r4, r1
 800cfee:	461e      	mov	r6, r3
 800cff0:	f101 0c14 	add.w	ip, r1, #20
 800cff4:	2000      	movs	r0, #0
 800cff6:	f8dc 3000 	ldr.w	r3, [ip]
 800cffa:	b299      	uxth	r1, r3
 800cffc:	fb02 6101 	mla	r1, r2, r1, r6
 800d000:	0c1e      	lsrs	r6, r3, #16
 800d002:	0c0b      	lsrs	r3, r1, #16
 800d004:	fb02 3306 	mla	r3, r2, r6, r3
 800d008:	b289      	uxth	r1, r1
 800d00a:	3001      	adds	r0, #1
 800d00c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d010:	4285      	cmp	r5, r0
 800d012:	f84c 1b04 	str.w	r1, [ip], #4
 800d016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d01a:	dcec      	bgt.n	800cff6 <__multadd+0x12>
 800d01c:	b30e      	cbz	r6, 800d062 <__multadd+0x7e>
 800d01e:	68a3      	ldr	r3, [r4, #8]
 800d020:	42ab      	cmp	r3, r5
 800d022:	dc19      	bgt.n	800d058 <__multadd+0x74>
 800d024:	6861      	ldr	r1, [r4, #4]
 800d026:	4638      	mov	r0, r7
 800d028:	3101      	adds	r1, #1
 800d02a:	f7ff ff79 	bl	800cf20 <_Balloc>
 800d02e:	4680      	mov	r8, r0
 800d030:	b928      	cbnz	r0, 800d03e <__multadd+0x5a>
 800d032:	4602      	mov	r2, r0
 800d034:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <__multadd+0x84>)
 800d036:	480d      	ldr	r0, [pc, #52]	; (800d06c <__multadd+0x88>)
 800d038:	21b5      	movs	r1, #181	; 0xb5
 800d03a:	f000 fe2f 	bl	800dc9c <__assert_func>
 800d03e:	6922      	ldr	r2, [r4, #16]
 800d040:	3202      	adds	r2, #2
 800d042:	f104 010c 	add.w	r1, r4, #12
 800d046:	0092      	lsls	r2, r2, #2
 800d048:	300c      	adds	r0, #12
 800d04a:	f7fc fda6 	bl	8009b9a <memcpy>
 800d04e:	4621      	mov	r1, r4
 800d050:	4638      	mov	r0, r7
 800d052:	f7ff ffa5 	bl	800cfa0 <_Bfree>
 800d056:	4644      	mov	r4, r8
 800d058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d05c:	3501      	adds	r5, #1
 800d05e:	615e      	str	r6, [r3, #20]
 800d060:	6125      	str	r5, [r4, #16]
 800d062:	4620      	mov	r0, r4
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d068:	0802b5d0 	.word	0x0802b5d0
 800d06c:	0802b65c 	.word	0x0802b65c

0800d070 <__s2b>:
 800d070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d074:	460c      	mov	r4, r1
 800d076:	4615      	mov	r5, r2
 800d078:	461f      	mov	r7, r3
 800d07a:	2209      	movs	r2, #9
 800d07c:	3308      	adds	r3, #8
 800d07e:	4606      	mov	r6, r0
 800d080:	fb93 f3f2 	sdiv	r3, r3, r2
 800d084:	2100      	movs	r1, #0
 800d086:	2201      	movs	r2, #1
 800d088:	429a      	cmp	r2, r3
 800d08a:	db09      	blt.n	800d0a0 <__s2b+0x30>
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7ff ff47 	bl	800cf20 <_Balloc>
 800d092:	b940      	cbnz	r0, 800d0a6 <__s2b+0x36>
 800d094:	4602      	mov	r2, r0
 800d096:	4b19      	ldr	r3, [pc, #100]	; (800d0fc <__s2b+0x8c>)
 800d098:	4819      	ldr	r0, [pc, #100]	; (800d100 <__s2b+0x90>)
 800d09a:	21ce      	movs	r1, #206	; 0xce
 800d09c:	f000 fdfe 	bl	800dc9c <__assert_func>
 800d0a0:	0052      	lsls	r2, r2, #1
 800d0a2:	3101      	adds	r1, #1
 800d0a4:	e7f0      	b.n	800d088 <__s2b+0x18>
 800d0a6:	9b08      	ldr	r3, [sp, #32]
 800d0a8:	6143      	str	r3, [r0, #20]
 800d0aa:	2d09      	cmp	r5, #9
 800d0ac:	f04f 0301 	mov.w	r3, #1
 800d0b0:	6103      	str	r3, [r0, #16]
 800d0b2:	dd16      	ble.n	800d0e2 <__s2b+0x72>
 800d0b4:	f104 0909 	add.w	r9, r4, #9
 800d0b8:	46c8      	mov	r8, r9
 800d0ba:	442c      	add	r4, r5
 800d0bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	3b30      	subs	r3, #48	; 0x30
 800d0c4:	220a      	movs	r2, #10
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	f7ff ff8c 	bl	800cfe4 <__multadd>
 800d0cc:	45a0      	cmp	r8, r4
 800d0ce:	d1f5      	bne.n	800d0bc <__s2b+0x4c>
 800d0d0:	f1a5 0408 	sub.w	r4, r5, #8
 800d0d4:	444c      	add	r4, r9
 800d0d6:	1b2d      	subs	r5, r5, r4
 800d0d8:	1963      	adds	r3, r4, r5
 800d0da:	42bb      	cmp	r3, r7
 800d0dc:	db04      	blt.n	800d0e8 <__s2b+0x78>
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	340a      	adds	r4, #10
 800d0e4:	2509      	movs	r5, #9
 800d0e6:	e7f6      	b.n	800d0d6 <__s2b+0x66>
 800d0e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0ec:	4601      	mov	r1, r0
 800d0ee:	3b30      	subs	r3, #48	; 0x30
 800d0f0:	220a      	movs	r2, #10
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff ff76 	bl	800cfe4 <__multadd>
 800d0f8:	e7ee      	b.n	800d0d8 <__s2b+0x68>
 800d0fa:	bf00      	nop
 800d0fc:	0802b5d0 	.word	0x0802b5d0
 800d100:	0802b65c 	.word	0x0802b65c

0800d104 <__hi0bits>:
 800d104:	0c03      	lsrs	r3, r0, #16
 800d106:	041b      	lsls	r3, r3, #16
 800d108:	b9d3      	cbnz	r3, 800d140 <__hi0bits+0x3c>
 800d10a:	0400      	lsls	r0, r0, #16
 800d10c:	2310      	movs	r3, #16
 800d10e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d112:	bf04      	itt	eq
 800d114:	0200      	lsleq	r0, r0, #8
 800d116:	3308      	addeq	r3, #8
 800d118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d11c:	bf04      	itt	eq
 800d11e:	0100      	lsleq	r0, r0, #4
 800d120:	3304      	addeq	r3, #4
 800d122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d126:	bf04      	itt	eq
 800d128:	0080      	lsleq	r0, r0, #2
 800d12a:	3302      	addeq	r3, #2
 800d12c:	2800      	cmp	r0, #0
 800d12e:	db05      	blt.n	800d13c <__hi0bits+0x38>
 800d130:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d134:	f103 0301 	add.w	r3, r3, #1
 800d138:	bf08      	it	eq
 800d13a:	2320      	moveq	r3, #32
 800d13c:	4618      	mov	r0, r3
 800d13e:	4770      	bx	lr
 800d140:	2300      	movs	r3, #0
 800d142:	e7e4      	b.n	800d10e <__hi0bits+0xa>

0800d144 <__lo0bits>:
 800d144:	6803      	ldr	r3, [r0, #0]
 800d146:	f013 0207 	ands.w	r2, r3, #7
 800d14a:	4601      	mov	r1, r0
 800d14c:	d00b      	beq.n	800d166 <__lo0bits+0x22>
 800d14e:	07da      	lsls	r2, r3, #31
 800d150:	d423      	bmi.n	800d19a <__lo0bits+0x56>
 800d152:	0798      	lsls	r0, r3, #30
 800d154:	bf49      	itett	mi
 800d156:	085b      	lsrmi	r3, r3, #1
 800d158:	089b      	lsrpl	r3, r3, #2
 800d15a:	2001      	movmi	r0, #1
 800d15c:	600b      	strmi	r3, [r1, #0]
 800d15e:	bf5c      	itt	pl
 800d160:	600b      	strpl	r3, [r1, #0]
 800d162:	2002      	movpl	r0, #2
 800d164:	4770      	bx	lr
 800d166:	b298      	uxth	r0, r3
 800d168:	b9a8      	cbnz	r0, 800d196 <__lo0bits+0x52>
 800d16a:	0c1b      	lsrs	r3, r3, #16
 800d16c:	2010      	movs	r0, #16
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	b90a      	cbnz	r2, 800d176 <__lo0bits+0x32>
 800d172:	3008      	adds	r0, #8
 800d174:	0a1b      	lsrs	r3, r3, #8
 800d176:	071a      	lsls	r2, r3, #28
 800d178:	bf04      	itt	eq
 800d17a:	091b      	lsreq	r3, r3, #4
 800d17c:	3004      	addeq	r0, #4
 800d17e:	079a      	lsls	r2, r3, #30
 800d180:	bf04      	itt	eq
 800d182:	089b      	lsreq	r3, r3, #2
 800d184:	3002      	addeq	r0, #2
 800d186:	07da      	lsls	r2, r3, #31
 800d188:	d403      	bmi.n	800d192 <__lo0bits+0x4e>
 800d18a:	085b      	lsrs	r3, r3, #1
 800d18c:	f100 0001 	add.w	r0, r0, #1
 800d190:	d005      	beq.n	800d19e <__lo0bits+0x5a>
 800d192:	600b      	str	r3, [r1, #0]
 800d194:	4770      	bx	lr
 800d196:	4610      	mov	r0, r2
 800d198:	e7e9      	b.n	800d16e <__lo0bits+0x2a>
 800d19a:	2000      	movs	r0, #0
 800d19c:	4770      	bx	lr
 800d19e:	2020      	movs	r0, #32
 800d1a0:	4770      	bx	lr
	...

0800d1a4 <__i2b>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	2101      	movs	r1, #1
 800d1aa:	f7ff feb9 	bl	800cf20 <_Balloc>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	b928      	cbnz	r0, 800d1be <__i2b+0x1a>
 800d1b2:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <__i2b+0x24>)
 800d1b4:	4805      	ldr	r0, [pc, #20]	; (800d1cc <__i2b+0x28>)
 800d1b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1ba:	f000 fd6f 	bl	800dc9c <__assert_func>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	6144      	str	r4, [r0, #20]
 800d1c2:	6103      	str	r3, [r0, #16]
 800d1c4:	bd10      	pop	{r4, pc}
 800d1c6:	bf00      	nop
 800d1c8:	0802b5d0 	.word	0x0802b5d0
 800d1cc:	0802b65c 	.word	0x0802b65c

0800d1d0 <__multiply>:
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	4691      	mov	r9, r2
 800d1d6:	690a      	ldr	r2, [r1, #16]
 800d1d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	bfb8      	it	lt
 800d1e0:	460b      	movlt	r3, r1
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	bfbc      	itt	lt
 800d1e6:	464c      	movlt	r4, r9
 800d1e8:	4699      	movlt	r9, r3
 800d1ea:	6927      	ldr	r7, [r4, #16]
 800d1ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1f0:	68a3      	ldr	r3, [r4, #8]
 800d1f2:	6861      	ldr	r1, [r4, #4]
 800d1f4:	eb07 060a 	add.w	r6, r7, sl
 800d1f8:	42b3      	cmp	r3, r6
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	bfb8      	it	lt
 800d1fe:	3101      	addlt	r1, #1
 800d200:	f7ff fe8e 	bl	800cf20 <_Balloc>
 800d204:	b930      	cbnz	r0, 800d214 <__multiply+0x44>
 800d206:	4602      	mov	r2, r0
 800d208:	4b44      	ldr	r3, [pc, #272]	; (800d31c <__multiply+0x14c>)
 800d20a:	4845      	ldr	r0, [pc, #276]	; (800d320 <__multiply+0x150>)
 800d20c:	f240 115d 	movw	r1, #349	; 0x15d
 800d210:	f000 fd44 	bl	800dc9c <__assert_func>
 800d214:	f100 0514 	add.w	r5, r0, #20
 800d218:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d21c:	462b      	mov	r3, r5
 800d21e:	2200      	movs	r2, #0
 800d220:	4543      	cmp	r3, r8
 800d222:	d321      	bcc.n	800d268 <__multiply+0x98>
 800d224:	f104 0314 	add.w	r3, r4, #20
 800d228:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d22c:	f109 0314 	add.w	r3, r9, #20
 800d230:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d234:	9202      	str	r2, [sp, #8]
 800d236:	1b3a      	subs	r2, r7, r4
 800d238:	3a15      	subs	r2, #21
 800d23a:	f022 0203 	bic.w	r2, r2, #3
 800d23e:	3204      	adds	r2, #4
 800d240:	f104 0115 	add.w	r1, r4, #21
 800d244:	428f      	cmp	r7, r1
 800d246:	bf38      	it	cc
 800d248:	2204      	movcc	r2, #4
 800d24a:	9201      	str	r2, [sp, #4]
 800d24c:	9a02      	ldr	r2, [sp, #8]
 800d24e:	9303      	str	r3, [sp, #12]
 800d250:	429a      	cmp	r2, r3
 800d252:	d80c      	bhi.n	800d26e <__multiply+0x9e>
 800d254:	2e00      	cmp	r6, #0
 800d256:	dd03      	ble.n	800d260 <__multiply+0x90>
 800d258:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d05a      	beq.n	800d316 <__multiply+0x146>
 800d260:	6106      	str	r6, [r0, #16]
 800d262:	b005      	add	sp, #20
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	f843 2b04 	str.w	r2, [r3], #4
 800d26c:	e7d8      	b.n	800d220 <__multiply+0x50>
 800d26e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d272:	f1ba 0f00 	cmp.w	sl, #0
 800d276:	d024      	beq.n	800d2c2 <__multiply+0xf2>
 800d278:	f104 0e14 	add.w	lr, r4, #20
 800d27c:	46a9      	mov	r9, r5
 800d27e:	f04f 0c00 	mov.w	ip, #0
 800d282:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d286:	f8d9 1000 	ldr.w	r1, [r9]
 800d28a:	fa1f fb82 	uxth.w	fp, r2
 800d28e:	b289      	uxth	r1, r1
 800d290:	fb0a 110b 	mla	r1, sl, fp, r1
 800d294:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d298:	f8d9 2000 	ldr.w	r2, [r9]
 800d29c:	4461      	add	r1, ip
 800d29e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d2a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d2aa:	b289      	uxth	r1, r1
 800d2ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d2b0:	4577      	cmp	r7, lr
 800d2b2:	f849 1b04 	str.w	r1, [r9], #4
 800d2b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2ba:	d8e2      	bhi.n	800d282 <__multiply+0xb2>
 800d2bc:	9a01      	ldr	r2, [sp, #4]
 800d2be:	f845 c002 	str.w	ip, [r5, r2]
 800d2c2:	9a03      	ldr	r2, [sp, #12]
 800d2c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	f1b9 0f00 	cmp.w	r9, #0
 800d2ce:	d020      	beq.n	800d312 <__multiply+0x142>
 800d2d0:	6829      	ldr	r1, [r5, #0]
 800d2d2:	f104 0c14 	add.w	ip, r4, #20
 800d2d6:	46ae      	mov	lr, r5
 800d2d8:	f04f 0a00 	mov.w	sl, #0
 800d2dc:	f8bc b000 	ldrh.w	fp, [ip]
 800d2e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d2e4:	fb09 220b 	mla	r2, r9, fp, r2
 800d2e8:	4492      	add	sl, r2
 800d2ea:	b289      	uxth	r1, r1
 800d2ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d2f0:	f84e 1b04 	str.w	r1, [lr], #4
 800d2f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d2f8:	f8be 1000 	ldrh.w	r1, [lr]
 800d2fc:	0c12      	lsrs	r2, r2, #16
 800d2fe:	fb09 1102 	mla	r1, r9, r2, r1
 800d302:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d306:	4567      	cmp	r7, ip
 800d308:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d30c:	d8e6      	bhi.n	800d2dc <__multiply+0x10c>
 800d30e:	9a01      	ldr	r2, [sp, #4]
 800d310:	50a9      	str	r1, [r5, r2]
 800d312:	3504      	adds	r5, #4
 800d314:	e79a      	b.n	800d24c <__multiply+0x7c>
 800d316:	3e01      	subs	r6, #1
 800d318:	e79c      	b.n	800d254 <__multiply+0x84>
 800d31a:	bf00      	nop
 800d31c:	0802b5d0 	.word	0x0802b5d0
 800d320:	0802b65c 	.word	0x0802b65c

0800d324 <__pow5mult>:
 800d324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d328:	4615      	mov	r5, r2
 800d32a:	f012 0203 	ands.w	r2, r2, #3
 800d32e:	4606      	mov	r6, r0
 800d330:	460f      	mov	r7, r1
 800d332:	d007      	beq.n	800d344 <__pow5mult+0x20>
 800d334:	4c25      	ldr	r4, [pc, #148]	; (800d3cc <__pow5mult+0xa8>)
 800d336:	3a01      	subs	r2, #1
 800d338:	2300      	movs	r3, #0
 800d33a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d33e:	f7ff fe51 	bl	800cfe4 <__multadd>
 800d342:	4607      	mov	r7, r0
 800d344:	10ad      	asrs	r5, r5, #2
 800d346:	d03d      	beq.n	800d3c4 <__pow5mult+0xa0>
 800d348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d34a:	b97c      	cbnz	r4, 800d36c <__pow5mult+0x48>
 800d34c:	2010      	movs	r0, #16
 800d34e:	f7ff fdc1 	bl	800ced4 <malloc>
 800d352:	4602      	mov	r2, r0
 800d354:	6270      	str	r0, [r6, #36]	; 0x24
 800d356:	b928      	cbnz	r0, 800d364 <__pow5mult+0x40>
 800d358:	4b1d      	ldr	r3, [pc, #116]	; (800d3d0 <__pow5mult+0xac>)
 800d35a:	481e      	ldr	r0, [pc, #120]	; (800d3d4 <__pow5mult+0xb0>)
 800d35c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d360:	f000 fc9c 	bl	800dc9c <__assert_func>
 800d364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d368:	6004      	str	r4, [r0, #0]
 800d36a:	60c4      	str	r4, [r0, #12]
 800d36c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d374:	b94c      	cbnz	r4, 800d38a <__pow5mult+0x66>
 800d376:	f240 2171 	movw	r1, #625	; 0x271
 800d37a:	4630      	mov	r0, r6
 800d37c:	f7ff ff12 	bl	800d1a4 <__i2b>
 800d380:	2300      	movs	r3, #0
 800d382:	f8c8 0008 	str.w	r0, [r8, #8]
 800d386:	4604      	mov	r4, r0
 800d388:	6003      	str	r3, [r0, #0]
 800d38a:	f04f 0900 	mov.w	r9, #0
 800d38e:	07eb      	lsls	r3, r5, #31
 800d390:	d50a      	bpl.n	800d3a8 <__pow5mult+0x84>
 800d392:	4639      	mov	r1, r7
 800d394:	4622      	mov	r2, r4
 800d396:	4630      	mov	r0, r6
 800d398:	f7ff ff1a 	bl	800d1d0 <__multiply>
 800d39c:	4639      	mov	r1, r7
 800d39e:	4680      	mov	r8, r0
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f7ff fdfd 	bl	800cfa0 <_Bfree>
 800d3a6:	4647      	mov	r7, r8
 800d3a8:	106d      	asrs	r5, r5, #1
 800d3aa:	d00b      	beq.n	800d3c4 <__pow5mult+0xa0>
 800d3ac:	6820      	ldr	r0, [r4, #0]
 800d3ae:	b938      	cbnz	r0, 800d3c0 <__pow5mult+0x9c>
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	4621      	mov	r1, r4
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	f7ff ff0b 	bl	800d1d0 <__multiply>
 800d3ba:	6020      	str	r0, [r4, #0]
 800d3bc:	f8c0 9000 	str.w	r9, [r0]
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	e7e4      	b.n	800d38e <__pow5mult+0x6a>
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ca:	bf00      	nop
 800d3cc:	0802b7a8 	.word	0x0802b7a8
 800d3d0:	0802b55e 	.word	0x0802b55e
 800d3d4:	0802b65c 	.word	0x0802b65c

0800d3d8 <__lshift>:
 800d3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3dc:	460c      	mov	r4, r1
 800d3de:	6849      	ldr	r1, [r1, #4]
 800d3e0:	6923      	ldr	r3, [r4, #16]
 800d3e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3e6:	68a3      	ldr	r3, [r4, #8]
 800d3e8:	4607      	mov	r7, r0
 800d3ea:	4691      	mov	r9, r2
 800d3ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3f0:	f108 0601 	add.w	r6, r8, #1
 800d3f4:	42b3      	cmp	r3, r6
 800d3f6:	db0b      	blt.n	800d410 <__lshift+0x38>
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	f7ff fd91 	bl	800cf20 <_Balloc>
 800d3fe:	4605      	mov	r5, r0
 800d400:	b948      	cbnz	r0, 800d416 <__lshift+0x3e>
 800d402:	4602      	mov	r2, r0
 800d404:	4b2a      	ldr	r3, [pc, #168]	; (800d4b0 <__lshift+0xd8>)
 800d406:	482b      	ldr	r0, [pc, #172]	; (800d4b4 <__lshift+0xdc>)
 800d408:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d40c:	f000 fc46 	bl	800dc9c <__assert_func>
 800d410:	3101      	adds	r1, #1
 800d412:	005b      	lsls	r3, r3, #1
 800d414:	e7ee      	b.n	800d3f4 <__lshift+0x1c>
 800d416:	2300      	movs	r3, #0
 800d418:	f100 0114 	add.w	r1, r0, #20
 800d41c:	f100 0210 	add.w	r2, r0, #16
 800d420:	4618      	mov	r0, r3
 800d422:	4553      	cmp	r3, sl
 800d424:	db37      	blt.n	800d496 <__lshift+0xbe>
 800d426:	6920      	ldr	r0, [r4, #16]
 800d428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d42c:	f104 0314 	add.w	r3, r4, #20
 800d430:	f019 091f 	ands.w	r9, r9, #31
 800d434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d438:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d43c:	d02f      	beq.n	800d49e <__lshift+0xc6>
 800d43e:	f1c9 0e20 	rsb	lr, r9, #32
 800d442:	468a      	mov	sl, r1
 800d444:	f04f 0c00 	mov.w	ip, #0
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	fa02 f209 	lsl.w	r2, r2, r9
 800d44e:	ea42 020c 	orr.w	r2, r2, ip
 800d452:	f84a 2b04 	str.w	r2, [sl], #4
 800d456:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45a:	4298      	cmp	r0, r3
 800d45c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d460:	d8f2      	bhi.n	800d448 <__lshift+0x70>
 800d462:	1b03      	subs	r3, r0, r4
 800d464:	3b15      	subs	r3, #21
 800d466:	f023 0303 	bic.w	r3, r3, #3
 800d46a:	3304      	adds	r3, #4
 800d46c:	f104 0215 	add.w	r2, r4, #21
 800d470:	4290      	cmp	r0, r2
 800d472:	bf38      	it	cc
 800d474:	2304      	movcc	r3, #4
 800d476:	f841 c003 	str.w	ip, [r1, r3]
 800d47a:	f1bc 0f00 	cmp.w	ip, #0
 800d47e:	d001      	beq.n	800d484 <__lshift+0xac>
 800d480:	f108 0602 	add.w	r6, r8, #2
 800d484:	3e01      	subs	r6, #1
 800d486:	4638      	mov	r0, r7
 800d488:	612e      	str	r6, [r5, #16]
 800d48a:	4621      	mov	r1, r4
 800d48c:	f7ff fd88 	bl	800cfa0 <_Bfree>
 800d490:	4628      	mov	r0, r5
 800d492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d496:	f842 0f04 	str.w	r0, [r2, #4]!
 800d49a:	3301      	adds	r3, #1
 800d49c:	e7c1      	b.n	800d422 <__lshift+0x4a>
 800d49e:	3904      	subs	r1, #4
 800d4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4a8:	4298      	cmp	r0, r3
 800d4aa:	d8f9      	bhi.n	800d4a0 <__lshift+0xc8>
 800d4ac:	e7ea      	b.n	800d484 <__lshift+0xac>
 800d4ae:	bf00      	nop
 800d4b0:	0802b5d0 	.word	0x0802b5d0
 800d4b4:	0802b65c 	.word	0x0802b65c

0800d4b8 <__mcmp>:
 800d4b8:	b530      	push	{r4, r5, lr}
 800d4ba:	6902      	ldr	r2, [r0, #16]
 800d4bc:	690c      	ldr	r4, [r1, #16]
 800d4be:	1b12      	subs	r2, r2, r4
 800d4c0:	d10e      	bne.n	800d4e0 <__mcmp+0x28>
 800d4c2:	f100 0314 	add.w	r3, r0, #20
 800d4c6:	3114      	adds	r1, #20
 800d4c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4d8:	42a5      	cmp	r5, r4
 800d4da:	d003      	beq.n	800d4e4 <__mcmp+0x2c>
 800d4dc:	d305      	bcc.n	800d4ea <__mcmp+0x32>
 800d4de:	2201      	movs	r2, #1
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	bd30      	pop	{r4, r5, pc}
 800d4e4:	4283      	cmp	r3, r0
 800d4e6:	d3f3      	bcc.n	800d4d0 <__mcmp+0x18>
 800d4e8:	e7fa      	b.n	800d4e0 <__mcmp+0x28>
 800d4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ee:	e7f7      	b.n	800d4e0 <__mcmp+0x28>

0800d4f0 <__mdiff>:
 800d4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	4690      	mov	r8, r2
 800d4fe:	f7ff ffdb 	bl	800d4b8 <__mcmp>
 800d502:	1e05      	subs	r5, r0, #0
 800d504:	d110      	bne.n	800d528 <__mdiff+0x38>
 800d506:	4629      	mov	r1, r5
 800d508:	4630      	mov	r0, r6
 800d50a:	f7ff fd09 	bl	800cf20 <_Balloc>
 800d50e:	b930      	cbnz	r0, 800d51e <__mdiff+0x2e>
 800d510:	4b3a      	ldr	r3, [pc, #232]	; (800d5fc <__mdiff+0x10c>)
 800d512:	4602      	mov	r2, r0
 800d514:	f240 2132 	movw	r1, #562	; 0x232
 800d518:	4839      	ldr	r0, [pc, #228]	; (800d600 <__mdiff+0x110>)
 800d51a:	f000 fbbf 	bl	800dc9c <__assert_func>
 800d51e:	2301      	movs	r3, #1
 800d520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d528:	bfa4      	itt	ge
 800d52a:	4643      	movge	r3, r8
 800d52c:	46a0      	movge	r8, r4
 800d52e:	4630      	mov	r0, r6
 800d530:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d534:	bfa6      	itte	ge
 800d536:	461c      	movge	r4, r3
 800d538:	2500      	movge	r5, #0
 800d53a:	2501      	movlt	r5, #1
 800d53c:	f7ff fcf0 	bl	800cf20 <_Balloc>
 800d540:	b920      	cbnz	r0, 800d54c <__mdiff+0x5c>
 800d542:	4b2e      	ldr	r3, [pc, #184]	; (800d5fc <__mdiff+0x10c>)
 800d544:	4602      	mov	r2, r0
 800d546:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d54a:	e7e5      	b.n	800d518 <__mdiff+0x28>
 800d54c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d550:	6926      	ldr	r6, [r4, #16]
 800d552:	60c5      	str	r5, [r0, #12]
 800d554:	f104 0914 	add.w	r9, r4, #20
 800d558:	f108 0514 	add.w	r5, r8, #20
 800d55c:	f100 0e14 	add.w	lr, r0, #20
 800d560:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d564:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d568:	f108 0210 	add.w	r2, r8, #16
 800d56c:	46f2      	mov	sl, lr
 800d56e:	2100      	movs	r1, #0
 800d570:	f859 3b04 	ldr.w	r3, [r9], #4
 800d574:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d578:	fa1f f883 	uxth.w	r8, r3
 800d57c:	fa11 f18b 	uxtah	r1, r1, fp
 800d580:	0c1b      	lsrs	r3, r3, #16
 800d582:	eba1 0808 	sub.w	r8, r1, r8
 800d586:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d58a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d58e:	fa1f f888 	uxth.w	r8, r8
 800d592:	1419      	asrs	r1, r3, #16
 800d594:	454e      	cmp	r6, r9
 800d596:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d59a:	f84a 3b04 	str.w	r3, [sl], #4
 800d59e:	d8e7      	bhi.n	800d570 <__mdiff+0x80>
 800d5a0:	1b33      	subs	r3, r6, r4
 800d5a2:	3b15      	subs	r3, #21
 800d5a4:	f023 0303 	bic.w	r3, r3, #3
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	3415      	adds	r4, #21
 800d5ac:	42a6      	cmp	r6, r4
 800d5ae:	bf38      	it	cc
 800d5b0:	2304      	movcc	r3, #4
 800d5b2:	441d      	add	r5, r3
 800d5b4:	4473      	add	r3, lr
 800d5b6:	469e      	mov	lr, r3
 800d5b8:	462e      	mov	r6, r5
 800d5ba:	4566      	cmp	r6, ip
 800d5bc:	d30e      	bcc.n	800d5dc <__mdiff+0xec>
 800d5be:	f10c 0203 	add.w	r2, ip, #3
 800d5c2:	1b52      	subs	r2, r2, r5
 800d5c4:	f022 0203 	bic.w	r2, r2, #3
 800d5c8:	3d03      	subs	r5, #3
 800d5ca:	45ac      	cmp	ip, r5
 800d5cc:	bf38      	it	cc
 800d5ce:	2200      	movcc	r2, #0
 800d5d0:	441a      	add	r2, r3
 800d5d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5d6:	b17b      	cbz	r3, 800d5f8 <__mdiff+0x108>
 800d5d8:	6107      	str	r7, [r0, #16]
 800d5da:	e7a3      	b.n	800d524 <__mdiff+0x34>
 800d5dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d5e0:	fa11 f288 	uxtah	r2, r1, r8
 800d5e4:	1414      	asrs	r4, r2, #16
 800d5e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d5ea:	b292      	uxth	r2, r2
 800d5ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d5f0:	f84e 2b04 	str.w	r2, [lr], #4
 800d5f4:	1421      	asrs	r1, r4, #16
 800d5f6:	e7e0      	b.n	800d5ba <__mdiff+0xca>
 800d5f8:	3f01      	subs	r7, #1
 800d5fa:	e7ea      	b.n	800d5d2 <__mdiff+0xe2>
 800d5fc:	0802b5d0 	.word	0x0802b5d0
 800d600:	0802b65c 	.word	0x0802b65c

0800d604 <__ulp>:
 800d604:	b082      	sub	sp, #8
 800d606:	ed8d 0b00 	vstr	d0, [sp]
 800d60a:	9b01      	ldr	r3, [sp, #4]
 800d60c:	4912      	ldr	r1, [pc, #72]	; (800d658 <__ulp+0x54>)
 800d60e:	4019      	ands	r1, r3
 800d610:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d614:	2900      	cmp	r1, #0
 800d616:	dd05      	ble.n	800d624 <__ulp+0x20>
 800d618:	2200      	movs	r2, #0
 800d61a:	460b      	mov	r3, r1
 800d61c:	ec43 2b10 	vmov	d0, r2, r3
 800d620:	b002      	add	sp, #8
 800d622:	4770      	bx	lr
 800d624:	4249      	negs	r1, r1
 800d626:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d62a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d62e:	f04f 0200 	mov.w	r2, #0
 800d632:	f04f 0300 	mov.w	r3, #0
 800d636:	da04      	bge.n	800d642 <__ulp+0x3e>
 800d638:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d63c:	fa41 f300 	asr.w	r3, r1, r0
 800d640:	e7ec      	b.n	800d61c <__ulp+0x18>
 800d642:	f1a0 0114 	sub.w	r1, r0, #20
 800d646:	291e      	cmp	r1, #30
 800d648:	bfda      	itte	le
 800d64a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d64e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d652:	2101      	movgt	r1, #1
 800d654:	460a      	mov	r2, r1
 800d656:	e7e1      	b.n	800d61c <__ulp+0x18>
 800d658:	7ff00000 	.word	0x7ff00000

0800d65c <__b2d>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	6905      	ldr	r5, [r0, #16]
 800d660:	f100 0714 	add.w	r7, r0, #20
 800d664:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d668:	1f2e      	subs	r6, r5, #4
 800d66a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d66e:	4620      	mov	r0, r4
 800d670:	f7ff fd48 	bl	800d104 <__hi0bits>
 800d674:	f1c0 0320 	rsb	r3, r0, #32
 800d678:	280a      	cmp	r0, #10
 800d67a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d6f8 <__b2d+0x9c>
 800d67e:	600b      	str	r3, [r1, #0]
 800d680:	dc14      	bgt.n	800d6ac <__b2d+0x50>
 800d682:	f1c0 0e0b 	rsb	lr, r0, #11
 800d686:	fa24 f10e 	lsr.w	r1, r4, lr
 800d68a:	42b7      	cmp	r7, r6
 800d68c:	ea41 030c 	orr.w	r3, r1, ip
 800d690:	bf34      	ite	cc
 800d692:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d696:	2100      	movcs	r1, #0
 800d698:	3015      	adds	r0, #21
 800d69a:	fa04 f000 	lsl.w	r0, r4, r0
 800d69e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d6a2:	ea40 0201 	orr.w	r2, r0, r1
 800d6a6:	ec43 2b10 	vmov	d0, r2, r3
 800d6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ac:	42b7      	cmp	r7, r6
 800d6ae:	bf3a      	itte	cc
 800d6b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d6b8:	2100      	movcs	r1, #0
 800d6ba:	380b      	subs	r0, #11
 800d6bc:	d017      	beq.n	800d6ee <__b2d+0x92>
 800d6be:	f1c0 0c20 	rsb	ip, r0, #32
 800d6c2:	fa04 f500 	lsl.w	r5, r4, r0
 800d6c6:	42be      	cmp	r6, r7
 800d6c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d6cc:	ea45 0504 	orr.w	r5, r5, r4
 800d6d0:	bf8c      	ite	hi
 800d6d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d6d6:	2400      	movls	r4, #0
 800d6d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d6dc:	fa01 f000 	lsl.w	r0, r1, r0
 800d6e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d6e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6e8:	ea40 0204 	orr.w	r2, r0, r4
 800d6ec:	e7db      	b.n	800d6a6 <__b2d+0x4a>
 800d6ee:	ea44 030c 	orr.w	r3, r4, ip
 800d6f2:	460a      	mov	r2, r1
 800d6f4:	e7d7      	b.n	800d6a6 <__b2d+0x4a>
 800d6f6:	bf00      	nop
 800d6f8:	3ff00000 	.word	0x3ff00000

0800d6fc <__d2b>:
 800d6fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d700:	4689      	mov	r9, r1
 800d702:	2101      	movs	r1, #1
 800d704:	ec57 6b10 	vmov	r6, r7, d0
 800d708:	4690      	mov	r8, r2
 800d70a:	f7ff fc09 	bl	800cf20 <_Balloc>
 800d70e:	4604      	mov	r4, r0
 800d710:	b930      	cbnz	r0, 800d720 <__d2b+0x24>
 800d712:	4602      	mov	r2, r0
 800d714:	4b25      	ldr	r3, [pc, #148]	; (800d7ac <__d2b+0xb0>)
 800d716:	4826      	ldr	r0, [pc, #152]	; (800d7b0 <__d2b+0xb4>)
 800d718:	f240 310a 	movw	r1, #778	; 0x30a
 800d71c:	f000 fabe 	bl	800dc9c <__assert_func>
 800d720:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d724:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d728:	bb35      	cbnz	r5, 800d778 <__d2b+0x7c>
 800d72a:	2e00      	cmp	r6, #0
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	d028      	beq.n	800d782 <__d2b+0x86>
 800d730:	4668      	mov	r0, sp
 800d732:	9600      	str	r6, [sp, #0]
 800d734:	f7ff fd06 	bl	800d144 <__lo0bits>
 800d738:	9900      	ldr	r1, [sp, #0]
 800d73a:	b300      	cbz	r0, 800d77e <__d2b+0x82>
 800d73c:	9a01      	ldr	r2, [sp, #4]
 800d73e:	f1c0 0320 	rsb	r3, r0, #32
 800d742:	fa02 f303 	lsl.w	r3, r2, r3
 800d746:	430b      	orrs	r3, r1
 800d748:	40c2      	lsrs	r2, r0
 800d74a:	6163      	str	r3, [r4, #20]
 800d74c:	9201      	str	r2, [sp, #4]
 800d74e:	9b01      	ldr	r3, [sp, #4]
 800d750:	61a3      	str	r3, [r4, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	bf14      	ite	ne
 800d756:	2202      	movne	r2, #2
 800d758:	2201      	moveq	r2, #1
 800d75a:	6122      	str	r2, [r4, #16]
 800d75c:	b1d5      	cbz	r5, 800d794 <__d2b+0x98>
 800d75e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d762:	4405      	add	r5, r0
 800d764:	f8c9 5000 	str.w	r5, [r9]
 800d768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d76c:	f8c8 0000 	str.w	r0, [r8]
 800d770:	4620      	mov	r0, r4
 800d772:	b003      	add	sp, #12
 800d774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d77c:	e7d5      	b.n	800d72a <__d2b+0x2e>
 800d77e:	6161      	str	r1, [r4, #20]
 800d780:	e7e5      	b.n	800d74e <__d2b+0x52>
 800d782:	a801      	add	r0, sp, #4
 800d784:	f7ff fcde 	bl	800d144 <__lo0bits>
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	6163      	str	r3, [r4, #20]
 800d78c:	2201      	movs	r2, #1
 800d78e:	6122      	str	r2, [r4, #16]
 800d790:	3020      	adds	r0, #32
 800d792:	e7e3      	b.n	800d75c <__d2b+0x60>
 800d794:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d798:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d79c:	f8c9 0000 	str.w	r0, [r9]
 800d7a0:	6918      	ldr	r0, [r3, #16]
 800d7a2:	f7ff fcaf 	bl	800d104 <__hi0bits>
 800d7a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7aa:	e7df      	b.n	800d76c <__d2b+0x70>
 800d7ac:	0802b5d0 	.word	0x0802b5d0
 800d7b0:	0802b65c 	.word	0x0802b65c

0800d7b4 <__ratio>:
 800d7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	4688      	mov	r8, r1
 800d7ba:	4669      	mov	r1, sp
 800d7bc:	4681      	mov	r9, r0
 800d7be:	f7ff ff4d 	bl	800d65c <__b2d>
 800d7c2:	a901      	add	r1, sp, #4
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	ec55 4b10 	vmov	r4, r5, d0
 800d7ca:	f7ff ff47 	bl	800d65c <__b2d>
 800d7ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d7d6:	eba3 0c02 	sub.w	ip, r3, r2
 800d7da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7de:	1a9b      	subs	r3, r3, r2
 800d7e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d7e4:	ec51 0b10 	vmov	r0, r1, d0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	bfd6      	itet	le
 800d7ec:	460a      	movle	r2, r1
 800d7ee:	462a      	movgt	r2, r5
 800d7f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7f4:	468b      	mov	fp, r1
 800d7f6:	462f      	mov	r7, r5
 800d7f8:	bfd4      	ite	le
 800d7fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d7fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d802:	4620      	mov	r0, r4
 800d804:	ee10 2a10 	vmov	r2, s0
 800d808:	465b      	mov	r3, fp
 800d80a:	4639      	mov	r1, r7
 800d80c:	f7f3 f83e 	bl	800088c <__aeabi_ddiv>
 800d810:	ec41 0b10 	vmov	d0, r0, r1
 800d814:	b003      	add	sp, #12
 800d816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d81a <__copybits>:
 800d81a:	3901      	subs	r1, #1
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	1149      	asrs	r1, r1, #5
 800d820:	6914      	ldr	r4, [r2, #16]
 800d822:	3101      	adds	r1, #1
 800d824:	f102 0314 	add.w	r3, r2, #20
 800d828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d82c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d830:	1f05      	subs	r5, r0, #4
 800d832:	42a3      	cmp	r3, r4
 800d834:	d30c      	bcc.n	800d850 <__copybits+0x36>
 800d836:	1aa3      	subs	r3, r4, r2
 800d838:	3b11      	subs	r3, #17
 800d83a:	f023 0303 	bic.w	r3, r3, #3
 800d83e:	3211      	adds	r2, #17
 800d840:	42a2      	cmp	r2, r4
 800d842:	bf88      	it	hi
 800d844:	2300      	movhi	r3, #0
 800d846:	4418      	add	r0, r3
 800d848:	2300      	movs	r3, #0
 800d84a:	4288      	cmp	r0, r1
 800d84c:	d305      	bcc.n	800d85a <__copybits+0x40>
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	f853 6b04 	ldr.w	r6, [r3], #4
 800d854:	f845 6f04 	str.w	r6, [r5, #4]!
 800d858:	e7eb      	b.n	800d832 <__copybits+0x18>
 800d85a:	f840 3b04 	str.w	r3, [r0], #4
 800d85e:	e7f4      	b.n	800d84a <__copybits+0x30>

0800d860 <__any_on>:
 800d860:	f100 0214 	add.w	r2, r0, #20
 800d864:	6900      	ldr	r0, [r0, #16]
 800d866:	114b      	asrs	r3, r1, #5
 800d868:	4298      	cmp	r0, r3
 800d86a:	b510      	push	{r4, lr}
 800d86c:	db11      	blt.n	800d892 <__any_on+0x32>
 800d86e:	dd0a      	ble.n	800d886 <__any_on+0x26>
 800d870:	f011 011f 	ands.w	r1, r1, #31
 800d874:	d007      	beq.n	800d886 <__any_on+0x26>
 800d876:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d87a:	fa24 f001 	lsr.w	r0, r4, r1
 800d87e:	fa00 f101 	lsl.w	r1, r0, r1
 800d882:	428c      	cmp	r4, r1
 800d884:	d10b      	bne.n	800d89e <__any_on+0x3e>
 800d886:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d803      	bhi.n	800d896 <__any_on+0x36>
 800d88e:	2000      	movs	r0, #0
 800d890:	bd10      	pop	{r4, pc}
 800d892:	4603      	mov	r3, r0
 800d894:	e7f7      	b.n	800d886 <__any_on+0x26>
 800d896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d89a:	2900      	cmp	r1, #0
 800d89c:	d0f5      	beq.n	800d88a <__any_on+0x2a>
 800d89e:	2001      	movs	r0, #1
 800d8a0:	e7f6      	b.n	800d890 <__any_on+0x30>

0800d8a2 <_calloc_r>:
 800d8a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8a4:	fba1 2402 	umull	r2, r4, r1, r2
 800d8a8:	b94c      	cbnz	r4, 800d8be <_calloc_r+0x1c>
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	9201      	str	r2, [sp, #4]
 800d8ae:	f7fc f9ab 	bl	8009c08 <_malloc_r>
 800d8b2:	9a01      	ldr	r2, [sp, #4]
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	b930      	cbnz	r0, 800d8c6 <_calloc_r+0x24>
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	b003      	add	sp, #12
 800d8bc:	bd30      	pop	{r4, r5, pc}
 800d8be:	220c      	movs	r2, #12
 800d8c0:	6002      	str	r2, [r0, #0]
 800d8c2:	2500      	movs	r5, #0
 800d8c4:	e7f8      	b.n	800d8b8 <_calloc_r+0x16>
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	f7fc f975 	bl	8009bb6 <memset>
 800d8cc:	e7f4      	b.n	800d8b8 <_calloc_r+0x16>
	...

0800d8d0 <_free_r>:
 800d8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8d2:	2900      	cmp	r1, #0
 800d8d4:	d044      	beq.n	800d960 <_free_r+0x90>
 800d8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8da:	9001      	str	r0, [sp, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f1a1 0404 	sub.w	r4, r1, #4
 800d8e2:	bfb8      	it	lt
 800d8e4:	18e4      	addlt	r4, r4, r3
 800d8e6:	f7ff fb0f 	bl	800cf08 <__malloc_lock>
 800d8ea:	4a1e      	ldr	r2, [pc, #120]	; (800d964 <_free_r+0x94>)
 800d8ec:	9801      	ldr	r0, [sp, #4]
 800d8ee:	6813      	ldr	r3, [r2, #0]
 800d8f0:	b933      	cbnz	r3, 800d900 <_free_r+0x30>
 800d8f2:	6063      	str	r3, [r4, #4]
 800d8f4:	6014      	str	r4, [r2, #0]
 800d8f6:	b003      	add	sp, #12
 800d8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8fc:	f7ff bb0a 	b.w	800cf14 <__malloc_unlock>
 800d900:	42a3      	cmp	r3, r4
 800d902:	d908      	bls.n	800d916 <_free_r+0x46>
 800d904:	6825      	ldr	r5, [r4, #0]
 800d906:	1961      	adds	r1, r4, r5
 800d908:	428b      	cmp	r3, r1
 800d90a:	bf01      	itttt	eq
 800d90c:	6819      	ldreq	r1, [r3, #0]
 800d90e:	685b      	ldreq	r3, [r3, #4]
 800d910:	1949      	addeq	r1, r1, r5
 800d912:	6021      	streq	r1, [r4, #0]
 800d914:	e7ed      	b.n	800d8f2 <_free_r+0x22>
 800d916:	461a      	mov	r2, r3
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	b10b      	cbz	r3, 800d920 <_free_r+0x50>
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	d9fa      	bls.n	800d916 <_free_r+0x46>
 800d920:	6811      	ldr	r1, [r2, #0]
 800d922:	1855      	adds	r5, r2, r1
 800d924:	42a5      	cmp	r5, r4
 800d926:	d10b      	bne.n	800d940 <_free_r+0x70>
 800d928:	6824      	ldr	r4, [r4, #0]
 800d92a:	4421      	add	r1, r4
 800d92c:	1854      	adds	r4, r2, r1
 800d92e:	42a3      	cmp	r3, r4
 800d930:	6011      	str	r1, [r2, #0]
 800d932:	d1e0      	bne.n	800d8f6 <_free_r+0x26>
 800d934:	681c      	ldr	r4, [r3, #0]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	6053      	str	r3, [r2, #4]
 800d93a:	4421      	add	r1, r4
 800d93c:	6011      	str	r1, [r2, #0]
 800d93e:	e7da      	b.n	800d8f6 <_free_r+0x26>
 800d940:	d902      	bls.n	800d948 <_free_r+0x78>
 800d942:	230c      	movs	r3, #12
 800d944:	6003      	str	r3, [r0, #0]
 800d946:	e7d6      	b.n	800d8f6 <_free_r+0x26>
 800d948:	6825      	ldr	r5, [r4, #0]
 800d94a:	1961      	adds	r1, r4, r5
 800d94c:	428b      	cmp	r3, r1
 800d94e:	bf04      	itt	eq
 800d950:	6819      	ldreq	r1, [r3, #0]
 800d952:	685b      	ldreq	r3, [r3, #4]
 800d954:	6063      	str	r3, [r4, #4]
 800d956:	bf04      	itt	eq
 800d958:	1949      	addeq	r1, r1, r5
 800d95a:	6021      	streq	r1, [r4, #0]
 800d95c:	6054      	str	r4, [r2, #4]
 800d95e:	e7ca      	b.n	800d8f6 <_free_r+0x26>
 800d960:	b003      	add	sp, #12
 800d962:	bd30      	pop	{r4, r5, pc}
 800d964:	200139b4 	.word	0x200139b4

0800d968 <__ssputs_r>:
 800d968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d96c:	688e      	ldr	r6, [r1, #8]
 800d96e:	429e      	cmp	r6, r3
 800d970:	4682      	mov	sl, r0
 800d972:	460c      	mov	r4, r1
 800d974:	4690      	mov	r8, r2
 800d976:	461f      	mov	r7, r3
 800d978:	d838      	bhi.n	800d9ec <__ssputs_r+0x84>
 800d97a:	898a      	ldrh	r2, [r1, #12]
 800d97c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d980:	d032      	beq.n	800d9e8 <__ssputs_r+0x80>
 800d982:	6825      	ldr	r5, [r4, #0]
 800d984:	6909      	ldr	r1, [r1, #16]
 800d986:	eba5 0901 	sub.w	r9, r5, r1
 800d98a:	6965      	ldr	r5, [r4, #20]
 800d98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d994:	3301      	adds	r3, #1
 800d996:	444b      	add	r3, r9
 800d998:	106d      	asrs	r5, r5, #1
 800d99a:	429d      	cmp	r5, r3
 800d99c:	bf38      	it	cc
 800d99e:	461d      	movcc	r5, r3
 800d9a0:	0553      	lsls	r3, r2, #21
 800d9a2:	d531      	bpl.n	800da08 <__ssputs_r+0xa0>
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	f7fc f92f 	bl	8009c08 <_malloc_r>
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	b950      	cbnz	r0, 800d9c4 <__ssputs_r+0x5c>
 800d9ae:	230c      	movs	r3, #12
 800d9b0:	f8ca 3000 	str.w	r3, [sl]
 800d9b4:	89a3      	ldrh	r3, [r4, #12]
 800d9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9ba:	81a3      	strh	r3, [r4, #12]
 800d9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c4:	6921      	ldr	r1, [r4, #16]
 800d9c6:	464a      	mov	r2, r9
 800d9c8:	f7fc f8e7 	bl	8009b9a <memcpy>
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9d6:	81a3      	strh	r3, [r4, #12]
 800d9d8:	6126      	str	r6, [r4, #16]
 800d9da:	6165      	str	r5, [r4, #20]
 800d9dc:	444e      	add	r6, r9
 800d9de:	eba5 0509 	sub.w	r5, r5, r9
 800d9e2:	6026      	str	r6, [r4, #0]
 800d9e4:	60a5      	str	r5, [r4, #8]
 800d9e6:	463e      	mov	r6, r7
 800d9e8:	42be      	cmp	r6, r7
 800d9ea:	d900      	bls.n	800d9ee <__ssputs_r+0x86>
 800d9ec:	463e      	mov	r6, r7
 800d9ee:	6820      	ldr	r0, [r4, #0]
 800d9f0:	4632      	mov	r2, r6
 800d9f2:	4641      	mov	r1, r8
 800d9f4:	f000 f982 	bl	800dcfc <memmove>
 800d9f8:	68a3      	ldr	r3, [r4, #8]
 800d9fa:	1b9b      	subs	r3, r3, r6
 800d9fc:	60a3      	str	r3, [r4, #8]
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	4433      	add	r3, r6
 800da02:	6023      	str	r3, [r4, #0]
 800da04:	2000      	movs	r0, #0
 800da06:	e7db      	b.n	800d9c0 <__ssputs_r+0x58>
 800da08:	462a      	mov	r2, r5
 800da0a:	f000 f991 	bl	800dd30 <_realloc_r>
 800da0e:	4606      	mov	r6, r0
 800da10:	2800      	cmp	r0, #0
 800da12:	d1e1      	bne.n	800d9d8 <__ssputs_r+0x70>
 800da14:	6921      	ldr	r1, [r4, #16]
 800da16:	4650      	mov	r0, sl
 800da18:	f7ff ff5a 	bl	800d8d0 <_free_r>
 800da1c:	e7c7      	b.n	800d9ae <__ssputs_r+0x46>
	...

0800da20 <_svfiprintf_r>:
 800da20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da24:	4698      	mov	r8, r3
 800da26:	898b      	ldrh	r3, [r1, #12]
 800da28:	061b      	lsls	r3, r3, #24
 800da2a:	b09d      	sub	sp, #116	; 0x74
 800da2c:	4607      	mov	r7, r0
 800da2e:	460d      	mov	r5, r1
 800da30:	4614      	mov	r4, r2
 800da32:	d50e      	bpl.n	800da52 <_svfiprintf_r+0x32>
 800da34:	690b      	ldr	r3, [r1, #16]
 800da36:	b963      	cbnz	r3, 800da52 <_svfiprintf_r+0x32>
 800da38:	2140      	movs	r1, #64	; 0x40
 800da3a:	f7fc f8e5 	bl	8009c08 <_malloc_r>
 800da3e:	6028      	str	r0, [r5, #0]
 800da40:	6128      	str	r0, [r5, #16]
 800da42:	b920      	cbnz	r0, 800da4e <_svfiprintf_r+0x2e>
 800da44:	230c      	movs	r3, #12
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	f04f 30ff 	mov.w	r0, #4294967295
 800da4c:	e0d1      	b.n	800dbf2 <_svfiprintf_r+0x1d2>
 800da4e:	2340      	movs	r3, #64	; 0x40
 800da50:	616b      	str	r3, [r5, #20]
 800da52:	2300      	movs	r3, #0
 800da54:	9309      	str	r3, [sp, #36]	; 0x24
 800da56:	2320      	movs	r3, #32
 800da58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da60:	2330      	movs	r3, #48	; 0x30
 800da62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc0c <_svfiprintf_r+0x1ec>
 800da66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da6a:	f04f 0901 	mov.w	r9, #1
 800da6e:	4623      	mov	r3, r4
 800da70:	469a      	mov	sl, r3
 800da72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da76:	b10a      	cbz	r2, 800da7c <_svfiprintf_r+0x5c>
 800da78:	2a25      	cmp	r2, #37	; 0x25
 800da7a:	d1f9      	bne.n	800da70 <_svfiprintf_r+0x50>
 800da7c:	ebba 0b04 	subs.w	fp, sl, r4
 800da80:	d00b      	beq.n	800da9a <_svfiprintf_r+0x7a>
 800da82:	465b      	mov	r3, fp
 800da84:	4622      	mov	r2, r4
 800da86:	4629      	mov	r1, r5
 800da88:	4638      	mov	r0, r7
 800da8a:	f7ff ff6d 	bl	800d968 <__ssputs_r>
 800da8e:	3001      	adds	r0, #1
 800da90:	f000 80aa 	beq.w	800dbe8 <_svfiprintf_r+0x1c8>
 800da94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da96:	445a      	add	r2, fp
 800da98:	9209      	str	r2, [sp, #36]	; 0x24
 800da9a:	f89a 3000 	ldrb.w	r3, [sl]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f000 80a2 	beq.w	800dbe8 <_svfiprintf_r+0x1c8>
 800daa4:	2300      	movs	r3, #0
 800daa6:	f04f 32ff 	mov.w	r2, #4294967295
 800daaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daae:	f10a 0a01 	add.w	sl, sl, #1
 800dab2:	9304      	str	r3, [sp, #16]
 800dab4:	9307      	str	r3, [sp, #28]
 800dab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daba:	931a      	str	r3, [sp, #104]	; 0x68
 800dabc:	4654      	mov	r4, sl
 800dabe:	2205      	movs	r2, #5
 800dac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac4:	4851      	ldr	r0, [pc, #324]	; (800dc0c <_svfiprintf_r+0x1ec>)
 800dac6:	f7f2 fbab 	bl	8000220 <memchr>
 800daca:	9a04      	ldr	r2, [sp, #16]
 800dacc:	b9d8      	cbnz	r0, 800db06 <_svfiprintf_r+0xe6>
 800dace:	06d0      	lsls	r0, r2, #27
 800dad0:	bf44      	itt	mi
 800dad2:	2320      	movmi	r3, #32
 800dad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dad8:	0711      	lsls	r1, r2, #28
 800dada:	bf44      	itt	mi
 800dadc:	232b      	movmi	r3, #43	; 0x2b
 800dade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae2:	f89a 3000 	ldrb.w	r3, [sl]
 800dae6:	2b2a      	cmp	r3, #42	; 0x2a
 800dae8:	d015      	beq.n	800db16 <_svfiprintf_r+0xf6>
 800daea:	9a07      	ldr	r2, [sp, #28]
 800daec:	4654      	mov	r4, sl
 800daee:	2000      	movs	r0, #0
 800daf0:	f04f 0c0a 	mov.w	ip, #10
 800daf4:	4621      	mov	r1, r4
 800daf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dafa:	3b30      	subs	r3, #48	; 0x30
 800dafc:	2b09      	cmp	r3, #9
 800dafe:	d94e      	bls.n	800db9e <_svfiprintf_r+0x17e>
 800db00:	b1b0      	cbz	r0, 800db30 <_svfiprintf_r+0x110>
 800db02:	9207      	str	r2, [sp, #28]
 800db04:	e014      	b.n	800db30 <_svfiprintf_r+0x110>
 800db06:	eba0 0308 	sub.w	r3, r0, r8
 800db0a:	fa09 f303 	lsl.w	r3, r9, r3
 800db0e:	4313      	orrs	r3, r2
 800db10:	9304      	str	r3, [sp, #16]
 800db12:	46a2      	mov	sl, r4
 800db14:	e7d2      	b.n	800dabc <_svfiprintf_r+0x9c>
 800db16:	9b03      	ldr	r3, [sp, #12]
 800db18:	1d19      	adds	r1, r3, #4
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	9103      	str	r1, [sp, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	bfbb      	ittet	lt
 800db22:	425b      	neglt	r3, r3
 800db24:	f042 0202 	orrlt.w	r2, r2, #2
 800db28:	9307      	strge	r3, [sp, #28]
 800db2a:	9307      	strlt	r3, [sp, #28]
 800db2c:	bfb8      	it	lt
 800db2e:	9204      	strlt	r2, [sp, #16]
 800db30:	7823      	ldrb	r3, [r4, #0]
 800db32:	2b2e      	cmp	r3, #46	; 0x2e
 800db34:	d10c      	bne.n	800db50 <_svfiprintf_r+0x130>
 800db36:	7863      	ldrb	r3, [r4, #1]
 800db38:	2b2a      	cmp	r3, #42	; 0x2a
 800db3a:	d135      	bne.n	800dba8 <_svfiprintf_r+0x188>
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	1d1a      	adds	r2, r3, #4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	9203      	str	r2, [sp, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	bfb8      	it	lt
 800db48:	f04f 33ff 	movlt.w	r3, #4294967295
 800db4c:	3402      	adds	r4, #2
 800db4e:	9305      	str	r3, [sp, #20]
 800db50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc1c <_svfiprintf_r+0x1fc>
 800db54:	7821      	ldrb	r1, [r4, #0]
 800db56:	2203      	movs	r2, #3
 800db58:	4650      	mov	r0, sl
 800db5a:	f7f2 fb61 	bl	8000220 <memchr>
 800db5e:	b140      	cbz	r0, 800db72 <_svfiprintf_r+0x152>
 800db60:	2340      	movs	r3, #64	; 0x40
 800db62:	eba0 000a 	sub.w	r0, r0, sl
 800db66:	fa03 f000 	lsl.w	r0, r3, r0
 800db6a:	9b04      	ldr	r3, [sp, #16]
 800db6c:	4303      	orrs	r3, r0
 800db6e:	3401      	adds	r4, #1
 800db70:	9304      	str	r3, [sp, #16]
 800db72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db76:	4826      	ldr	r0, [pc, #152]	; (800dc10 <_svfiprintf_r+0x1f0>)
 800db78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db7c:	2206      	movs	r2, #6
 800db7e:	f7f2 fb4f 	bl	8000220 <memchr>
 800db82:	2800      	cmp	r0, #0
 800db84:	d038      	beq.n	800dbf8 <_svfiprintf_r+0x1d8>
 800db86:	4b23      	ldr	r3, [pc, #140]	; (800dc14 <_svfiprintf_r+0x1f4>)
 800db88:	bb1b      	cbnz	r3, 800dbd2 <_svfiprintf_r+0x1b2>
 800db8a:	9b03      	ldr	r3, [sp, #12]
 800db8c:	3307      	adds	r3, #7
 800db8e:	f023 0307 	bic.w	r3, r3, #7
 800db92:	3308      	adds	r3, #8
 800db94:	9303      	str	r3, [sp, #12]
 800db96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db98:	4433      	add	r3, r6
 800db9a:	9309      	str	r3, [sp, #36]	; 0x24
 800db9c:	e767      	b.n	800da6e <_svfiprintf_r+0x4e>
 800db9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba2:	460c      	mov	r4, r1
 800dba4:	2001      	movs	r0, #1
 800dba6:	e7a5      	b.n	800daf4 <_svfiprintf_r+0xd4>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	3401      	adds	r4, #1
 800dbac:	9305      	str	r3, [sp, #20]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	f04f 0c0a 	mov.w	ip, #10
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbba:	3a30      	subs	r2, #48	; 0x30
 800dbbc:	2a09      	cmp	r2, #9
 800dbbe:	d903      	bls.n	800dbc8 <_svfiprintf_r+0x1a8>
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d0c5      	beq.n	800db50 <_svfiprintf_r+0x130>
 800dbc4:	9105      	str	r1, [sp, #20]
 800dbc6:	e7c3      	b.n	800db50 <_svfiprintf_r+0x130>
 800dbc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbcc:	4604      	mov	r4, r0
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e7f0      	b.n	800dbb4 <_svfiprintf_r+0x194>
 800dbd2:	ab03      	add	r3, sp, #12
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	462a      	mov	r2, r5
 800dbd8:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <_svfiprintf_r+0x1f8>)
 800dbda:	a904      	add	r1, sp, #16
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f7fc f927 	bl	8009e30 <_printf_float>
 800dbe2:	1c42      	adds	r2, r0, #1
 800dbe4:	4606      	mov	r6, r0
 800dbe6:	d1d6      	bne.n	800db96 <_svfiprintf_r+0x176>
 800dbe8:	89ab      	ldrh	r3, [r5, #12]
 800dbea:	065b      	lsls	r3, r3, #25
 800dbec:	f53f af2c 	bmi.w	800da48 <_svfiprintf_r+0x28>
 800dbf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbf2:	b01d      	add	sp, #116	; 0x74
 800dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf8:	ab03      	add	r3, sp, #12
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	462a      	mov	r2, r5
 800dbfe:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <_svfiprintf_r+0x1f8>)
 800dc00:	a904      	add	r1, sp, #16
 800dc02:	4638      	mov	r0, r7
 800dc04:	f7fc fbb8 	bl	800a378 <_printf_i>
 800dc08:	e7eb      	b.n	800dbe2 <_svfiprintf_r+0x1c2>
 800dc0a:	bf00      	nop
 800dc0c:	0802b7b4 	.word	0x0802b7b4
 800dc10:	0802b7be 	.word	0x0802b7be
 800dc14:	08009e31 	.word	0x08009e31
 800dc18:	0800d969 	.word	0x0800d969
 800dc1c:	0802b7ba 	.word	0x0802b7ba

0800dc20 <_read_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	4d07      	ldr	r5, [pc, #28]	; (800dc40 <_read_r+0x20>)
 800dc24:	4604      	mov	r4, r0
 800dc26:	4608      	mov	r0, r1
 800dc28:	4611      	mov	r1, r2
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	602a      	str	r2, [r5, #0]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	f7f4 fcca 	bl	80025c8 <_read>
 800dc34:	1c43      	adds	r3, r0, #1
 800dc36:	d102      	bne.n	800dc3e <_read_r+0x1e>
 800dc38:	682b      	ldr	r3, [r5, #0]
 800dc3a:	b103      	cbz	r3, 800dc3e <_read_r+0x1e>
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	bd38      	pop	{r3, r4, r5, pc}
 800dc40:	200139bc 	.word	0x200139bc
 800dc44:	00000000 	.word	0x00000000

0800dc48 <nan>:
 800dc48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc50 <nan+0x8>
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	00000000 	.word	0x00000000
 800dc54:	7ff80000 	.word	0x7ff80000

0800dc58 <strncmp>:
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	b17a      	cbz	r2, 800dc7c <strncmp+0x24>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	3901      	subs	r1, #1
 800dc60:	1884      	adds	r4, r0, r2
 800dc62:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc6a:	4290      	cmp	r0, r2
 800dc6c:	d101      	bne.n	800dc72 <strncmp+0x1a>
 800dc6e:	42a3      	cmp	r3, r4
 800dc70:	d101      	bne.n	800dc76 <strncmp+0x1e>
 800dc72:	1a80      	subs	r0, r0, r2
 800dc74:	bd10      	pop	{r4, pc}
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d1f3      	bne.n	800dc62 <strncmp+0xa>
 800dc7a:	e7fa      	b.n	800dc72 <strncmp+0x1a>
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	e7f9      	b.n	800dc74 <strncmp+0x1c>

0800dc80 <__ascii_wctomb>:
 800dc80:	b149      	cbz	r1, 800dc96 <__ascii_wctomb+0x16>
 800dc82:	2aff      	cmp	r2, #255	; 0xff
 800dc84:	bf85      	ittet	hi
 800dc86:	238a      	movhi	r3, #138	; 0x8a
 800dc88:	6003      	strhi	r3, [r0, #0]
 800dc8a:	700a      	strbls	r2, [r1, #0]
 800dc8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc90:	bf98      	it	ls
 800dc92:	2001      	movls	r0, #1
 800dc94:	4770      	bx	lr
 800dc96:	4608      	mov	r0, r1
 800dc98:	4770      	bx	lr
	...

0800dc9c <__assert_func>:
 800dc9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc9e:	4614      	mov	r4, r2
 800dca0:	461a      	mov	r2, r3
 800dca2:	4b09      	ldr	r3, [pc, #36]	; (800dcc8 <__assert_func+0x2c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4605      	mov	r5, r0
 800dca8:	68d8      	ldr	r0, [r3, #12]
 800dcaa:	b14c      	cbz	r4, 800dcc0 <__assert_func+0x24>
 800dcac:	4b07      	ldr	r3, [pc, #28]	; (800dccc <__assert_func+0x30>)
 800dcae:	9100      	str	r1, [sp, #0]
 800dcb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcb4:	4906      	ldr	r1, [pc, #24]	; (800dcd0 <__assert_func+0x34>)
 800dcb6:	462b      	mov	r3, r5
 800dcb8:	f000 f80e 	bl	800dcd8 <fiprintf>
 800dcbc:	f000 fa80 	bl	800e1c0 <abort>
 800dcc0:	4b04      	ldr	r3, [pc, #16]	; (800dcd4 <__assert_func+0x38>)
 800dcc2:	461c      	mov	r4, r3
 800dcc4:	e7f3      	b.n	800dcae <__assert_func+0x12>
 800dcc6:	bf00      	nop
 800dcc8:	20000010 	.word	0x20000010
 800dccc:	0802b7c5 	.word	0x0802b7c5
 800dcd0:	0802b7d2 	.word	0x0802b7d2
 800dcd4:	0802b800 	.word	0x0802b800

0800dcd8 <fiprintf>:
 800dcd8:	b40e      	push	{r1, r2, r3}
 800dcda:	b503      	push	{r0, r1, lr}
 800dcdc:	4601      	mov	r1, r0
 800dcde:	ab03      	add	r3, sp, #12
 800dce0:	4805      	ldr	r0, [pc, #20]	; (800dcf8 <fiprintf+0x20>)
 800dce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dce6:	6800      	ldr	r0, [r0, #0]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	f000 f879 	bl	800dde0 <_vfiprintf_r>
 800dcee:	b002      	add	sp, #8
 800dcf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcf4:	b003      	add	sp, #12
 800dcf6:	4770      	bx	lr
 800dcf8:	20000010 	.word	0x20000010

0800dcfc <memmove>:
 800dcfc:	4288      	cmp	r0, r1
 800dcfe:	b510      	push	{r4, lr}
 800dd00:	eb01 0402 	add.w	r4, r1, r2
 800dd04:	d902      	bls.n	800dd0c <memmove+0x10>
 800dd06:	4284      	cmp	r4, r0
 800dd08:	4623      	mov	r3, r4
 800dd0a:	d807      	bhi.n	800dd1c <memmove+0x20>
 800dd0c:	1e43      	subs	r3, r0, #1
 800dd0e:	42a1      	cmp	r1, r4
 800dd10:	d008      	beq.n	800dd24 <memmove+0x28>
 800dd12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd1a:	e7f8      	b.n	800dd0e <memmove+0x12>
 800dd1c:	4402      	add	r2, r0
 800dd1e:	4601      	mov	r1, r0
 800dd20:	428a      	cmp	r2, r1
 800dd22:	d100      	bne.n	800dd26 <memmove+0x2a>
 800dd24:	bd10      	pop	{r4, pc}
 800dd26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd2e:	e7f7      	b.n	800dd20 <memmove+0x24>

0800dd30 <_realloc_r>:
 800dd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd34:	4680      	mov	r8, r0
 800dd36:	4614      	mov	r4, r2
 800dd38:	460e      	mov	r6, r1
 800dd3a:	b921      	cbnz	r1, 800dd46 <_realloc_r+0x16>
 800dd3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd40:	4611      	mov	r1, r2
 800dd42:	f7fb bf61 	b.w	8009c08 <_malloc_r>
 800dd46:	b92a      	cbnz	r2, 800dd54 <_realloc_r+0x24>
 800dd48:	f7ff fdc2 	bl	800d8d0 <_free_r>
 800dd4c:	4625      	mov	r5, r4
 800dd4e:	4628      	mov	r0, r5
 800dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd54:	f000 faa0 	bl	800e298 <_malloc_usable_size_r>
 800dd58:	4284      	cmp	r4, r0
 800dd5a:	4607      	mov	r7, r0
 800dd5c:	d802      	bhi.n	800dd64 <_realloc_r+0x34>
 800dd5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd62:	d812      	bhi.n	800dd8a <_realloc_r+0x5a>
 800dd64:	4621      	mov	r1, r4
 800dd66:	4640      	mov	r0, r8
 800dd68:	f7fb ff4e 	bl	8009c08 <_malloc_r>
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d0ed      	beq.n	800dd4e <_realloc_r+0x1e>
 800dd72:	42bc      	cmp	r4, r7
 800dd74:	4622      	mov	r2, r4
 800dd76:	4631      	mov	r1, r6
 800dd78:	bf28      	it	cs
 800dd7a:	463a      	movcs	r2, r7
 800dd7c:	f7fb ff0d 	bl	8009b9a <memcpy>
 800dd80:	4631      	mov	r1, r6
 800dd82:	4640      	mov	r0, r8
 800dd84:	f7ff fda4 	bl	800d8d0 <_free_r>
 800dd88:	e7e1      	b.n	800dd4e <_realloc_r+0x1e>
 800dd8a:	4635      	mov	r5, r6
 800dd8c:	e7df      	b.n	800dd4e <_realloc_r+0x1e>

0800dd8e <__sfputc_r>:
 800dd8e:	6893      	ldr	r3, [r2, #8]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	b410      	push	{r4}
 800dd96:	6093      	str	r3, [r2, #8]
 800dd98:	da08      	bge.n	800ddac <__sfputc_r+0x1e>
 800dd9a:	6994      	ldr	r4, [r2, #24]
 800dd9c:	42a3      	cmp	r3, r4
 800dd9e:	db01      	blt.n	800dda4 <__sfputc_r+0x16>
 800dda0:	290a      	cmp	r1, #10
 800dda2:	d103      	bne.n	800ddac <__sfputc_r+0x1e>
 800dda4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda8:	f000 b94a 	b.w	800e040 <__swbuf_r>
 800ddac:	6813      	ldr	r3, [r2, #0]
 800ddae:	1c58      	adds	r0, r3, #1
 800ddb0:	6010      	str	r0, [r2, #0]
 800ddb2:	7019      	strb	r1, [r3, #0]
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <__sfputs_r>:
 800ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	460f      	mov	r7, r1
 800ddc2:	4614      	mov	r4, r2
 800ddc4:	18d5      	adds	r5, r2, r3
 800ddc6:	42ac      	cmp	r4, r5
 800ddc8:	d101      	bne.n	800ddce <__sfputs_r+0x12>
 800ddca:	2000      	movs	r0, #0
 800ddcc:	e007      	b.n	800ddde <__sfputs_r+0x22>
 800ddce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd2:	463a      	mov	r2, r7
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f7ff ffda 	bl	800dd8e <__sfputc_r>
 800ddda:	1c43      	adds	r3, r0, #1
 800dddc:	d1f3      	bne.n	800ddc6 <__sfputs_r+0xa>
 800ddde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dde0 <_vfiprintf_r>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	460d      	mov	r5, r1
 800dde6:	b09d      	sub	sp, #116	; 0x74
 800dde8:	4614      	mov	r4, r2
 800ddea:	4698      	mov	r8, r3
 800ddec:	4606      	mov	r6, r0
 800ddee:	b118      	cbz	r0, 800ddf8 <_vfiprintf_r+0x18>
 800ddf0:	6983      	ldr	r3, [r0, #24]
 800ddf2:	b90b      	cbnz	r3, 800ddf8 <_vfiprintf_r+0x18>
 800ddf4:	f7fb fe0c 	bl	8009a10 <__sinit>
 800ddf8:	4b89      	ldr	r3, [pc, #548]	; (800e020 <_vfiprintf_r+0x240>)
 800ddfa:	429d      	cmp	r5, r3
 800ddfc:	d11b      	bne.n	800de36 <_vfiprintf_r+0x56>
 800ddfe:	6875      	ldr	r5, [r6, #4]
 800de00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de02:	07d9      	lsls	r1, r3, #31
 800de04:	d405      	bmi.n	800de12 <_vfiprintf_r+0x32>
 800de06:	89ab      	ldrh	r3, [r5, #12]
 800de08:	059a      	lsls	r2, r3, #22
 800de0a:	d402      	bmi.n	800de12 <_vfiprintf_r+0x32>
 800de0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de0e:	f7fb fec2 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800de12:	89ab      	ldrh	r3, [r5, #12]
 800de14:	071b      	lsls	r3, r3, #28
 800de16:	d501      	bpl.n	800de1c <_vfiprintf_r+0x3c>
 800de18:	692b      	ldr	r3, [r5, #16]
 800de1a:	b9eb      	cbnz	r3, 800de58 <_vfiprintf_r+0x78>
 800de1c:	4629      	mov	r1, r5
 800de1e:	4630      	mov	r0, r6
 800de20:	f000 f960 	bl	800e0e4 <__swsetup_r>
 800de24:	b1c0      	cbz	r0, 800de58 <_vfiprintf_r+0x78>
 800de26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de28:	07dc      	lsls	r4, r3, #31
 800de2a:	d50e      	bpl.n	800de4a <_vfiprintf_r+0x6a>
 800de2c:	f04f 30ff 	mov.w	r0, #4294967295
 800de30:	b01d      	add	sp, #116	; 0x74
 800de32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de36:	4b7b      	ldr	r3, [pc, #492]	; (800e024 <_vfiprintf_r+0x244>)
 800de38:	429d      	cmp	r5, r3
 800de3a:	d101      	bne.n	800de40 <_vfiprintf_r+0x60>
 800de3c:	68b5      	ldr	r5, [r6, #8]
 800de3e:	e7df      	b.n	800de00 <_vfiprintf_r+0x20>
 800de40:	4b79      	ldr	r3, [pc, #484]	; (800e028 <_vfiprintf_r+0x248>)
 800de42:	429d      	cmp	r5, r3
 800de44:	bf08      	it	eq
 800de46:	68f5      	ldreq	r5, [r6, #12]
 800de48:	e7da      	b.n	800de00 <_vfiprintf_r+0x20>
 800de4a:	89ab      	ldrh	r3, [r5, #12]
 800de4c:	0598      	lsls	r0, r3, #22
 800de4e:	d4ed      	bmi.n	800de2c <_vfiprintf_r+0x4c>
 800de50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de52:	f7fb fea1 	bl	8009b98 <__retarget_lock_release_recursive>
 800de56:	e7e9      	b.n	800de2c <_vfiprintf_r+0x4c>
 800de58:	2300      	movs	r3, #0
 800de5a:	9309      	str	r3, [sp, #36]	; 0x24
 800de5c:	2320      	movs	r3, #32
 800de5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de62:	f8cd 800c 	str.w	r8, [sp, #12]
 800de66:	2330      	movs	r3, #48	; 0x30
 800de68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e02c <_vfiprintf_r+0x24c>
 800de6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de70:	f04f 0901 	mov.w	r9, #1
 800de74:	4623      	mov	r3, r4
 800de76:	469a      	mov	sl, r3
 800de78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de7c:	b10a      	cbz	r2, 800de82 <_vfiprintf_r+0xa2>
 800de7e:	2a25      	cmp	r2, #37	; 0x25
 800de80:	d1f9      	bne.n	800de76 <_vfiprintf_r+0x96>
 800de82:	ebba 0b04 	subs.w	fp, sl, r4
 800de86:	d00b      	beq.n	800dea0 <_vfiprintf_r+0xc0>
 800de88:	465b      	mov	r3, fp
 800de8a:	4622      	mov	r2, r4
 800de8c:	4629      	mov	r1, r5
 800de8e:	4630      	mov	r0, r6
 800de90:	f7ff ff94 	bl	800ddbc <__sfputs_r>
 800de94:	3001      	adds	r0, #1
 800de96:	f000 80aa 	beq.w	800dfee <_vfiprintf_r+0x20e>
 800de9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de9c:	445a      	add	r2, fp
 800de9e:	9209      	str	r2, [sp, #36]	; 0x24
 800dea0:	f89a 3000 	ldrb.w	r3, [sl]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 80a2 	beq.w	800dfee <_vfiprintf_r+0x20e>
 800deaa:	2300      	movs	r3, #0
 800deac:	f04f 32ff 	mov.w	r2, #4294967295
 800deb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deb4:	f10a 0a01 	add.w	sl, sl, #1
 800deb8:	9304      	str	r3, [sp, #16]
 800deba:	9307      	str	r3, [sp, #28]
 800debc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dec0:	931a      	str	r3, [sp, #104]	; 0x68
 800dec2:	4654      	mov	r4, sl
 800dec4:	2205      	movs	r2, #5
 800dec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deca:	4858      	ldr	r0, [pc, #352]	; (800e02c <_vfiprintf_r+0x24c>)
 800decc:	f7f2 f9a8 	bl	8000220 <memchr>
 800ded0:	9a04      	ldr	r2, [sp, #16]
 800ded2:	b9d8      	cbnz	r0, 800df0c <_vfiprintf_r+0x12c>
 800ded4:	06d1      	lsls	r1, r2, #27
 800ded6:	bf44      	itt	mi
 800ded8:	2320      	movmi	r3, #32
 800deda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dede:	0713      	lsls	r3, r2, #28
 800dee0:	bf44      	itt	mi
 800dee2:	232b      	movmi	r3, #43	; 0x2b
 800dee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee8:	f89a 3000 	ldrb.w	r3, [sl]
 800deec:	2b2a      	cmp	r3, #42	; 0x2a
 800deee:	d015      	beq.n	800df1c <_vfiprintf_r+0x13c>
 800def0:	9a07      	ldr	r2, [sp, #28]
 800def2:	4654      	mov	r4, sl
 800def4:	2000      	movs	r0, #0
 800def6:	f04f 0c0a 	mov.w	ip, #10
 800defa:	4621      	mov	r1, r4
 800defc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df00:	3b30      	subs	r3, #48	; 0x30
 800df02:	2b09      	cmp	r3, #9
 800df04:	d94e      	bls.n	800dfa4 <_vfiprintf_r+0x1c4>
 800df06:	b1b0      	cbz	r0, 800df36 <_vfiprintf_r+0x156>
 800df08:	9207      	str	r2, [sp, #28]
 800df0a:	e014      	b.n	800df36 <_vfiprintf_r+0x156>
 800df0c:	eba0 0308 	sub.w	r3, r0, r8
 800df10:	fa09 f303 	lsl.w	r3, r9, r3
 800df14:	4313      	orrs	r3, r2
 800df16:	9304      	str	r3, [sp, #16]
 800df18:	46a2      	mov	sl, r4
 800df1a:	e7d2      	b.n	800dec2 <_vfiprintf_r+0xe2>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	1d19      	adds	r1, r3, #4
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	9103      	str	r1, [sp, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	bfbb      	ittet	lt
 800df28:	425b      	neglt	r3, r3
 800df2a:	f042 0202 	orrlt.w	r2, r2, #2
 800df2e:	9307      	strge	r3, [sp, #28]
 800df30:	9307      	strlt	r3, [sp, #28]
 800df32:	bfb8      	it	lt
 800df34:	9204      	strlt	r2, [sp, #16]
 800df36:	7823      	ldrb	r3, [r4, #0]
 800df38:	2b2e      	cmp	r3, #46	; 0x2e
 800df3a:	d10c      	bne.n	800df56 <_vfiprintf_r+0x176>
 800df3c:	7863      	ldrb	r3, [r4, #1]
 800df3e:	2b2a      	cmp	r3, #42	; 0x2a
 800df40:	d135      	bne.n	800dfae <_vfiprintf_r+0x1ce>
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	1d1a      	adds	r2, r3, #4
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	9203      	str	r2, [sp, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	bfb8      	it	lt
 800df4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800df52:	3402      	adds	r4, #2
 800df54:	9305      	str	r3, [sp, #20]
 800df56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e03c <_vfiprintf_r+0x25c>
 800df5a:	7821      	ldrb	r1, [r4, #0]
 800df5c:	2203      	movs	r2, #3
 800df5e:	4650      	mov	r0, sl
 800df60:	f7f2 f95e 	bl	8000220 <memchr>
 800df64:	b140      	cbz	r0, 800df78 <_vfiprintf_r+0x198>
 800df66:	2340      	movs	r3, #64	; 0x40
 800df68:	eba0 000a 	sub.w	r0, r0, sl
 800df6c:	fa03 f000 	lsl.w	r0, r3, r0
 800df70:	9b04      	ldr	r3, [sp, #16]
 800df72:	4303      	orrs	r3, r0
 800df74:	3401      	adds	r4, #1
 800df76:	9304      	str	r3, [sp, #16]
 800df78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7c:	482c      	ldr	r0, [pc, #176]	; (800e030 <_vfiprintf_r+0x250>)
 800df7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df82:	2206      	movs	r2, #6
 800df84:	f7f2 f94c 	bl	8000220 <memchr>
 800df88:	2800      	cmp	r0, #0
 800df8a:	d03f      	beq.n	800e00c <_vfiprintf_r+0x22c>
 800df8c:	4b29      	ldr	r3, [pc, #164]	; (800e034 <_vfiprintf_r+0x254>)
 800df8e:	bb1b      	cbnz	r3, 800dfd8 <_vfiprintf_r+0x1f8>
 800df90:	9b03      	ldr	r3, [sp, #12]
 800df92:	3307      	adds	r3, #7
 800df94:	f023 0307 	bic.w	r3, r3, #7
 800df98:	3308      	adds	r3, #8
 800df9a:	9303      	str	r3, [sp, #12]
 800df9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df9e:	443b      	add	r3, r7
 800dfa0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfa2:	e767      	b.n	800de74 <_vfiprintf_r+0x94>
 800dfa4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	2001      	movs	r0, #1
 800dfac:	e7a5      	b.n	800defa <_vfiprintf_r+0x11a>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	3401      	adds	r4, #1
 800dfb2:	9305      	str	r3, [sp, #20]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	f04f 0c0a 	mov.w	ip, #10
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfc0:	3a30      	subs	r2, #48	; 0x30
 800dfc2:	2a09      	cmp	r2, #9
 800dfc4:	d903      	bls.n	800dfce <_vfiprintf_r+0x1ee>
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d0c5      	beq.n	800df56 <_vfiprintf_r+0x176>
 800dfca:	9105      	str	r1, [sp, #20]
 800dfcc:	e7c3      	b.n	800df56 <_vfiprintf_r+0x176>
 800dfce:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e7f0      	b.n	800dfba <_vfiprintf_r+0x1da>
 800dfd8:	ab03      	add	r3, sp, #12
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	462a      	mov	r2, r5
 800dfde:	4b16      	ldr	r3, [pc, #88]	; (800e038 <_vfiprintf_r+0x258>)
 800dfe0:	a904      	add	r1, sp, #16
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7fb ff24 	bl	8009e30 <_printf_float>
 800dfe8:	4607      	mov	r7, r0
 800dfea:	1c78      	adds	r0, r7, #1
 800dfec:	d1d6      	bne.n	800df9c <_vfiprintf_r+0x1bc>
 800dfee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dff0:	07d9      	lsls	r1, r3, #31
 800dff2:	d405      	bmi.n	800e000 <_vfiprintf_r+0x220>
 800dff4:	89ab      	ldrh	r3, [r5, #12]
 800dff6:	059a      	lsls	r2, r3, #22
 800dff8:	d402      	bmi.n	800e000 <_vfiprintf_r+0x220>
 800dffa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dffc:	f7fb fdcc 	bl	8009b98 <__retarget_lock_release_recursive>
 800e000:	89ab      	ldrh	r3, [r5, #12]
 800e002:	065b      	lsls	r3, r3, #25
 800e004:	f53f af12 	bmi.w	800de2c <_vfiprintf_r+0x4c>
 800e008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e00a:	e711      	b.n	800de30 <_vfiprintf_r+0x50>
 800e00c:	ab03      	add	r3, sp, #12
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	462a      	mov	r2, r5
 800e012:	4b09      	ldr	r3, [pc, #36]	; (800e038 <_vfiprintf_r+0x258>)
 800e014:	a904      	add	r1, sp, #16
 800e016:	4630      	mov	r0, r6
 800e018:	f7fc f9ae 	bl	800a378 <_printf_i>
 800e01c:	e7e4      	b.n	800dfe8 <_vfiprintf_r+0x208>
 800e01e:	bf00      	nop
 800e020:	0802b380 	.word	0x0802b380
 800e024:	0802b3a0 	.word	0x0802b3a0
 800e028:	0802b360 	.word	0x0802b360
 800e02c:	0802b7b4 	.word	0x0802b7b4
 800e030:	0802b7be 	.word	0x0802b7be
 800e034:	08009e31 	.word	0x08009e31
 800e038:	0800ddbd 	.word	0x0800ddbd
 800e03c:	0802b7ba 	.word	0x0802b7ba

0800e040 <__swbuf_r>:
 800e040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e042:	460e      	mov	r6, r1
 800e044:	4614      	mov	r4, r2
 800e046:	4605      	mov	r5, r0
 800e048:	b118      	cbz	r0, 800e052 <__swbuf_r+0x12>
 800e04a:	6983      	ldr	r3, [r0, #24]
 800e04c:	b90b      	cbnz	r3, 800e052 <__swbuf_r+0x12>
 800e04e:	f7fb fcdf 	bl	8009a10 <__sinit>
 800e052:	4b21      	ldr	r3, [pc, #132]	; (800e0d8 <__swbuf_r+0x98>)
 800e054:	429c      	cmp	r4, r3
 800e056:	d12b      	bne.n	800e0b0 <__swbuf_r+0x70>
 800e058:	686c      	ldr	r4, [r5, #4]
 800e05a:	69a3      	ldr	r3, [r4, #24]
 800e05c:	60a3      	str	r3, [r4, #8]
 800e05e:	89a3      	ldrh	r3, [r4, #12]
 800e060:	071a      	lsls	r2, r3, #28
 800e062:	d52f      	bpl.n	800e0c4 <__swbuf_r+0x84>
 800e064:	6923      	ldr	r3, [r4, #16]
 800e066:	b36b      	cbz	r3, 800e0c4 <__swbuf_r+0x84>
 800e068:	6923      	ldr	r3, [r4, #16]
 800e06a:	6820      	ldr	r0, [r4, #0]
 800e06c:	1ac0      	subs	r0, r0, r3
 800e06e:	6963      	ldr	r3, [r4, #20]
 800e070:	b2f6      	uxtb	r6, r6
 800e072:	4283      	cmp	r3, r0
 800e074:	4637      	mov	r7, r6
 800e076:	dc04      	bgt.n	800e082 <__swbuf_r+0x42>
 800e078:	4621      	mov	r1, r4
 800e07a:	4628      	mov	r0, r5
 800e07c:	f7fe fb68 	bl	800c750 <_fflush_r>
 800e080:	bb30      	cbnz	r0, 800e0d0 <__swbuf_r+0x90>
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	3b01      	subs	r3, #1
 800e086:	60a3      	str	r3, [r4, #8]
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	6022      	str	r2, [r4, #0]
 800e08e:	701e      	strb	r6, [r3, #0]
 800e090:	6963      	ldr	r3, [r4, #20]
 800e092:	3001      	adds	r0, #1
 800e094:	4283      	cmp	r3, r0
 800e096:	d004      	beq.n	800e0a2 <__swbuf_r+0x62>
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	07db      	lsls	r3, r3, #31
 800e09c:	d506      	bpl.n	800e0ac <__swbuf_r+0x6c>
 800e09e:	2e0a      	cmp	r6, #10
 800e0a0:	d104      	bne.n	800e0ac <__swbuf_r+0x6c>
 800e0a2:	4621      	mov	r1, r4
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f7fe fb53 	bl	800c750 <_fflush_r>
 800e0aa:	b988      	cbnz	r0, 800e0d0 <__swbuf_r+0x90>
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b0:	4b0a      	ldr	r3, [pc, #40]	; (800e0dc <__swbuf_r+0x9c>)
 800e0b2:	429c      	cmp	r4, r3
 800e0b4:	d101      	bne.n	800e0ba <__swbuf_r+0x7a>
 800e0b6:	68ac      	ldr	r4, [r5, #8]
 800e0b8:	e7cf      	b.n	800e05a <__swbuf_r+0x1a>
 800e0ba:	4b09      	ldr	r3, [pc, #36]	; (800e0e0 <__swbuf_r+0xa0>)
 800e0bc:	429c      	cmp	r4, r3
 800e0be:	bf08      	it	eq
 800e0c0:	68ec      	ldreq	r4, [r5, #12]
 800e0c2:	e7ca      	b.n	800e05a <__swbuf_r+0x1a>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f000 f80c 	bl	800e0e4 <__swsetup_r>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d0cb      	beq.n	800e068 <__swbuf_r+0x28>
 800e0d0:	f04f 37ff 	mov.w	r7, #4294967295
 800e0d4:	e7ea      	b.n	800e0ac <__swbuf_r+0x6c>
 800e0d6:	bf00      	nop
 800e0d8:	0802b380 	.word	0x0802b380
 800e0dc:	0802b3a0 	.word	0x0802b3a0
 800e0e0:	0802b360 	.word	0x0802b360

0800e0e4 <__swsetup_r>:
 800e0e4:	4b32      	ldr	r3, [pc, #200]	; (800e1b0 <__swsetup_r+0xcc>)
 800e0e6:	b570      	push	{r4, r5, r6, lr}
 800e0e8:	681d      	ldr	r5, [r3, #0]
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	b125      	cbz	r5, 800e0fa <__swsetup_r+0x16>
 800e0f0:	69ab      	ldr	r3, [r5, #24]
 800e0f2:	b913      	cbnz	r3, 800e0fa <__swsetup_r+0x16>
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	f7fb fc8b 	bl	8009a10 <__sinit>
 800e0fa:	4b2e      	ldr	r3, [pc, #184]	; (800e1b4 <__swsetup_r+0xd0>)
 800e0fc:	429c      	cmp	r4, r3
 800e0fe:	d10f      	bne.n	800e120 <__swsetup_r+0x3c>
 800e100:	686c      	ldr	r4, [r5, #4]
 800e102:	89a3      	ldrh	r3, [r4, #12]
 800e104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e108:	0719      	lsls	r1, r3, #28
 800e10a:	d42c      	bmi.n	800e166 <__swsetup_r+0x82>
 800e10c:	06dd      	lsls	r5, r3, #27
 800e10e:	d411      	bmi.n	800e134 <__swsetup_r+0x50>
 800e110:	2309      	movs	r3, #9
 800e112:	6033      	str	r3, [r6, #0]
 800e114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e118:	81a3      	strh	r3, [r4, #12]
 800e11a:	f04f 30ff 	mov.w	r0, #4294967295
 800e11e:	e03e      	b.n	800e19e <__swsetup_r+0xba>
 800e120:	4b25      	ldr	r3, [pc, #148]	; (800e1b8 <__swsetup_r+0xd4>)
 800e122:	429c      	cmp	r4, r3
 800e124:	d101      	bne.n	800e12a <__swsetup_r+0x46>
 800e126:	68ac      	ldr	r4, [r5, #8]
 800e128:	e7eb      	b.n	800e102 <__swsetup_r+0x1e>
 800e12a:	4b24      	ldr	r3, [pc, #144]	; (800e1bc <__swsetup_r+0xd8>)
 800e12c:	429c      	cmp	r4, r3
 800e12e:	bf08      	it	eq
 800e130:	68ec      	ldreq	r4, [r5, #12]
 800e132:	e7e6      	b.n	800e102 <__swsetup_r+0x1e>
 800e134:	0758      	lsls	r0, r3, #29
 800e136:	d512      	bpl.n	800e15e <__swsetup_r+0x7a>
 800e138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e13a:	b141      	cbz	r1, 800e14e <__swsetup_r+0x6a>
 800e13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e140:	4299      	cmp	r1, r3
 800e142:	d002      	beq.n	800e14a <__swsetup_r+0x66>
 800e144:	4630      	mov	r0, r6
 800e146:	f7ff fbc3 	bl	800d8d0 <_free_r>
 800e14a:	2300      	movs	r3, #0
 800e14c:	6363      	str	r3, [r4, #52]	; 0x34
 800e14e:	89a3      	ldrh	r3, [r4, #12]
 800e150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	2300      	movs	r3, #0
 800e158:	6063      	str	r3, [r4, #4]
 800e15a:	6923      	ldr	r3, [r4, #16]
 800e15c:	6023      	str	r3, [r4, #0]
 800e15e:	89a3      	ldrh	r3, [r4, #12]
 800e160:	f043 0308 	orr.w	r3, r3, #8
 800e164:	81a3      	strh	r3, [r4, #12]
 800e166:	6923      	ldr	r3, [r4, #16]
 800e168:	b94b      	cbnz	r3, 800e17e <__swsetup_r+0x9a>
 800e16a:	89a3      	ldrh	r3, [r4, #12]
 800e16c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e174:	d003      	beq.n	800e17e <__swsetup_r+0x9a>
 800e176:	4621      	mov	r1, r4
 800e178:	4630      	mov	r0, r6
 800e17a:	f000 f84d 	bl	800e218 <__smakebuf_r>
 800e17e:	89a0      	ldrh	r0, [r4, #12]
 800e180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e184:	f010 0301 	ands.w	r3, r0, #1
 800e188:	d00a      	beq.n	800e1a0 <__swsetup_r+0xbc>
 800e18a:	2300      	movs	r3, #0
 800e18c:	60a3      	str	r3, [r4, #8]
 800e18e:	6963      	ldr	r3, [r4, #20]
 800e190:	425b      	negs	r3, r3
 800e192:	61a3      	str	r3, [r4, #24]
 800e194:	6923      	ldr	r3, [r4, #16]
 800e196:	b943      	cbnz	r3, 800e1aa <__swsetup_r+0xc6>
 800e198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e19c:	d1ba      	bne.n	800e114 <__swsetup_r+0x30>
 800e19e:	bd70      	pop	{r4, r5, r6, pc}
 800e1a0:	0781      	lsls	r1, r0, #30
 800e1a2:	bf58      	it	pl
 800e1a4:	6963      	ldrpl	r3, [r4, #20]
 800e1a6:	60a3      	str	r3, [r4, #8]
 800e1a8:	e7f4      	b.n	800e194 <__swsetup_r+0xb0>
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	e7f7      	b.n	800e19e <__swsetup_r+0xba>
 800e1ae:	bf00      	nop
 800e1b0:	20000010 	.word	0x20000010
 800e1b4:	0802b380 	.word	0x0802b380
 800e1b8:	0802b3a0 	.word	0x0802b3a0
 800e1bc:	0802b360 	.word	0x0802b360

0800e1c0 <abort>:
 800e1c0:	b508      	push	{r3, lr}
 800e1c2:	2006      	movs	r0, #6
 800e1c4:	f000 f898 	bl	800e2f8 <raise>
 800e1c8:	2001      	movs	r0, #1
 800e1ca:	f7f4 f9f3 	bl	80025b4 <_exit>

0800e1ce <__swhatbuf_r>:
 800e1ce:	b570      	push	{r4, r5, r6, lr}
 800e1d0:	460e      	mov	r6, r1
 800e1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d6:	2900      	cmp	r1, #0
 800e1d8:	b096      	sub	sp, #88	; 0x58
 800e1da:	4614      	mov	r4, r2
 800e1dc:	461d      	mov	r5, r3
 800e1de:	da08      	bge.n	800e1f2 <__swhatbuf_r+0x24>
 800e1e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	602a      	str	r2, [r5, #0]
 800e1e8:	061a      	lsls	r2, r3, #24
 800e1ea:	d410      	bmi.n	800e20e <__swhatbuf_r+0x40>
 800e1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1f0:	e00e      	b.n	800e210 <__swhatbuf_r+0x42>
 800e1f2:	466a      	mov	r2, sp
 800e1f4:	f000 f89c 	bl	800e330 <_fstat_r>
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	dbf1      	blt.n	800e1e0 <__swhatbuf_r+0x12>
 800e1fc:	9a01      	ldr	r2, [sp, #4]
 800e1fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e202:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e206:	425a      	negs	r2, r3
 800e208:	415a      	adcs	r2, r3
 800e20a:	602a      	str	r2, [r5, #0]
 800e20c:	e7ee      	b.n	800e1ec <__swhatbuf_r+0x1e>
 800e20e:	2340      	movs	r3, #64	; 0x40
 800e210:	2000      	movs	r0, #0
 800e212:	6023      	str	r3, [r4, #0]
 800e214:	b016      	add	sp, #88	; 0x58
 800e216:	bd70      	pop	{r4, r5, r6, pc}

0800e218 <__smakebuf_r>:
 800e218:	898b      	ldrh	r3, [r1, #12]
 800e21a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e21c:	079d      	lsls	r5, r3, #30
 800e21e:	4606      	mov	r6, r0
 800e220:	460c      	mov	r4, r1
 800e222:	d507      	bpl.n	800e234 <__smakebuf_r+0x1c>
 800e224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e228:	6023      	str	r3, [r4, #0]
 800e22a:	6123      	str	r3, [r4, #16]
 800e22c:	2301      	movs	r3, #1
 800e22e:	6163      	str	r3, [r4, #20]
 800e230:	b002      	add	sp, #8
 800e232:	bd70      	pop	{r4, r5, r6, pc}
 800e234:	ab01      	add	r3, sp, #4
 800e236:	466a      	mov	r2, sp
 800e238:	f7ff ffc9 	bl	800e1ce <__swhatbuf_r>
 800e23c:	9900      	ldr	r1, [sp, #0]
 800e23e:	4605      	mov	r5, r0
 800e240:	4630      	mov	r0, r6
 800e242:	f7fb fce1 	bl	8009c08 <_malloc_r>
 800e246:	b948      	cbnz	r0, 800e25c <__smakebuf_r+0x44>
 800e248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e24c:	059a      	lsls	r2, r3, #22
 800e24e:	d4ef      	bmi.n	800e230 <__smakebuf_r+0x18>
 800e250:	f023 0303 	bic.w	r3, r3, #3
 800e254:	f043 0302 	orr.w	r3, r3, #2
 800e258:	81a3      	strh	r3, [r4, #12]
 800e25a:	e7e3      	b.n	800e224 <__smakebuf_r+0xc>
 800e25c:	4b0d      	ldr	r3, [pc, #52]	; (800e294 <__smakebuf_r+0x7c>)
 800e25e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	6020      	str	r0, [r4, #0]
 800e264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	9b00      	ldr	r3, [sp, #0]
 800e26c:	6163      	str	r3, [r4, #20]
 800e26e:	9b01      	ldr	r3, [sp, #4]
 800e270:	6120      	str	r0, [r4, #16]
 800e272:	b15b      	cbz	r3, 800e28c <__smakebuf_r+0x74>
 800e274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e278:	4630      	mov	r0, r6
 800e27a:	f000 f86b 	bl	800e354 <_isatty_r>
 800e27e:	b128      	cbz	r0, 800e28c <__smakebuf_r+0x74>
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	f023 0303 	bic.w	r3, r3, #3
 800e286:	f043 0301 	orr.w	r3, r3, #1
 800e28a:	81a3      	strh	r3, [r4, #12]
 800e28c:	89a0      	ldrh	r0, [r4, #12]
 800e28e:	4305      	orrs	r5, r0
 800e290:	81a5      	strh	r5, [r4, #12]
 800e292:	e7cd      	b.n	800e230 <__smakebuf_r+0x18>
 800e294:	080099a9 	.word	0x080099a9

0800e298 <_malloc_usable_size_r>:
 800e298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e29c:	1f18      	subs	r0, r3, #4
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	bfbc      	itt	lt
 800e2a2:	580b      	ldrlt	r3, [r1, r0]
 800e2a4:	18c0      	addlt	r0, r0, r3
 800e2a6:	4770      	bx	lr

0800e2a8 <_raise_r>:
 800e2a8:	291f      	cmp	r1, #31
 800e2aa:	b538      	push	{r3, r4, r5, lr}
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	460d      	mov	r5, r1
 800e2b0:	d904      	bls.n	800e2bc <_raise_r+0x14>
 800e2b2:	2316      	movs	r3, #22
 800e2b4:	6003      	str	r3, [r0, #0]
 800e2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ba:	bd38      	pop	{r3, r4, r5, pc}
 800e2bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2be:	b112      	cbz	r2, 800e2c6 <_raise_r+0x1e>
 800e2c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2c4:	b94b      	cbnz	r3, 800e2da <_raise_r+0x32>
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f000 f830 	bl	800e32c <_getpid_r>
 800e2cc:	462a      	mov	r2, r5
 800e2ce:	4601      	mov	r1, r0
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2d6:	f000 b817 	b.w	800e308 <_kill_r>
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d00a      	beq.n	800e2f4 <_raise_r+0x4c>
 800e2de:	1c59      	adds	r1, r3, #1
 800e2e0:	d103      	bne.n	800e2ea <_raise_r+0x42>
 800e2e2:	2316      	movs	r3, #22
 800e2e4:	6003      	str	r3, [r0, #0]
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	e7e7      	b.n	800e2ba <_raise_r+0x12>
 800e2ea:	2400      	movs	r4, #0
 800e2ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	4798      	blx	r3
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	e7e0      	b.n	800e2ba <_raise_r+0x12>

0800e2f8 <raise>:
 800e2f8:	4b02      	ldr	r3, [pc, #8]	; (800e304 <raise+0xc>)
 800e2fa:	4601      	mov	r1, r0
 800e2fc:	6818      	ldr	r0, [r3, #0]
 800e2fe:	f7ff bfd3 	b.w	800e2a8 <_raise_r>
 800e302:	bf00      	nop
 800e304:	20000010 	.word	0x20000010

0800e308 <_kill_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4d07      	ldr	r5, [pc, #28]	; (800e328 <_kill_r+0x20>)
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	4611      	mov	r1, r2
 800e314:	602b      	str	r3, [r5, #0]
 800e316:	f7f4 f93d 	bl	8002594 <_kill>
 800e31a:	1c43      	adds	r3, r0, #1
 800e31c:	d102      	bne.n	800e324 <_kill_r+0x1c>
 800e31e:	682b      	ldr	r3, [r5, #0]
 800e320:	b103      	cbz	r3, 800e324 <_kill_r+0x1c>
 800e322:	6023      	str	r3, [r4, #0]
 800e324:	bd38      	pop	{r3, r4, r5, pc}
 800e326:	bf00      	nop
 800e328:	200139bc 	.word	0x200139bc

0800e32c <_getpid_r>:
 800e32c:	f7f4 b92a 	b.w	8002584 <_getpid>

0800e330 <_fstat_r>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4d07      	ldr	r5, [pc, #28]	; (800e350 <_fstat_r+0x20>)
 800e334:	2300      	movs	r3, #0
 800e336:	4604      	mov	r4, r0
 800e338:	4608      	mov	r0, r1
 800e33a:	4611      	mov	r1, r2
 800e33c:	602b      	str	r3, [r5, #0]
 800e33e:	f7f4 f988 	bl	8002652 <_fstat>
 800e342:	1c43      	adds	r3, r0, #1
 800e344:	d102      	bne.n	800e34c <_fstat_r+0x1c>
 800e346:	682b      	ldr	r3, [r5, #0]
 800e348:	b103      	cbz	r3, 800e34c <_fstat_r+0x1c>
 800e34a:	6023      	str	r3, [r4, #0]
 800e34c:	bd38      	pop	{r3, r4, r5, pc}
 800e34e:	bf00      	nop
 800e350:	200139bc 	.word	0x200139bc

0800e354 <_isatty_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4d06      	ldr	r5, [pc, #24]	; (800e370 <_isatty_r+0x1c>)
 800e358:	2300      	movs	r3, #0
 800e35a:	4604      	mov	r4, r0
 800e35c:	4608      	mov	r0, r1
 800e35e:	602b      	str	r3, [r5, #0]
 800e360:	f7f4 f987 	bl	8002672 <_isatty>
 800e364:	1c43      	adds	r3, r0, #1
 800e366:	d102      	bne.n	800e36e <_isatty_r+0x1a>
 800e368:	682b      	ldr	r3, [r5, #0]
 800e36a:	b103      	cbz	r3, 800e36e <_isatty_r+0x1a>
 800e36c:	6023      	str	r3, [r4, #0]
 800e36e:	bd38      	pop	{r3, r4, r5, pc}
 800e370:	200139bc 	.word	0x200139bc
 800e374:	00000000 	.word	0x00000000

0800e378 <log>:
 800e378:	b538      	push	{r3, r4, r5, lr}
 800e37a:	ed2d 8b02 	vpush	{d8}
 800e37e:	ec55 4b10 	vmov	r4, r5, d0
 800e382:	f000 f8c5 	bl	800e510 <__ieee754_log>
 800e386:	4622      	mov	r2, r4
 800e388:	462b      	mov	r3, r5
 800e38a:	4620      	mov	r0, r4
 800e38c:	4629      	mov	r1, r5
 800e38e:	eeb0 8a40 	vmov.f32	s16, s0
 800e392:	eef0 8a60 	vmov.f32	s17, s1
 800e396:	f7f2 fbe9 	bl	8000b6c <__aeabi_dcmpun>
 800e39a:	b998      	cbnz	r0, 800e3c4 <log+0x4c>
 800e39c:	2200      	movs	r2, #0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	f7f2 fbd8 	bl	8000b58 <__aeabi_dcmpgt>
 800e3a8:	b960      	cbnz	r0, 800e3c4 <log+0x4c>
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	f7f2 fba9 	bl	8000b08 <__aeabi_dcmpeq>
 800e3b6:	b160      	cbz	r0, 800e3d2 <log+0x5a>
 800e3b8:	f7fb facc 	bl	8009954 <__errno>
 800e3bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800e3e8 <log+0x70>
 800e3c0:	2322      	movs	r3, #34	; 0x22
 800e3c2:	6003      	str	r3, [r0, #0]
 800e3c4:	eeb0 0a48 	vmov.f32	s0, s16
 800e3c8:	eef0 0a68 	vmov.f32	s1, s17
 800e3cc:	ecbd 8b02 	vpop	{d8}
 800e3d0:	bd38      	pop	{r3, r4, r5, pc}
 800e3d2:	f7fb fabf 	bl	8009954 <__errno>
 800e3d6:	ecbd 8b02 	vpop	{d8}
 800e3da:	2321      	movs	r3, #33	; 0x21
 800e3dc:	6003      	str	r3, [r0, #0]
 800e3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3e2:	4803      	ldr	r0, [pc, #12]	; (800e3f0 <log+0x78>)
 800e3e4:	f7ff bc30 	b.w	800dc48 <nan>
 800e3e8:	00000000 	.word	0x00000000
 800e3ec:	fff00000 	.word	0xfff00000
 800e3f0:	0802b800 	.word	0x0802b800

0800e3f4 <pow>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	ed2d 8b02 	vpush	{d8}
 800e3fa:	eeb0 8a40 	vmov.f32	s16, s0
 800e3fe:	eef0 8a60 	vmov.f32	s17, s1
 800e402:	ec55 4b11 	vmov	r4, r5, d1
 800e406:	f000 fa3f 	bl	800e888 <__ieee754_pow>
 800e40a:	4622      	mov	r2, r4
 800e40c:	462b      	mov	r3, r5
 800e40e:	4620      	mov	r0, r4
 800e410:	4629      	mov	r1, r5
 800e412:	ec57 6b10 	vmov	r6, r7, d0
 800e416:	f7f2 fba9 	bl	8000b6c <__aeabi_dcmpun>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d13b      	bne.n	800e496 <pow+0xa2>
 800e41e:	ec51 0b18 	vmov	r0, r1, d8
 800e422:	2200      	movs	r2, #0
 800e424:	2300      	movs	r3, #0
 800e426:	f7f2 fb6f 	bl	8000b08 <__aeabi_dcmpeq>
 800e42a:	b1b8      	cbz	r0, 800e45c <pow+0x68>
 800e42c:	2200      	movs	r2, #0
 800e42e:	2300      	movs	r3, #0
 800e430:	4620      	mov	r0, r4
 800e432:	4629      	mov	r1, r5
 800e434:	f7f2 fb68 	bl	8000b08 <__aeabi_dcmpeq>
 800e438:	2800      	cmp	r0, #0
 800e43a:	d146      	bne.n	800e4ca <pow+0xd6>
 800e43c:	ec45 4b10 	vmov	d0, r4, r5
 800e440:	f001 f83e 	bl	800f4c0 <finite>
 800e444:	b338      	cbz	r0, 800e496 <pow+0xa2>
 800e446:	2200      	movs	r2, #0
 800e448:	2300      	movs	r3, #0
 800e44a:	4620      	mov	r0, r4
 800e44c:	4629      	mov	r1, r5
 800e44e:	f7f2 fb65 	bl	8000b1c <__aeabi_dcmplt>
 800e452:	b300      	cbz	r0, 800e496 <pow+0xa2>
 800e454:	f7fb fa7e 	bl	8009954 <__errno>
 800e458:	2322      	movs	r3, #34	; 0x22
 800e45a:	e01b      	b.n	800e494 <pow+0xa0>
 800e45c:	ec47 6b10 	vmov	d0, r6, r7
 800e460:	f001 f82e 	bl	800f4c0 <finite>
 800e464:	b9e0      	cbnz	r0, 800e4a0 <pow+0xac>
 800e466:	eeb0 0a48 	vmov.f32	s0, s16
 800e46a:	eef0 0a68 	vmov.f32	s1, s17
 800e46e:	f001 f827 	bl	800f4c0 <finite>
 800e472:	b1a8      	cbz	r0, 800e4a0 <pow+0xac>
 800e474:	ec45 4b10 	vmov	d0, r4, r5
 800e478:	f001 f822 	bl	800f4c0 <finite>
 800e47c:	b180      	cbz	r0, 800e4a0 <pow+0xac>
 800e47e:	4632      	mov	r2, r6
 800e480:	463b      	mov	r3, r7
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	f7f2 fb71 	bl	8000b6c <__aeabi_dcmpun>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d0e2      	beq.n	800e454 <pow+0x60>
 800e48e:	f7fb fa61 	bl	8009954 <__errno>
 800e492:	2321      	movs	r3, #33	; 0x21
 800e494:	6003      	str	r3, [r0, #0]
 800e496:	ecbd 8b02 	vpop	{d8}
 800e49a:	ec47 6b10 	vmov	d0, r6, r7
 800e49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	f7f2 fb2e 	bl	8000b08 <__aeabi_dcmpeq>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d0f2      	beq.n	800e496 <pow+0xa2>
 800e4b0:	eeb0 0a48 	vmov.f32	s0, s16
 800e4b4:	eef0 0a68 	vmov.f32	s1, s17
 800e4b8:	f001 f802 	bl	800f4c0 <finite>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d0ea      	beq.n	800e496 <pow+0xa2>
 800e4c0:	ec45 4b10 	vmov	d0, r4, r5
 800e4c4:	f000 fffc 	bl	800f4c0 <finite>
 800e4c8:	e7c3      	b.n	800e452 <pow+0x5e>
 800e4ca:	4f01      	ldr	r7, [pc, #4]	; (800e4d0 <pow+0xdc>)
 800e4cc:	2600      	movs	r6, #0
 800e4ce:	e7e2      	b.n	800e496 <pow+0xa2>
 800e4d0:	3ff00000 	.word	0x3ff00000

0800e4d4 <sqrtf>:
 800e4d4:	b508      	push	{r3, lr}
 800e4d6:	ed2d 8b02 	vpush	{d8}
 800e4da:	eeb0 8a40 	vmov.f32	s16, s0
 800e4de:	f000 ffb3 	bl	800f448 <__ieee754_sqrtf>
 800e4e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ea:	d60c      	bvs.n	800e506 <sqrtf+0x32>
 800e4ec:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e50c <sqrtf+0x38>
 800e4f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f8:	d505      	bpl.n	800e506 <sqrtf+0x32>
 800e4fa:	f7fb fa2b 	bl	8009954 <__errno>
 800e4fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e502:	2321      	movs	r3, #33	; 0x21
 800e504:	6003      	str	r3, [r0, #0]
 800e506:	ecbd 8b02 	vpop	{d8}
 800e50a:	bd08      	pop	{r3, pc}
 800e50c:	00000000 	.word	0x00000000

0800e510 <__ieee754_log>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	ec51 0b10 	vmov	r0, r1, d0
 800e518:	ed2d 8b04 	vpush	{d8-d9}
 800e51c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e520:	b083      	sub	sp, #12
 800e522:	460d      	mov	r5, r1
 800e524:	da29      	bge.n	800e57a <__ieee754_log+0x6a>
 800e526:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e52a:	4303      	orrs	r3, r0
 800e52c:	ee10 2a10 	vmov	r2, s0
 800e530:	d10c      	bne.n	800e54c <__ieee754_log+0x3c>
 800e532:	49cf      	ldr	r1, [pc, #828]	; (800e870 <__ieee754_log+0x360>)
 800e534:	2200      	movs	r2, #0
 800e536:	2300      	movs	r3, #0
 800e538:	2000      	movs	r0, #0
 800e53a:	f7f2 f9a7 	bl	800088c <__aeabi_ddiv>
 800e53e:	ec41 0b10 	vmov	d0, r0, r1
 800e542:	b003      	add	sp, #12
 800e544:	ecbd 8b04 	vpop	{d8-d9}
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	2900      	cmp	r1, #0
 800e54e:	da05      	bge.n	800e55c <__ieee754_log+0x4c>
 800e550:	460b      	mov	r3, r1
 800e552:	f7f1 feb9 	bl	80002c8 <__aeabi_dsub>
 800e556:	2200      	movs	r2, #0
 800e558:	2300      	movs	r3, #0
 800e55a:	e7ee      	b.n	800e53a <__ieee754_log+0x2a>
 800e55c:	4bc5      	ldr	r3, [pc, #788]	; (800e874 <__ieee754_log+0x364>)
 800e55e:	2200      	movs	r2, #0
 800e560:	f7f2 f86a 	bl	8000638 <__aeabi_dmul>
 800e564:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e568:	460d      	mov	r5, r1
 800e56a:	4ac3      	ldr	r2, [pc, #780]	; (800e878 <__ieee754_log+0x368>)
 800e56c:	4295      	cmp	r5, r2
 800e56e:	dd06      	ble.n	800e57e <__ieee754_log+0x6e>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	f7f1 feaa 	bl	80002cc <__adddf3>
 800e578:	e7e1      	b.n	800e53e <__ieee754_log+0x2e>
 800e57a:	2300      	movs	r3, #0
 800e57c:	e7f5      	b.n	800e56a <__ieee754_log+0x5a>
 800e57e:	152c      	asrs	r4, r5, #20
 800e580:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e584:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e588:	441c      	add	r4, r3
 800e58a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e58e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e596:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e59a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e59e:	ea42 0105 	orr.w	r1, r2, r5
 800e5a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	4bb4      	ldr	r3, [pc, #720]	; (800e87c <__ieee754_log+0x36c>)
 800e5aa:	f7f1 fe8d 	bl	80002c8 <__aeabi_dsub>
 800e5ae:	1cab      	adds	r3, r5, #2
 800e5b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	4682      	mov	sl, r0
 800e5b8:	468b      	mov	fp, r1
 800e5ba:	f04f 0200 	mov.w	r2, #0
 800e5be:	dc53      	bgt.n	800e668 <__ieee754_log+0x158>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f7f2 faa1 	bl	8000b08 <__aeabi_dcmpeq>
 800e5c6:	b1d0      	cbz	r0, 800e5fe <__ieee754_log+0xee>
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	f000 8122 	beq.w	800e812 <__ieee754_log+0x302>
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f7f1 ffc8 	bl	8000564 <__aeabi_i2d>
 800e5d4:	a390      	add	r3, pc, #576	; (adr r3, 800e818 <__ieee754_log+0x308>)
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	4606      	mov	r6, r0
 800e5dc:	460f      	mov	r7, r1
 800e5de:	f7f2 f82b 	bl	8000638 <__aeabi_dmul>
 800e5e2:	a38f      	add	r3, pc, #572	; (adr r3, 800e820 <__ieee754_log+0x310>)
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	460d      	mov	r5, r1
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f7f2 f822 	bl	8000638 <__aeabi_dmul>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	e7ba      	b.n	800e574 <__ieee754_log+0x64>
 800e5fe:	a38a      	add	r3, pc, #552	; (adr r3, 800e828 <__ieee754_log+0x318>)
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	4650      	mov	r0, sl
 800e606:	4659      	mov	r1, fp
 800e608:	f7f2 f816 	bl	8000638 <__aeabi_dmul>
 800e60c:	4602      	mov	r2, r0
 800e60e:	460b      	mov	r3, r1
 800e610:	2000      	movs	r0, #0
 800e612:	499b      	ldr	r1, [pc, #620]	; (800e880 <__ieee754_log+0x370>)
 800e614:	f7f1 fe58 	bl	80002c8 <__aeabi_dsub>
 800e618:	4652      	mov	r2, sl
 800e61a:	4606      	mov	r6, r0
 800e61c:	460f      	mov	r7, r1
 800e61e:	465b      	mov	r3, fp
 800e620:	4650      	mov	r0, sl
 800e622:	4659      	mov	r1, fp
 800e624:	f7f2 f808 	bl	8000638 <__aeabi_dmul>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	4630      	mov	r0, r6
 800e62e:	4639      	mov	r1, r7
 800e630:	f7f2 f802 	bl	8000638 <__aeabi_dmul>
 800e634:	4606      	mov	r6, r0
 800e636:	460f      	mov	r7, r1
 800e638:	b914      	cbnz	r4, 800e640 <__ieee754_log+0x130>
 800e63a:	4632      	mov	r2, r6
 800e63c:	463b      	mov	r3, r7
 800e63e:	e0a2      	b.n	800e786 <__ieee754_log+0x276>
 800e640:	4620      	mov	r0, r4
 800e642:	f7f1 ff8f 	bl	8000564 <__aeabi_i2d>
 800e646:	a374      	add	r3, pc, #464	; (adr r3, 800e818 <__ieee754_log+0x308>)
 800e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64c:	4680      	mov	r8, r0
 800e64e:	4689      	mov	r9, r1
 800e650:	f7f1 fff2 	bl	8000638 <__aeabi_dmul>
 800e654:	a372      	add	r3, pc, #456	; (adr r3, 800e820 <__ieee754_log+0x310>)
 800e656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65a:	4604      	mov	r4, r0
 800e65c:	460d      	mov	r5, r1
 800e65e:	4640      	mov	r0, r8
 800e660:	4649      	mov	r1, r9
 800e662:	f7f1 ffe9 	bl	8000638 <__aeabi_dmul>
 800e666:	e0a7      	b.n	800e7b8 <__ieee754_log+0x2a8>
 800e668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e66c:	f7f1 fe2e 	bl	80002cc <__adddf3>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4650      	mov	r0, sl
 800e676:	4659      	mov	r1, fp
 800e678:	f7f2 f908 	bl	800088c <__aeabi_ddiv>
 800e67c:	ec41 0b18 	vmov	d8, r0, r1
 800e680:	4620      	mov	r0, r4
 800e682:	f7f1 ff6f 	bl	8000564 <__aeabi_i2d>
 800e686:	ec53 2b18 	vmov	r2, r3, d8
 800e68a:	ec41 0b19 	vmov	d9, r0, r1
 800e68e:	ec51 0b18 	vmov	r0, r1, d8
 800e692:	f7f1 ffd1 	bl	8000638 <__aeabi_dmul>
 800e696:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e69a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e69e:	9301      	str	r3, [sp, #4]
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	4680      	mov	r8, r0
 800e6a6:	4689      	mov	r9, r1
 800e6a8:	f7f1 ffc6 	bl	8000638 <__aeabi_dmul>
 800e6ac:	a360      	add	r3, pc, #384	; (adr r3, 800e830 <__ieee754_log+0x320>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	460f      	mov	r7, r1
 800e6b6:	f7f1 ffbf 	bl	8000638 <__aeabi_dmul>
 800e6ba:	a35f      	add	r3, pc, #380	; (adr r3, 800e838 <__ieee754_log+0x328>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	f7f1 fe04 	bl	80002cc <__adddf3>
 800e6c4:	4632      	mov	r2, r6
 800e6c6:	463b      	mov	r3, r7
 800e6c8:	f7f1 ffb6 	bl	8000638 <__aeabi_dmul>
 800e6cc:	a35c      	add	r3, pc, #368	; (adr r3, 800e840 <__ieee754_log+0x330>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	f7f1 fdfb 	bl	80002cc <__adddf3>
 800e6d6:	4632      	mov	r2, r6
 800e6d8:	463b      	mov	r3, r7
 800e6da:	f7f1 ffad 	bl	8000638 <__aeabi_dmul>
 800e6de:	a35a      	add	r3, pc, #360	; (adr r3, 800e848 <__ieee754_log+0x338>)
 800e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e4:	f7f1 fdf2 	bl	80002cc <__adddf3>
 800e6e8:	4642      	mov	r2, r8
 800e6ea:	464b      	mov	r3, r9
 800e6ec:	f7f1 ffa4 	bl	8000638 <__aeabi_dmul>
 800e6f0:	a357      	add	r3, pc, #348	; (adr r3, 800e850 <__ieee754_log+0x340>)
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	4680      	mov	r8, r0
 800e6f8:	4689      	mov	r9, r1
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	4639      	mov	r1, r7
 800e6fe:	f7f1 ff9b 	bl	8000638 <__aeabi_dmul>
 800e702:	a355      	add	r3, pc, #340	; (adr r3, 800e858 <__ieee754_log+0x348>)
 800e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e708:	f7f1 fde0 	bl	80002cc <__adddf3>
 800e70c:	4632      	mov	r2, r6
 800e70e:	463b      	mov	r3, r7
 800e710:	f7f1 ff92 	bl	8000638 <__aeabi_dmul>
 800e714:	a352      	add	r3, pc, #328	; (adr r3, 800e860 <__ieee754_log+0x350>)
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	f7f1 fdd7 	bl	80002cc <__adddf3>
 800e71e:	4632      	mov	r2, r6
 800e720:	463b      	mov	r3, r7
 800e722:	f7f1 ff89 	bl	8000638 <__aeabi_dmul>
 800e726:	460b      	mov	r3, r1
 800e728:	4602      	mov	r2, r0
 800e72a:	4649      	mov	r1, r9
 800e72c:	4640      	mov	r0, r8
 800e72e:	f7f1 fdcd 	bl	80002cc <__adddf3>
 800e732:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e736:	9b01      	ldr	r3, [sp, #4]
 800e738:	3551      	adds	r5, #81	; 0x51
 800e73a:	431d      	orrs	r5, r3
 800e73c:	2d00      	cmp	r5, #0
 800e73e:	4680      	mov	r8, r0
 800e740:	4689      	mov	r9, r1
 800e742:	dd48      	ble.n	800e7d6 <__ieee754_log+0x2c6>
 800e744:	4b4e      	ldr	r3, [pc, #312]	; (800e880 <__ieee754_log+0x370>)
 800e746:	2200      	movs	r2, #0
 800e748:	4650      	mov	r0, sl
 800e74a:	4659      	mov	r1, fp
 800e74c:	f7f1 ff74 	bl	8000638 <__aeabi_dmul>
 800e750:	4652      	mov	r2, sl
 800e752:	465b      	mov	r3, fp
 800e754:	f7f1 ff70 	bl	8000638 <__aeabi_dmul>
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	4606      	mov	r6, r0
 800e75e:	460f      	mov	r7, r1
 800e760:	4640      	mov	r0, r8
 800e762:	4649      	mov	r1, r9
 800e764:	f7f1 fdb2 	bl	80002cc <__adddf3>
 800e768:	ec53 2b18 	vmov	r2, r3, d8
 800e76c:	f7f1 ff64 	bl	8000638 <__aeabi_dmul>
 800e770:	4680      	mov	r8, r0
 800e772:	4689      	mov	r9, r1
 800e774:	b964      	cbnz	r4, 800e790 <__ieee754_log+0x280>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4630      	mov	r0, r6
 800e77c:	4639      	mov	r1, r7
 800e77e:	f7f1 fda3 	bl	80002c8 <__aeabi_dsub>
 800e782:	4602      	mov	r2, r0
 800e784:	460b      	mov	r3, r1
 800e786:	4650      	mov	r0, sl
 800e788:	4659      	mov	r1, fp
 800e78a:	f7f1 fd9d 	bl	80002c8 <__aeabi_dsub>
 800e78e:	e6d6      	b.n	800e53e <__ieee754_log+0x2e>
 800e790:	a321      	add	r3, pc, #132	; (adr r3, 800e818 <__ieee754_log+0x308>)
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	ec51 0b19 	vmov	r0, r1, d9
 800e79a:	f7f1 ff4d 	bl	8000638 <__aeabi_dmul>
 800e79e:	a320      	add	r3, pc, #128	; (adr r3, 800e820 <__ieee754_log+0x310>)
 800e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	460d      	mov	r5, r1
 800e7a8:	ec51 0b19 	vmov	r0, r1, d9
 800e7ac:	f7f1 ff44 	bl	8000638 <__aeabi_dmul>
 800e7b0:	4642      	mov	r2, r8
 800e7b2:	464b      	mov	r3, r9
 800e7b4:	f7f1 fd8a 	bl	80002cc <__adddf3>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4630      	mov	r0, r6
 800e7be:	4639      	mov	r1, r7
 800e7c0:	f7f1 fd82 	bl	80002c8 <__aeabi_dsub>
 800e7c4:	4652      	mov	r2, sl
 800e7c6:	465b      	mov	r3, fp
 800e7c8:	f7f1 fd7e 	bl	80002c8 <__aeabi_dsub>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	e7d9      	b.n	800e78a <__ieee754_log+0x27a>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	4650      	mov	r0, sl
 800e7dc:	4659      	mov	r1, fp
 800e7de:	f7f1 fd73 	bl	80002c8 <__aeabi_dsub>
 800e7e2:	ec53 2b18 	vmov	r2, r3, d8
 800e7e6:	f7f1 ff27 	bl	8000638 <__aeabi_dmul>
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	460f      	mov	r7, r1
 800e7ee:	2c00      	cmp	r4, #0
 800e7f0:	f43f af23 	beq.w	800e63a <__ieee754_log+0x12a>
 800e7f4:	a308      	add	r3, pc, #32	; (adr r3, 800e818 <__ieee754_log+0x308>)
 800e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fa:	ec51 0b19 	vmov	r0, r1, d9
 800e7fe:	f7f1 ff1b 	bl	8000638 <__aeabi_dmul>
 800e802:	a307      	add	r3, pc, #28	; (adr r3, 800e820 <__ieee754_log+0x310>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	4604      	mov	r4, r0
 800e80a:	460d      	mov	r5, r1
 800e80c:	ec51 0b19 	vmov	r0, r1, d9
 800e810:	e727      	b.n	800e662 <__ieee754_log+0x152>
 800e812:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e868 <__ieee754_log+0x358>
 800e816:	e694      	b.n	800e542 <__ieee754_log+0x32>
 800e818:	fee00000 	.word	0xfee00000
 800e81c:	3fe62e42 	.word	0x3fe62e42
 800e820:	35793c76 	.word	0x35793c76
 800e824:	3dea39ef 	.word	0x3dea39ef
 800e828:	55555555 	.word	0x55555555
 800e82c:	3fd55555 	.word	0x3fd55555
 800e830:	df3e5244 	.word	0xdf3e5244
 800e834:	3fc2f112 	.word	0x3fc2f112
 800e838:	96cb03de 	.word	0x96cb03de
 800e83c:	3fc74664 	.word	0x3fc74664
 800e840:	94229359 	.word	0x94229359
 800e844:	3fd24924 	.word	0x3fd24924
 800e848:	55555593 	.word	0x55555593
 800e84c:	3fe55555 	.word	0x3fe55555
 800e850:	d078c69f 	.word	0xd078c69f
 800e854:	3fc39a09 	.word	0x3fc39a09
 800e858:	1d8e78af 	.word	0x1d8e78af
 800e85c:	3fcc71c5 	.word	0x3fcc71c5
 800e860:	9997fa04 	.word	0x9997fa04
 800e864:	3fd99999 	.word	0x3fd99999
	...
 800e870:	c3500000 	.word	0xc3500000
 800e874:	43500000 	.word	0x43500000
 800e878:	7fefffff 	.word	0x7fefffff
 800e87c:	3ff00000 	.word	0x3ff00000
 800e880:	3fe00000 	.word	0x3fe00000
 800e884:	00000000 	.word	0x00000000

0800e888 <__ieee754_pow>:
 800e888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88c:	ed2d 8b06 	vpush	{d8-d10}
 800e890:	b089      	sub	sp, #36	; 0x24
 800e892:	ed8d 1b00 	vstr	d1, [sp]
 800e896:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e89a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e89e:	ea58 0102 	orrs.w	r1, r8, r2
 800e8a2:	ec57 6b10 	vmov	r6, r7, d0
 800e8a6:	d115      	bne.n	800e8d4 <__ieee754_pow+0x4c>
 800e8a8:	19b3      	adds	r3, r6, r6
 800e8aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e8ae:	4152      	adcs	r2, r2
 800e8b0:	4299      	cmp	r1, r3
 800e8b2:	4b89      	ldr	r3, [pc, #548]	; (800ead8 <__ieee754_pow+0x250>)
 800e8b4:	4193      	sbcs	r3, r2
 800e8b6:	f080 84d2 	bcs.w	800f25e <__ieee754_pow+0x9d6>
 800e8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8be:	4630      	mov	r0, r6
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	f7f1 fd03 	bl	80002cc <__adddf3>
 800e8c6:	ec41 0b10 	vmov	d0, r0, r1
 800e8ca:	b009      	add	sp, #36	; 0x24
 800e8cc:	ecbd 8b06 	vpop	{d8-d10}
 800e8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d4:	4b81      	ldr	r3, [pc, #516]	; (800eadc <__ieee754_pow+0x254>)
 800e8d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e8da:	429c      	cmp	r4, r3
 800e8dc:	ee10 aa10 	vmov	sl, s0
 800e8e0:	463d      	mov	r5, r7
 800e8e2:	dc06      	bgt.n	800e8f2 <__ieee754_pow+0x6a>
 800e8e4:	d101      	bne.n	800e8ea <__ieee754_pow+0x62>
 800e8e6:	2e00      	cmp	r6, #0
 800e8e8:	d1e7      	bne.n	800e8ba <__ieee754_pow+0x32>
 800e8ea:	4598      	cmp	r8, r3
 800e8ec:	dc01      	bgt.n	800e8f2 <__ieee754_pow+0x6a>
 800e8ee:	d10f      	bne.n	800e910 <__ieee754_pow+0x88>
 800e8f0:	b172      	cbz	r2, 800e910 <__ieee754_pow+0x88>
 800e8f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e8f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e8fa:	ea55 050a 	orrs.w	r5, r5, sl
 800e8fe:	d1dc      	bne.n	800e8ba <__ieee754_pow+0x32>
 800e900:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e904:	18db      	adds	r3, r3, r3
 800e906:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e90a:	4152      	adcs	r2, r2
 800e90c:	429d      	cmp	r5, r3
 800e90e:	e7d0      	b.n	800e8b2 <__ieee754_pow+0x2a>
 800e910:	2d00      	cmp	r5, #0
 800e912:	da3b      	bge.n	800e98c <__ieee754_pow+0x104>
 800e914:	4b72      	ldr	r3, [pc, #456]	; (800eae0 <__ieee754_pow+0x258>)
 800e916:	4598      	cmp	r8, r3
 800e918:	dc51      	bgt.n	800e9be <__ieee754_pow+0x136>
 800e91a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e91e:	4598      	cmp	r8, r3
 800e920:	f340 84ac 	ble.w	800f27c <__ieee754_pow+0x9f4>
 800e924:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e92c:	2b14      	cmp	r3, #20
 800e92e:	dd0f      	ble.n	800e950 <__ieee754_pow+0xc8>
 800e930:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e934:	fa22 f103 	lsr.w	r1, r2, r3
 800e938:	fa01 f303 	lsl.w	r3, r1, r3
 800e93c:	4293      	cmp	r3, r2
 800e93e:	f040 849d 	bne.w	800f27c <__ieee754_pow+0x9f4>
 800e942:	f001 0101 	and.w	r1, r1, #1
 800e946:	f1c1 0302 	rsb	r3, r1, #2
 800e94a:	9304      	str	r3, [sp, #16]
 800e94c:	b182      	cbz	r2, 800e970 <__ieee754_pow+0xe8>
 800e94e:	e05f      	b.n	800ea10 <__ieee754_pow+0x188>
 800e950:	2a00      	cmp	r2, #0
 800e952:	d15b      	bne.n	800ea0c <__ieee754_pow+0x184>
 800e954:	f1c3 0314 	rsb	r3, r3, #20
 800e958:	fa48 f103 	asr.w	r1, r8, r3
 800e95c:	fa01 f303 	lsl.w	r3, r1, r3
 800e960:	4543      	cmp	r3, r8
 800e962:	f040 8488 	bne.w	800f276 <__ieee754_pow+0x9ee>
 800e966:	f001 0101 	and.w	r1, r1, #1
 800e96a:	f1c1 0302 	rsb	r3, r1, #2
 800e96e:	9304      	str	r3, [sp, #16]
 800e970:	4b5c      	ldr	r3, [pc, #368]	; (800eae4 <__ieee754_pow+0x25c>)
 800e972:	4598      	cmp	r8, r3
 800e974:	d132      	bne.n	800e9dc <__ieee754_pow+0x154>
 800e976:	f1b9 0f00 	cmp.w	r9, #0
 800e97a:	f280 8478 	bge.w	800f26e <__ieee754_pow+0x9e6>
 800e97e:	4959      	ldr	r1, [pc, #356]	; (800eae4 <__ieee754_pow+0x25c>)
 800e980:	4632      	mov	r2, r6
 800e982:	463b      	mov	r3, r7
 800e984:	2000      	movs	r0, #0
 800e986:	f7f1 ff81 	bl	800088c <__aeabi_ddiv>
 800e98a:	e79c      	b.n	800e8c6 <__ieee754_pow+0x3e>
 800e98c:	2300      	movs	r3, #0
 800e98e:	9304      	str	r3, [sp, #16]
 800e990:	2a00      	cmp	r2, #0
 800e992:	d13d      	bne.n	800ea10 <__ieee754_pow+0x188>
 800e994:	4b51      	ldr	r3, [pc, #324]	; (800eadc <__ieee754_pow+0x254>)
 800e996:	4598      	cmp	r8, r3
 800e998:	d1ea      	bne.n	800e970 <__ieee754_pow+0xe8>
 800e99a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e99e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e9a2:	ea53 030a 	orrs.w	r3, r3, sl
 800e9a6:	f000 845a 	beq.w	800f25e <__ieee754_pow+0x9d6>
 800e9aa:	4b4f      	ldr	r3, [pc, #316]	; (800eae8 <__ieee754_pow+0x260>)
 800e9ac:	429c      	cmp	r4, r3
 800e9ae:	dd08      	ble.n	800e9c2 <__ieee754_pow+0x13a>
 800e9b0:	f1b9 0f00 	cmp.w	r9, #0
 800e9b4:	f2c0 8457 	blt.w	800f266 <__ieee754_pow+0x9de>
 800e9b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9bc:	e783      	b.n	800e8c6 <__ieee754_pow+0x3e>
 800e9be:	2302      	movs	r3, #2
 800e9c0:	e7e5      	b.n	800e98e <__ieee754_pow+0x106>
 800e9c2:	f1b9 0f00 	cmp.w	r9, #0
 800e9c6:	f04f 0000 	mov.w	r0, #0
 800e9ca:	f04f 0100 	mov.w	r1, #0
 800e9ce:	f6bf af7a 	bge.w	800e8c6 <__ieee754_pow+0x3e>
 800e9d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e9d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e9da:	e774      	b.n	800e8c6 <__ieee754_pow+0x3e>
 800e9dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e9e0:	d106      	bne.n	800e9f0 <__ieee754_pow+0x168>
 800e9e2:	4632      	mov	r2, r6
 800e9e4:	463b      	mov	r3, r7
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	4639      	mov	r1, r7
 800e9ea:	f7f1 fe25 	bl	8000638 <__aeabi_dmul>
 800e9ee:	e76a      	b.n	800e8c6 <__ieee754_pow+0x3e>
 800e9f0:	4b3e      	ldr	r3, [pc, #248]	; (800eaec <__ieee754_pow+0x264>)
 800e9f2:	4599      	cmp	r9, r3
 800e9f4:	d10c      	bne.n	800ea10 <__ieee754_pow+0x188>
 800e9f6:	2d00      	cmp	r5, #0
 800e9f8:	db0a      	blt.n	800ea10 <__ieee754_pow+0x188>
 800e9fa:	ec47 6b10 	vmov	d0, r6, r7
 800e9fe:	b009      	add	sp, #36	; 0x24
 800ea00:	ecbd 8b06 	vpop	{d8-d10}
 800ea04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea08:	f000 bc6c 	b.w	800f2e4 <__ieee754_sqrt>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	9304      	str	r3, [sp, #16]
 800ea10:	ec47 6b10 	vmov	d0, r6, r7
 800ea14:	f000 fd4b 	bl	800f4ae <fabs>
 800ea18:	ec51 0b10 	vmov	r0, r1, d0
 800ea1c:	f1ba 0f00 	cmp.w	sl, #0
 800ea20:	d129      	bne.n	800ea76 <__ieee754_pow+0x1ee>
 800ea22:	b124      	cbz	r4, 800ea2e <__ieee754_pow+0x1a6>
 800ea24:	4b2f      	ldr	r3, [pc, #188]	; (800eae4 <__ieee754_pow+0x25c>)
 800ea26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d123      	bne.n	800ea76 <__ieee754_pow+0x1ee>
 800ea2e:	f1b9 0f00 	cmp.w	r9, #0
 800ea32:	da05      	bge.n	800ea40 <__ieee754_pow+0x1b8>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	2000      	movs	r0, #0
 800ea3a:	492a      	ldr	r1, [pc, #168]	; (800eae4 <__ieee754_pow+0x25c>)
 800ea3c:	f7f1 ff26 	bl	800088c <__aeabi_ddiv>
 800ea40:	2d00      	cmp	r5, #0
 800ea42:	f6bf af40 	bge.w	800e8c6 <__ieee754_pow+0x3e>
 800ea46:	9b04      	ldr	r3, [sp, #16]
 800ea48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ea4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ea50:	4323      	orrs	r3, r4
 800ea52:	d108      	bne.n	800ea66 <__ieee754_pow+0x1de>
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4610      	mov	r0, r2
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	f7f1 fc34 	bl	80002c8 <__aeabi_dsub>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	e78f      	b.n	800e986 <__ieee754_pow+0xfe>
 800ea66:	9b04      	ldr	r3, [sp, #16]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	f47f af2c 	bne.w	800e8c6 <__ieee754_pow+0x3e>
 800ea6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea72:	4619      	mov	r1, r3
 800ea74:	e727      	b.n	800e8c6 <__ieee754_pow+0x3e>
 800ea76:	0feb      	lsrs	r3, r5, #31
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	9306      	str	r3, [sp, #24]
 800ea7c:	9a06      	ldr	r2, [sp, #24]
 800ea7e:	9b04      	ldr	r3, [sp, #16]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	d102      	bne.n	800ea8a <__ieee754_pow+0x202>
 800ea84:	4632      	mov	r2, r6
 800ea86:	463b      	mov	r3, r7
 800ea88:	e7e6      	b.n	800ea58 <__ieee754_pow+0x1d0>
 800ea8a:	4b19      	ldr	r3, [pc, #100]	; (800eaf0 <__ieee754_pow+0x268>)
 800ea8c:	4598      	cmp	r8, r3
 800ea8e:	f340 80fb 	ble.w	800ec88 <__ieee754_pow+0x400>
 800ea92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ea96:	4598      	cmp	r8, r3
 800ea98:	4b13      	ldr	r3, [pc, #76]	; (800eae8 <__ieee754_pow+0x260>)
 800ea9a:	dd0c      	ble.n	800eab6 <__ieee754_pow+0x22e>
 800ea9c:	429c      	cmp	r4, r3
 800ea9e:	dc0f      	bgt.n	800eac0 <__ieee754_pow+0x238>
 800eaa0:	f1b9 0f00 	cmp.w	r9, #0
 800eaa4:	da0f      	bge.n	800eac6 <__ieee754_pow+0x23e>
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	b009      	add	sp, #36	; 0x24
 800eaaa:	ecbd 8b06 	vpop	{d8-d10}
 800eaae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab2:	f000 bcf3 	b.w	800f49c <__math_oflow>
 800eab6:	429c      	cmp	r4, r3
 800eab8:	dbf2      	blt.n	800eaa0 <__ieee754_pow+0x218>
 800eaba:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <__ieee754_pow+0x25c>)
 800eabc:	429c      	cmp	r4, r3
 800eabe:	dd19      	ble.n	800eaf4 <__ieee754_pow+0x26c>
 800eac0:	f1b9 0f00 	cmp.w	r9, #0
 800eac4:	dcef      	bgt.n	800eaa6 <__ieee754_pow+0x21e>
 800eac6:	2000      	movs	r0, #0
 800eac8:	b009      	add	sp, #36	; 0x24
 800eaca:	ecbd 8b06 	vpop	{d8-d10}
 800eace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead2:	f000 bcda 	b.w	800f48a <__math_uflow>
 800ead6:	bf00      	nop
 800ead8:	fff00000 	.word	0xfff00000
 800eadc:	7ff00000 	.word	0x7ff00000
 800eae0:	433fffff 	.word	0x433fffff
 800eae4:	3ff00000 	.word	0x3ff00000
 800eae8:	3fefffff 	.word	0x3fefffff
 800eaec:	3fe00000 	.word	0x3fe00000
 800eaf0:	41e00000 	.word	0x41e00000
 800eaf4:	4b60      	ldr	r3, [pc, #384]	; (800ec78 <__ieee754_pow+0x3f0>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f7f1 fbe6 	bl	80002c8 <__aeabi_dsub>
 800eafc:	a354      	add	r3, pc, #336	; (adr r3, 800ec50 <__ieee754_pow+0x3c8>)
 800eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb02:	4604      	mov	r4, r0
 800eb04:	460d      	mov	r5, r1
 800eb06:	f7f1 fd97 	bl	8000638 <__aeabi_dmul>
 800eb0a:	a353      	add	r3, pc, #332	; (adr r3, 800ec58 <__ieee754_pow+0x3d0>)
 800eb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb10:	4606      	mov	r6, r0
 800eb12:	460f      	mov	r7, r1
 800eb14:	4620      	mov	r0, r4
 800eb16:	4629      	mov	r1, r5
 800eb18:	f7f1 fd8e 	bl	8000638 <__aeabi_dmul>
 800eb1c:	4b57      	ldr	r3, [pc, #348]	; (800ec7c <__ieee754_pow+0x3f4>)
 800eb1e:	4682      	mov	sl, r0
 800eb20:	468b      	mov	fp, r1
 800eb22:	2200      	movs	r2, #0
 800eb24:	4620      	mov	r0, r4
 800eb26:	4629      	mov	r1, r5
 800eb28:	f7f1 fd86 	bl	8000638 <__aeabi_dmul>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	a14b      	add	r1, pc, #300	; (adr r1, 800ec60 <__ieee754_pow+0x3d8>)
 800eb32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb36:	f7f1 fbc7 	bl	80002c8 <__aeabi_dsub>
 800eb3a:	4622      	mov	r2, r4
 800eb3c:	462b      	mov	r3, r5
 800eb3e:	f7f1 fd7b 	bl	8000638 <__aeabi_dmul>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	2000      	movs	r0, #0
 800eb48:	494d      	ldr	r1, [pc, #308]	; (800ec80 <__ieee754_pow+0x3f8>)
 800eb4a:	f7f1 fbbd 	bl	80002c8 <__aeabi_dsub>
 800eb4e:	4622      	mov	r2, r4
 800eb50:	4680      	mov	r8, r0
 800eb52:	4689      	mov	r9, r1
 800eb54:	462b      	mov	r3, r5
 800eb56:	4620      	mov	r0, r4
 800eb58:	4629      	mov	r1, r5
 800eb5a:	f7f1 fd6d 	bl	8000638 <__aeabi_dmul>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	4640      	mov	r0, r8
 800eb64:	4649      	mov	r1, r9
 800eb66:	f7f1 fd67 	bl	8000638 <__aeabi_dmul>
 800eb6a:	a33f      	add	r3, pc, #252	; (adr r3, 800ec68 <__ieee754_pow+0x3e0>)
 800eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb70:	f7f1 fd62 	bl	8000638 <__aeabi_dmul>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4650      	mov	r0, sl
 800eb7a:	4659      	mov	r1, fp
 800eb7c:	f7f1 fba4 	bl	80002c8 <__aeabi_dsub>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	4680      	mov	r8, r0
 800eb86:	4689      	mov	r9, r1
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	f7f1 fb9e 	bl	80002cc <__adddf3>
 800eb90:	2000      	movs	r0, #0
 800eb92:	4632      	mov	r2, r6
 800eb94:	463b      	mov	r3, r7
 800eb96:	4604      	mov	r4, r0
 800eb98:	460d      	mov	r5, r1
 800eb9a:	f7f1 fb95 	bl	80002c8 <__aeabi_dsub>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	4640      	mov	r0, r8
 800eba4:	4649      	mov	r1, r9
 800eba6:	f7f1 fb8f 	bl	80002c8 <__aeabi_dsub>
 800ebaa:	9b04      	ldr	r3, [sp, #16]
 800ebac:	9a06      	ldr	r2, [sp, #24]
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	4682      	mov	sl, r0
 800ebb4:	468b      	mov	fp, r1
 800ebb6:	f040 81e7 	bne.w	800ef88 <__ieee754_pow+0x700>
 800ebba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ec70 <__ieee754_pow+0x3e8>
 800ebbe:	eeb0 8a47 	vmov.f32	s16, s14
 800ebc2:	eef0 8a67 	vmov.f32	s17, s15
 800ebc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ebca:	2600      	movs	r6, #0
 800ebcc:	4632      	mov	r2, r6
 800ebce:	463b      	mov	r3, r7
 800ebd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebd4:	f7f1 fb78 	bl	80002c8 <__aeabi_dsub>
 800ebd8:	4622      	mov	r2, r4
 800ebda:	462b      	mov	r3, r5
 800ebdc:	f7f1 fd2c 	bl	8000638 <__aeabi_dmul>
 800ebe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebe4:	4680      	mov	r8, r0
 800ebe6:	4689      	mov	r9, r1
 800ebe8:	4650      	mov	r0, sl
 800ebea:	4659      	mov	r1, fp
 800ebec:	f7f1 fd24 	bl	8000638 <__aeabi_dmul>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	4640      	mov	r0, r8
 800ebf6:	4649      	mov	r1, r9
 800ebf8:	f7f1 fb68 	bl	80002cc <__adddf3>
 800ebfc:	4632      	mov	r2, r6
 800ebfe:	463b      	mov	r3, r7
 800ec00:	4680      	mov	r8, r0
 800ec02:	4689      	mov	r9, r1
 800ec04:	4620      	mov	r0, r4
 800ec06:	4629      	mov	r1, r5
 800ec08:	f7f1 fd16 	bl	8000638 <__aeabi_dmul>
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4604      	mov	r4, r0
 800ec10:	460d      	mov	r5, r1
 800ec12:	4602      	mov	r2, r0
 800ec14:	4649      	mov	r1, r9
 800ec16:	4640      	mov	r0, r8
 800ec18:	f7f1 fb58 	bl	80002cc <__adddf3>
 800ec1c:	4b19      	ldr	r3, [pc, #100]	; (800ec84 <__ieee754_pow+0x3fc>)
 800ec1e:	4299      	cmp	r1, r3
 800ec20:	ec45 4b19 	vmov	d9, r4, r5
 800ec24:	4606      	mov	r6, r0
 800ec26:	460f      	mov	r7, r1
 800ec28:	468b      	mov	fp, r1
 800ec2a:	f340 82f1 	ble.w	800f210 <__ieee754_pow+0x988>
 800ec2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ec32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ec36:	4303      	orrs	r3, r0
 800ec38:	f000 81e4 	beq.w	800f004 <__ieee754_pow+0x77c>
 800ec3c:	ec51 0b18 	vmov	r0, r1, d8
 800ec40:	2200      	movs	r2, #0
 800ec42:	2300      	movs	r3, #0
 800ec44:	f7f1 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 800ec48:	3800      	subs	r0, #0
 800ec4a:	bf18      	it	ne
 800ec4c:	2001      	movne	r0, #1
 800ec4e:	e72b      	b.n	800eaa8 <__ieee754_pow+0x220>
 800ec50:	60000000 	.word	0x60000000
 800ec54:	3ff71547 	.word	0x3ff71547
 800ec58:	f85ddf44 	.word	0xf85ddf44
 800ec5c:	3e54ae0b 	.word	0x3e54ae0b
 800ec60:	55555555 	.word	0x55555555
 800ec64:	3fd55555 	.word	0x3fd55555
 800ec68:	652b82fe 	.word	0x652b82fe
 800ec6c:	3ff71547 	.word	0x3ff71547
 800ec70:	00000000 	.word	0x00000000
 800ec74:	bff00000 	.word	0xbff00000
 800ec78:	3ff00000 	.word	0x3ff00000
 800ec7c:	3fd00000 	.word	0x3fd00000
 800ec80:	3fe00000 	.word	0x3fe00000
 800ec84:	408fffff 	.word	0x408fffff
 800ec88:	4bd5      	ldr	r3, [pc, #852]	; (800efe0 <__ieee754_pow+0x758>)
 800ec8a:	402b      	ands	r3, r5
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	b92b      	cbnz	r3, 800ec9c <__ieee754_pow+0x414>
 800ec90:	4bd4      	ldr	r3, [pc, #848]	; (800efe4 <__ieee754_pow+0x75c>)
 800ec92:	f7f1 fcd1 	bl	8000638 <__aeabi_dmul>
 800ec96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	1523      	asrs	r3, r4, #20
 800ec9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eca2:	4413      	add	r3, r2
 800eca4:	9305      	str	r3, [sp, #20]
 800eca6:	4bd0      	ldr	r3, [pc, #832]	; (800efe8 <__ieee754_pow+0x760>)
 800eca8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ecac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ecb0:	429c      	cmp	r4, r3
 800ecb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ecb6:	dd08      	ble.n	800ecca <__ieee754_pow+0x442>
 800ecb8:	4bcc      	ldr	r3, [pc, #816]	; (800efec <__ieee754_pow+0x764>)
 800ecba:	429c      	cmp	r4, r3
 800ecbc:	f340 8162 	ble.w	800ef84 <__ieee754_pow+0x6fc>
 800ecc0:	9b05      	ldr	r3, [sp, #20]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	9305      	str	r3, [sp, #20]
 800ecc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ecca:	2400      	movs	r4, #0
 800eccc:	00e3      	lsls	r3, r4, #3
 800ecce:	9307      	str	r3, [sp, #28]
 800ecd0:	4bc7      	ldr	r3, [pc, #796]	; (800eff0 <__ieee754_pow+0x768>)
 800ecd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecd6:	ed93 7b00 	vldr	d7, [r3]
 800ecda:	4629      	mov	r1, r5
 800ecdc:	ec53 2b17 	vmov	r2, r3, d7
 800ece0:	eeb0 9a47 	vmov.f32	s18, s14
 800ece4:	eef0 9a67 	vmov.f32	s19, s15
 800ece8:	4682      	mov	sl, r0
 800ecea:	f7f1 faed 	bl	80002c8 <__aeabi_dsub>
 800ecee:	4652      	mov	r2, sl
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	462b      	mov	r3, r5
 800ecf6:	ec51 0b19 	vmov	r0, r1, d9
 800ecfa:	f7f1 fae7 	bl	80002cc <__adddf3>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	2000      	movs	r0, #0
 800ed04:	49bb      	ldr	r1, [pc, #748]	; (800eff4 <__ieee754_pow+0x76c>)
 800ed06:	f7f1 fdc1 	bl	800088c <__aeabi_ddiv>
 800ed0a:	ec41 0b1a 	vmov	d10, r0, r1
 800ed0e:	4602      	mov	r2, r0
 800ed10:	460b      	mov	r3, r1
 800ed12:	4630      	mov	r0, r6
 800ed14:	4639      	mov	r1, r7
 800ed16:	f7f1 fc8f 	bl	8000638 <__aeabi_dmul>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed20:	9302      	str	r3, [sp, #8]
 800ed22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ed26:	46ab      	mov	fp, r5
 800ed28:	106d      	asrs	r5, r5, #1
 800ed2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ed2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ed32:	ec41 0b18 	vmov	d8, r0, r1
 800ed36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	4649      	mov	r1, r9
 800ed40:	4614      	mov	r4, r2
 800ed42:	461d      	mov	r5, r3
 800ed44:	f7f1 fc78 	bl	8000638 <__aeabi_dmul>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	4639      	mov	r1, r7
 800ed50:	f7f1 faba 	bl	80002c8 <__aeabi_dsub>
 800ed54:	ec53 2b19 	vmov	r2, r3, d9
 800ed58:	4606      	mov	r6, r0
 800ed5a:	460f      	mov	r7, r1
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	4629      	mov	r1, r5
 800ed60:	f7f1 fab2 	bl	80002c8 <__aeabi_dsub>
 800ed64:	4602      	mov	r2, r0
 800ed66:	460b      	mov	r3, r1
 800ed68:	4650      	mov	r0, sl
 800ed6a:	4659      	mov	r1, fp
 800ed6c:	f7f1 faac 	bl	80002c8 <__aeabi_dsub>
 800ed70:	4642      	mov	r2, r8
 800ed72:	464b      	mov	r3, r9
 800ed74:	f7f1 fc60 	bl	8000638 <__aeabi_dmul>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	4639      	mov	r1, r7
 800ed80:	f7f1 faa2 	bl	80002c8 <__aeabi_dsub>
 800ed84:	ec53 2b1a 	vmov	r2, r3, d10
 800ed88:	f7f1 fc56 	bl	8000638 <__aeabi_dmul>
 800ed8c:	ec53 2b18 	vmov	r2, r3, d8
 800ed90:	ec41 0b19 	vmov	d9, r0, r1
 800ed94:	ec51 0b18 	vmov	r0, r1, d8
 800ed98:	f7f1 fc4e 	bl	8000638 <__aeabi_dmul>
 800ed9c:	a37c      	add	r3, pc, #496	; (adr r3, 800ef90 <__ieee754_pow+0x708>)
 800ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda2:	4604      	mov	r4, r0
 800eda4:	460d      	mov	r5, r1
 800eda6:	f7f1 fc47 	bl	8000638 <__aeabi_dmul>
 800edaa:	a37b      	add	r3, pc, #492	; (adr r3, 800ef98 <__ieee754_pow+0x710>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa8c 	bl	80002cc <__adddf3>
 800edb4:	4622      	mov	r2, r4
 800edb6:	462b      	mov	r3, r5
 800edb8:	f7f1 fc3e 	bl	8000638 <__aeabi_dmul>
 800edbc:	a378      	add	r3, pc, #480	; (adr r3, 800efa0 <__ieee754_pow+0x718>)
 800edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc2:	f7f1 fa83 	bl	80002cc <__adddf3>
 800edc6:	4622      	mov	r2, r4
 800edc8:	462b      	mov	r3, r5
 800edca:	f7f1 fc35 	bl	8000638 <__aeabi_dmul>
 800edce:	a376      	add	r3, pc, #472	; (adr r3, 800efa8 <__ieee754_pow+0x720>)
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	f7f1 fa7a 	bl	80002cc <__adddf3>
 800edd8:	4622      	mov	r2, r4
 800edda:	462b      	mov	r3, r5
 800eddc:	f7f1 fc2c 	bl	8000638 <__aeabi_dmul>
 800ede0:	a373      	add	r3, pc, #460	; (adr r3, 800efb0 <__ieee754_pow+0x728>)
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	f7f1 fa71 	bl	80002cc <__adddf3>
 800edea:	4622      	mov	r2, r4
 800edec:	462b      	mov	r3, r5
 800edee:	f7f1 fc23 	bl	8000638 <__aeabi_dmul>
 800edf2:	a371      	add	r3, pc, #452	; (adr r3, 800efb8 <__ieee754_pow+0x730>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	f7f1 fa68 	bl	80002cc <__adddf3>
 800edfc:	4622      	mov	r2, r4
 800edfe:	4606      	mov	r6, r0
 800ee00:	460f      	mov	r7, r1
 800ee02:	462b      	mov	r3, r5
 800ee04:	4620      	mov	r0, r4
 800ee06:	4629      	mov	r1, r5
 800ee08:	f7f1 fc16 	bl	8000638 <__aeabi_dmul>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	4630      	mov	r0, r6
 800ee12:	4639      	mov	r1, r7
 800ee14:	f7f1 fc10 	bl	8000638 <__aeabi_dmul>
 800ee18:	4642      	mov	r2, r8
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	460d      	mov	r5, r1
 800ee1e:	464b      	mov	r3, r9
 800ee20:	ec51 0b18 	vmov	r0, r1, d8
 800ee24:	f7f1 fa52 	bl	80002cc <__adddf3>
 800ee28:	ec53 2b19 	vmov	r2, r3, d9
 800ee2c:	f7f1 fc04 	bl	8000638 <__aeabi_dmul>
 800ee30:	4622      	mov	r2, r4
 800ee32:	462b      	mov	r3, r5
 800ee34:	f7f1 fa4a 	bl	80002cc <__adddf3>
 800ee38:	4642      	mov	r2, r8
 800ee3a:	4682      	mov	sl, r0
 800ee3c:	468b      	mov	fp, r1
 800ee3e:	464b      	mov	r3, r9
 800ee40:	4640      	mov	r0, r8
 800ee42:	4649      	mov	r1, r9
 800ee44:	f7f1 fbf8 	bl	8000638 <__aeabi_dmul>
 800ee48:	4b6b      	ldr	r3, [pc, #428]	; (800eff8 <__ieee754_pow+0x770>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	460f      	mov	r7, r1
 800ee50:	f7f1 fa3c 	bl	80002cc <__adddf3>
 800ee54:	4652      	mov	r2, sl
 800ee56:	465b      	mov	r3, fp
 800ee58:	f7f1 fa38 	bl	80002cc <__adddf3>
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	460d      	mov	r5, r1
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	4640      	mov	r0, r8
 800ee68:	4649      	mov	r1, r9
 800ee6a:	f7f1 fbe5 	bl	8000638 <__aeabi_dmul>
 800ee6e:	4b62      	ldr	r3, [pc, #392]	; (800eff8 <__ieee754_pow+0x770>)
 800ee70:	4680      	mov	r8, r0
 800ee72:	4689      	mov	r9, r1
 800ee74:	2200      	movs	r2, #0
 800ee76:	4620      	mov	r0, r4
 800ee78:	4629      	mov	r1, r5
 800ee7a:	f7f1 fa25 	bl	80002c8 <__aeabi_dsub>
 800ee7e:	4632      	mov	r2, r6
 800ee80:	463b      	mov	r3, r7
 800ee82:	f7f1 fa21 	bl	80002c8 <__aeabi_dsub>
 800ee86:	4602      	mov	r2, r0
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	4659      	mov	r1, fp
 800ee8e:	f7f1 fa1b 	bl	80002c8 <__aeabi_dsub>
 800ee92:	ec53 2b18 	vmov	r2, r3, d8
 800ee96:	f7f1 fbcf 	bl	8000638 <__aeabi_dmul>
 800ee9a:	4622      	mov	r2, r4
 800ee9c:	4606      	mov	r6, r0
 800ee9e:	460f      	mov	r7, r1
 800eea0:	462b      	mov	r3, r5
 800eea2:	ec51 0b19 	vmov	r0, r1, d9
 800eea6:	f7f1 fbc7 	bl	8000638 <__aeabi_dmul>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	460b      	mov	r3, r1
 800eeae:	4630      	mov	r0, r6
 800eeb0:	4639      	mov	r1, r7
 800eeb2:	f7f1 fa0b 	bl	80002cc <__adddf3>
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	460f      	mov	r7, r1
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	4640      	mov	r0, r8
 800eec0:	4649      	mov	r1, r9
 800eec2:	f7f1 fa03 	bl	80002cc <__adddf3>
 800eec6:	a33e      	add	r3, pc, #248	; (adr r3, 800efc0 <__ieee754_pow+0x738>)
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	2000      	movs	r0, #0
 800eece:	4604      	mov	r4, r0
 800eed0:	460d      	mov	r5, r1
 800eed2:	f7f1 fbb1 	bl	8000638 <__aeabi_dmul>
 800eed6:	4642      	mov	r2, r8
 800eed8:	ec41 0b18 	vmov	d8, r0, r1
 800eedc:	464b      	mov	r3, r9
 800eede:	4620      	mov	r0, r4
 800eee0:	4629      	mov	r1, r5
 800eee2:	f7f1 f9f1 	bl	80002c8 <__aeabi_dsub>
 800eee6:	4602      	mov	r2, r0
 800eee8:	460b      	mov	r3, r1
 800eeea:	4630      	mov	r0, r6
 800eeec:	4639      	mov	r1, r7
 800eeee:	f7f1 f9eb 	bl	80002c8 <__aeabi_dsub>
 800eef2:	a335      	add	r3, pc, #212	; (adr r3, 800efc8 <__ieee754_pow+0x740>)
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 fb9e 	bl	8000638 <__aeabi_dmul>
 800eefc:	a334      	add	r3, pc, #208	; (adr r3, 800efd0 <__ieee754_pow+0x748>)
 800eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef02:	4606      	mov	r6, r0
 800ef04:	460f      	mov	r7, r1
 800ef06:	4620      	mov	r0, r4
 800ef08:	4629      	mov	r1, r5
 800ef0a:	f7f1 fb95 	bl	8000638 <__aeabi_dmul>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	4630      	mov	r0, r6
 800ef14:	4639      	mov	r1, r7
 800ef16:	f7f1 f9d9 	bl	80002cc <__adddf3>
 800ef1a:	9a07      	ldr	r2, [sp, #28]
 800ef1c:	4b37      	ldr	r3, [pc, #220]	; (800effc <__ieee754_pow+0x774>)
 800ef1e:	4413      	add	r3, r2
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	f7f1 f9d2 	bl	80002cc <__adddf3>
 800ef28:	4682      	mov	sl, r0
 800ef2a:	9805      	ldr	r0, [sp, #20]
 800ef2c:	468b      	mov	fp, r1
 800ef2e:	f7f1 fb19 	bl	8000564 <__aeabi_i2d>
 800ef32:	9a07      	ldr	r2, [sp, #28]
 800ef34:	4b32      	ldr	r3, [pc, #200]	; (800f000 <__ieee754_pow+0x778>)
 800ef36:	4413      	add	r3, r2
 800ef38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	460f      	mov	r7, r1
 800ef40:	4652      	mov	r2, sl
 800ef42:	465b      	mov	r3, fp
 800ef44:	ec51 0b18 	vmov	r0, r1, d8
 800ef48:	f7f1 f9c0 	bl	80002cc <__adddf3>
 800ef4c:	4642      	mov	r2, r8
 800ef4e:	464b      	mov	r3, r9
 800ef50:	f7f1 f9bc 	bl	80002cc <__adddf3>
 800ef54:	4632      	mov	r2, r6
 800ef56:	463b      	mov	r3, r7
 800ef58:	f7f1 f9b8 	bl	80002cc <__adddf3>
 800ef5c:	2000      	movs	r0, #0
 800ef5e:	4632      	mov	r2, r6
 800ef60:	463b      	mov	r3, r7
 800ef62:	4604      	mov	r4, r0
 800ef64:	460d      	mov	r5, r1
 800ef66:	f7f1 f9af 	bl	80002c8 <__aeabi_dsub>
 800ef6a:	4642      	mov	r2, r8
 800ef6c:	464b      	mov	r3, r9
 800ef6e:	f7f1 f9ab 	bl	80002c8 <__aeabi_dsub>
 800ef72:	ec53 2b18 	vmov	r2, r3, d8
 800ef76:	f7f1 f9a7 	bl	80002c8 <__aeabi_dsub>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	4650      	mov	r0, sl
 800ef80:	4659      	mov	r1, fp
 800ef82:	e610      	b.n	800eba6 <__ieee754_pow+0x31e>
 800ef84:	2401      	movs	r4, #1
 800ef86:	e6a1      	b.n	800eccc <__ieee754_pow+0x444>
 800ef88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800efd8 <__ieee754_pow+0x750>
 800ef8c:	e617      	b.n	800ebbe <__ieee754_pow+0x336>
 800ef8e:	bf00      	nop
 800ef90:	4a454eef 	.word	0x4a454eef
 800ef94:	3fca7e28 	.word	0x3fca7e28
 800ef98:	93c9db65 	.word	0x93c9db65
 800ef9c:	3fcd864a 	.word	0x3fcd864a
 800efa0:	a91d4101 	.word	0xa91d4101
 800efa4:	3fd17460 	.word	0x3fd17460
 800efa8:	518f264d 	.word	0x518f264d
 800efac:	3fd55555 	.word	0x3fd55555
 800efb0:	db6fabff 	.word	0xdb6fabff
 800efb4:	3fdb6db6 	.word	0x3fdb6db6
 800efb8:	33333303 	.word	0x33333303
 800efbc:	3fe33333 	.word	0x3fe33333
 800efc0:	e0000000 	.word	0xe0000000
 800efc4:	3feec709 	.word	0x3feec709
 800efc8:	dc3a03fd 	.word	0xdc3a03fd
 800efcc:	3feec709 	.word	0x3feec709
 800efd0:	145b01f5 	.word	0x145b01f5
 800efd4:	be3e2fe0 	.word	0xbe3e2fe0
 800efd8:	00000000 	.word	0x00000000
 800efdc:	3ff00000 	.word	0x3ff00000
 800efe0:	7ff00000 	.word	0x7ff00000
 800efe4:	43400000 	.word	0x43400000
 800efe8:	0003988e 	.word	0x0003988e
 800efec:	000bb679 	.word	0x000bb679
 800eff0:	0802b808 	.word	0x0802b808
 800eff4:	3ff00000 	.word	0x3ff00000
 800eff8:	40080000 	.word	0x40080000
 800effc:	0802b828 	.word	0x0802b828
 800f000:	0802b818 	.word	0x0802b818
 800f004:	a3b5      	add	r3, pc, #724	; (adr r3, 800f2dc <__ieee754_pow+0xa54>)
 800f006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00a:	4640      	mov	r0, r8
 800f00c:	4649      	mov	r1, r9
 800f00e:	f7f1 f95d 	bl	80002cc <__adddf3>
 800f012:	4622      	mov	r2, r4
 800f014:	ec41 0b1a 	vmov	d10, r0, r1
 800f018:	462b      	mov	r3, r5
 800f01a:	4630      	mov	r0, r6
 800f01c:	4639      	mov	r1, r7
 800f01e:	f7f1 f953 	bl	80002c8 <__aeabi_dsub>
 800f022:	4602      	mov	r2, r0
 800f024:	460b      	mov	r3, r1
 800f026:	ec51 0b1a 	vmov	r0, r1, d10
 800f02a:	f7f1 fd95 	bl	8000b58 <__aeabi_dcmpgt>
 800f02e:	2800      	cmp	r0, #0
 800f030:	f47f ae04 	bne.w	800ec3c <__ieee754_pow+0x3b4>
 800f034:	4aa4      	ldr	r2, [pc, #656]	; (800f2c8 <__ieee754_pow+0xa40>)
 800f036:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f03a:	4293      	cmp	r3, r2
 800f03c:	f340 8108 	ble.w	800f250 <__ieee754_pow+0x9c8>
 800f040:	151b      	asrs	r3, r3, #20
 800f042:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f046:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f04a:	fa4a f303 	asr.w	r3, sl, r3
 800f04e:	445b      	add	r3, fp
 800f050:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f054:	4e9d      	ldr	r6, [pc, #628]	; (800f2cc <__ieee754_pow+0xa44>)
 800f056:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f05a:	4116      	asrs	r6, r2
 800f05c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f060:	2000      	movs	r0, #0
 800f062:	ea23 0106 	bic.w	r1, r3, r6
 800f066:	f1c2 0214 	rsb	r2, r2, #20
 800f06a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f06e:	fa4a fa02 	asr.w	sl, sl, r2
 800f072:	f1bb 0f00 	cmp.w	fp, #0
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4620      	mov	r0, r4
 800f07c:	4629      	mov	r1, r5
 800f07e:	bfb8      	it	lt
 800f080:	f1ca 0a00 	rsblt	sl, sl, #0
 800f084:	f7f1 f920 	bl	80002c8 <__aeabi_dsub>
 800f088:	ec41 0b19 	vmov	d9, r0, r1
 800f08c:	4642      	mov	r2, r8
 800f08e:	464b      	mov	r3, r9
 800f090:	ec51 0b19 	vmov	r0, r1, d9
 800f094:	f7f1 f91a 	bl	80002cc <__adddf3>
 800f098:	a37b      	add	r3, pc, #492	; (adr r3, 800f288 <__ieee754_pow+0xa00>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	2000      	movs	r0, #0
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	460d      	mov	r5, r1
 800f0a4:	f7f1 fac8 	bl	8000638 <__aeabi_dmul>
 800f0a8:	ec53 2b19 	vmov	r2, r3, d9
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	460f      	mov	r7, r1
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	f7f1 f908 	bl	80002c8 <__aeabi_dsub>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	4640      	mov	r0, r8
 800f0be:	4649      	mov	r1, r9
 800f0c0:	f7f1 f902 	bl	80002c8 <__aeabi_dsub>
 800f0c4:	a372      	add	r3, pc, #456	; (adr r3, 800f290 <__ieee754_pow+0xa08>)
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	f7f1 fab5 	bl	8000638 <__aeabi_dmul>
 800f0ce:	a372      	add	r3, pc, #456	; (adr r3, 800f298 <__ieee754_pow+0xa10>)
 800f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d4:	4680      	mov	r8, r0
 800f0d6:	4689      	mov	r9, r1
 800f0d8:	4620      	mov	r0, r4
 800f0da:	4629      	mov	r1, r5
 800f0dc:	f7f1 faac 	bl	8000638 <__aeabi_dmul>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	4640      	mov	r0, r8
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	f7f1 f8f0 	bl	80002cc <__adddf3>
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	460d      	mov	r5, r1
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	f7f1 f8e8 	bl	80002cc <__adddf3>
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	463b      	mov	r3, r7
 800f100:	4680      	mov	r8, r0
 800f102:	4689      	mov	r9, r1
 800f104:	f7f1 f8e0 	bl	80002c8 <__aeabi_dsub>
 800f108:	4602      	mov	r2, r0
 800f10a:	460b      	mov	r3, r1
 800f10c:	4620      	mov	r0, r4
 800f10e:	4629      	mov	r1, r5
 800f110:	f7f1 f8da 	bl	80002c8 <__aeabi_dsub>
 800f114:	4642      	mov	r2, r8
 800f116:	4606      	mov	r6, r0
 800f118:	460f      	mov	r7, r1
 800f11a:	464b      	mov	r3, r9
 800f11c:	4640      	mov	r0, r8
 800f11e:	4649      	mov	r1, r9
 800f120:	f7f1 fa8a 	bl	8000638 <__aeabi_dmul>
 800f124:	a35e      	add	r3, pc, #376	; (adr r3, 800f2a0 <__ieee754_pow+0xa18>)
 800f126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12a:	4604      	mov	r4, r0
 800f12c:	460d      	mov	r5, r1
 800f12e:	f7f1 fa83 	bl	8000638 <__aeabi_dmul>
 800f132:	a35d      	add	r3, pc, #372	; (adr r3, 800f2a8 <__ieee754_pow+0xa20>)
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	f7f1 f8c6 	bl	80002c8 <__aeabi_dsub>
 800f13c:	4622      	mov	r2, r4
 800f13e:	462b      	mov	r3, r5
 800f140:	f7f1 fa7a 	bl	8000638 <__aeabi_dmul>
 800f144:	a35a      	add	r3, pc, #360	; (adr r3, 800f2b0 <__ieee754_pow+0xa28>)
 800f146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14a:	f7f1 f8bf 	bl	80002cc <__adddf3>
 800f14e:	4622      	mov	r2, r4
 800f150:	462b      	mov	r3, r5
 800f152:	f7f1 fa71 	bl	8000638 <__aeabi_dmul>
 800f156:	a358      	add	r3, pc, #352	; (adr r3, 800f2b8 <__ieee754_pow+0xa30>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f7f1 f8b4 	bl	80002c8 <__aeabi_dsub>
 800f160:	4622      	mov	r2, r4
 800f162:	462b      	mov	r3, r5
 800f164:	f7f1 fa68 	bl	8000638 <__aeabi_dmul>
 800f168:	a355      	add	r3, pc, #340	; (adr r3, 800f2c0 <__ieee754_pow+0xa38>)
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f7f1 f8ad 	bl	80002cc <__adddf3>
 800f172:	4622      	mov	r2, r4
 800f174:	462b      	mov	r3, r5
 800f176:	f7f1 fa5f 	bl	8000638 <__aeabi_dmul>
 800f17a:	4602      	mov	r2, r0
 800f17c:	460b      	mov	r3, r1
 800f17e:	4640      	mov	r0, r8
 800f180:	4649      	mov	r1, r9
 800f182:	f7f1 f8a1 	bl	80002c8 <__aeabi_dsub>
 800f186:	4604      	mov	r4, r0
 800f188:	460d      	mov	r5, r1
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	4640      	mov	r0, r8
 800f190:	4649      	mov	r1, r9
 800f192:	f7f1 fa51 	bl	8000638 <__aeabi_dmul>
 800f196:	2200      	movs	r2, #0
 800f198:	ec41 0b19 	vmov	d9, r0, r1
 800f19c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	4629      	mov	r1, r5
 800f1a4:	f7f1 f890 	bl	80002c8 <__aeabi_dsub>
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	ec51 0b19 	vmov	r0, r1, d9
 800f1b0:	f7f1 fb6c 	bl	800088c <__aeabi_ddiv>
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	460d      	mov	r5, r1
 800f1ba:	463b      	mov	r3, r7
 800f1bc:	4640      	mov	r0, r8
 800f1be:	4649      	mov	r1, r9
 800f1c0:	f7f1 fa3a 	bl	8000638 <__aeabi_dmul>
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	f7f1 f880 	bl	80002cc <__adddf3>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	f7f1 f878 	bl	80002c8 <__aeabi_dsub>
 800f1d8:	4642      	mov	r2, r8
 800f1da:	464b      	mov	r3, r9
 800f1dc:	f7f1 f874 	bl	80002c8 <__aeabi_dsub>
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	493a      	ldr	r1, [pc, #232]	; (800f2d0 <__ieee754_pow+0xa48>)
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	f7f1 f86e 	bl	80002c8 <__aeabi_dsub>
 800f1ec:	ec41 0b10 	vmov	d0, r0, r1
 800f1f0:	ee10 3a90 	vmov	r3, s1
 800f1f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f1f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1fc:	da2b      	bge.n	800f256 <__ieee754_pow+0x9ce>
 800f1fe:	4650      	mov	r0, sl
 800f200:	f000 f96a 	bl	800f4d8 <scalbn>
 800f204:	ec51 0b10 	vmov	r0, r1, d0
 800f208:	ec53 2b18 	vmov	r2, r3, d8
 800f20c:	f7ff bbed 	b.w	800e9ea <__ieee754_pow+0x162>
 800f210:	4b30      	ldr	r3, [pc, #192]	; (800f2d4 <__ieee754_pow+0xa4c>)
 800f212:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f216:	429e      	cmp	r6, r3
 800f218:	f77f af0c 	ble.w	800f034 <__ieee754_pow+0x7ac>
 800f21c:	4b2e      	ldr	r3, [pc, #184]	; (800f2d8 <__ieee754_pow+0xa50>)
 800f21e:	440b      	add	r3, r1
 800f220:	4303      	orrs	r3, r0
 800f222:	d009      	beq.n	800f238 <__ieee754_pow+0x9b0>
 800f224:	ec51 0b18 	vmov	r0, r1, d8
 800f228:	2200      	movs	r2, #0
 800f22a:	2300      	movs	r3, #0
 800f22c:	f7f1 fc76 	bl	8000b1c <__aeabi_dcmplt>
 800f230:	3800      	subs	r0, #0
 800f232:	bf18      	it	ne
 800f234:	2001      	movne	r0, #1
 800f236:	e447      	b.n	800eac8 <__ieee754_pow+0x240>
 800f238:	4622      	mov	r2, r4
 800f23a:	462b      	mov	r3, r5
 800f23c:	f7f1 f844 	bl	80002c8 <__aeabi_dsub>
 800f240:	4642      	mov	r2, r8
 800f242:	464b      	mov	r3, r9
 800f244:	f7f1 fc7e 	bl	8000b44 <__aeabi_dcmpge>
 800f248:	2800      	cmp	r0, #0
 800f24a:	f43f aef3 	beq.w	800f034 <__ieee754_pow+0x7ac>
 800f24e:	e7e9      	b.n	800f224 <__ieee754_pow+0x99c>
 800f250:	f04f 0a00 	mov.w	sl, #0
 800f254:	e71a      	b.n	800f08c <__ieee754_pow+0x804>
 800f256:	ec51 0b10 	vmov	r0, r1, d0
 800f25a:	4619      	mov	r1, r3
 800f25c:	e7d4      	b.n	800f208 <__ieee754_pow+0x980>
 800f25e:	491c      	ldr	r1, [pc, #112]	; (800f2d0 <__ieee754_pow+0xa48>)
 800f260:	2000      	movs	r0, #0
 800f262:	f7ff bb30 	b.w	800e8c6 <__ieee754_pow+0x3e>
 800f266:	2000      	movs	r0, #0
 800f268:	2100      	movs	r1, #0
 800f26a:	f7ff bb2c 	b.w	800e8c6 <__ieee754_pow+0x3e>
 800f26e:	4630      	mov	r0, r6
 800f270:	4639      	mov	r1, r7
 800f272:	f7ff bb28 	b.w	800e8c6 <__ieee754_pow+0x3e>
 800f276:	9204      	str	r2, [sp, #16]
 800f278:	f7ff bb7a 	b.w	800e970 <__ieee754_pow+0xe8>
 800f27c:	2300      	movs	r3, #0
 800f27e:	f7ff bb64 	b.w	800e94a <__ieee754_pow+0xc2>
 800f282:	bf00      	nop
 800f284:	f3af 8000 	nop.w
 800f288:	00000000 	.word	0x00000000
 800f28c:	3fe62e43 	.word	0x3fe62e43
 800f290:	fefa39ef 	.word	0xfefa39ef
 800f294:	3fe62e42 	.word	0x3fe62e42
 800f298:	0ca86c39 	.word	0x0ca86c39
 800f29c:	be205c61 	.word	0xbe205c61
 800f2a0:	72bea4d0 	.word	0x72bea4d0
 800f2a4:	3e663769 	.word	0x3e663769
 800f2a8:	c5d26bf1 	.word	0xc5d26bf1
 800f2ac:	3ebbbd41 	.word	0x3ebbbd41
 800f2b0:	af25de2c 	.word	0xaf25de2c
 800f2b4:	3f11566a 	.word	0x3f11566a
 800f2b8:	16bebd93 	.word	0x16bebd93
 800f2bc:	3f66c16c 	.word	0x3f66c16c
 800f2c0:	5555553e 	.word	0x5555553e
 800f2c4:	3fc55555 	.word	0x3fc55555
 800f2c8:	3fe00000 	.word	0x3fe00000
 800f2cc:	000fffff 	.word	0x000fffff
 800f2d0:	3ff00000 	.word	0x3ff00000
 800f2d4:	4090cbff 	.word	0x4090cbff
 800f2d8:	3f6f3400 	.word	0x3f6f3400
 800f2dc:	652b82fe 	.word	0x652b82fe
 800f2e0:	3c971547 	.word	0x3c971547

0800f2e4 <__ieee754_sqrt>:
 800f2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e8:	ec55 4b10 	vmov	r4, r5, d0
 800f2ec:	4e55      	ldr	r6, [pc, #340]	; (800f444 <__ieee754_sqrt+0x160>)
 800f2ee:	43ae      	bics	r6, r5
 800f2f0:	ee10 0a10 	vmov	r0, s0
 800f2f4:	ee10 3a10 	vmov	r3, s0
 800f2f8:	462a      	mov	r2, r5
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	d110      	bne.n	800f320 <__ieee754_sqrt+0x3c>
 800f2fe:	ee10 2a10 	vmov	r2, s0
 800f302:	462b      	mov	r3, r5
 800f304:	f7f1 f998 	bl	8000638 <__aeabi_dmul>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4620      	mov	r0, r4
 800f30e:	4629      	mov	r1, r5
 800f310:	f7f0 ffdc 	bl	80002cc <__adddf3>
 800f314:	4604      	mov	r4, r0
 800f316:	460d      	mov	r5, r1
 800f318:	ec45 4b10 	vmov	d0, r4, r5
 800f31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f320:	2d00      	cmp	r5, #0
 800f322:	dc10      	bgt.n	800f346 <__ieee754_sqrt+0x62>
 800f324:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f328:	4330      	orrs	r0, r6
 800f32a:	d0f5      	beq.n	800f318 <__ieee754_sqrt+0x34>
 800f32c:	b15d      	cbz	r5, 800f346 <__ieee754_sqrt+0x62>
 800f32e:	ee10 2a10 	vmov	r2, s0
 800f332:	462b      	mov	r3, r5
 800f334:	ee10 0a10 	vmov	r0, s0
 800f338:	f7f0 ffc6 	bl	80002c8 <__aeabi_dsub>
 800f33c:	4602      	mov	r2, r0
 800f33e:	460b      	mov	r3, r1
 800f340:	f7f1 faa4 	bl	800088c <__aeabi_ddiv>
 800f344:	e7e6      	b.n	800f314 <__ieee754_sqrt+0x30>
 800f346:	1512      	asrs	r2, r2, #20
 800f348:	d074      	beq.n	800f434 <__ieee754_sqrt+0x150>
 800f34a:	07d4      	lsls	r4, r2, #31
 800f34c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f350:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f358:	bf5e      	ittt	pl
 800f35a:	0fda      	lsrpl	r2, r3, #31
 800f35c:	005b      	lslpl	r3, r3, #1
 800f35e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f362:	2400      	movs	r4, #0
 800f364:	0fda      	lsrs	r2, r3, #31
 800f366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f36a:	107f      	asrs	r7, r7, #1
 800f36c:	005b      	lsls	r3, r3, #1
 800f36e:	2516      	movs	r5, #22
 800f370:	4620      	mov	r0, r4
 800f372:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f376:	1886      	adds	r6, r0, r2
 800f378:	428e      	cmp	r6, r1
 800f37a:	bfde      	ittt	le
 800f37c:	1b89      	suble	r1, r1, r6
 800f37e:	18b0      	addle	r0, r6, r2
 800f380:	18a4      	addle	r4, r4, r2
 800f382:	0049      	lsls	r1, r1, #1
 800f384:	3d01      	subs	r5, #1
 800f386:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f38a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f38e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f392:	d1f0      	bne.n	800f376 <__ieee754_sqrt+0x92>
 800f394:	462a      	mov	r2, r5
 800f396:	f04f 0e20 	mov.w	lr, #32
 800f39a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f39e:	4281      	cmp	r1, r0
 800f3a0:	eb06 0c05 	add.w	ip, r6, r5
 800f3a4:	dc02      	bgt.n	800f3ac <__ieee754_sqrt+0xc8>
 800f3a6:	d113      	bne.n	800f3d0 <__ieee754_sqrt+0xec>
 800f3a8:	459c      	cmp	ip, r3
 800f3aa:	d811      	bhi.n	800f3d0 <__ieee754_sqrt+0xec>
 800f3ac:	f1bc 0f00 	cmp.w	ip, #0
 800f3b0:	eb0c 0506 	add.w	r5, ip, r6
 800f3b4:	da43      	bge.n	800f43e <__ieee754_sqrt+0x15a>
 800f3b6:	2d00      	cmp	r5, #0
 800f3b8:	db41      	blt.n	800f43e <__ieee754_sqrt+0x15a>
 800f3ba:	f100 0801 	add.w	r8, r0, #1
 800f3be:	1a09      	subs	r1, r1, r0
 800f3c0:	459c      	cmp	ip, r3
 800f3c2:	bf88      	it	hi
 800f3c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f3c8:	eba3 030c 	sub.w	r3, r3, ip
 800f3cc:	4432      	add	r2, r6
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f3d4:	f1be 0e01 	subs.w	lr, lr, #1
 800f3d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f3dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f3e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f3e4:	d1db      	bne.n	800f39e <__ieee754_sqrt+0xba>
 800f3e6:	430b      	orrs	r3, r1
 800f3e8:	d006      	beq.n	800f3f8 <__ieee754_sqrt+0x114>
 800f3ea:	1c50      	adds	r0, r2, #1
 800f3ec:	bf13      	iteet	ne
 800f3ee:	3201      	addne	r2, #1
 800f3f0:	3401      	addeq	r4, #1
 800f3f2:	4672      	moveq	r2, lr
 800f3f4:	f022 0201 	bicne.w	r2, r2, #1
 800f3f8:	1063      	asrs	r3, r4, #1
 800f3fa:	0852      	lsrs	r2, r2, #1
 800f3fc:	07e1      	lsls	r1, r4, #31
 800f3fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f402:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f406:	bf48      	it	mi
 800f408:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f40c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f410:	4614      	mov	r4, r2
 800f412:	e781      	b.n	800f318 <__ieee754_sqrt+0x34>
 800f414:	0ad9      	lsrs	r1, r3, #11
 800f416:	3815      	subs	r0, #21
 800f418:	055b      	lsls	r3, r3, #21
 800f41a:	2900      	cmp	r1, #0
 800f41c:	d0fa      	beq.n	800f414 <__ieee754_sqrt+0x130>
 800f41e:	02cd      	lsls	r5, r1, #11
 800f420:	d50a      	bpl.n	800f438 <__ieee754_sqrt+0x154>
 800f422:	f1c2 0420 	rsb	r4, r2, #32
 800f426:	fa23 f404 	lsr.w	r4, r3, r4
 800f42a:	1e55      	subs	r5, r2, #1
 800f42c:	4093      	lsls	r3, r2
 800f42e:	4321      	orrs	r1, r4
 800f430:	1b42      	subs	r2, r0, r5
 800f432:	e78a      	b.n	800f34a <__ieee754_sqrt+0x66>
 800f434:	4610      	mov	r0, r2
 800f436:	e7f0      	b.n	800f41a <__ieee754_sqrt+0x136>
 800f438:	0049      	lsls	r1, r1, #1
 800f43a:	3201      	adds	r2, #1
 800f43c:	e7ef      	b.n	800f41e <__ieee754_sqrt+0x13a>
 800f43e:	4680      	mov	r8, r0
 800f440:	e7bd      	b.n	800f3be <__ieee754_sqrt+0xda>
 800f442:	bf00      	nop
 800f444:	7ff00000 	.word	0x7ff00000

0800f448 <__ieee754_sqrtf>:
 800f448:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f44c:	4770      	bx	lr

0800f44e <with_errno>:
 800f44e:	b570      	push	{r4, r5, r6, lr}
 800f450:	4604      	mov	r4, r0
 800f452:	460d      	mov	r5, r1
 800f454:	4616      	mov	r6, r2
 800f456:	f7fa fa7d 	bl	8009954 <__errno>
 800f45a:	4629      	mov	r1, r5
 800f45c:	6006      	str	r6, [r0, #0]
 800f45e:	4620      	mov	r0, r4
 800f460:	bd70      	pop	{r4, r5, r6, pc}

0800f462 <xflow>:
 800f462:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f464:	4614      	mov	r4, r2
 800f466:	461d      	mov	r5, r3
 800f468:	b108      	cbz	r0, 800f46e <xflow+0xc>
 800f46a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f46e:	e9cd 2300 	strd	r2, r3, [sp]
 800f472:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f476:	4620      	mov	r0, r4
 800f478:	4629      	mov	r1, r5
 800f47a:	f7f1 f8dd 	bl	8000638 <__aeabi_dmul>
 800f47e:	2222      	movs	r2, #34	; 0x22
 800f480:	b003      	add	sp, #12
 800f482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f486:	f7ff bfe2 	b.w	800f44e <with_errno>

0800f48a <__math_uflow>:
 800f48a:	b508      	push	{r3, lr}
 800f48c:	2200      	movs	r2, #0
 800f48e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f492:	f7ff ffe6 	bl	800f462 <xflow>
 800f496:	ec41 0b10 	vmov	d0, r0, r1
 800f49a:	bd08      	pop	{r3, pc}

0800f49c <__math_oflow>:
 800f49c:	b508      	push	{r3, lr}
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f4a4:	f7ff ffdd 	bl	800f462 <xflow>
 800f4a8:	ec41 0b10 	vmov	d0, r0, r1
 800f4ac:	bd08      	pop	{r3, pc}

0800f4ae <fabs>:
 800f4ae:	ec51 0b10 	vmov	r0, r1, d0
 800f4b2:	ee10 2a10 	vmov	r2, s0
 800f4b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4ba:	ec43 2b10 	vmov	d0, r2, r3
 800f4be:	4770      	bx	lr

0800f4c0 <finite>:
 800f4c0:	b082      	sub	sp, #8
 800f4c2:	ed8d 0b00 	vstr	d0, [sp]
 800f4c6:	9801      	ldr	r0, [sp, #4]
 800f4c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f4cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f4d0:	0fc0      	lsrs	r0, r0, #31
 800f4d2:	b002      	add	sp, #8
 800f4d4:	4770      	bx	lr
	...

0800f4d8 <scalbn>:
 800f4d8:	b570      	push	{r4, r5, r6, lr}
 800f4da:	ec55 4b10 	vmov	r4, r5, d0
 800f4de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f4e2:	4606      	mov	r6, r0
 800f4e4:	462b      	mov	r3, r5
 800f4e6:	b99a      	cbnz	r2, 800f510 <scalbn+0x38>
 800f4e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f4ec:	4323      	orrs	r3, r4
 800f4ee:	d036      	beq.n	800f55e <scalbn+0x86>
 800f4f0:	4b39      	ldr	r3, [pc, #228]	; (800f5d8 <scalbn+0x100>)
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	ee10 0a10 	vmov	r0, s0
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f7f1 f89d 	bl	8000638 <__aeabi_dmul>
 800f4fe:	4b37      	ldr	r3, [pc, #220]	; (800f5dc <scalbn+0x104>)
 800f500:	429e      	cmp	r6, r3
 800f502:	4604      	mov	r4, r0
 800f504:	460d      	mov	r5, r1
 800f506:	da10      	bge.n	800f52a <scalbn+0x52>
 800f508:	a32b      	add	r3, pc, #172	; (adr r3, 800f5b8 <scalbn+0xe0>)
 800f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50e:	e03a      	b.n	800f586 <scalbn+0xae>
 800f510:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f514:	428a      	cmp	r2, r1
 800f516:	d10c      	bne.n	800f532 <scalbn+0x5a>
 800f518:	ee10 2a10 	vmov	r2, s0
 800f51c:	4620      	mov	r0, r4
 800f51e:	4629      	mov	r1, r5
 800f520:	f7f0 fed4 	bl	80002cc <__adddf3>
 800f524:	4604      	mov	r4, r0
 800f526:	460d      	mov	r5, r1
 800f528:	e019      	b.n	800f55e <scalbn+0x86>
 800f52a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f52e:	460b      	mov	r3, r1
 800f530:	3a36      	subs	r2, #54	; 0x36
 800f532:	4432      	add	r2, r6
 800f534:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f538:	428a      	cmp	r2, r1
 800f53a:	dd08      	ble.n	800f54e <scalbn+0x76>
 800f53c:	2d00      	cmp	r5, #0
 800f53e:	a120      	add	r1, pc, #128	; (adr r1, 800f5c0 <scalbn+0xe8>)
 800f540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f544:	da1c      	bge.n	800f580 <scalbn+0xa8>
 800f546:	a120      	add	r1, pc, #128	; (adr r1, 800f5c8 <scalbn+0xf0>)
 800f548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f54c:	e018      	b.n	800f580 <scalbn+0xa8>
 800f54e:	2a00      	cmp	r2, #0
 800f550:	dd08      	ble.n	800f564 <scalbn+0x8c>
 800f552:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f55a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f55e:	ec45 4b10 	vmov	d0, r4, r5
 800f562:	bd70      	pop	{r4, r5, r6, pc}
 800f564:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f568:	da19      	bge.n	800f59e <scalbn+0xc6>
 800f56a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f56e:	429e      	cmp	r6, r3
 800f570:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f574:	dd0a      	ble.n	800f58c <scalbn+0xb4>
 800f576:	a112      	add	r1, pc, #72	; (adr r1, 800f5c0 <scalbn+0xe8>)
 800f578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1e2      	bne.n	800f546 <scalbn+0x6e>
 800f580:	a30f      	add	r3, pc, #60	; (adr r3, 800f5c0 <scalbn+0xe8>)
 800f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f586:	f7f1 f857 	bl	8000638 <__aeabi_dmul>
 800f58a:	e7cb      	b.n	800f524 <scalbn+0x4c>
 800f58c:	a10a      	add	r1, pc, #40	; (adr r1, 800f5b8 <scalbn+0xe0>)
 800f58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0b8      	beq.n	800f508 <scalbn+0x30>
 800f596:	a10e      	add	r1, pc, #56	; (adr r1, 800f5d0 <scalbn+0xf8>)
 800f598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f59c:	e7b4      	b.n	800f508 <scalbn+0x30>
 800f59e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5a2:	3236      	adds	r2, #54	; 0x36
 800f5a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	4b0c      	ldr	r3, [pc, #48]	; (800f5e0 <scalbn+0x108>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	e7e8      	b.n	800f586 <scalbn+0xae>
 800f5b4:	f3af 8000 	nop.w
 800f5b8:	c2f8f359 	.word	0xc2f8f359
 800f5bc:	01a56e1f 	.word	0x01a56e1f
 800f5c0:	8800759c 	.word	0x8800759c
 800f5c4:	7e37e43c 	.word	0x7e37e43c
 800f5c8:	8800759c 	.word	0x8800759c
 800f5cc:	fe37e43c 	.word	0xfe37e43c
 800f5d0:	c2f8f359 	.word	0xc2f8f359
 800f5d4:	81a56e1f 	.word	0x81a56e1f
 800f5d8:	43500000 	.word	0x43500000
 800f5dc:	ffff3cb0 	.word	0xffff3cb0
 800f5e0:	3c900000 	.word	0x3c900000

0800f5e4 <_init>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	bf00      	nop
 800f5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ea:	bc08      	pop	{r3}
 800f5ec:	469e      	mov	lr, r3
 800f5ee:	4770      	bx	lr

0800f5f0 <_fini>:
 800f5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f2:	bf00      	nop
 800f5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5f6:	bc08      	pop	{r3}
 800f5f8:	469e      	mov	lr, r3
 800f5fa:	4770      	bx	lr
