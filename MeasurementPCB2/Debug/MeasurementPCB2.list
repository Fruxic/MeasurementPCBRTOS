
MeasurementPCB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d22c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c1f0  0800d400  0800d400  0001d400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080295f0  080295f0  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  080295f0  080295f0  000395f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080295f8  080295f8  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080295f8  080295f8  000395f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080295fc  080295fc  000395fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08029600  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001005c  200001fc  080297fc  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010258  080297fc  00040258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7e3  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004085  00000000  00000000  0005ca0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00060a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00062160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015510  00000000  00000000  000636e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007b2f  00000000  00000000  00078bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c0  00000000  00000000  00080727  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007654  00000000  00000000  000807e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000035a7  00000000  00000000  00087e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d3e4 	.word	0x0800d3e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800d3e4 	.word	0x0800d3e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x98>)
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <MX_ADC1_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001052:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001056:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_ADC1_Init+0x98>)
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_ADC1_Init+0xa0>)
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_ADC1_Init+0x98>)
 800109a:	f001 f995 	bl	80023c8 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a4:	f000 ff0e 	bl	8001ec4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_ADC1_Init+0x98>)
 80010ba:	f001 fb15 	bl	80026e8 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c4:	f000 fefe 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000218 	.word	0x20000218
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_ADC_MspInit+0x7c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d127      	bne.n	800114e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_ADC_MspInit+0x80>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001136:	2302      	movs	r3, #2
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_ADC_MspInit+0x84>)
 800114a:	f001 fdcd 	bl	8002ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40012000 	.word	0x40012000
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <vApplicationGetIdleTaskMemory+0x2c>)
 8001174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <vApplicationGetIdleTaskMemory+0x30>)
 800117a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2000029c 	.word	0x2000029c
 8001194:	20000350 	.word	0x20000350

08001198 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b09c      	sub	sp, #112	; 0x70
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  //Initialize DSP functions
  arm_rfft_fast_init_f32(&S, FFT_SIZE);
 800119e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a2:	482c      	ldr	r0, [pc, #176]	; (8001254 <MX_FREERTOS_Init+0xbc>)
 80011a4:	f005 fcca 	bl	8006b3c <arm_rfft_fast_init_f32>
  /* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
  arm_cfft_radix4_init_f32(&L, FFT_SIZE, 0, 1);
 80011a8:	2301      	movs	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b0:	4829      	ldr	r0, [pc, #164]	; (8001258 <MX_FREERTOS_Init+0xc0>)
 80011b2:	f005 fd47 	bl	8006c44 <arm_cfft_radix4_init_f32>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Empty */
  osThreadDef(Empty, StartEmpty, osPriorityIdle, 0, 128);
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_FREERTOS_Init+0xc4>)
 80011b8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EmptyHandle = osThreadCreate(osThread(Empty), NULL);
 80011ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 f9f2 	bl	80055ba <osThreadCreate>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <MX_FREERTOS_Init+0xc8>)
 80011da:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, startAccelerometer, osPriorityRealtime, 0, 12800);
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_FREERTOS_Init+0xcc>)
 80011de:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011e2:	461d      	mov	r5, r3
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 80011f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 f9df 	bl	80055ba <osThreadCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <MX_FREERTOS_Init+0xd0>)
 8001200:	6013      	str	r3, [r2, #0]

  /* definition and creation of Humidity */
  osThreadDef(Humidity, startHumidity, osPriorityLow, 0, 512);
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_FREERTOS_Init+0xd4>)
 8001204:	f107 041c 	add.w	r4, r7, #28
 8001208:	461d      	mov	r5, r3
 800120a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HumidityHandle = osThreadCreate(osThread(Humidity), NULL);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f004 f9cc 	bl	80055ba <osThreadCreate>
 8001222:	4603      	mov	r3, r0
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_FREERTOS_Init+0xd8>)
 8001226:	6013      	str	r3, [r2, #0]

  /* definition and creation of Temperature */
  osThreadDef(Temperature, startTemperature, osPriorityNormal, 0, 512);
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_FREERTOS_Init+0xdc>)
 800122a:	463c      	mov	r4, r7
 800122c:	461d      	mov	r5, r3
 800122e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TemperatureHandle = osThreadCreate(osThread(Temperature), NULL);
 800123a:	463b      	mov	r3, r7
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f004 f9bb 	bl	80055ba <osThreadCreate>
 8001244:	4603      	mov	r3, r0
 8001246:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <MX_FREERTOS_Init+0xe0>)
 8001248:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800124a:	bf00      	nop
 800124c:	3770      	adds	r7, #112	; 0x70
 800124e:	46bd      	mov	sp, r7
 8001250:	bdb0      	pop	{r4, r5, r7, pc}
 8001252:	bf00      	nop
 8001254:	20000260 	.word	0x20000260
 8001258:	20000278 	.word	0x20000278
 800125c:	0800d430 	.word	0x0800d430
 8001260:	2000028c 	.word	0x2000028c
 8001264:	0800d44c 	.word	0x0800d44c
 8001268:	20000290 	.word	0x20000290
 800126c:	0800d468 	.word	0x0800d468
 8001270:	20000294 	.word	0x20000294
 8001274:	0800d484 	.word	0x0800d484
 8001278:	20000298 	.word	0x20000298

0800127c <StartEmpty>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmpty */
void StartEmpty(void const * argument)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEmpty */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f004 f9e4 	bl	8005652 <osDelay>
 800128a:	e7fb      	b.n	8001284 <StartEmpty+0x8>
 800128c:	0000      	movs	r0, r0
	...

08001290 <startAccelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAccelerometer */
void startAccelerometer(void const * argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	f5ad 5d60 	sub.w	sp, sp, #14336	; 0x3800
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af02      	add	r7, sp, #8
 800129a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800129e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012a2:	6018      	str	r0, [r3, #0]

  int16_t maxValueAxis;

  float32_t Input[SAMPLES];
  float32_t Output[FFT_SIZE];
  uint16_t x = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80012aa:	f102 021c 	add.w	r2, r2, #28
 80012ae:	8013      	strh	r3, [r2, #0]
  uint32_t maxIndex;
  float32_t maxValue;
  /* Infinite loop */
  for(;;)
  {
	if(I2C_lock == 0){
 80012b0:	4b89      	ldr	r3, [pc, #548]	; (80014d8 <startAccelerometer+0x248>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f040 81c3 	bne.w	8001640 <startAccelerometer+0x3b0>
		//Z axis
		I2C_trans[0] = LIS2_OUTZH;
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <startAccelerometer+0x24c>)
 80012bc:	222d      	movs	r2, #45	; 0x2d
 80012be:	701a      	strb	r2, [r3, #0]
		if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, &I2C_trans[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	4a84      	ldr	r2, [pc, #528]	; (80014dc <startAccelerometer+0x24c>)
 80012ca:	213a      	movs	r1, #58	; 0x3a
 80012cc:	4884      	ldr	r0, [pc, #528]	; (80014e0 <startAccelerometer+0x250>)
 80012ce:	f001 fffd 	bl	80032cc <HAL_I2C_Master_Transmit>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b83      	ldr	r3, [pc, #524]	; (80014e4 <startAccelerometer+0x254>)
 80012d8:	701a      	strb	r2, [r3, #0]
//			do{
//				vTaskDelay(1000);
//				ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, &I2C_trans[0], 1, HAL_MAX_DELAY);
//			}while(ret != HAL_OK);
		}
		if((ret = HAL_I2C_Master_Receive(&hi2c1, LIS2_ADDR, &I2C_recv[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	4a81      	ldr	r2, [pc, #516]	; (80014e8 <startAccelerometer+0x258>)
 80012e4:	213a      	movs	r1, #58	; 0x3a
 80012e6:	487e      	ldr	r0, [pc, #504]	; (80014e0 <startAccelerometer+0x250>)
 80012e8:	f002 f8ee 	bl	80034c8 <HAL_I2C_Master_Receive>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <startAccelerometer+0x254>)
 80012f2:	701a      	strb	r2, [r3, #0]
			//error handler
//			for(;;);
		}
		rawZaxis[x] = I2C_recv[0] << 8;
 80012f4:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <startAccelerometer+0x258>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80012fe:	f102 021c 	add.w	r2, r2, #28
 8001302:	8812      	ldrh	r2, [r2, #0]
 8001304:	b219      	sxth	r1, r3
 8001306:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 800130a:	f103 0320 	add.w	r3, r3, #32
 800130e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8001312:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		I2C_trans[0] = LIS2_OUTZL;
 8001316:	4b71      	ldr	r3, [pc, #452]	; (80014dc <startAccelerometer+0x24c>)
 8001318:	222c      	movs	r2, #44	; 0x2c
 800131a:	701a      	strb	r2, [r3, #0]
		if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, &I2C_trans[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	4a6d      	ldr	r2, [pc, #436]	; (80014dc <startAccelerometer+0x24c>)
 8001326:	213a      	movs	r1, #58	; 0x3a
 8001328:	486d      	ldr	r0, [pc, #436]	; (80014e0 <startAccelerometer+0x250>)
 800132a:	f001 ffcf 	bl	80032cc <HAL_I2C_Master_Transmit>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b6c      	ldr	r3, [pc, #432]	; (80014e4 <startAccelerometer+0x254>)
 8001334:	701a      	strb	r2, [r3, #0]
			//error handler
//			for(;;);
		}
		if((ret = HAL_I2C_Master_Receive(&hi2c1, LIS2_ADDR, &I2C_recv[0], 1, HAL_MAX_DELAY)) != HAL_OK){
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	4a6a      	ldr	r2, [pc, #424]	; (80014e8 <startAccelerometer+0x258>)
 8001340:	213a      	movs	r1, #58	; 0x3a
 8001342:	4867      	ldr	r0, [pc, #412]	; (80014e0 <startAccelerometer+0x250>)
 8001344:	f002 f8c0 	bl	80034c8 <HAL_I2C_Master_Receive>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <startAccelerometer+0x254>)
 800134e:	701a      	strb	r2, [r3, #0]
			//error handler
//			for(;;);
		}
		rawZaxis[x] = (rawZaxis[x] | I2C_recv[0])/4;//14 bit divide by 4, 12 bit divide by 16
 8001350:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001354:	f103 031c 	add.w	r3, r3, #28
 8001358:	881a      	ldrh	r2, [r3, #0]
 800135a:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 800135e:	f103 0320 	add.w	r3, r3, #32
 8001362:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8001366:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800136a:	461a      	mov	r2, r3
 800136c:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <startAccelerometer+0x258>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4313      	orrs	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	da00      	bge.n	8001378 <startAccelerometer+0xe8>
 8001376:	3303      	adds	r3, #3
 8001378:	109b      	asrs	r3, r3, #2
 800137a:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 800137e:	f102 021c 	add.w	r2, r2, #28
 8001382:	8812      	ldrh	r2, [r2, #0]
 8001384:	b219      	sxth	r1, r3
 8001386:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 800138a:	f103 0320 	add.w	r3, r3, #32
 800138e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8001392:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		x++;
 8001396:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 800139a:	f103 031c 	add.w	r3, r3, #28
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80013a6:	f102 021c 	add.w	r2, r2, #28
 80013aa:	8013      	strh	r3, [r2, #0]

		start = ARM_CM_DWT_CYCCNT;
 80013ac:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <startAccelerometer+0x25c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <startAccelerometer+0x260>)
 80013b2:	6013      	str	r3, [r2, #0]
		delta = start - stop;
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <startAccelerometer+0x260>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <startAccelerometer+0x264>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4a4e      	ldr	r2, [pc, #312]	; (80014f8 <startAccelerometer+0x268>)
 80013c0:	6013      	str	r3, [r2, #0]
		stop = start;
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <startAccelerometer+0x260>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <startAccelerometer+0x264>)
 80013c8:	6013      	str	r3, [r2, #0]
		if(x > FFT_SIZE-1){
 80013ca:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 80013ce:	f103 031c 	add.w	r3, r3, #28
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d8:	f0c0 8132 	bcc.w	8001640 <startAccelerometer+0x3b0>
			maxValueAxis = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80013e2:	f102 021e 	add.w	r2, r2, #30
 80013e6:	8013      	strh	r3, [r2, #0]
			// Storing the largest number
			for (int i = 1; i < x; i++) {
 80013e8:	2301      	movs	r3, #1
 80013ea:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80013ee:	f102 0218 	add.w	r2, r2, #24
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e031      	b.n	800145a <startAccelerometer+0x1ca>
				if(maxValueAxis < rawZaxis[i]){
 80013f6:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 80013fa:	f103 0320 	add.w	r3, r3, #32
 80013fe:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8001402:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 8001406:	f102 0218 	add.w	r2, r2, #24
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001410:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 8001414:	f102 021e 	add.w	r2, r2, #30
 8001418:	f9b2 2000 	ldrsh.w	r2, [r2]
 800141c:	429a      	cmp	r2, r3
 800141e:	da11      	bge.n	8001444 <startAccelerometer+0x1b4>
					maxValueAxis = rawZaxis[i];
 8001420:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001424:	f103 0320 	add.w	r3, r3, #32
 8001428:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800142c:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 8001430:	f102 0218 	add.w	r2, r2, #24
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800143a:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 800143e:	f102 021e 	add.w	r2, r2, #30
 8001442:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i < x; i++) {
 8001444:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001448:	f103 0318 	add.w	r3, r3, #24
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 8001454:	f102 0218 	add.w	r2, r2, #24
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 800145e:	f103 031c 	add.w	r3, r3, #28
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 8001468:	f102 0218 	add.w	r2, r2, #24
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	dbc1      	blt.n	80013f6 <startAccelerometer+0x166>
				}
			}
			// Calculate amplitude in G with acceleration of z axis with 4G scale and 14 bit data length
			ampMax = (maxValueAxis * 0.488)/1000;
 8001472:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001476:	f103 031e 	add.w	r3, r3, #30
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f870 	bl	8000564 <__aeabi_i2d>
 8001484:	a312      	add	r3, pc, #72	; (adr r3, 80014d0 <startAccelerometer+0x240>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8d5 	bl	8000638 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <startAccelerometer+0x26c>)
 800149c:	f7ff f9f6 	bl	800088c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fbbe 	bl	8000c28 <__aeabi_d2f>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <startAccelerometer+0x270>)
 80014b0:	6013      	str	r3, [r2, #0]
			x = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80014b8:	f102 021c 	add.w	r2, r2, #28
 80014bc:	8013      	strh	r3, [r2, #0]

			// DSP functionality
			for(int i = 0; i < SAMPLES; i += 2){
 80014be:	2300      	movs	r3, #0
 80014c0:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80014c4:	f102 0214 	add.w	r2, r2, #20
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e061      	b.n	8001590 <startAccelerometer+0x300>
 80014cc:	f3af 8000 	nop.w
 80014d0:	5a1cac08 	.word	0x5a1cac08
 80014d4:	3fdf3b64 	.word	0x3fdf3b64
 80014d8:	2000069e 	.word	0x2000069e
 80014dc:	20000698 	.word	0x20000698
 80014e0:	20000550 	.word	0x20000550
 80014e4:	200005f8 	.word	0x200005f8
 80014e8:	2000068c 	.word	0x2000068c
 80014ec:	e0001004 	.word	0xe0001004
 80014f0:	200006d4 	.word	0x200006d4
 80014f4:	200006d8 	.word	0x200006d8
 80014f8:	200006dc 	.word	0x200006dc
 80014fc:	408f4000 	.word	0x408f4000
 8001500:	200006e8 	.word	0x200006e8
				/* Real part */
				Input[(uint16_t)i] = (float32_t)rawZaxis[x];
 8001504:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001508:	f103 031c 	add.w	r3, r3, #28
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001512:	f103 0320 	add.w	r3, r3, #32
 8001516:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800151a:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800151e:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001522:	f103 0314 	add.w	r3, r3, #20
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	ee07 2a90 	vmov	s15, r2
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001536:	f6a2 020c 	subw	r2, r2, #2060	; 0x80c
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	edc3 7a00 	vstr	s15, [r3]
				/* Imaginary part */
				Input[(uint16_t)(i + 1)] = 0;
 8001542:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001546:	f103 0314 	add.w	r3, r3, #20
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	3301      	adds	r3, #1
 8001550:	b29b      	uxth	r3, r3
 8001552:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001556:	f6a2 020c 	subw	r2, r2, #2060	; 0x80c
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
				x++;
 8001564:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001568:	f103 031c 	add.w	r3, r3, #28
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 8001574:	f102 021c 	add.w	r2, r2, #28
 8001578:	8013      	strh	r3, [r2, #0]
			for(int i = 0; i < SAMPLES; i += 2){
 800157a:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 800157e:	f103 0314 	add.w	r3, r3, #20
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3302      	adds	r3, #2
 8001586:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 800158a:	f102 0214 	add.w	r2, r2, #20
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8001594:	f103 0314 	add.w	r3, r3, #20
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159e:	dbb1      	blt.n	8001504 <startAccelerometer+0x274>
			}
			x = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 80015a6:	f102 021c 	add.w	r2, r2, #28
 80015aa:	8013      	strh	r3, [r2, #0]
			/* Process the data through the CFFT/CIFFT module */
			arm_cfft_radix4_f32(&L, Input);
 80015ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80015b0:	3b0c      	subs	r3, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <startAccelerometer+0x3b8>)
 80015b6:	f005 ff4d 	bl	8007454 <arm_cfft_radix4_f32>
			/* Process the data through the Complex Magnitude Module for calculating the magnitude at each bin */
			arm_cmplx_mag_f32(Input, Output, FFT_SIZE);
 80015ba:	f107 0120 	add.w	r1, r7, #32
 80015be:	390c      	subs	r1, #12
 80015c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80015c4:	3b0c      	subs	r3, #12
 80015c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 ff62 	bl	8007494 <arm_cmplx_mag_f32>
			Output[0] = 0;
 80015d0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80015d4:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
			/* Calculates maxValue and returns corresponding value */
			arm_max_f32(Output, FFT_SIZE, &maxValue, &maxIndex);
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	3b10      	subs	r3, #16
 80015e4:	f107 0220 	add.w	r2, r7, #32
 80015e8:	3a14      	subs	r2, #20
 80015ea:	f107 0020 	add.w	r0, r7, #32
 80015ee:	380c      	subs	r0, #12
 80015f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f4:	f005 fa3a 	bl	8006a6c <arm_max_f32>
			//calculate frequency.
			if(maxIndex >= 512){
 80015f8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80015fc:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001606:	d305      	bcc.n	8001614 <startAccelerometer+0x384>
				maxIndex = 0;
 8001608:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800160c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
			}
			freq = (500/(float)(FFT_SIZE)) * (float)maxIndex;
 8001614:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001618:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001626:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800164c <startAccelerometer+0x3bc>
 800162a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <startAccelerometer+0x3c0>)
 8001630:	edc3 7a00 	vstr	s15, [r3]
			x = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f507 5260 	add.w	r2, r7, #14336	; 0x3800
 800163a:	f102 021c 	add.w	r2, r2, #28
 800163e:	8013      	strh	r3, [r2, #0]
		}
	}
	osDelay(2);
 8001640:	2002      	movs	r0, #2
 8001642:	f004 f806 	bl	8005652 <osDelay>
	if(I2C_lock == 0){
 8001646:	e633      	b.n	80012b0 <startAccelerometer+0x20>
 8001648:	20000278 	.word	0x20000278
 800164c:	3efa0000 	.word	0x3efa0000
 8001650:	200006e4 	.word	0x200006e4
 8001654:	00000000 	.word	0x00000000

08001658 <startHumidity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startHumidity */
void startHumidity(void const * argument)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af02      	add	r7, sp, #8
 800165e:	6078      	str	r0, [r7, #4]
  float hum_rh;
  float temp_c;
  /* Infinite loop */
  for(;;)
  {
	I2C_trans[0] = 0x2C;
 8001660:	4b49      	ldr	r3, [pc, #292]	; (8001788 <startHumidity+0x130>)
 8001662:	222c      	movs	r2, #44	; 0x2c
 8001664:	701a      	strb	r2, [r3, #0]
	I2C_trans[1] = 0x10;
 8001666:	4b48      	ldr	r3, [pc, #288]	; (8001788 <startHumidity+0x130>)
 8001668:	2210      	movs	r2, #16
 800166a:	705a      	strb	r2, [r3, #1]

	I2C_lock = 1;
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <startHumidity+0x134>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
	if((ret = HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2302      	movs	r3, #2
 800167a:	4a43      	ldr	r2, [pc, #268]	; (8001788 <startHumidity+0x130>)
 800167c:	2188      	movs	r1, #136	; 0x88
 800167e:	4844      	ldr	r0, [pc, #272]	; (8001790 <startHumidity+0x138>)
 8001680:	f001 fe24 	bl	80032cc <HAL_I2C_Master_Transmit>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <startHumidity+0x13c>)
 800168a:	701a      	strb	r2, [r3, #0]
		//error handler
//		for(;;);
	}
	if((ret = HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, I2C_recv, 10, HAL_MAX_DELAY)) != HAL_OK){
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	230a      	movs	r3, #10
 8001694:	4a40      	ldr	r2, [pc, #256]	; (8001798 <startHumidity+0x140>)
 8001696:	2188      	movs	r1, #136	; 0x88
 8001698:	483d      	ldr	r0, [pc, #244]	; (8001790 <startHumidity+0x138>)
 800169a:	f001 ff15 	bl	80034c8 <HAL_I2C_Master_Receive>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <startHumidity+0x13c>)
 80016a4:	701a      	strb	r2, [r3, #0]
		//error handler
//		for(;;);
	}
	I2C_lock = 0;
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <startHumidity+0x134>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	val = I2C_recv[0] << 8 | I2C_recv[1];
 80016ac:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <startHumidity+0x140>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b38      	ldr	r3, [pc, #224]	; (8001798 <startHumidity+0x140>)
 80016b6:	785b      	ldrb	r3, [r3, #1]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21b      	sxth	r3, r3
 80016be:	82fb      	strh	r3, [r7, #22]
	temp_c = -45+(175*(val/((pow(2,16))-1)));
 80016c0:	8afb      	ldrh	r3, [r7, #22]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff4e 	bl	8000564 <__aeabi_i2d>
 80016c8:	a32b      	add	r3, pc, #172	; (adr r3, 8001778 <startHumidity+0x120>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7ff f8dd 	bl	800088c <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	a329      	add	r3, pc, #164	; (adr r3, 8001780 <startHumidity+0x128>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ffaa 	bl	8000638 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <startHumidity+0x144>)
 80016f2:	f7fe fde9 	bl	80002c8 <__aeabi_dsub>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fa93 	bl	8000c28 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	613b      	str	r3, [r7, #16]
	val = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	82fb      	strh	r3, [r7, #22]
	val = I2C_recv[3] << 8 | I2C_recv[4];
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <startHumidity+0x140>)
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <startHumidity+0x140>)
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21b      	sxth	r3, r3
 800171c:	82fb      	strh	r3, [r7, #22]
	hum_rh = 100*(val/((pow(2,16))-1));
 800171e:	8afb      	ldrh	r3, [r7, #22]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff1f 	bl	8000564 <__aeabi_i2d>
 8001726:	a314      	add	r3, pc, #80	; (adr r3, 8001778 <startHumidity+0x120>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7ff f8ae 	bl	800088c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <startHumidity+0x148>)
 800173e:	f7fe ff7b 	bl	8000638 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa6d 	bl	8000c28 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	60fb      	str	r3, [r7, #12]
	if(hum_rh >= 75){
 8001752:	edd7 7a03 	vldr	s15, [r7, #12]
 8001756:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80017a4 <startHumidity+0x14c>
 800175a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	db02      	blt.n	800176a <startHumidity+0x112>
		humAlarm = 1;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <startHumidity+0x150>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
	}
	osDelay(1000);
 800176a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800176e:	f003 ff70 	bl	8005652 <osDelay>
	I2C_trans[0] = 0x2C;
 8001772:	e775      	b.n	8001660 <startHumidity+0x8>
 8001774:	f3af 8000 	nop.w
 8001778:	00000000 	.word	0x00000000
 800177c:	40efffe0 	.word	0x40efffe0
 8001780:	00000000 	.word	0x00000000
 8001784:	4065e000 	.word	0x4065e000
 8001788:	20000698 	.word	0x20000698
 800178c:	2000069e 	.word	0x2000069e
 8001790:	20000550 	.word	0x20000550
 8001794:	200005f8 	.word	0x200005f8
 8001798:	2000068c 	.word	0x2000068c
 800179c:	40468000 	.word	0x40468000
 80017a0:	40590000 	.word	0x40590000
 80017a4:	42960000 	.word	0x42960000
 80017a8:	200006e0 	.word	0x200006e0
 80017ac:	00000000 	.word	0x00000000

080017b0 <startTemperature>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTemperature */
void startTemperature(void const * argument)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTemperature */
  uint32_t rawValue;
  float voltage = 0;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  float resistance = 0;
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2101      	movs	r1, #1
 80017c8:	487b      	ldr	r0, [pc, #492]	; (80019b8 <startTemperature+0x208>)
 80017ca:	f001 fc09 	bl	8002fe0 <HAL_GPIO_WritePin>
	vTaskDelay(100);
 80017ce:	2064      	movs	r0, #100	; 0x64
 80017d0:	f004 f9b2 	bl	8005b38 <vTaskDelay>
	HAL_ADC_Start(&hadc1);
 80017d4:	4879      	ldr	r0, [pc, #484]	; (80019bc <startTemperature+0x20c>)
 80017d6:	f000 fe3b 	bl	8002450 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017da:	f04f 31ff 	mov.w	r1, #4294967295
 80017de:	4877      	ldr	r0, [pc, #476]	; (80019bc <startTemperature+0x20c>)
 80017e0:	f000 feea 	bl	80025b8 <HAL_ADC_PollForConversion>
	rawValue = HAL_ADC_GetValue(&hadc1);
 80017e4:	4875      	ldr	r0, [pc, #468]	; (80019bc <startTemperature+0x20c>)
 80017e6:	f000 ff72 	bl	80026ce <HAL_ADC_GetValue>
 80017ea:	60f8      	str	r0, [r7, #12]
	voltage = (VOLTAGE*rawValue)/RESOLUTION;
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f7fe fea9 	bl	8000544 <__aeabi_ui2d>
 80017f2:	a361      	add	r3, pc, #388	; (adr r3, 8001978 <startTemperature+0x1c8>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe ff1e 	bl	8000638 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <startTemperature+0x210>)
 800180a:	f7ff f83f 	bl	800088c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff fa07 	bl	8000c28 <__aeabi_d2f>
 800181a:	4603      	mov	r3, r0
 800181c:	617b      	str	r3, [r7, #20]
	resistance = (voltage*RESISTANCE)/(VOLTAGE-voltage);
 800181e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001822:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80019c4 <startTemperature+0x214>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	ee17 0a90 	vmov	r0, s15
 800182e:	f7fe feab 	bl	8000588 <__aeabi_f2d>
 8001832:	4604      	mov	r4, r0
 8001834:	460d      	mov	r5, r1
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7fe fea6 	bl	8000588 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	a14d      	add	r1, pc, #308	; (adr r1, 8001978 <startTemperature+0x1c8>)
 8001842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001846:	f7fe fd3f 	bl	80002c8 <__aeabi_dsub>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7ff f81b 	bl	800088c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9e3 	bl	8000c28 <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	613b      	str	r3, [r7, #16]
	temp = (1/(A + (B*log(resistance)) + (C*pow(log(resistance),2)) + (D*pow(log(resistance),3)))) - KELVIN;
 8001866:	6938      	ldr	r0, [r7, #16]
 8001868:	f7fe fe8e 	bl	8000588 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b10 	vmov	d0, r2, r3
 8001874:	f00a fc80 	bl	800c178 <log>
 8001878:	ec51 0b10 	vmov	r0, r1, d0
 800187c:	a340      	add	r3, pc, #256	; (adr r3, 8001980 <startTemperature+0x1d0>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fed9 	bl	8000638 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	a33e      	add	r3, pc, #248	; (adr r3, 8001988 <startTemperature+0x1d8>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fd1a 	bl	80002cc <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	6938      	ldr	r0, [r7, #16]
 80018a2:	f7fe fe71 	bl	8000588 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b10 	vmov	d0, r2, r3
 80018ae:	f00a fc63 	bl	800c178 <log>
 80018b2:	eeb0 7a40 	vmov.f32	s14, s0
 80018b6:	eef0 7a60 	vmov.f32	s15, s1
 80018ba:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001990 <startTemperature+0x1e0>
 80018be:	eeb0 0a47 	vmov.f32	s0, s14
 80018c2:	eef0 0a67 	vmov.f32	s1, s15
 80018c6:	f00a fc95 	bl	800c1f4 <pow>
 80018ca:	ec51 0b10 	vmov	r0, r1, d0
 80018ce:	a332      	add	r3, pc, #200	; (adr r3, 8001998 <startTemperature+0x1e8>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe feb0 	bl	8000638 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fcf4 	bl	80002cc <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	6938      	ldr	r0, [r7, #16]
 80018ee:	f7fe fe4b 	bl	8000588 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	ec43 2b10 	vmov	d0, r2, r3
 80018fa:	f00a fc3d 	bl	800c178 <log>
 80018fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001902:	eef0 7a60 	vmov.f32	s15, s1
 8001906:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80019a0 <startTemperature+0x1f0>
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	eef0 0a67 	vmov.f32	s1, s15
 8001912:	f00a fc6f 	bl	800c1f4 <pow>
 8001916:	ec51 0b10 	vmov	r0, r1, d0
 800191a:	a323      	add	r3, pc, #140	; (adr r3, 80019a8 <startTemperature+0x1f8>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe8a 	bl	8000638 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7fe fcce 	bl	80002cc <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	f04f 0000 	mov.w	r0, #0
 8001938:	4923      	ldr	r1, [pc, #140]	; (80019c8 <startTemperature+0x218>)
 800193a:	f7fe ffa7 	bl	800088c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	a31a      	add	r3, pc, #104	; (adr r3, 80019b0 <startTemperature+0x200>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fcbc 	bl	80002c8 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff f966 	bl	8000c28 <__aeabi_d2f>
 800195c:	4603      	mov	r3, r0
 800195e:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <startTemperature+0x21c>)
 8001960:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2101      	movs	r1, #1
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <startTemperature+0x208>)
 8001968:	f001 fb3a 	bl	8002fe0 <HAL_GPIO_WritePin>
	osDelay(400);
 800196c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001970:	f003 fe6f 	bl	8005652 <osDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001974:	e726      	b.n	80017c4 <startTemperature+0x14>
 8001976:	bf00      	nop
 8001978:	66666666 	.word	0x66666666
 800197c:	400a6666 	.word	0x400a6666
 8001980:	356c26d4 	.word	0x356c26d4
 8001984:	3f2d6359 	.word	0x3f2d6359
 8001988:	74755c46 	.word	0x74755c46
 800198c:	3f52fcca 	.word	0x3f52fcca
 8001990:	00000000 	.word	0x00000000
 8001994:	40000000 	.word	0x40000000
 8001998:	37f560c7 	.word	0x37f560c7
 800199c:	3eb2230f 	.word	0x3eb2230f
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40080000 	.word	0x40080000
 80019a8:	c1edfe7f 	.word	0xc1edfe7f
 80019ac:	3e6a5616 	.word	0x3e6a5616
 80019b0:	66666666 	.word	0x66666666
 80019b4:	40711266 	.word	0x40711266
 80019b8:	40020000 	.word	0x40020000
 80019bc:	20000218 	.word	0x20000218
 80019c0:	40b00000 	.word	0x40b00000
 80019c4:	461c4000 	.word	0x461c4000
 80019c8:	3ff00000 	.word	0x3ff00000
 80019cc:	200006ec 	.word	0x200006ec

080019d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <MX_GPIO_Init+0x164>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <MX_GPIO_Init+0x164>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <MX_GPIO_Init+0x164>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a4a      	ldr	r2, [pc, #296]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a35      	ldr	r2, [pc, #212]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <MX_GPIO_Init+0x164>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(thermistorSwitch_GPIO_Port, thermistorSwitch_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2101      	movs	r1, #1
 8001a76:	4830      	ldr	r0, [pc, #192]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a78:	f001 fab2 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a82:	2303      	movs	r3, #3
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	482a      	ldr	r0, [pc, #168]	; (8001b3c <MX_GPIO_Init+0x16c>)
 8001a92:	f001 f929 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = thermistorSwitch_Pin;
 8001a96:	2301      	movs	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(thermistorSwitch_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4822      	ldr	r0, [pc, #136]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001aae:	f001 f91b 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001ab2:	f241 13fc 	movw	r3, #4604	; 0x11fc
 8001ab6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481c      	ldr	r0, [pc, #112]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001ac8:	f001 f90e 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB5
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001acc:	f24f 1327 	movw	r3, #61735	; 0xf127
 8001ad0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4817      	ldr	r0, [pc, #92]	; (8001b40 <MX_GPIO_Init+0x170>)
 8001ae2:	f001 f901 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTS_Pin;
 8001ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CTS_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	480e      	ldr	r0, [pc, #56]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001afe:	f001 f8f3 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b02:	2304      	movs	r3, #4
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <MX_GPIO_Init+0x174>)
 8001b16:	f001 f8e7 	bl	8002ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	2028      	movs	r0, #40	; 0x28
 8001b20:	f001 f8b8 	bl	8002c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b24:	2028      	movs	r0, #40	; 0x28
 8001b26:	f001 f8d1 	bl	8002ccc <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020400 	.word	0x40020400
 8001b44:	40020c00 	.word	0x40020c00

08001b48 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <MX_I2C1_Init+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_I2C1_Init+0x58>)
 8001b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_I2C1_Init+0x50>)
 8001b86:	f001 fa5d 	bl	8003044 <HAL_I2C_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b90:	f000 f998 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000550 	.word	0x20000550
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	00061a80 	.word	0x00061a80

08001ba4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001baa:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <MX_I2C2_Init+0x54>)
 8001bac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <MX_I2C2_Init+0x58>)
 8001bb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <MX_I2C2_Init+0x50>)
 8001be2:	f001 fa2f 	bl	8003044 <HAL_I2C_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bec:	f000 f96a 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200005a4 	.word	0x200005a4
 8001bf8:	40005800 	.word	0x40005800
 8001bfc:	00061a80 	.word	0x00061a80

08001c00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	; 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <HAL_I2C_MspInit+0x10c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d12c      	bne.n	8001c7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a39      	ldr	r2, [pc, #228]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3e:	23c0      	movs	r3, #192	; 0xc0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	482e      	ldr	r0, [pc, #184]	; (8001d14 <HAL_I2C_MspInit+0x114>)
 8001c5a:	f001 f845 	bl	8002ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a2a      	ldr	r2, [pc, #168]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c7a:	e042      	b.n	8001d02 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <HAL_I2C_MspInit+0x118>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d13d      	bne.n	8001d02 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca8:	2312      	movs	r3, #18
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4815      	ldr	r0, [pc, #84]	; (8001d14 <HAL_I2C_MspInit+0x114>)
 8001cc0:	f001 f812 	bl	8002ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_I2C_MspInit+0x114>)
 8001ce2:	f001 f801 	bl	8002ce8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_I2C_MspInit+0x110>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
}
 8001d02:	bf00      	nop
 8001d04:	3730      	adds	r7, #48	; 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40005800 	.word	0x40005800

08001d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <main+0x58>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00e      	beq.n	8001d46 <main+0x2a>
	  ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <main+0x5c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <main+0x5c>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]
	  ARM_CM_DWT_CYCCNT  = 0;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <main+0x60>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
	  ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <main+0x58>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <main+0x58>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d46:	f000 fafd 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d4a:	f000 f81d 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d4e:	f7ff fe3f 	bl	80019d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d52:	f7ff fef9 	bl	8001b48 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001d56:	f000 fa59 	bl	800220c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001d5a:	f7ff ff23 	bl	8001ba4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001d5e:	f7ff f96b 	bl	8001038 <MX_ADC1_Init>
//  I2C_trans[1] = LIS2_FIFO_Write;
//  if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
//	  //error handler
//	  for(;;);
//  }
  strcpy(UART_trans, string);
 8001d62:	4907      	ldr	r1, [pc, #28]	; (8001d80 <main+0x64>)
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <main+0x68>)
 8001d66:	f006 fe18 	bl	800899a <strcpy>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d6a:	f7ff fa15 	bl	8001198 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d6e:	f003 fc1d 	bl	80055ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <main+0x56>
 8001d74:	e0001000 	.word	0xe0001000
 8001d78:	e000edfc 	.word	0xe000edfc
 8001d7c:	e0001004 	.word	0xe0001004
 8001d80:	20000000 	.word	0x20000000
 8001d84:	200006a0 	.word	0x200006a0

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b094      	sub	sp, #80	; 0x50
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	2234      	movs	r2, #52	; 0x34
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 fe05 	bl	80079a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <SystemClock_Config+0xd0>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <SystemClock_Config+0xd0>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <SystemClock_Config+0xd0>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <SystemClock_Config+0xd4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <SystemClock_Config+0xd4>)
 8001dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <SystemClock_Config+0xd4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de8:	2301      	movs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dec:	2310      	movs	r3, #16
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df0:	2302      	movs	r3, #2
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001df8:	2310      	movs	r3, #16
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 256;
 8001dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e02:	2304      	movs	r3, #4
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fabe 	bl	8004394 <HAL_RCC_OscConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e1e:	f000 f851 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e22:	230f      	movs	r3, #15
 8001e24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	2302      	movs	r3, #2
 8001e28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 f896 	bl	8003f70 <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e4a:	f000 f83b 	bl	8001ec4 <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3750      	adds	r7, #80	; 0x50
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
float complexABS(float real, float compl) {
	return sqrtf((real*real)+(compl*compl));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_11) {
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e70:	d10c      	bne.n	8001e8c <HAL_GPIO_EXTI_Callback+0x2c>
    HAL_UART_Transmit(&huart1, (const char *)UART_trans, strlen(UART_trans), HAL_MAX_DELAY);
 8001e72:	4809      	ldr	r0, [pc, #36]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x38>)
 8001e74:	f7fe f9cc 	bl	8000210 <strlen>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	4905      	ldr	r1, [pc, #20]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x38>)
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001e84:	f003 f805 	bl	8004e92 <HAL_UART_Transmit>
    __NOP();
 8001e88:	bf00      	nop
  } else {
      __NOP();
  }
}
 8001e8a:	e000      	b.n	8001e8e <HAL_GPIO_EXTI_Callback+0x2e>
      __NOP();
 8001e8c:	bf00      	nop
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200006a0 	.word	0x200006a0
 8001e9c:	20000648 	.word	0x20000648

08001ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eb2:	f000 fa69 	bl	8002388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <Error_Handler+0x8>
	...

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_MspInit+0x54>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_MspInit+0x54>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_MspInit+0x54>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_MspInit+0x54>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_MspInit+0x54>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_MspInit+0x54>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	210f      	movs	r1, #15
 8001f12:	f06f 0001 	mvn.w	r0, #1
 8001f16:	f000 febd 	bl	8002c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_InitTick+0xd0>)
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <HAL_InitTick+0xd0>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6453      	str	r3, [r2, #68]	; 0x44
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_InitTick+0xd0>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f54:	f107 020c 	add.w	r2, r7, #12
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 f9e6 	bl	8004330 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f64:	f002 f9d0 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8001f68:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_InitTick+0xd4>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0c9b      	lsrs	r3, r3, #18
 8001f74:	3b01      	subs	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_InitTick+0xd8>)
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_InitTick+0xdc>)
 8001f7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_InitTick+0xd8>)
 8001f80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_InitTick+0xd8>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_InitTick+0xd8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_InitTick+0xd8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_InitTick+0xd8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f9e:	4818      	ldr	r0, [pc, #96]	; (8002000 <HAL_InitTick+0xd8>)
 8001fa0:	f002 fc7c 	bl	800489c <HAL_TIM_Base_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11b      	bne.n	8001fea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fb2:	4813      	ldr	r0, [pc, #76]	; (8002000 <HAL_InitTick+0xd8>)
 8001fb4:	f002 fccc 	bl	8004950 <HAL_TIM_Base_Start_IT>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d111      	bne.n	8001fea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fc6:	2019      	movs	r0, #25
 8001fc8:	f000 fe80 	bl	8002ccc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	d808      	bhi.n	8001fe4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	2019      	movs	r0, #25
 8001fd8:	f000 fe5c 	bl	8002c94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_InitTick+0xe0>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e002      	b.n	8001fea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3730      	adds	r7, #48	; 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	200005fc 	.word	0x200005fc
 8002004:	40010000 	.word	0x40010000
 8002008:	2000001c 	.word	0x2000001c

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler+0x4>

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler+0x4>

0800201e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <UsageFault_Handler+0x4>

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800203e:	f002 fcf7 	bl	8004a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200005fc 	.word	0x200005fc

0800204c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTS_Pin);
 8002050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002054:	f000 ffde 	bl	8003014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
	return 1;
 8002060:	2301      	movs	r3, #1
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_kill>:

int _kill(int pid, int sig)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002076:	f005 fb65 	bl	8007744 <__errno>
 800207a:	4603      	mov	r3, r0
 800207c:	2216      	movs	r2, #22
 800207e:	601a      	str	r2, [r3, #0]
	return -1;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_exit>:

void _exit (int status)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ffe7 	bl	800206c <_kill>
	while (1) {}		/* Make sure we hang here */
 800209e:	e7fe      	b.n	800209e <_exit+0x12>

080020a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e00a      	b.n	80020c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020b2:	f3af 8000 	nop.w
 80020b6:	4601      	mov	r1, r0
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	60ba      	str	r2, [r7, #8]
 80020be:	b2ca      	uxtb	r2, r1
 80020c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbf0      	blt.n	80020b2 <_read+0x12>
	}

return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e009      	b.n	8002100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60ba      	str	r2, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbf1      	blt.n	80020ec <_write+0x12>
	}
	return len;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_close>:

int _close(int file)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	return -1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800213a:	605a      	str	r2, [r3, #4]
	return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_isatty>:

int _isatty(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	return 1;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
	return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f005 faca 	bl	8007744 <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	220c      	movs	r2, #12
 80021b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20040000 	.word	0x20040000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	20000644 	.word	0x20000644
 80021e4:	20010258 	.word	0x20010258

080021e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <SystemInit+0x20>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <SystemInit+0x20>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <MX_USART1_UART_Init+0x50>)
 8002214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002244:	f002 fdd8 	bl	8004df8 <HAL_UART_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800224e:	f7ff fe39 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000648 	.word	0x20000648
 800225c:	40011000 	.word	0x40011000

08002260 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_UART_MspInit+0x84>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d12c      	bne.n	80022dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_UART_MspInit+0x88>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_UART_MspInit+0x88>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_UART_MspInit+0x88>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_UART_MspInit+0x88>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_UART_MspInit+0x88>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_UART_MspInit+0x88>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022cc:	2307      	movs	r3, #7
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_UART_MspInit+0x8c>)
 80022d8:	f000 fd06 	bl	8002ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022f6:	490e      	ldr	r1, [pc, #56]	; (8002330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800230c:	4c0b      	ldr	r4, [pc, #44]	; (800233c <LoopFillZerobss+0x26>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800231a:	f7ff ff65 	bl	80021e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f005 fb0d 	bl	800793c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff fcfb 	bl	8001d1c <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002328:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002334:	08029600 	.word	0x08029600
  ldr r2, =_sbss
 8002338:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800233c:	20010258 	.word	0x20010258

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>
	...

08002344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_Init+0x40>)
 800234e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_Init+0x40>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_Init+0x40>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 fc86 	bl	8002c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002372:	200f      	movs	r0, #15
 8002374:	f7ff fdd8 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002378:	f7ff fdaa 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000020 	.word	0x20000020
 80023ac:	200006f0 	.word	0x200006f0

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	200006f0 	.word	0x200006f0

080023c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e033      	b.n	8002446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fe78 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa86 	bl	800292c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
 8002436:	e001      	b.n	800243c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ADC_Start+0x1a>
 8002466:	2302      	movs	r3, #2
 8002468:	e097      	b.n	800259a <HAL_ADC_Start+0x14a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d018      	beq.n	80024b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002490:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <HAL_ADC_Start+0x158>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a45      	ldr	r2, [pc, #276]	; (80025ac <HAL_ADC_Start+0x15c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9a      	lsrs	r2, r3, #18
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024a4:	e002      	b.n	80024ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f9      	bne.n	80024a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d15f      	bne.n	8002580 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d106      	bne.n	800250e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f023 0206 	bic.w	r2, r3, #6
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
 800250c:	e002      	b.n	8002514 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_ADC_Start+0x160>)
 800251e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002528:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d129      	bne.n	8002598 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e020      	b.n	8002598 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_ADC_Start+0x164>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d11b      	bne.n	8002598 <HAL_ADC_Start+0x148>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d114      	bne.n	8002598 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	e00b      	b.n	8002598 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000018 	.word	0x20000018
 80025ac:	431bde83 	.word	0x431bde83
 80025b0:	40012300 	.word	0x40012300
 80025b4:	40012000 	.word	0x40012000

080025b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d4:	d113      	bne.n	80025fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e4:	d10b      	bne.n	80025fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e063      	b.n	80026c6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80025fe:	f7ff fed7 	bl	80023b0 <HAL_GetTick>
 8002602:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002604:	e021      	b.n	800264a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d01d      	beq.n	800264a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_ADC_PollForConversion+0x6c>
 8002614:	f7ff fecc 	bl	80023b0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d212      	bcs.n	800264a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d00b      	beq.n	800264a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e03d      	b.n	80026c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b02      	cmp	r3, #2
 8002656:	d1d6      	bne.n	8002606 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0212 	mvn.w	r2, #18
 8002660:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d123      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11f      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1c>
 8002700:	2302      	movs	r3, #2
 8002702:	e105      	b.n	8002910 <HAL_ADC_ConfigChannel+0x228>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b09      	cmp	r3, #9
 8002712:	d925      	bls.n	8002760 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68d9      	ldr	r1, [r3, #12]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	3b1e      	subs	r3, #30
 800272a:	2207      	movs	r2, #7
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43da      	mvns	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	400a      	ands	r2, r1
 8002738:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68d9      	ldr	r1, [r3, #12]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	4603      	mov	r3, r0
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4403      	add	r3, r0
 8002752:	3b1e      	subs	r3, #30
 8002754:	409a      	lsls	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	e022      	b.n	80027a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	2207      	movs	r2, #7
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	400a      	ands	r2, r1
 8002782:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6919      	ldr	r1, [r3, #16]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	4603      	mov	r3, r0
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4403      	add	r3, r0
 800279c:	409a      	lsls	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d824      	bhi.n	80027f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	3b05      	subs	r3, #5
 80027c0:	221f      	movs	r2, #31
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	400a      	ands	r2, r1
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b05      	subs	r3, #5
 80027ea:	fa00 f203 	lsl.w	r2, r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
 80027f6:	e04c      	b.n	8002892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d824      	bhi.n	800284a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b23      	subs	r3, #35	; 0x23
 8002812:	221f      	movs	r2, #31
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b23      	subs	r3, #35	; 0x23
 800283c:	fa00 f203 	lsl.w	r2, r0, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
 8002848:	e023      	b.n	8002892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b41      	subs	r3, #65	; 0x41
 800285c:	221f      	movs	r2, #31
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	400a      	ands	r2, r1
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	4618      	mov	r0, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3b41      	subs	r3, #65	; 0x41
 8002886:	fa00 f203 	lsl.w	r2, r0, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_ADC_ConfigChannel+0x234>)
 8002894:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_ADC_ConfigChannel+0x238>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d109      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1cc>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_ADC_ConfigChannel+0x238>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d123      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x21e>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d003      	beq.n	80028ce <HAL_ADC_ConfigChannel+0x1e6>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b11      	cmp	r3, #17
 80028cc:	d11b      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d111      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_ADC_ConfigChannel+0x23c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_ADC_ConfigChannel+0x240>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	0c9a      	lsrs	r2, r3, #18
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028f8:	e002      	b.n	8002900 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f9      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40012300 	.word	0x40012300
 8002920:	40012000 	.word	0x40012000
 8002924:	20000018 	.word	0x20000018
 8002928:	431bde83 	.word	0x431bde83

0800292c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002934:	4b79      	ldr	r3, [pc, #484]	; (8002b1c <ADC_Init+0x1f0>)
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	431a      	orrs	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	021a      	lsls	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <ADC_Init+0x1f4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e00f      	b.n	8002a2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0202 	bic.w	r2, r2, #2
 8002a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6899      	ldr	r1, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7e1b      	ldrb	r3, [r3, #24]
 8002a44:	005a      	lsls	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	3b01      	subs	r3, #1
 8002a84:	035a      	lsls	r2, r3, #13
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	e007      	b.n	8002aa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	051a      	lsls	r2, r3, #20
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ae2:	025a      	lsls	r2, r3, #9
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	029a      	lsls	r2, r3, #10
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40012300 	.word	0x40012300
 8002b20:	0f000001 	.word	0x0f000001

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff4c 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca6:	f7ff ff61 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f7ff ffb1 	bl	8002c18 <NVIC_EncodePriority>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff80 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff54 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e153      	b.n	8002fac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	f040 8142 	bne.w	8002fa6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d005      	beq.n	8002d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d130      	bne.n	8002d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 0201 	and.w	r2, r3, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d017      	beq.n	8002dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d123      	bne.n	8002e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 809c 	beq.w	8002fa6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <HAL_GPIO_Init+0x2dc>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4a53      	ldr	r2, [pc, #332]	; (8002fc4 <HAL_GPIO_Init+0x2dc>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_GPIO_Init+0x2dc>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8a:	4a4f      	ldr	r2, [pc, #316]	; (8002fc8 <HAL_GPIO_Init+0x2e0>)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a46      	ldr	r2, [pc, #280]	; (8002fcc <HAL_GPIO_Init+0x2e4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_GPIO_Init+0x1f6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a45      	ldr	r2, [pc, #276]	; (8002fd0 <HAL_GPIO_Init+0x2e8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_GPIO_Init+0x1f2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a44      	ldr	r2, [pc, #272]	; (8002fd4 <HAL_GPIO_Init+0x2ec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <HAL_GPIO_Init+0x1ee>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a43      	ldr	r2, [pc, #268]	; (8002fd8 <HAL_GPIO_Init+0x2f0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_GPIO_Init+0x1ea>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x1f8>
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_Init+0x1f8>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e002      	b.n	8002ee0 <HAL_GPIO_Init+0x1f8>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x1f8>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	f002 0203 	and.w	r2, r2, #3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4093      	lsls	r3, r2
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef0:	4935      	ldr	r1, [pc, #212]	; (8002fc8 <HAL_GPIO_Init+0x2e0>)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f22:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f4c:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f76:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa0:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	f67f aea8 	bls.w	8002d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020c00 	.word	0x40020c00
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ffc:	e003      	b.n	8003006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	041a      	lsls	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	619a      	str	r2, [r3, #24]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe ff14 	bl	8001e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40013c00 	.word	0x40013c00

08003044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e12b      	b.n	80032ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe fdc8 	bl	8001c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a8:	f001 f91a 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 80030ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a81      	ldr	r2, [pc, #516]	; (80032b8 <HAL_I2C_Init+0x274>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d807      	bhi.n	80030c8 <HAL_I2C_Init+0x84>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a80      	ldr	r2, [pc, #512]	; (80032bc <HAL_I2C_Init+0x278>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e006      	b.n	80030d6 <HAL_I2C_Init+0x92>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a7d      	ldr	r2, [pc, #500]	; (80032c0 <HAL_I2C_Init+0x27c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	bf94      	ite	ls
 80030d0:	2301      	movls	r3, #1
 80030d2:	2300      	movhi	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0e7      	b.n	80032ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a78      	ldr	r2, [pc, #480]	; (80032c4 <HAL_I2C_Init+0x280>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a6a      	ldr	r2, [pc, #424]	; (80032b8 <HAL_I2C_Init+0x274>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d802      	bhi.n	8003118 <HAL_I2C_Init+0xd4>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3301      	adds	r3, #1
 8003116:	e009      	b.n	800312c <HAL_I2C_Init+0xe8>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <HAL_I2C_Init+0x284>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	3301      	adds	r3, #1
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800313e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	495c      	ldr	r1, [pc, #368]	; (80032b8 <HAL_I2C_Init+0x274>)
 8003148:	428b      	cmp	r3, r1
 800314a:	d819      	bhi.n	8003180 <HAL_I2C_Init+0x13c>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e59      	subs	r1, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fbb1 f3f3 	udiv	r3, r1, r3
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003160:	400b      	ands	r3, r1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_I2C_Init+0x138>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e59      	subs	r1, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fbb1 f3f3 	udiv	r3, r1, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317a:	e051      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 800317c:	2304      	movs	r3, #4
 800317e:	e04f      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <HAL_I2C_Init+0x168>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e012      	b.n	80031d2 <HAL_I2C_Init+0x18e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Init+0x196>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e022      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10e      	bne.n	8003200 <HAL_I2C_Init+0x1bc>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e58      	subs	r0, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	440b      	add	r3, r1
 80031f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fe:	e00f      	b.n	8003220 <HAL_I2C_Init+0x1dc>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	0099      	lsls	r1, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	6809      	ldr	r1, [r1, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800324e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6911      	ldr	r1, [r2, #16]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68d2      	ldr	r2, [r2, #12]
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	430b      	orrs	r3, r1
 8003262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	000186a0 	.word	0x000186a0
 80032bc:	001e847f 	.word	0x001e847f
 80032c0:	003d08ff 	.word	0x003d08ff
 80032c4:	431bde83 	.word	0x431bde83
 80032c8:	10624dd3 	.word	0x10624dd3

080032cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	460b      	mov	r3, r1
 80032da:	817b      	strh	r3, [r7, #10]
 80032dc:	4613      	mov	r3, r2
 80032de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032e0:	f7ff f866 	bl	80023b0 <HAL_GetTick>
 80032e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	f040 80e0 	bne.w	80034b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	2319      	movs	r3, #25
 80032fa:	2201      	movs	r2, #1
 80032fc:	4970      	ldr	r1, [pc, #448]	; (80034c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fc58 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800330a:	2302      	movs	r3, #2
 800330c:	e0d3      	b.n	80034b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_I2C_Master_Transmit+0x50>
 8003318:	2302      	movs	r3, #2
 800331a:	e0cc      	b.n	80034b6 <HAL_I2C_Master_Transmit+0x1ea>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d007      	beq.n	8003342 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003350:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2210      	movs	r2, #16
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	893a      	ldrh	r2, [r7, #8]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a50      	ldr	r2, [pc, #320]	; (80034c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003384:	8979      	ldrh	r1, [r7, #10]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fac2 	bl	8003914 <I2C_MasterRequestWrite>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e08d      	b.n	80034b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033b0:	e066      	b.n	8003480 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fcd2 	bl	8003d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d107      	bne.n	80033da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06b      	b.n	80034b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b04      	cmp	r3, #4
 800341a:	d11b      	bne.n	8003454 <HAL_I2C_Master_Transmit+0x188>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	d017      	beq.n	8003454 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	6a39      	ldr	r1, [r7, #32]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fcc2 	bl	8003de2 <I2C_WaitOnBTFFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b04      	cmp	r3, #4
 800346a:	d107      	bne.n	800347c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e01a      	b.n	80034b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	d194      	bne.n	80033b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	00100002 	.word	0x00100002
 80034c4:	ffff0000 	.word	0xffff0000

080034c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	461a      	mov	r2, r3
 80034d4:	460b      	mov	r3, r1
 80034d6:	817b      	strh	r3, [r7, #10]
 80034d8:	4613      	mov	r3, r2
 80034da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034dc:	f7fe ff68 	bl	80023b0 <HAL_GetTick>
 80034e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	f040 820b 	bne.w	8003906 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2319      	movs	r3, #25
 80034f6:	2201      	movs	r2, #1
 80034f8:	497c      	ldr	r1, [pc, #496]	; (80036ec <HAL_I2C_Master_Receive+0x224>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fb5a 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
 8003508:	e1fe      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_I2C_Master_Receive+0x50>
 8003514:	2302      	movs	r3, #2
 8003516:	e1f7      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d007      	beq.n	800353e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2222      	movs	r2, #34	; 0x22
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2210      	movs	r2, #16
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	893a      	ldrh	r2, [r7, #8]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a5c      	ldr	r2, [pc, #368]	; (80036f0 <HAL_I2C_Master_Receive+0x228>)
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003580:	8979      	ldrh	r1, [r7, #10]
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fa46 	bl	8003a18 <I2C_MasterRequestRead>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1b8      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d113      	bne.n	80035c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e18c      	b.n	80038e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d11b      	bne.n	8003606 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e16c      	b.n	80038e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	2b02      	cmp	r3, #2
 800360c:	d11b      	bne.n	8003646 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	e14c      	b.n	80038e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800366c:	e138      	b.n	80038e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b03      	cmp	r3, #3
 8003674:	f200 80f1 	bhi.w	800385a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	2b01      	cmp	r3, #1
 800367e:	d123      	bne.n	80036c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fbed 	bl	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e139      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c6:	e10b      	b.n	80038e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d14e      	bne.n	800376e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	4906      	ldr	r1, [pc, #24]	; (80036f4 <HAL_I2C_Master_Receive+0x22c>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa6a 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e10e      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
 80036ea:	bf00      	nop
 80036ec:	00100002 	.word	0x00100002
 80036f0:	ffff0000 	.word	0xffff0000
 80036f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376c:	e0b8      	b.n	80038e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	2200      	movs	r2, #0
 8003776:	4966      	ldr	r1, [pc, #408]	; (8003910 <HAL_I2C_Master_Receive+0x448>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fa1b 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0bf      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	2200      	movs	r2, #0
 80037d2:	494f      	ldr	r1, [pc, #316]	; (8003910 <HAL_I2C_Master_Receive+0x448>)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f9ed 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e091      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003858:	e042      	b.n	80038e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb00 	bl	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e04c      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d118      	bne.n	80038e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f47f aec2 	bne.w	800366e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	00010004 	.word	0x00010004

08003914 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	460b      	mov	r3, r1
 8003922:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d006      	beq.n	800393e <I2C_MasterRequestWrite+0x2a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d003      	beq.n	800393e <I2C_MasterRequestWrite+0x2a>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393c:	d108      	bne.n	8003950 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00b      	b.n	8003968 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b12      	cmp	r3, #18
 8003956:	d107      	bne.n	8003968 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f91d 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d103      	bne.n	8003998 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e035      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e01b      	b.n	80039f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030f 	orn	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <I2C_MasterRequestWrite+0xfc>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f943 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e010      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4907      	ldr	r1, [pc, #28]	; (8003a14 <I2C_MasterRequestWrite+0x100>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f933 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	00010008 	.word	0x00010008
 8003a14:	00010002 	.word	0x00010002

08003a18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	460b      	mov	r3, r1
 8003a26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d006      	beq.n	8003a52 <I2C_MasterRequestRead+0x3a>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d003      	beq.n	8003a52 <I2C_MasterRequestRead+0x3a>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a50:	d108      	bne.n	8003a64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e00b      	b.n	8003a7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	2b11      	cmp	r3, #17
 8003a6a:	d107      	bne.n	8003a7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f893 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa2:	d103      	bne.n	8003aac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e079      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab8:	d108      	bne.n	8003acc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	e05f      	b.n	8003b8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003acc:	897b      	ldrh	r3, [r7, #10]
 8003ace:	11db      	asrs	r3, r3, #7
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f063 030f 	orn	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4930      	ldr	r1, [pc, #192]	; (8003bac <I2C_MasterRequestRead+0x194>)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8b9 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e054      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4929      	ldr	r1, [pc, #164]	; (8003bb0 <I2C_MasterRequestRead+0x198>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8a9 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e044      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f831 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d103      	bne.n	8003b70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e017      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	11db      	asrs	r3, r3, #7
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f063 030e 	orn	r3, r3, #14
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4907      	ldr	r1, [pc, #28]	; (8003bb0 <I2C_MasterRequestRead+0x198>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f865 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	00010008 	.word	0x00010008
 8003bb0:	00010002 	.word	0x00010002

08003bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc4:	e025      	b.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d021      	beq.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe fbef 	bl	80023b0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e023      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10d      	bne.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	43da      	mvns	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4013      	ands	r3, r2
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	e00c      	b.n	8003c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0b6      	beq.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c70:	e051      	b.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d123      	bne.n	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e046      	b.n	8003d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d021      	beq.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fe fb6d 	bl	80023b0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d116      	bne.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e020      	b.n	8003d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d10c      	bne.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	43da      	mvns	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e00b      	b.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	43da      	mvns	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d18d      	bne.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d6c:	e02d      	b.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f8ce 	bl	8003f10 <I2C_IsAcknowledgeFailed>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e02d      	b.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d021      	beq.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d86:	f7fe fb13 	bl	80023b0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d302      	bcc.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d116      	bne.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e007      	b.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d1ca      	bne.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dee:	e02d      	b.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f88d 	bl	8003f10 <I2C_IsAcknowledgeFailed>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e02d      	b.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d021      	beq.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e08:	f7fe fad2 	bl	80023b0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e007      	b.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d1ca      	bne.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e70:	e042      	b.n	8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d119      	bne.n	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0210 	mvn.w	r2, #16
 8003e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e029      	b.n	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe fa7c 	bl	80023b0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d116      	bne.n	8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d1b5      	bne.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d11b      	bne.n	8003f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0cc      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d90c      	bls.n	8003fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0b8      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc4:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	494d      	ldr	r1, [pc, #308]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d044      	beq.n	8004090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d119      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d003      	beq.n	800402e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	2b03      	cmp	r3, #3
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e06f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e067      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4934      	ldr	r1, [pc, #208]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004060:	f7fe f9a6 	bl	80023b0 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fe f9a2 	bl	80023b0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e04f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d20c      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e032      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4916      	ldr	r1, [pc, #88]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040f6:	f000 f821 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	490a      	ldr	r1, [pc, #40]	; (8004130 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd ff06 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023c00 	.word	0x40023c00
 800412c:	40023800 	.word	0x40023800
 8004130:	0800d4a8 	.word	0x0800d4a8
 8004134:	20000018 	.word	0x20000018
 8004138:	2000001c 	.word	0x2000001c

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004140:	b090      	sub	sp, #64	; 0x40
 8004142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
 8004148:	2300      	movs	r3, #0
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414c:	2300      	movs	r3, #0
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d00d      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x40>
 8004160:	2b08      	cmp	r3, #8
 8004162:	f200 80a1 	bhi.w	80042a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x34>
 800416a:	2b04      	cmp	r3, #4
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x3a>
 800416e:	e09b      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004174:	e09b      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800417a:	e098      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	627a      	str	r2, [r7, #36]	; 0x24
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041a4:	2100      	movs	r1, #0
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a8:	fb03 f201 	mul.w	r2, r3, r1
 80041ac:	2300      	movs	r3, #0
 80041ae:	fb00 f303 	mul.w	r3, r0, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	4a43      	ldr	r2, [pc, #268]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b6:	fba0 1202 	umull	r1, r2, r0, r2
 80041ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041bc:	460a      	mov	r2, r1
 80041be:	62ba      	str	r2, [r7, #40]	; 0x28
 80041c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c2:	4413      	add	r3, r2
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	2200      	movs	r2, #0
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	61fa      	str	r2, [r7, #28]
 80041ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041d6:	f7fc fd77 	bl	8000cc8 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4613      	mov	r3, r2
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e2:	e053      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e4:	4b35      	ldr	r3, [pc, #212]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	2200      	movs	r2, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	617a      	str	r2, [r7, #20]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041f6:	f04f 0b00 	mov.w	fp, #0
 80041fa:	4652      	mov	r2, sl
 80041fc:	465b      	mov	r3, fp
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420c:	0150      	lsls	r0, r2, #5
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	ebb2 080a 	subs.w	r8, r2, sl
 8004216:	eb63 090b 	sbc.w	r9, r3, fp
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004226:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800422a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800422e:	ebb2 0408 	subs.w	r4, r2, r8
 8004232:	eb63 0509 	sbc.w	r5, r3, r9
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	00eb      	lsls	r3, r5, #3
 8004240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004244:	00e2      	lsls	r2, r4, #3
 8004246:	4614      	mov	r4, r2
 8004248:	461d      	mov	r5, r3
 800424a:	eb14 030a 	adds.w	r3, r4, sl
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	eb45 030b 	adc.w	r3, r5, fp
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004262:	4629      	mov	r1, r5
 8004264:	028b      	lsls	r3, r1, #10
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800426c:	4621      	mov	r1, r4
 800426e:	028a      	lsls	r2, r1, #10
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	2200      	movs	r2, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004280:	f7fc fd22 	bl	8000cc8 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_GetSysClockFreq+0x180>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	3301      	adds	r3, #1
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800429c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042a6:	e002      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3740      	adds	r7, #64	; 0x40
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	017d7840 	.word	0x017d7840

080042c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000018 	.word	0x20000018

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	0800d4b8 	.word	0x0800d4b8

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800430c:	f7ff ffdc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0b5b      	lsrs	r3, r3, #13
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	0800d4b8 	.word	0x0800d4b8

08004330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	220f      	movs	r2, #15
 800433e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <HAL_RCC_GetClockConfig+0x5c>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0203 	and.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <HAL_RCC_GetClockConfig+0x5c>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <HAL_RCC_GetClockConfig+0x5c>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_GetClockConfig+0x5c>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	08db      	lsrs	r3, r3, #3
 800436a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <HAL_RCC_GetClockConfig+0x60>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0207 	and.w	r2, r3, #7
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
 8004390:	40023c00 	.word	0x40023c00

08004394 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e273      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d075      	beq.n	800449e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043b2:	4b88      	ldr	r3, [pc, #544]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4b85      	ldr	r3, [pc, #532]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d112      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b82      	ldr	r3, [pc, #520]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b7e      	ldr	r3, [pc, #504]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05b      	beq.n	800449c <HAL_RCC_OscConfig+0x108>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d157      	bne.n	800449c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e24e      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x74>
 80043fa:	4b76      	ldr	r3, [pc, #472]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x98>
 8004412:	4b70      	ldr	r3, [pc, #448]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a6f      	ldr	r2, [pc, #444]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b6d      	ldr	r3, [pc, #436]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a6c      	ldr	r2, [pc, #432]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 800442c:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a68      	ldr	r2, [pc, #416]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a65      	ldr	r2, [pc, #404]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd ffb0 	bl	80023b0 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fd ffac 	bl	80023b0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e213      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b5b      	ldr	r3, [pc, #364]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xc0>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd ff9c 	bl	80023b0 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447c:	f7fd ff98 	bl	80023b0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1ff      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0xe8>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d063      	beq.n	8004572 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044aa:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d11c      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1d3      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4937      	ldr	r1, [pc, #220]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	e03a      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004504:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <HAL_RCC_OscConfig+0x244>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd ff51 	bl	80023b0 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004512:	f7fd ff4d 	bl	80023b0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1b4      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4925      	ldr	r1, [pc, #148]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCC_OscConfig+0x244>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd ff30 	bl	80023b0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004554:	f7fd ff2c 	bl	80023b0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e193      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d036      	beq.n	80045ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_RCC_OscConfig+0x248>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd ff10 	bl	80023b0 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fd ff0c 	bl	80023b0 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e173      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x200>
 80045b2:	e01b      	b.n	80045ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_OscConfig+0x248>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd fef9 	bl	80023b0 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e00e      	b.n	80045e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fd fef5 	bl	80023b0 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d907      	bls.n	80045e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e15c      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	42470000 	.word	0x42470000
 80045dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e0:	4b8a      	ldr	r3, [pc, #552]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ea      	bne.n	80045c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8097 	beq.w	8004728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fe:	4b83      	ldr	r3, [pc, #524]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10f      	bne.n	800462a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	4b7f      	ldr	r3, [pc, #508]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a7e      	ldr	r2, [pc, #504]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
 800461a:	4b7c      	ldr	r3, [pc, #496]	; (800480c <HAL_RCC_OscConfig+0x478>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b79      	ldr	r3, [pc, #484]	; (8004810 <HAL_RCC_OscConfig+0x47c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d118      	bne.n	8004668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004636:	4b76      	ldr	r3, [pc, #472]	; (8004810 <HAL_RCC_OscConfig+0x47c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a75      	ldr	r2, [pc, #468]	; (8004810 <HAL_RCC_OscConfig+0x47c>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004642:	f7fd feb5 	bl	80023b0 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fd feb1 	bl	80023b0 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e118      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	4b6c      	ldr	r3, [pc, #432]	; (8004810 <HAL_RCC_OscConfig+0x47c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x2ea>
 8004670:	4b66      	ldr	r3, [pc, #408]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a65      	ldr	r2, [pc, #404]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
 800467c:	e01c      	b.n	80046b8 <HAL_RCC_OscConfig+0x324>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x30c>
 8004686:	4b61      	ldr	r3, [pc, #388]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a60      	ldr	r2, [pc, #384]	; (800480c <HAL_RCC_OscConfig+0x478>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
 8004692:	4b5e      	ldr	r3, [pc, #376]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a5d      	ldr	r2, [pc, #372]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
 800469e:	e00b      	b.n	80046b8 <HAL_RCC_OscConfig+0x324>
 80046a0:	4b5a      	ldr	r3, [pc, #360]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a59      	ldr	r2, [pc, #356]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b57      	ldr	r3, [pc, #348]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a56      	ldr	r2, [pc, #344]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80046b2:	f023 0304 	bic.w	r3, r3, #4
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd fe76 	bl	80023b0 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fd fe72 	bl	80023b0 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0d7      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046de:	4b4b      	ldr	r3, [pc, #300]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ee      	beq.n	80046c8 <HAL_RCC_OscConfig+0x334>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd fe60 	bl	80023b0 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fd fe5c 	bl	80023b0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0c1      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470a:	4b40      	ldr	r3, [pc, #256]	; (800480c <HAL_RCC_OscConfig+0x478>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ee      	bne.n	80046f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b3b      	ldr	r3, [pc, #236]	; (800480c <HAL_RCC_OscConfig+0x478>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	4a3a      	ldr	r2, [pc, #232]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004726:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80ad 	beq.w	800488c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004732:	4b36      	ldr	r3, [pc, #216]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b08      	cmp	r3, #8
 800473c:	d060      	beq.n	8004800 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d145      	bne.n	80047d2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b33      	ldr	r3, [pc, #204]	; (8004814 <HAL_RCC_OscConfig+0x480>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd fe30 	bl	80023b0 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004754:	f7fd fe2c 	bl	80023b0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e093      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	4b29      	ldr	r3, [pc, #164]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	071b      	lsls	r3, r3, #28
 800479e:	491b      	ldr	r1, [pc, #108]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x480>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fd fe01 	bl	80023b0 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fd fdfd 	bl	80023b0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e064      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x41e>
 80047d0:	e05c      	b.n	800488c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_RCC_OscConfig+0x480>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd fdea 	bl	80023b0 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd fde6 	bl	80023b0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e04d      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x44c>
 80047fe:	e045      	b.n	800488c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e040      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
 800480c:	40023800 	.word	0x40023800
 8004810:	40007000 	.word	0x40007000
 8004814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004818:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d030      	beq.n	8004888 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d129      	bne.n	8004888 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d122      	bne.n	8004888 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800484e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004850:	4293      	cmp	r3, r2
 8004852:	d119      	bne.n	8004888 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	3b01      	subs	r3, #1
 8004862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d10f      	bne.n	8004888 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800

0800489c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e041      	b.n	8004932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f839 	bl	800493a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f000 f9d8 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d001      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e04e      	b.n	8004a06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a23      	ldr	r2, [pc, #140]	; (8004a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d01d      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d111      	bne.n	80049f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d010      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	e007      	b.n	8004a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40001800 	.word	0x40001800

08004a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0202 	mvn.w	r2, #2
 8004a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8ee 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8e0 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8f1 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0204 	mvn.w	r2, #4
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8c4 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8b6 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f8c7 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0208 	mvn.w	r2, #8
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f89a 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f88c 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f89d 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0210 	mvn.w	r2, #16
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f870 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f862 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f873 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0201 	mvn.w	r2, #1
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd f976 	bl	8001ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d10e      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f902 	bl	8004de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d10e      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d107      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f838 	bl	8004c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d10e      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d107      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0220 	mvn.w	r2, #32
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8cc 	bl	8004dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a40      	ldr	r2, [pc, #256]	; (8004da4 <TIM_Base_SetConfig+0x114>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d00f      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3d      	ldr	r2, [pc, #244]	; (8004da8 <TIM_Base_SetConfig+0x118>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a3c      	ldr	r2, [pc, #240]	; (8004dac <TIM_Base_SetConfig+0x11c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3b      	ldr	r2, [pc, #236]	; (8004db0 <TIM_Base_SetConfig+0x120>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a3a      	ldr	r2, [pc, #232]	; (8004db4 <TIM_Base_SetConfig+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d108      	bne.n	8004ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <TIM_Base_SetConfig+0x114>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf0:	d027      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2c      	ldr	r2, [pc, #176]	; (8004da8 <TIM_Base_SetConfig+0x118>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d023      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2b      	ldr	r2, [pc, #172]	; (8004dac <TIM_Base_SetConfig+0x11c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01f      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <TIM_Base_SetConfig+0x120>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a29      	ldr	r2, [pc, #164]	; (8004db4 <TIM_Base_SetConfig+0x124>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d017      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a28      	ldr	r2, [pc, #160]	; (8004db8 <TIM_Base_SetConfig+0x128>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <TIM_Base_SetConfig+0x12c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <TIM_Base_SetConfig+0x130>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <TIM_Base_SetConfig+0x134>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <TIM_Base_SetConfig+0x138>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a23      	ldr	r2, [pc, #140]	; (8004dcc <TIM_Base_SetConfig+0x13c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d108      	bne.n	8004d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <TIM_Base_SetConfig+0x114>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0xf8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <TIM_Base_SetConfig+0x124>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00
 8004db4:	40010400 	.word	0x40010400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800
 8004dc4:	40001800 	.word	0x40001800
 8004dc8:	40001c00 	.word	0x40001c00
 8004dcc:	40002000 	.word	0x40002000

08004dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e03f      	b.n	8004e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fd fa1e 	bl	8002260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	; 0x24
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f929 	bl	8005094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b08a      	sub	sp, #40	; 0x28
 8004e96:	af02      	add	r7, sp, #8
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d17c      	bne.n	8004fac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_UART_Transmit+0x2c>
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e075      	b.n	8004fae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Transmit+0x3e>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e06e      	b.n	8004fae <HAL_UART_Transmit+0x11c>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2221      	movs	r2, #33	; 0x21
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ee6:	f7fd fa63 	bl	80023b0 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f00:	d108      	bne.n	8004f14 <HAL_UART_Transmit+0x82>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e003      	b.n	8004f1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f24:	e02a      	b.n	8004f7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f840 	bl	8004fb6 <UART_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e036      	b.n	8004fae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	3302      	adds	r3, #2
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	e007      	b.n	8004f6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1cf      	bne.n	8004f26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2140      	movs	r1, #64	; 0x40
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f810 	bl	8004fb6 <UART_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e006      	b.n	8004fae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b090      	sub	sp, #64	; 0x40
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc6:	e050      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d04c      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd6:	f7fd f9eb 	bl	80023b0 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d241      	bcs.n	800506a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005006:	637a      	str	r2, [r7, #52]	; 0x34
 8005008:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e5      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	613b      	str	r3, [r7, #16]
   return(result);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503a:	623a      	str	r2, [r7, #32]
 800503c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	69f9      	ldr	r1, [r7, #28]
 8005040:	6a3a      	ldr	r2, [r7, #32]
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	61bb      	str	r3, [r7, #24]
   return(result);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e00f      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	429a      	cmp	r2, r3
 8005086:	d09f      	beq.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3740      	adds	r7, #64	; 0x40
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005098:	b0c0      	sub	sp, #256	; 0x100
 800509a:	af00      	add	r7, sp, #0
 800509c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	68d9      	ldr	r1, [r3, #12]
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	ea40 0301 	orr.w	r3, r0, r1
 80050bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050ec:	f021 010c 	bic.w	r1, r1, #12
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050fa:	430b      	orrs	r3, r1
 80050fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	6999      	ldr	r1, [r3, #24]
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	ea40 0301 	orr.w	r3, r0, r1
 800511a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b8f      	ldr	r3, [pc, #572]	; (8005360 <UART_SetConfig+0x2cc>)
 8005124:	429a      	cmp	r2, r3
 8005126:	d005      	beq.n	8005134 <UART_SetConfig+0xa0>
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b8d      	ldr	r3, [pc, #564]	; (8005364 <UART_SetConfig+0x2d0>)
 8005130:	429a      	cmp	r2, r3
 8005132:	d104      	bne.n	800513e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005134:	f7ff f8e8 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8005138:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800513c:	e003      	b.n	8005146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800513e:	f7ff f8cf 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005142:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005150:	f040 810c 	bne.w	800536c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005158:	2200      	movs	r2, #0
 800515a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800515e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005166:	4622      	mov	r2, r4
 8005168:	462b      	mov	r3, r5
 800516a:	1891      	adds	r1, r2, r2
 800516c:	65b9      	str	r1, [r7, #88]	; 0x58
 800516e:	415b      	adcs	r3, r3
 8005170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005176:	4621      	mov	r1, r4
 8005178:	eb12 0801 	adds.w	r8, r2, r1
 800517c:	4629      	mov	r1, r5
 800517e:	eb43 0901 	adc.w	r9, r3, r1
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800518e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005196:	4690      	mov	r8, r2
 8005198:	4699      	mov	r9, r3
 800519a:	4623      	mov	r3, r4
 800519c:	eb18 0303 	adds.w	r3, r8, r3
 80051a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051a4:	462b      	mov	r3, r5
 80051a6:	eb49 0303 	adc.w	r3, r9, r3
 80051aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051c2:	460b      	mov	r3, r1
 80051c4:	18db      	adds	r3, r3, r3
 80051c6:	653b      	str	r3, [r7, #80]	; 0x50
 80051c8:	4613      	mov	r3, r2
 80051ca:	eb42 0303 	adc.w	r3, r2, r3
 80051ce:	657b      	str	r3, [r7, #84]	; 0x54
 80051d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051d8:	f7fb fd76 	bl	8000cc8 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4b61      	ldr	r3, [pc, #388]	; (8005368 <UART_SetConfig+0x2d4>)
 80051e2:	fba3 2302 	umull	r2, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	011c      	lsls	r4, r3, #4
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	1891      	adds	r1, r2, r2
 8005202:	64b9      	str	r1, [r7, #72]	; 0x48
 8005204:	415b      	adcs	r3, r3
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800520c:	4641      	mov	r1, r8
 800520e:	eb12 0a01 	adds.w	sl, r2, r1
 8005212:	4649      	mov	r1, r9
 8005214:	eb43 0b01 	adc.w	fp, r3, r1
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800522c:	4692      	mov	sl, r2
 800522e:	469b      	mov	fp, r3
 8005230:	4643      	mov	r3, r8
 8005232:	eb1a 0303 	adds.w	r3, sl, r3
 8005236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800523a:	464b      	mov	r3, r9
 800523c:	eb4b 0303 	adc.w	r3, fp, r3
 8005240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005250:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005258:	460b      	mov	r3, r1
 800525a:	18db      	adds	r3, r3, r3
 800525c:	643b      	str	r3, [r7, #64]	; 0x40
 800525e:	4613      	mov	r3, r2
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	647b      	str	r3, [r7, #68]	; 0x44
 8005266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800526a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800526e:	f7fb fd2b 	bl	8000cc8 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4611      	mov	r1, r2
 8005278:	4b3b      	ldr	r3, [pc, #236]	; (8005368 <UART_SetConfig+0x2d4>)
 800527a:	fba3 2301 	umull	r2, r3, r3, r1
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2264      	movs	r2, #100	; 0x64
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	1acb      	subs	r3, r1, r3
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800528e:	4b36      	ldr	r3, [pc, #216]	; (8005368 <UART_SetConfig+0x2d4>)
 8005290:	fba3 2302 	umull	r2, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800529c:	441c      	add	r4, r3
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80052b8:	415b      	adcs	r3, r3
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052c0:	4641      	mov	r1, r8
 80052c2:	1851      	adds	r1, r2, r1
 80052c4:	6339      	str	r1, [r7, #48]	; 0x30
 80052c6:	4649      	mov	r1, r9
 80052c8:	414b      	adcs	r3, r1
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052d8:	4659      	mov	r1, fp
 80052da:	00cb      	lsls	r3, r1, #3
 80052dc:	4651      	mov	r1, sl
 80052de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e2:	4651      	mov	r1, sl
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	4642      	mov	r2, r8
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052f4:	464b      	mov	r3, r9
 80052f6:	460a      	mov	r2, r1
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800530c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005314:	460b      	mov	r3, r1
 8005316:	18db      	adds	r3, r3, r3
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
 800531a:	4613      	mov	r3, r2
 800531c:	eb42 0303 	adc.w	r3, r2, r3
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800532a:	f7fb fccd 	bl	8000cc8 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <UART_SetConfig+0x2d4>)
 8005334:	fba3 1302 	umull	r1, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	2164      	movs	r1, #100	; 0x64
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	3332      	adds	r3, #50	; 0x32
 8005346:	4a08      	ldr	r2, [pc, #32]	; (8005368 <UART_SetConfig+0x2d4>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f003 0207 	and.w	r2, r3, #7
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4422      	add	r2, r4
 800535a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800535c:	e105      	b.n	800556a <UART_SetConfig+0x4d6>
 800535e:	bf00      	nop
 8005360:	40011000 	.word	0x40011000
 8005364:	40011400 	.word	0x40011400
 8005368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800536c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005370:	2200      	movs	r2, #0
 8005372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005376:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800537a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800537e:	4642      	mov	r2, r8
 8005380:	464b      	mov	r3, r9
 8005382:	1891      	adds	r1, r2, r2
 8005384:	6239      	str	r1, [r7, #32]
 8005386:	415b      	adcs	r3, r3
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800538e:	4641      	mov	r1, r8
 8005390:	1854      	adds	r4, r2, r1
 8005392:	4649      	mov	r1, r9
 8005394:	eb43 0501 	adc.w	r5, r3, r1
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	00eb      	lsls	r3, r5, #3
 80053a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a6:	00e2      	lsls	r2, r4, #3
 80053a8:	4614      	mov	r4, r2
 80053aa:	461d      	mov	r5, r3
 80053ac:	4643      	mov	r3, r8
 80053ae:	18e3      	adds	r3, r4, r3
 80053b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053b4:	464b      	mov	r3, r9
 80053b6:	eb45 0303 	adc.w	r3, r5, r3
 80053ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053da:	4629      	mov	r1, r5
 80053dc:	008b      	lsls	r3, r1, #2
 80053de:	4621      	mov	r1, r4
 80053e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e4:	4621      	mov	r1, r4
 80053e6:	008a      	lsls	r2, r1, #2
 80053e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053ec:	f7fb fc6c 	bl	8000cc8 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4b60      	ldr	r3, [pc, #384]	; (8005578 <UART_SetConfig+0x4e4>)
 80053f6:	fba3 2302 	umull	r2, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	011c      	lsls	r4, r3, #4
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005408:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800540c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	61b9      	str	r1, [r7, #24]
 8005418:	415b      	adcs	r3, r3
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005420:	4641      	mov	r1, r8
 8005422:	1851      	adds	r1, r2, r1
 8005424:	6139      	str	r1, [r7, #16]
 8005426:	4649      	mov	r1, r9
 8005428:	414b      	adcs	r3, r1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005438:	4659      	mov	r1, fp
 800543a:	00cb      	lsls	r3, r1, #3
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005442:	4651      	mov	r1, sl
 8005444:	00ca      	lsls	r2, r1, #3
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	4603      	mov	r3, r0
 800544c:	4642      	mov	r2, r8
 800544e:	189b      	adds	r3, r3, r2
 8005450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005454:	464b      	mov	r3, r9
 8005456:	460a      	mov	r2, r1
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	67bb      	str	r3, [r7, #120]	; 0x78
 800546a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005478:	4649      	mov	r1, r9
 800547a:	008b      	lsls	r3, r1, #2
 800547c:	4641      	mov	r1, r8
 800547e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005482:	4641      	mov	r1, r8
 8005484:	008a      	lsls	r2, r1, #2
 8005486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800548a:	f7fb fc1d 	bl	8000cc8 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b39      	ldr	r3, [pc, #228]	; (8005578 <UART_SetConfig+0x4e4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	; 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	3332      	adds	r3, #50	; 0x32
 80054a6:	4a34      	ldr	r2, [pc, #208]	; (8005578 <UART_SetConfig+0x4e4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b2:	441c      	add	r4, r3
 80054b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b8:	2200      	movs	r2, #0
 80054ba:	673b      	str	r3, [r7, #112]	; 0x70
 80054bc:	677a      	str	r2, [r7, #116]	; 0x74
 80054be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054c2:	4642      	mov	r2, r8
 80054c4:	464b      	mov	r3, r9
 80054c6:	1891      	adds	r1, r2, r2
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	415b      	adcs	r3, r3
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054d2:	4641      	mov	r1, r8
 80054d4:	1851      	adds	r1, r2, r1
 80054d6:	6039      	str	r1, [r7, #0]
 80054d8:	4649      	mov	r1, r9
 80054da:	414b      	adcs	r3, r1
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054ea:	4659      	mov	r1, fp
 80054ec:	00cb      	lsls	r3, r1, #3
 80054ee:	4651      	mov	r1, sl
 80054f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f4:	4651      	mov	r1, sl
 80054f6:	00ca      	lsls	r2, r1, #3
 80054f8:	4610      	mov	r0, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	4603      	mov	r3, r0
 80054fe:	4642      	mov	r2, r8
 8005500:	189b      	adds	r3, r3, r2
 8005502:	66bb      	str	r3, [r7, #104]	; 0x68
 8005504:	464b      	mov	r3, r9
 8005506:	460a      	mov	r2, r1
 8005508:	eb42 0303 	adc.w	r3, r2, r3
 800550c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	663b      	str	r3, [r7, #96]	; 0x60
 8005518:	667a      	str	r2, [r7, #100]	; 0x64
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005526:	4649      	mov	r1, r9
 8005528:	008b      	lsls	r3, r1, #2
 800552a:	4641      	mov	r1, r8
 800552c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005530:	4641      	mov	r1, r8
 8005532:	008a      	lsls	r2, r1, #2
 8005534:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005538:	f7fb fbc6 	bl	8000cc8 <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <UART_SetConfig+0x4e4>)
 8005542:	fba3 1302 	umull	r1, r3, r3, r2
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	2164      	movs	r1, #100	; 0x64
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	3332      	adds	r3, #50	; 0x32
 8005554:	4a08      	ldr	r2, [pc, #32]	; (8005578 <UART_SetConfig+0x4e4>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	f003 020f 	and.w	r2, r3, #15
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4422      	add	r2, r4
 8005568:	609a      	str	r2, [r3, #8]
}
 800556a:	bf00      	nop
 800556c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005576:	bf00      	nop
 8005578:	51eb851f 	.word	0x51eb851f

0800557c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800558a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800558e:	2b84      	cmp	r3, #132	; 0x84
 8005590:	d005      	beq.n	800559e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005592:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	3303      	adds	r3, #3
 800559c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055b0:	f000 faf6 	bl	8005ba0 <vTaskStartScheduler>
  
  return osOK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	bd80      	pop	{r7, pc}

080055ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055bc:	b089      	sub	sp, #36	; 0x24
 80055be:	af04      	add	r7, sp, #16
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <osThreadCreate+0x54>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01c      	beq.n	800560e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685c      	ldr	r4, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681d      	ldr	r5, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691e      	ldr	r6, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ffc8 	bl	800557c <makeFreeRtosPriority>
 80055ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055f6:	9202      	str	r2, [sp, #8]
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	9100      	str	r1, [sp, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4632      	mov	r2, r6
 8005600:	4629      	mov	r1, r5
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f8ed 	bl	80057e2 <xTaskCreateStatic>
 8005608:	4603      	mov	r3, r0
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e01c      	b.n	8005648 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685c      	ldr	r4, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800561a:	b29e      	uxth	r6, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ffaa 	bl	800557c <makeFreeRtosPriority>
 8005628:	4602      	mov	r2, r0
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	9200      	str	r2, [sp, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	4632      	mov	r2, r6
 8005636:	4629      	mov	r1, r5
 8005638:	4620      	mov	r0, r4
 800563a:	f000 f92f 	bl	800589c <xTaskCreate>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005652 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <osDelay+0x16>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	e000      	b.n	800566a <osDelay+0x18>
 8005668:	2301      	movs	r3, #1
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fa64 	bl	8005b38 <vTaskDelay>
  
  return osOK;
 8005670:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f103 0208 	add.w	r2, r3, #8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f04f 32ff 	mov.w	r2, #4294967295
 8005692:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f103 0208 	add.w	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f103 0208 	add.w	r2, r3, #8
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d103      	bne.n	800573c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e00c      	b.n	8005756 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3308      	adds	r3, #8
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e002      	b.n	800574a <vListInsert+0x2e>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	d2f6      	bcs.n	8005744 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6852      	ldr	r2, [r2, #4]
 80057ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d103      	bne.n	80057c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b08e      	sub	sp, #56	; 0x38
 80057e6:	af04      	add	r7, sp, #16
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <xTaskCreateStatic+0x46>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	61fb      	str	r3, [r7, #28]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005828:	23b4      	movs	r3, #180	; 0xb4
 800582a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2bb4      	cmp	r3, #180	; 0xb4
 8005830:	d00a      	beq.n	8005848 <xTaskCreateStatic+0x66>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	61bb      	str	r3, [r7, #24]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005848:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01e      	beq.n	800588e <xTaskCreateStatic+0xac>
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01b      	beq.n	800588e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800585e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	2202      	movs	r2, #2
 8005864:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005868:	2300      	movs	r3, #0
 800586a:	9303      	str	r3, [sp, #12]
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	9302      	str	r3, [sp, #8]
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f851 	bl	8005928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005888:	f000 f8ec 	bl	8005a64 <prvAddNewTaskToReadyList>
 800588c:	e001      	b.n	8005892 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005892:	697b      	ldr	r3, [r7, #20]
	}
 8005894:	4618      	mov	r0, r3
 8005896:	3728      	adds	r7, #40	; 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af04      	add	r7, sp, #16
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	4613      	mov	r3, r2
 80058aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fef1 	bl	8006698 <pvPortMalloc>
 80058b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00e      	beq.n	80058dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058be:	20b4      	movs	r0, #180	; 0xb4
 80058c0:	f000 feea 	bl	8006698 <pvPortMalloc>
 80058c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
 80058d2:	e005      	b.n	80058e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058d4:	6978      	ldr	r0, [r7, #20]
 80058d6:	f000 ffab 	bl	8006830 <vPortFree>
 80058da:	e001      	b.n	80058e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d017      	beq.n	8005916 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ee:	88fa      	ldrh	r2, [r7, #6]
 80058f0:	2300      	movs	r3, #0
 80058f2:	9303      	str	r3, [sp, #12]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	9302      	str	r3, [sp, #8]
 80058f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f80f 	bl	8005928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800590a:	69f8      	ldr	r0, [r7, #28]
 800590c:	f000 f8aa 	bl	8005a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005910:	2301      	movs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e002      	b.n	800591c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800591c:	69bb      	ldr	r3, [r7, #24]
	}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005940:	3b01      	subs	r3, #1
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f023 0307 	bic.w	r3, r3, #7
 800594e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <prvInitialiseNewTask+0x48>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	617b      	str	r3, [r7, #20]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01f      	beq.n	80059b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e012      	b.n	80059a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	7819      	ldrb	r1, [r3, #0]
 8005984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	3334      	adds	r3, #52	; 0x34
 800598c:	460a      	mov	r2, r1
 800598e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	d9e9      	bls.n	800597c <prvInitialiseNewTask+0x54>
 80059a8:	e000      	b.n	80059ac <prvInitialiseNewTask+0x84>
			{
				break;
 80059aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b4:	e003      	b.n	80059be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d901      	bls.n	80059c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059c4:	2306      	movs	r3, #6
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	3304      	adds	r3, #4
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fe6b 	bl	80056ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	3318      	adds	r3, #24
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fe66 	bl	80056ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	f1c3 0207 	rsb	r2, r3, #7
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	334c      	adds	r3, #76	; 0x4c
 8005a18:	2260      	movs	r2, #96	; 0x60
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 ffc2 	bl	80079a6 <memset>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <prvInitialiseNewTask+0x130>)
 8005a26:	651a      	str	r2, [r3, #80]	; 0x50
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <prvInitialiseNewTask+0x134>)
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	4a0b      	ldr	r2, [pc, #44]	; (8005a60 <prvInitialiseNewTask+0x138>)
 8005a32:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	69b8      	ldr	r0, [r7, #24]
 8005a3a:	f000 fc1f 	bl	800627c <pxPortInitialiseStack>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a50:	bf00      	nop
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	08029138 	.word	0x08029138
 8005a5c:	08029158 	.word	0x08029158
 8005a60:	08029118 	.word	0x08029118

08005a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a6c:	f000 fd32 	bl	80064d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a70:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <prvAddNewTaskToReadyList+0xb8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a29      	ldr	r2, [pc, #164]	; (8005b1c <prvAddNewTaskToReadyList+0xb8>)
 8005a78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a7a:	4b29      	ldr	r3, [pc, #164]	; (8005b20 <prvAddNewTaskToReadyList+0xbc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a82:	4a27      	ldr	r2, [pc, #156]	; (8005b20 <prvAddNewTaskToReadyList+0xbc>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a88:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <prvAddNewTaskToReadyList+0xb8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d110      	bne.n	8005ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a90:	f000 facc 	bl	800602c <prvInitialiseTaskLists>
 8005a94:	e00d      	b.n	8005ab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a96:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <prvAddNewTaskToReadyList+0xc0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a9e:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <prvAddNewTaskToReadyList+0xbc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d802      	bhi.n	8005ab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005aac:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <prvAddNewTaskToReadyList+0xbc>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ab2:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <prvAddNewTaskToReadyList+0xc4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <prvAddNewTaskToReadyList+0xc4>)
 8005aba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <prvAddNewTaskToReadyList+0xc8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <prvAddNewTaskToReadyList+0xc8>)
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <prvAddNewTaskToReadyList+0xcc>)
 8005adc:	441a      	add	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f7ff fdf5 	bl	80056d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aea:	f000 fd23 	bl	8006534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <prvAddNewTaskToReadyList+0xc0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005af6:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <prvAddNewTaskToReadyList+0xbc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d207      	bcs.n	8005b14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <prvAddNewTaskToReadyList+0xd0>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	200007f4 	.word	0x200007f4
 8005b20:	200006f4 	.word	0x200006f4
 8005b24:	20000800 	.word	0x20000800
 8005b28:	20000810 	.word	0x20000810
 8005b2c:	200007fc 	.word	0x200007fc
 8005b30:	200006f8 	.word	0x200006f8
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d017      	beq.n	8005b7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <vTaskDelay+0x60>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <vTaskDelay+0x30>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60bb      	str	r3, [r7, #8]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b68:	f000 f884 	bl	8005c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fb1e 	bl	80061b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b74:	f000 f88c 	bl	8005c90 <xTaskResumeAll>
 8005b78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <vTaskDelay+0x64>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2000081c 	.word	0x2000081c
 8005b9c:	e000ed04 	.word	0xe000ed04

08005ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bae:	463a      	mov	r2, r7
 8005bb0:	1d39      	adds	r1, r7, #4
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fb fad4 	bl	8001164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	9202      	str	r2, [sp, #8]
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	460a      	mov	r2, r1
 8005bce:	4921      	ldr	r1, [pc, #132]	; (8005c54 <vTaskStartScheduler+0xb4>)
 8005bd0:	4821      	ldr	r0, [pc, #132]	; (8005c58 <vTaskStartScheduler+0xb8>)
 8005bd2:	f7ff fe06 	bl	80057e2 <xTaskCreateStatic>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4a20      	ldr	r2, [pc, #128]	; (8005c5c <vTaskStartScheduler+0xbc>)
 8005bda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bdc:	4b1f      	ldr	r3, [pc, #124]	; (8005c5c <vTaskStartScheduler+0xbc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005be4:	2301      	movs	r3, #1
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e001      	b.n	8005bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d11b      	bne.n	8005c2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	613b      	str	r3, [r7, #16]
}
 8005c06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <vTaskStartScheduler+0xc0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	334c      	adds	r3, #76	; 0x4c
 8005c0e:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <vTaskStartScheduler+0xc4>)
 8005c10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <vTaskStartScheduler+0xc8>)
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295
 8005c18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <vTaskStartScheduler+0xcc>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <vTaskStartScheduler+0xd0>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c26:	f000 fbb3 	bl	8006390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c2a:	e00e      	b.n	8005c4a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d10a      	bne.n	8005c4a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	60fb      	str	r3, [r7, #12]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <vTaskStartScheduler+0xa8>
}
 8005c4a:	bf00      	nop
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	0800d4a0 	.word	0x0800d4a0
 8005c58:	08005ffd 	.word	0x08005ffd
 8005c5c:	20000818 	.word	0x20000818
 8005c60:	200006f4 	.word	0x200006f4
 8005c64:	20000028 	.word	0x20000028
 8005c68:	20000814 	.word	0x20000814
 8005c6c:	20000800 	.word	0x20000800
 8005c70:	200007f8 	.word	0x200007f8

08005c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <vTaskSuspendAll+0x18>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	4a03      	ldr	r2, [pc, #12]	; (8005c8c <vTaskSuspendAll+0x18>)
 8005c80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c82:	bf00      	nop
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	2000081c 	.word	0x2000081c

08005c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c9e:	4b41      	ldr	r3, [pc, #260]	; (8005da4 <xTaskResumeAll+0x114>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <xTaskResumeAll+0x2c>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	603b      	str	r3, [r7, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cbc:	f000 fc0a 	bl	80064d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cc0:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <xTaskResumeAll+0x114>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	4a37      	ldr	r2, [pc, #220]	; (8005da4 <xTaskResumeAll+0x114>)
 8005cc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <xTaskResumeAll+0x114>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d161      	bne.n	8005d96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cd2:	4b35      	ldr	r3, [pc, #212]	; (8005da8 <xTaskResumeAll+0x118>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d05d      	beq.n	8005d96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cda:	e02e      	b.n	8005d3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cdc:	4b33      	ldr	r3, [pc, #204]	; (8005dac <xTaskResumeAll+0x11c>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3318      	adds	r3, #24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fd50 	bl	800578e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fd4b 	bl	800578e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	409a      	lsls	r2, r3
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <xTaskResumeAll+0x120>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <xTaskResumeAll+0x120>)
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <xTaskResumeAll+0x124>)
 8005d18:	441a      	add	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7ff fcd7 	bl	80056d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2a:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <xTaskResumeAll+0x128>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d302      	bcc.n	8005d3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d34:	4b21      	ldr	r3, [pc, #132]	; (8005dbc <xTaskResumeAll+0x12c>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d3a:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <xTaskResumeAll+0x11c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1cc      	bne.n	8005cdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d48:	f000 fa12 	bl	8006170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d4c:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <xTaskResumeAll+0x130>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d010      	beq.n	8005d7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d58:	f000 f836 	bl	8005dc8 <xTaskIncrementTick>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <xTaskResumeAll+0x12c>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f1      	bne.n	8005d58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <xTaskResumeAll+0x130>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <xTaskResumeAll+0x12c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d82:	2301      	movs	r3, #1
 8005d84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d86:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <xTaskResumeAll+0x134>)
 8005d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d96:	f000 fbcd 	bl	8006534 <vPortExitCritical>

	return xAlreadyYielded;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	2000081c 	.word	0x2000081c
 8005da8:	200007f4 	.word	0x200007f4
 8005dac:	200007b4 	.word	0x200007b4
 8005db0:	200007fc 	.word	0x200007fc
 8005db4:	200006f8 	.word	0x200006f8
 8005db8:	200006f4 	.word	0x200006f4
 8005dbc:	20000808 	.word	0x20000808
 8005dc0:	20000804 	.word	0x20000804
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd2:	4b4e      	ldr	r3, [pc, #312]	; (8005f0c <xTaskIncrementTick+0x144>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 808e 	bne.w	8005ef8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	; (8005f10 <xTaskIncrementTick+0x148>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3301      	adds	r3, #1
 8005de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005de4:	4a4a      	ldr	r2, [pc, #296]	; (8005f10 <xTaskIncrementTick+0x148>)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d120      	bne.n	8005e32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005df0:	4b48      	ldr	r3, [pc, #288]	; (8005f14 <xTaskIncrementTick+0x14c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <xTaskIncrementTick+0x48>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	603b      	str	r3, [r7, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <xTaskIncrementTick+0x46>
 8005e10:	4b40      	ldr	r3, [pc, #256]	; (8005f14 <xTaskIncrementTick+0x14c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	4b40      	ldr	r3, [pc, #256]	; (8005f18 <xTaskIncrementTick+0x150>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a3e      	ldr	r2, [pc, #248]	; (8005f14 <xTaskIncrementTick+0x14c>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4a3e      	ldr	r2, [pc, #248]	; (8005f18 <xTaskIncrementTick+0x150>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4b3d      	ldr	r3, [pc, #244]	; (8005f1c <xTaskIncrementTick+0x154>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	4a3c      	ldr	r2, [pc, #240]	; (8005f1c <xTaskIncrementTick+0x154>)
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	f000 f99f 	bl	8006170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e32:	4b3b      	ldr	r3, [pc, #236]	; (8005f20 <xTaskIncrementTick+0x158>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d348      	bcc.n	8005ece <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e3c:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <xTaskIncrementTick+0x14c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e46:	4b36      	ldr	r3, [pc, #216]	; (8005f20 <xTaskIncrementTick+0x158>)
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4c:	601a      	str	r2, [r3, #0]
					break;
 8005e4e:	e03e      	b.n	8005ece <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e50:	4b30      	ldr	r3, [pc, #192]	; (8005f14 <xTaskIncrementTick+0x14c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d203      	bcs.n	8005e70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e68:	4a2d      	ldr	r2, [pc, #180]	; (8005f20 <xTaskIncrementTick+0x158>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e6e:	e02e      	b.n	8005ece <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fc8a 	bl	800578e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3318      	adds	r3, #24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fc81 	bl	800578e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	2201      	movs	r2, #1
 8005e92:	409a      	lsls	r2, r3
 8005e94:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <xTaskIncrementTick+0x15c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <xTaskIncrementTick+0x15c>)
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <xTaskIncrementTick+0x160>)
 8005eac:	441a      	add	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7ff fc0d 	bl	80056d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <xTaskIncrementTick+0x164>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d3b9      	bcc.n	8005e3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ecc:	e7b6      	b.n	8005e3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ece:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <xTaskIncrementTick+0x164>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	4914      	ldr	r1, [pc, #80]	; (8005f28 <xTaskIncrementTick+0x160>)
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d901      	bls.n	8005eea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <xTaskIncrementTick+0x168>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e004      	b.n	8005f02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <xTaskIncrementTick+0x16c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a0d      	ldr	r2, [pc, #52]	; (8005f34 <xTaskIncrementTick+0x16c>)
 8005f00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f02:	697b      	ldr	r3, [r7, #20]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2000081c 	.word	0x2000081c
 8005f10:	200007f8 	.word	0x200007f8
 8005f14:	200007ac 	.word	0x200007ac
 8005f18:	200007b0 	.word	0x200007b0
 8005f1c:	2000080c 	.word	0x2000080c
 8005f20:	20000814 	.word	0x20000814
 8005f24:	200007fc 	.word	0x200007fc
 8005f28:	200006f8 	.word	0x200006f8
 8005f2c:	200006f4 	.word	0x200006f4
 8005f30:	20000808 	.word	0x20000808
 8005f34:	20000804 	.word	0x20000804

08005f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f3e:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <vTaskSwitchContext+0xac>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f46:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <vTaskSwitchContext+0xb0>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f4c:	e044      	b.n	8005fd8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <vTaskSwitchContext+0xb0>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f54:	4b25      	ldr	r3, [pc, #148]	; (8005fec <vTaskSwitchContext+0xb4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	fab3 f383 	clz	r3, r3
 8005f60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f62:	7afb      	ldrb	r3, [r7, #11]
 8005f64:	f1c3 031f 	rsb	r3, r3, #31
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	4921      	ldr	r1, [pc, #132]	; (8005ff0 <vTaskSwitchContext+0xb8>)
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	607b      	str	r3, [r7, #4]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <vTaskSwitchContext+0x5a>
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <vTaskSwitchContext+0xb8>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d104      	bne.n	8005fc4 <vTaskSwitchContext+0x8c>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4a0a      	ldr	r2, [pc, #40]	; (8005ff4 <vTaskSwitchContext+0xbc>)
 8005fcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <vTaskSwitchContext+0xbc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	334c      	adds	r3, #76	; 0x4c
 8005fd4:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <vTaskSwitchContext+0xc0>)
 8005fd6:	6013      	str	r3, [r2, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	2000081c 	.word	0x2000081c
 8005fe8:	20000808 	.word	0x20000808
 8005fec:	200007fc 	.word	0x200007fc
 8005ff0:	200006f8 	.word	0x200006f8
 8005ff4:	200006f4 	.word	0x200006f4
 8005ff8:	20000028 	.word	0x20000028

08005ffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006004:	f000 f852 	bl	80060ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006008:	4b06      	ldr	r3, [pc, #24]	; (8006024 <prvIdleTask+0x28>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d9f9      	bls.n	8006004 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <prvIdleTask+0x2c>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006020:	e7f0      	b.n	8006004 <prvIdleTask+0x8>
 8006022:	bf00      	nop
 8006024:	200006f8 	.word	0x200006f8
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006032:	2300      	movs	r3, #0
 8006034:	607b      	str	r3, [r7, #4]
 8006036:	e00c      	b.n	8006052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4a12      	ldr	r2, [pc, #72]	; (800608c <prvInitialiseTaskLists+0x60>)
 8006044:	4413      	add	r3, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fb17 	bl	800567a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3301      	adds	r3, #1
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b06      	cmp	r3, #6
 8006056:	d9ef      	bls.n	8006038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006058:	480d      	ldr	r0, [pc, #52]	; (8006090 <prvInitialiseTaskLists+0x64>)
 800605a:	f7ff fb0e 	bl	800567a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800605e:	480d      	ldr	r0, [pc, #52]	; (8006094 <prvInitialiseTaskLists+0x68>)
 8006060:	f7ff fb0b 	bl	800567a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006064:	480c      	ldr	r0, [pc, #48]	; (8006098 <prvInitialiseTaskLists+0x6c>)
 8006066:	f7ff fb08 	bl	800567a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800606a:	480c      	ldr	r0, [pc, #48]	; (800609c <prvInitialiseTaskLists+0x70>)
 800606c:	f7ff fb05 	bl	800567a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006070:	480b      	ldr	r0, [pc, #44]	; (80060a0 <prvInitialiseTaskLists+0x74>)
 8006072:	f7ff fb02 	bl	800567a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <prvInitialiseTaskLists+0x78>)
 8006078:	4a05      	ldr	r2, [pc, #20]	; (8006090 <prvInitialiseTaskLists+0x64>)
 800607a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <prvInitialiseTaskLists+0x7c>)
 800607e:	4a05      	ldr	r2, [pc, #20]	; (8006094 <prvInitialiseTaskLists+0x68>)
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	200006f8 	.word	0x200006f8
 8006090:	20000784 	.word	0x20000784
 8006094:	20000798 	.word	0x20000798
 8006098:	200007b4 	.word	0x200007b4
 800609c:	200007c8 	.word	0x200007c8
 80060a0:	200007e0 	.word	0x200007e0
 80060a4:	200007ac 	.word	0x200007ac
 80060a8:	200007b0 	.word	0x200007b0

080060ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060b2:	e019      	b.n	80060e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060b4:	f000 fa0e 	bl	80064d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b8:	4b10      	ldr	r3, [pc, #64]	; (80060fc <prvCheckTasksWaitingTermination+0x50>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fb62 	bl	800578e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <prvCheckTasksWaitingTermination+0x54>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4a0b      	ldr	r2, [pc, #44]	; (8006100 <prvCheckTasksWaitingTermination+0x54>)
 80060d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <prvCheckTasksWaitingTermination+0x58>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3b01      	subs	r3, #1
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <prvCheckTasksWaitingTermination+0x58>)
 80060dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060de:	f000 fa29 	bl	8006534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f810 	bl	8006108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <prvCheckTasksWaitingTermination+0x58>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e1      	bne.n	80060b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200007c8 	.word	0x200007c8
 8006100:	200007f4 	.word	0x200007f4
 8006104:	200007dc 	.word	0x200007dc

08006108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	334c      	adds	r3, #76	; 0x4c
 8006114:	4618      	mov	r0, r3
 8006116:	f002 fb6b 	bl	80087f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d108      	bne.n	8006136 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fb81 	bl	8006830 <vPortFree>
				vPortFree( pxTCB );
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fb7e 	bl	8006830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006134:	e018      	b.n	8006168 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800613c:	2b01      	cmp	r3, #1
 800613e:	d103      	bne.n	8006148 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fb75 	bl	8006830 <vPortFree>
	}
 8006146:	e00f      	b.n	8006168 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800614e:	2b02      	cmp	r3, #2
 8006150:	d00a      	beq.n	8006168 <prvDeleteTCB+0x60>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <prvDeleteTCB+0x5e>
	}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <prvResetNextTaskUnblockTime+0x38>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <prvResetNextTaskUnblockTime+0x3c>)
 8006182:	f04f 32ff 	mov.w	r2, #4294967295
 8006186:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006188:	e008      	b.n	800619c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800618a:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <prvResetNextTaskUnblockTime+0x38>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a04      	ldr	r2, [pc, #16]	; (80061ac <prvResetNextTaskUnblockTime+0x3c>)
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	200007ac 	.word	0x200007ac
 80061ac:	20000814 	.word	0x20000814

080061b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ba:	4b29      	ldr	r3, [pc, #164]	; (8006260 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c0:	4b28      	ldr	r3, [pc, #160]	; (8006264 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fae1 	bl	800578e <uxListRemove>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061d2:	4b24      	ldr	r3, [pc, #144]	; (8006264 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	2201      	movs	r2, #1
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43da      	mvns	r2, r3
 80061e0:	4b21      	ldr	r3, [pc, #132]	; (8006268 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4013      	ands	r3, r2
 80061e6:	4a20      	ldr	r2, [pc, #128]	; (8006268 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d10a      	bne.n	8006208 <prvAddCurrentTaskToDelayedList+0x58>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f8:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	481a      	ldr	r0, [pc, #104]	; (800626c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006202:	f7ff fa67 	bl	80056d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006206:	e026      	b.n	8006256 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006210:	4b14      	ldr	r3, [pc, #80]	; (8006264 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	429a      	cmp	r2, r3
 800621e:	d209      	bcs.n	8006234 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f7ff fa75 	bl	800571c <vListInsert>
}
 8006232:	e010      	b.n	8006256 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f7ff fa6b 	bl	800571c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	d202      	bcs.n	8006256 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006250:	4a09      	ldr	r2, [pc, #36]	; (8006278 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6013      	str	r3, [r2, #0]
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	200007f8 	.word	0x200007f8
 8006264:	200006f4 	.word	0x200006f4
 8006268:	200007fc 	.word	0x200007fc
 800626c:	200007e0 	.word	0x200007e0
 8006270:	200007b0 	.word	0x200007b0
 8006274:	200007ac 	.word	0x200007ac
 8006278:	20000814 	.word	0x20000814

0800627c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3b04      	subs	r3, #4
 800628c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b04      	subs	r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b04      	subs	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062ac:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <pxPortInitialiseStack+0x64>)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3b14      	subs	r3, #20
 80062b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3b04      	subs	r3, #4
 80062c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f06f 0202 	mvn.w	r2, #2
 80062ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3b20      	subs	r3, #32
 80062d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	080062e5 	.word	0x080062e5

080062e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <prvTaskExitError+0x54>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d00a      	beq.n	800630e <prvTaskExitError+0x2a>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	60fb      	str	r3, [r7, #12]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <prvTaskExitError+0x28>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	60bb      	str	r3, [r7, #8]
}
 8006320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006322:	bf00      	nop
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0fc      	beq.n	8006324 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	20000024 	.word	0x20000024
 800633c:	00000000 	.word	0x00000000

08006340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <pxCurrentTCBConst2>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f380 8809 	msr	PSP, r0
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	4770      	bx	lr
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst2>:
 8006360:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006368:	4808      	ldr	r0, [pc, #32]	; (800638c <prvPortStartFirstTask+0x24>)
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f380 8808 	msr	MSP, r0
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8814 	msr	CONTROL, r0
 800637a:	b662      	cpsie	i
 800637c:	b661      	cpsie	f
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	df00      	svc	0
 8006388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800638a:	bf00      	nop
 800638c:	e000ed08 	.word	0xe000ed08

08006390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006396:	4b46      	ldr	r3, [pc, #280]	; (80064b0 <xPortStartScheduler+0x120>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a46      	ldr	r2, [pc, #280]	; (80064b4 <xPortStartScheduler+0x124>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10a      	bne.n	80063b6 <xPortStartScheduler+0x26>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	613b      	str	r3, [r7, #16]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063b6:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <xPortStartScheduler+0x120>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a3f      	ldr	r2, [pc, #252]	; (80064b8 <xPortStartScheduler+0x128>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10a      	bne.n	80063d6 <xPortStartScheduler+0x46>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063d6:	4b39      	ldr	r3, [pc, #228]	; (80064bc <xPortStartScheduler+0x12c>)
 80063d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <xPortStartScheduler+0x130>)
 80063fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063fe:	4b31      	ldr	r3, [pc, #196]	; (80064c4 <xPortStartScheduler+0x134>)
 8006400:	2207      	movs	r2, #7
 8006402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006404:	e009      	b.n	800641a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006406:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <xPortStartScheduler+0x134>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	4a2d      	ldr	r2, [pc, #180]	; (80064c4 <xPortStartScheduler+0x134>)
 800640e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d0ef      	beq.n	8006406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <xPortStartScheduler+0x134>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1c3 0307 	rsb	r3, r3, #7
 800642e:	2b04      	cmp	r3, #4
 8006430:	d00a      	beq.n	8006448 <xPortStartScheduler+0xb8>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60bb      	str	r3, [r7, #8]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <xPortStartScheduler+0x134>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <xPortStartScheduler+0x134>)
 8006450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <xPortStartScheduler+0x134>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <xPortStartScheduler+0x134>)
 800645c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006466:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <xPortStartScheduler+0x138>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <xPortStartScheduler+0x138>)
 800646c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <xPortStartScheduler+0x138>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <xPortStartScheduler+0x138>)
 8006478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800647c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800647e:	f000 f8dd 	bl	800663c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <xPortStartScheduler+0x13c>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006488:	f000 f8fc 	bl	8006684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <xPortStartScheduler+0x140>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <xPortStartScheduler+0x140>)
 8006492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006498:	f7ff ff66 	bl	8006368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800649c:	f7ff fd4c 	bl	8005f38 <vTaskSwitchContext>
	prvTaskExitError();
 80064a0:	f7ff ff20 	bl	80062e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	e000ed00 	.word	0xe000ed00
 80064b4:	410fc271 	.word	0x410fc271
 80064b8:	410fc270 	.word	0x410fc270
 80064bc:	e000e400 	.word	0xe000e400
 80064c0:	20000820 	.word	0x20000820
 80064c4:	20000824 	.word	0x20000824
 80064c8:	e000ed20 	.word	0xe000ed20
 80064cc:	20000024 	.word	0x20000024
 80064d0:	e000ef34 	.word	0xe000ef34

080064d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	607b      	str	r3, [r7, #4]
}
 80064ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <vPortEnterCritical+0x58>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a0d      	ldr	r2, [pc, #52]	; (800652c <vPortEnterCritical+0x58>)
 80064f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <vPortEnterCritical+0x58>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10f      	bne.n	8006520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortEnterCritical+0x5c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <vPortEnterCritical+0x4c>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	603b      	str	r3, [r7, #0]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <vPortEnterCritical+0x4a>
	}
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20000024 	.word	0x20000024
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <vPortExitCritical+0x50>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <vPortExitCritical+0x24>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	607b      	str	r3, [r7, #4]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <vPortExitCritical+0x50>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <vPortExitCritical+0x50>)
 8006560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <vPortExitCritical+0x50>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <vPortExitCritical+0x42>
 800656a:	2300      	movs	r3, #0
 800656c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000024 	.word	0x20000024
	...

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f01e 0f10 	tst.w	lr, #16
 80065a0:	bf08      	it	eq
 80065a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	6010      	str	r0, [r2, #0]
 80065ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065b4:	f380 8811 	msr	BASEPRI, r0
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f7ff fcba 	bl	8005f38 <vTaskSwitchContext>
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f380 8811 	msr	BASEPRI, r0
 80065cc:	bc09      	pop	{r0, r3}
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d6:	f01e 0f10 	tst.w	lr, #16
 80065da:	bf08      	it	eq
 80065dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065e0:	f380 8809 	msr	PSP, r0
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst>:
 80065f0:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
}
 8006610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006612:	f7ff fbd9 	bl	8005dc8 <xTaskIncrementTick>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <SysTick_Handler+0x40>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <vPortSetupTimerInterrupt+0x38>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <vPortSetupTimerInterrupt+0x3c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <vPortSetupTimerInterrupt+0x40>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	4a09      	ldr	r2, [pc, #36]	; (8006680 <vPortSetupTimerInterrupt+0x44>)
 800665a:	3b01      	subs	r3, #1
 800665c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006660:	2207      	movs	r2, #7
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000e010 	.word	0xe000e010
 8006674:	e000e018 	.word	0xe000e018
 8006678:	20000018 	.word	0x20000018
 800667c:	10624dd3 	.word	0x10624dd3
 8006680:	e000e014 	.word	0xe000e014

08006684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006694 <vPortEnableVFP+0x10>
 8006688:	6801      	ldr	r1, [r0, #0]
 800668a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800668e:	6001      	str	r1, [r0, #0]
 8006690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006692:	bf00      	nop
 8006694:	e000ed88 	.word	0xe000ed88

08006698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	; 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066a4:	f7ff fae6 	bl	8005c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066a8:	4b5b      	ldr	r3, [pc, #364]	; (8006818 <pvPortMalloc+0x180>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066b0:	f000 f920 	bl	80068f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <pvPortMalloc+0x184>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 8093 	bne.w	80067e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01d      	beq.n	8006704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066c8:	2208      	movs	r2, #8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d014      	beq.n	8006704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f023 0307 	bic.w	r3, r3, #7
 80066e0:	3308      	adds	r3, #8
 80066e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <pvPortMalloc+0x6c>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	617b      	str	r3, [r7, #20]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d06e      	beq.n	80067e8 <pvPortMalloc+0x150>
 800670a:	4b45      	ldr	r3, [pc, #276]	; (8006820 <pvPortMalloc+0x188>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	429a      	cmp	r2, r3
 8006712:	d869      	bhi.n	80067e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006714:	4b43      	ldr	r3, [pc, #268]	; (8006824 <pvPortMalloc+0x18c>)
 8006716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006718:	4b42      	ldr	r3, [pc, #264]	; (8006824 <pvPortMalloc+0x18c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800671e:	e004      	b.n	800672a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d903      	bls.n	800673c <pvPortMalloc+0xa4>
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f1      	bne.n	8006720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800673c:	4b36      	ldr	r3, [pc, #216]	; (8006818 <pvPortMalloc+0x180>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	429a      	cmp	r2, r3
 8006744:	d050      	beq.n	80067e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2208      	movs	r2, #8
 800674c:	4413      	add	r3, r2
 800674e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	2308      	movs	r3, #8
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	429a      	cmp	r2, r3
 8006766:	d91f      	bls.n	80067a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <pvPortMalloc+0xf8>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	613b      	str	r3, [r7, #16]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	1ad2      	subs	r2, r2, r3
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067a2:	69b8      	ldr	r0, [r7, #24]
 80067a4:	f000 f908 	bl	80069b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067a8:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <pvPortMalloc+0x188>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <pvPortMalloc+0x188>)
 80067b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <pvPortMalloc+0x188>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <pvPortMalloc+0x190>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d203      	bcs.n	80067ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067c2:	4b17      	ldr	r3, [pc, #92]	; (8006820 <pvPortMalloc+0x188>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <pvPortMalloc+0x190>)
 80067c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <pvPortMalloc+0x184>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <pvPortMalloc+0x194>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a11      	ldr	r2, [pc, #68]	; (800682c <pvPortMalloc+0x194>)
 80067e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067e8:	f7ff fa52 	bl	8005c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <pvPortMalloc+0x174>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	60fb      	str	r3, [r7, #12]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <pvPortMalloc+0x172>
	return pvReturn;
 800680c:	69fb      	ldr	r3, [r7, #28]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3728      	adds	r7, #40	; 0x28
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20010230 	.word	0x20010230
 800681c:	20010244 	.word	0x20010244
 8006820:	20010234 	.word	0x20010234
 8006824:	20010228 	.word	0x20010228
 8006828:	20010238 	.word	0x20010238
 800682c:	2001023c 	.word	0x2001023c

08006830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d04d      	beq.n	80068de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006842:	2308      	movs	r3, #8
 8006844:	425b      	negs	r3, r3
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <vPortFree+0xb8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <vPortFree+0x44>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <vPortFree+0x62>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60bb      	str	r3, [r7, #8]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <vPortFree+0xb8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01e      	beq.n	80068de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11a      	bne.n	80068de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <vPortFree+0xb8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	401a      	ands	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068b8:	f7ff f9dc 	bl	8005c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <vPortFree+0xbc>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4413      	add	r3, r2
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <vPortFree+0xbc>)
 80068c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f000 f874 	bl	80069b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <vPortFree+0xc0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <vPortFree+0xc0>)
 80068d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068da:	f7ff f9d9 	bl	8005c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20010244 	.word	0x20010244
 80068ec:	20010234 	.word	0x20010234
 80068f0:	20010240 	.word	0x20010240

080068f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068fa:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 80068fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006900:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <prvHeapInit+0xac>)
 8006902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3307      	adds	r3, #7
 8006912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <prvHeapInit+0xac>)
 8006924:	4413      	add	r3, r2
 8006926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800692c:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <prvHeapInit+0xb0>)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <prvHeapInit+0xb0>)
 8006934:	2200      	movs	r2, #0
 8006936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006940:	2208      	movs	r2, #8
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <prvHeapInit+0xb4>)
 8006954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006956:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <prvHeapInit+0xb4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <prvHeapInit+0xb4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvHeapInit+0xb4>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <prvHeapInit+0xb8>)
 8006982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <prvHeapInit+0xbc>)
 800698a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800698c:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <prvHeapInit+0xc0>)
 800698e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000828 	.word	0x20000828
 80069a4:	20010228 	.word	0x20010228
 80069a8:	20010230 	.word	0x20010230
 80069ac:	20010238 	.word	0x20010238
 80069b0:	20010234 	.word	0x20010234
 80069b4:	20010244 	.word	0x20010244

080069b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069c0:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <prvInsertBlockIntoFreeList+0xac>)
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e002      	b.n	80069cc <prvInsertBlockIntoFreeList+0x14>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d8f7      	bhi.n	80069c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4413      	add	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d108      	bne.n	80069fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	441a      	add	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d118      	bne.n	8006a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <prvInsertBlockIntoFreeList+0xb0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d00d      	beq.n	8006a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	441a      	add	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e008      	b.n	8006a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <prvInsertBlockIntoFreeList+0xb0>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e003      	b.n	8006a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d002      	beq.n	8006a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	20010228 	.word	0x20010228
 8006a68:	20010230 	.word	0x20010230

08006a6c <arm_max_f32>:
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	1e4f      	subs	r7, r1, #1
 8006a72:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8006a76:	f100 0e04 	add.w	lr, r0, #4
 8006a7a:	edd0 7a00 	vldr	s15, [r0]
 8006a7e:	d058      	beq.n	8006b32 <arm_max_f32+0xc6>
 8006a80:	3014      	adds	r0, #20
 8006a82:	46c4      	mov	ip, r8
 8006a84:	2604      	movs	r6, #4
 8006a86:	2400      	movs	r4, #0
 8006a88:	ed10 6a04 	vldr	s12, [r0, #-16]
 8006a8c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8006a90:	ed10 7a02 	vldr	s14, [r0, #-8]
 8006a94:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006a98:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8006a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa0:	bfc8      	it	gt
 8006aa2:	eef0 7a46 	vmovgt.f32	s15, s12
 8006aa6:	f1a6 0503 	sub.w	r5, r6, #3
 8006aaa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006aae:	bfc8      	it	gt
 8006ab0:	462c      	movgt	r4, r5
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	bf48      	it	mi
 8006ab8:	eef0 7a66 	vmovmi.f32	s15, s13
 8006abc:	f1a6 0502 	sub.w	r5, r6, #2
 8006ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ac4:	bf48      	it	mi
 8006ac6:	462c      	movmi	r4, r5
 8006ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006acc:	bf48      	it	mi
 8006ace:	eef0 7a47 	vmovmi.f32	s15, s14
 8006ad2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ad6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8006ada:	bf48      	it	mi
 8006adc:	462c      	movmi	r4, r5
 8006ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae2:	bf48      	it	mi
 8006ae4:	4634      	movmi	r4, r6
 8006ae6:	bf48      	it	mi
 8006ae8:	eef0 7a65 	vmovmi.f32	s15, s11
 8006aec:	f1bc 0c01 	subs.w	ip, ip, #1
 8006af0:	f106 0604 	add.w	r6, r6, #4
 8006af4:	f100 0010 	add.w	r0, r0, #16
 8006af8:	d1c6      	bne.n	8006a88 <arm_max_f32+0x1c>
 8006afa:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8006afe:	f017 0003 	ands.w	r0, r7, #3
 8006b02:	d018      	beq.n	8006b36 <arm_max_f32+0xca>
 8006b04:	1a08      	subs	r0, r1, r0
 8006b06:	ecbe 7a01 	vldmia	lr!, {s14}
 8006b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b12:	bfc8      	it	gt
 8006b14:	4604      	movgt	r4, r0
 8006b16:	f100 0001 	add.w	r0, r0, #1
 8006b1a:	bfd8      	it	le
 8006b1c:	eeb0 7a67 	vmovle.f32	s14, s15
 8006b20:	4288      	cmp	r0, r1
 8006b22:	eef0 7a47 	vmov.f32	s15, s14
 8006b26:	d1ee      	bne.n	8006b06 <arm_max_f32+0x9a>
 8006b28:	ed82 7a00 	vstr	s14, [r2]
 8006b2c:	601c      	str	r4, [r3, #0]
 8006b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b32:	4644      	mov	r4, r8
 8006b34:	e7e3      	b.n	8006afe <arm_max_f32+0x92>
 8006b36:	eeb0 7a67 	vmov.f32	s14, s15
 8006b3a:	e7f5      	b.n	8006b28 <arm_max_f32+0xbc>

08006b3c <arm_rfft_fast_init_f32>:
 8006b3c:	084b      	lsrs	r3, r1, #1
 8006b3e:	2b80      	cmp	r3, #128	; 0x80
 8006b40:	b410      	push	{r4}
 8006b42:	8201      	strh	r1, [r0, #16]
 8006b44:	8003      	strh	r3, [r0, #0]
 8006b46:	d047      	beq.n	8006bd8 <arm_rfft_fast_init_f32+0x9c>
 8006b48:	d917      	bls.n	8006b7a <arm_rfft_fast_init_f32+0x3e>
 8006b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b4e:	d03d      	beq.n	8006bcc <arm_rfft_fast_init_f32+0x90>
 8006b50:	d929      	bls.n	8006ba6 <arm_rfft_fast_init_f32+0x6a>
 8006b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b56:	d020      	beq.n	8006b9a <arm_rfft_fast_init_f32+0x5e>
 8006b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b5c:	d113      	bne.n	8006b86 <arm_rfft_fast_init_f32+0x4a>
 8006b5e:	4921      	ldr	r1, [pc, #132]	; (8006be4 <arm_rfft_fast_init_f32+0xa8>)
 8006b60:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <arm_rfft_fast_init_f32+0xac>)
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <arm_rfft_fast_init_f32+0xb0>)
 8006b64:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8006b68:	8184      	strh	r4, [r0, #12]
 8006b6a:	6081      	str	r1, [r0, #8]
 8006b6c:	6042      	str	r2, [r0, #4]
 8006b6e:	6143      	str	r3, [r0, #20]
 8006b70:	2000      	movs	r0, #0
 8006b72:	b240      	sxtb	r0, r0
 8006b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d01c      	beq.n	8006bb8 <arm_rfft_fast_init_f32+0x7c>
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	d006      	beq.n	8006b90 <arm_rfft_fast_init_f32+0x54>
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d01d      	beq.n	8006bc2 <arm_rfft_fast_init_f32+0x86>
 8006b86:	20ff      	movs	r0, #255	; 0xff
 8006b88:	b240      	sxtb	r0, r0
 8006b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	2438      	movs	r4, #56	; 0x38
 8006b92:	4917      	ldr	r1, [pc, #92]	; (8006bf0 <arm_rfft_fast_init_f32+0xb4>)
 8006b94:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <arm_rfft_fast_init_f32+0xb8>)
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <arm_rfft_fast_init_f32+0xbc>)
 8006b98:	e7e6      	b.n	8006b68 <arm_rfft_fast_init_f32+0x2c>
 8006b9a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8006b9e:	4917      	ldr	r1, [pc, #92]	; (8006bfc <arm_rfft_fast_init_f32+0xc0>)
 8006ba0:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <arm_rfft_fast_init_f32+0xc4>)
 8006ba2:	4b18      	ldr	r3, [pc, #96]	; (8006c04 <arm_rfft_fast_init_f32+0xc8>)
 8006ba4:	e7e0      	b.n	8006b68 <arm_rfft_fast_init_f32+0x2c>
 8006ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006baa:	d1ec      	bne.n	8006b86 <arm_rfft_fast_init_f32+0x4a>
 8006bac:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8006bb0:	4915      	ldr	r1, [pc, #84]	; (8006c08 <arm_rfft_fast_init_f32+0xcc>)
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <arm_rfft_fast_init_f32+0xd0>)
 8006bb4:	4b16      	ldr	r3, [pc, #88]	; (8006c10 <arm_rfft_fast_init_f32+0xd4>)
 8006bb6:	e7d7      	b.n	8006b68 <arm_rfft_fast_init_f32+0x2c>
 8006bb8:	2430      	movs	r4, #48	; 0x30
 8006bba:	4916      	ldr	r1, [pc, #88]	; (8006c14 <arm_rfft_fast_init_f32+0xd8>)
 8006bbc:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <arm_rfft_fast_init_f32+0xdc>)
 8006bbe:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <arm_rfft_fast_init_f32+0xe0>)
 8006bc0:	e7d2      	b.n	8006b68 <arm_rfft_fast_init_f32+0x2c>
 8006bc2:	2414      	movs	r4, #20
 8006bc4:	4916      	ldr	r1, [pc, #88]	; (8006c20 <arm_rfft_fast_init_f32+0xe4>)
 8006bc6:	4a17      	ldr	r2, [pc, #92]	; (8006c24 <arm_rfft_fast_init_f32+0xe8>)
 8006bc8:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <arm_rfft_fast_init_f32+0xec>)
 8006bca:	e7cd      	b.n	8006b68 <arm_rfft_fast_init_f32+0x2c>
 8006bcc:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8006bd0:	4916      	ldr	r1, [pc, #88]	; (8006c2c <arm_rfft_fast_init_f32+0xf0>)
 8006bd2:	4a17      	ldr	r2, [pc, #92]	; (8006c30 <arm_rfft_fast_init_f32+0xf4>)
 8006bd4:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <arm_rfft_fast_init_f32+0xf8>)
 8006bd6:	e7c7      	b.n	8006b68 <arm_rfft_fast_init_f32+0x2c>
 8006bd8:	24d0      	movs	r4, #208	; 0xd0
 8006bda:	4917      	ldr	r1, [pc, #92]	; (8006c38 <arm_rfft_fast_init_f32+0xfc>)
 8006bdc:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <arm_rfft_fast_init_f32+0x100>)
 8006bde:	4b18      	ldr	r3, [pc, #96]	; (8006c40 <arm_rfft_fast_init_f32+0x104>)
 8006be0:	e7c2      	b.n	8006b68 <arm_rfft_fast_init_f32+0x2c>
 8006be2:	bf00      	nop
 8006be4:	0801cac8 	.word	0x0801cac8
 8006be8:	0800d4c0 	.word	0x0800d4c0
 8006bec:	08013630 	.word	0x08013630
 8006bf0:	080115c0 	.word	0x080115c0
 8006bf4:	0801e888 	.word	0x0801e888
 8006bf8:	08020d78 	.word	0x08020d78
 8006bfc:	08019fb0 	.word	0x08019fb0
 8006c00:	08017eb0 	.word	0x08017eb0
 8006c04:	08011630 	.word	0x08011630
 8006c08:	08020a08 	.word	0x08020a08
 8006c0c:	08017630 	.word	0x08017630
 8006c10:	0801ea88 	.word	0x0801ea88
 8006c14:	0801ae68 	.word	0x0801ae68
 8006c18:	08019eb0 	.word	0x08019eb0
 8006c1c:	080114c0 	.word	0x080114c0
 8006c20:	0801adc0 	.word	0x0801adc0
 8006c24:	08017e30 	.word	0x08017e30
 8006c28:	0801ade8 	.word	0x0801ade8
 8006c2c:	0801f288 	.word	0x0801f288
 8006c30:	0801bac8 	.word	0x0801bac8
 8006c34:	0801f608 	.word	0x0801f608
 8006c38:	08020f78 	.word	0x08020f78
 8006c3c:	0801b6c8 	.word	0x0801b6c8
 8006c40:	08020608 	.word	0x08020608

08006c44 <arm_cfft_radix4_init_f32>:
 8006c44:	b410      	push	{r4}
 8006c46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006c4a:	4c2b      	ldr	r4, [pc, #172]	; (8006cf8 <arm_cfft_radix4_init_f32+0xb4>)
 8006c4c:	7082      	strb	r2, [r0, #2]
 8006c4e:	70c3      	strb	r3, [r0, #3]
 8006c50:	8001      	strh	r1, [r0, #0]
 8006c52:	6044      	str	r4, [r0, #4]
 8006c54:	d043      	beq.n	8006cde <arm_cfft_radix4_init_f32+0x9a>
 8006c56:	d80f      	bhi.n	8006c78 <arm_cfft_radix4_init_f32+0x34>
 8006c58:	2910      	cmp	r1, #16
 8006c5a:	d032      	beq.n	8006cc2 <arm_cfft_radix4_init_f32+0x7e>
 8006c5c:	2940      	cmp	r1, #64	; 0x40
 8006c5e:	d11e      	bne.n	8006c9e <arm_cfft_radix4_init_f32+0x5a>
 8006c60:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <arm_cfft_radix4_init_f32+0xb8>)
 8006c66:	8181      	strh	r1, [r0, #12]
 8006c68:	81c1      	strh	r1, [r0, #14]
 8006c6a:	6102      	str	r2, [r0, #16]
 8006c6c:	6083      	str	r3, [r0, #8]
 8006c6e:	2000      	movs	r0, #0
 8006c70:	b240      	sxtb	r0, r0
 8006c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c7c:	d014      	beq.n	8006ca8 <arm_cfft_radix4_init_f32+0x64>
 8006c7e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006c82:	d10c      	bne.n	8006c9e <arm_cfft_radix4_init_f32+0x5a>
 8006c84:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8006c88:	6103      	str	r3, [r0, #16]
 8006c8a:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <arm_cfft_radix4_init_f32+0xbc>)
 8006c8c:	6082      	str	r2, [r0, #8]
 8006c8e:	2301      	movs	r3, #1
 8006c90:	8183      	strh	r3, [r0, #12]
 8006c92:	81c3      	strh	r3, [r0, #14]
 8006c94:	2000      	movs	r0, #0
 8006c96:	b240      	sxtb	r0, r0
 8006c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	20ff      	movs	r0, #255	; 0xff
 8006ca0:	b240      	sxtb	r0, r0
 8006ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8006cac:	6103      	str	r3, [r0, #16]
 8006cae:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <arm_cfft_radix4_init_f32+0xc0>)
 8006cb0:	6082      	str	r2, [r0, #8]
 8006cb2:	2304      	movs	r3, #4
 8006cb4:	8183      	strh	r3, [r0, #12]
 8006cb6:	81c3      	strh	r3, [r0, #14]
 8006cb8:	2000      	movs	r0, #0
 8006cba:	b240      	sxtb	r0, r0
 8006cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8006cc6:	6103      	str	r3, [r0, #16]
 8006cc8:	4a0f      	ldr	r2, [pc, #60]	; (8006d08 <arm_cfft_radix4_init_f32+0xc4>)
 8006cca:	6082      	str	r2, [r0, #8]
 8006ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cd0:	8183      	strh	r3, [r0, #12]
 8006cd2:	81c3      	strh	r3, [r0, #14]
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	b240      	sxtb	r0, r0
 8006cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8006ce2:	6103      	str	r3, [r0, #16]
 8006ce4:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <arm_cfft_radix4_init_f32+0xc8>)
 8006ce6:	6082      	str	r2, [r0, #8]
 8006ce8:	2310      	movs	r3, #16
 8006cea:	8183      	strh	r3, [r0, #12]
 8006cec:	81c3      	strh	r3, [r0, #14]
 8006cee:	2000      	movs	r0, #0
 8006cf0:	b240      	sxtb	r0, r0
 8006cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	08021118 	.word	0x08021118
 8006cfc:	0801af46 	.word	0x0801af46
 8006d00:	0801aec8 	.word	0x0801aec8
 8006d04:	0801aece 	.word	0x0801aece
 8006d08:	0801b0c6 	.word	0x0801b0c6
 8006d0c:	0801aee6 	.word	0x0801aee6

08006d10 <arm_radix4_butterfly_f32>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	ed2d 8b06 	vpush	{d8-d10}
 8006d18:	468a      	mov	sl, r1
 8006d1a:	0889      	lsrs	r1, r1, #2
 8006d1c:	b08d      	sub	sp, #52	; 0x34
 8006d1e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8006d22:	eb00 040c 	add.w	r4, r0, ip
 8006d26:	460d      	mov	r5, r1
 8006d28:	461f      	mov	r7, r3
 8006d2a:	4691      	mov	r9, r2
 8006d2c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d2e:	eb04 020c 	add.w	r2, r4, ip
 8006d32:	4606      	mov	r6, r0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8006d3a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006d3e:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 8006d42:	9009      	str	r0, [sp, #36]	; 0x24
 8006d44:	f10c 0004 	add.w	r0, ip, #4
 8006d48:	9701      	str	r7, [sp, #4]
 8006d4a:	9103      	str	r1, [sp, #12]
 8006d4c:	4430      	add	r0, r6
 8006d4e:	4631      	mov	r1, r6
 8006d50:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8006d54:	1d37      	adds	r7, r6, #4
 8006d56:	9e00      	ldr	r6, [sp, #0]
 8006d58:	46ab      	mov	fp, r5
 8006d5a:	00f5      	lsls	r5, r6, #3
 8006d5c:	9502      	str	r5, [sp, #8]
 8006d5e:	f8cd b010 	str.w	fp, [sp, #16]
 8006d62:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006d66:	f8cd a008 	str.w	sl, [sp, #8]
 8006d6a:	f8dd a004 	ldr.w	sl, [sp, #4]
 8006d6e:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8006d72:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8006d76:	464e      	mov	r6, r9
 8006d78:	464d      	mov	r5, r9
 8006d7a:	edd1 4a01 	vldr	s9, [r1, #4]
 8006d7e:	ed10 4a01 	vldr	s8, [r0, #-4]
 8006d82:	ed17 6a01 	vldr	s12, [r7, #-4]
 8006d86:	edd2 6a00 	vldr	s13, [r2]
 8006d8a:	ed94 7a01 	vldr	s14, [r4, #4]
 8006d8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d92:	ed93 5a00 	vldr	s10, [r3]
 8006d96:	edd2 5a01 	vldr	s11, [r2, #4]
 8006d9a:	ed99 3a00 	vldr	s6, [r9]
 8006d9e:	edd9 3a01 	vldr	s7, [r9, #4]
 8006da2:	ee36 2a26 	vadd.f32	s4, s12, s13
 8006da6:	ee74 2a05 	vadd.f32	s5, s8, s10
 8006daa:	ee34 1aa5 	vadd.f32	s2, s9, s11
 8006dae:	ee77 1a27 	vadd.f32	s3, s14, s15
 8006db2:	ee32 0a22 	vadd.f32	s0, s4, s5
 8006db6:	ee71 0a21 	vadd.f32	s1, s2, s3
 8006dba:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006dbe:	ee34 5a45 	vsub.f32	s10, s8, s10
 8006dc2:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8006dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006dca:	ed07 0a01 	vstr	s0, [r7, #-4]
 8006dce:	edc1 0a01 	vstr	s1, [r1, #4]
 8006dd2:	ed95 4a00 	vldr	s8, [r5]
 8006dd6:	edd6 6a00 	vldr	s13, [r6]
 8006dda:	edd6 7a01 	vldr	s15, [r6, #4]
 8006dde:	ee72 4a62 	vsub.f32	s9, s4, s5
 8006de2:	ee71 1a61 	vsub.f32	s3, s2, s3
 8006de6:	ee75 2ac5 	vsub.f32	s5, s11, s10
 8006dea:	ed95 1a01 	vldr	s2, [r5, #4]
 8006dee:	ee36 2a07 	vadd.f32	s4, s12, s14
 8006df2:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006df6:	ee35 6a25 	vadd.f32	s12, s10, s11
 8006dfa:	ee62 0a04 	vmul.f32	s1, s4, s8
 8006dfe:	ee21 5a83 	vmul.f32	s10, s3, s6
 8006e02:	ee22 2a01 	vmul.f32	s4, s4, s2
 8006e06:	ee22 4a84 	vmul.f32	s8, s5, s8
 8006e0a:	ee22 1a81 	vmul.f32	s2, s5, s2
 8006e0e:	ee67 5a26 	vmul.f32	s11, s14, s13
 8006e12:	ee64 2a83 	vmul.f32	s5, s9, s6
 8006e16:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006e1a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006e1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006e22:	ee61 1aa3 	vmul.f32	s3, s3, s7
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	ee30 3a81 	vadd.f32	s6, s1, s2
 8006e2e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006e32:	ee72 3aa1 	vadd.f32	s7, s5, s3
 8006e36:	ee35 5a64 	vsub.f32	s10, s10, s9
 8006e3a:	ee35 7a86 	vadd.f32	s14, s11, s12
 8006e3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e42:	3108      	adds	r1, #8
 8006e44:	4551      	cmp	r1, sl
 8006e46:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006e4a:	f107 0708 	add.w	r7, r7, #8
 8006e4e:	ed84 5a01 	vstr	s10, [r4, #4]
 8006e52:	44c1      	add	r9, r8
 8006e54:	ed82 3a00 	vstr	s6, [r2]
 8006e58:	ed82 4a01 	vstr	s8, [r2, #4]
 8006e5c:	445d      	add	r5, fp
 8006e5e:	ed83 7a00 	vstr	s14, [r3]
 8006e62:	edc3 7a01 	vstr	s15, [r3, #4]
 8006e66:	4476      	add	r6, lr
 8006e68:	f100 0008 	add.w	r0, r0, #8
 8006e6c:	f104 0408 	add.w	r4, r4, #8
 8006e70:	f102 0208 	add.w	r2, r2, #8
 8006e74:	f103 0308 	add.w	r3, r3, #8
 8006e78:	f47f af7f 	bne.w	8006d7a <arm_radix4_butterfly_f32+0x6a>
 8006e7c:	9b00      	ldr	r3, [sp, #0]
 8006e7e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006e82:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006e86:	f8dd a008 	ldr.w	sl, [sp, #8]
 8006e8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2a04      	cmp	r2, #4
 8006e92:	9306      	str	r3, [sp, #24]
 8006e94:	f240 80b9 	bls.w	800700a <arm_radix4_butterfly_f32+0x2fa>
 8006e98:	9207      	str	r2, [sp, #28]
 8006e9a:	9806      	ldr	r0, [sp, #24]
 8006e9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006e9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ea0:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	9308      	str	r3, [sp, #32]
 8006ea8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006eac:	1e4a      	subs	r2, r1, #1
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	9205      	str	r2, [sp, #20]
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	010a      	lsls	r2, r1, #4
 8006eb6:	0103      	lsls	r3, r0, #4
 8006eb8:	9204      	str	r2, [sp, #16]
 8006eba:	9302      	str	r3, [sp, #8]
 8006ebc:	00c2      	lsls	r2, r0, #3
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8006ec4:	9201      	str	r2, [sp, #4]
 8006ec6:	46b8      	mov	r8, r7
 8006ec8:	46be      	mov	lr, r7
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	9b04      	ldr	r3, [sp, #16]
 8006ece:	ed97 1a00 	vldr	s2, [r7]
 8006ed2:	edd7 1a01 	vldr	s3, [r7, #4]
 8006ed6:	ed9e 2a00 	vldr	s4, [lr]
 8006eda:	edde 2a01 	vldr	s5, [lr, #4]
 8006ede:	ed98 3a00 	vldr	s6, [r8]
 8006ee2:	edd8 3a01 	vldr	s7, [r8, #4]
 8006ee6:	9d00      	ldr	r5, [sp, #0]
 8006ee8:	18f1      	adds	r1, r6, r3
 8006eea:	eb09 0203 	add.w	r2, r9, r3
 8006eee:	1d34      	adds	r4, r6, #4
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	ed90 4a01 	vldr	s8, [r0, #4]
 8006ef8:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006efc:	ed91 7a00 	vldr	s14, [r1]
 8006f00:	edd2 7a00 	vldr	s15, [r2]
 8006f04:	edd3 4a01 	vldr	s9, [r3, #4]
 8006f08:	ed92 5a01 	vldr	s10, [r2, #4]
 8006f0c:	ed93 6a00 	vldr	s12, [r3]
 8006f10:	edd1 6a01 	vldr	s13, [r1, #4]
 8006f14:	ee35 0a87 	vadd.f32	s0, s11, s14
 8006f18:	ee34 8a26 	vadd.f32	s16, s8, s13
 8006f1c:	ee76 8a27 	vadd.f32	s17, s12, s15
 8006f20:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006f24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006f28:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006f2c:	ee74 7ac5 	vsub.f32	s15, s9, s10
 8006f30:	ee74 0a85 	vadd.f32	s1, s9, s10
 8006f34:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8006f38:	ee78 4a60 	vsub.f32	s9, s16, s1
 8006f3c:	ee35 5aa7 	vadd.f32	s10, s11, s15
 8006f40:	ee30 4a68 	vsub.f32	s8, s0, s17
 8006f44:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8006f48:	ee76 7a26 	vadd.f32	s15, s12, s13
 8006f4c:	ee64 aa02 	vmul.f32	s21, s8, s4
 8006f50:	ee24 aaa2 	vmul.f32	s20, s9, s5
 8006f54:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006f58:	ee65 9a01 	vmul.f32	s19, s10, s2
 8006f5c:	ee25 9aa1 	vmul.f32	s18, s11, s3
 8006f60:	ee27 6a03 	vmul.f32	s12, s14, s6
 8006f64:	ee67 6aa3 	vmul.f32	s13, s15, s7
 8006f68:	ee64 4a82 	vmul.f32	s9, s9, s4
 8006f6c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006f70:	ee65 5a81 	vmul.f32	s11, s11, s2
 8006f74:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006f78:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006f7c:	ee78 0a20 	vadd.f32	s1, s16, s1
 8006f80:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8006f84:	ee30 0a28 	vadd.f32	s0, s0, s17
 8006f88:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 8006f8c:	ee39 4a89 	vadd.f32	s8, s19, s18
 8006f90:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006f94:	ee76 6a26 	vadd.f32	s13, s12, s13
 8006f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f9c:	445d      	add	r5, fp
 8006f9e:	45aa      	cmp	sl, r5
 8006fa0:	ed04 0a01 	vstr	s0, [r4, #-4]
 8006fa4:	edc0 0a01 	vstr	s1, [r0, #4]
 8006fa8:	4464      	add	r4, ip
 8006faa:	ed83 8a00 	vstr	s16, [r3]
 8006fae:	edc3 4a01 	vstr	s9, [r3, #4]
 8006fb2:	4460      	add	r0, ip
 8006fb4:	ed81 4a00 	vstr	s8, [r1]
 8006fb8:	edc1 5a01 	vstr	s11, [r1, #4]
 8006fbc:	4463      	add	r3, ip
 8006fbe:	edc2 6a00 	vstr	s13, [r2]
 8006fc2:	edc2 7a01 	vstr	s15, [r2, #4]
 8006fc6:	4461      	add	r1, ip
 8006fc8:	4462      	add	r2, ip
 8006fca:	d893      	bhi.n	8006ef4 <arm_radix4_butterfly_f32+0x1e4>
 8006fcc:	9a01      	ldr	r2, [sp, #4]
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	4417      	add	r7, r2
 8006fd2:	9a02      	ldr	r2, [sp, #8]
 8006fd4:	4496      	add	lr, r2
 8006fd6:	9a03      	ldr	r2, [sp, #12]
 8006fd8:	4490      	add	r8, r2
 8006fda:	9a05      	ldr	r2, [sp, #20]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	f106 0608 	add.w	r6, r6, #8
 8006fe6:	f109 0908 	add.w	r9, r9, #8
 8006fea:	f67f af6f 	bls.w	8006ecc <arm_radix4_butterfly_f32+0x1bc>
 8006fee:	9b06      	ldr	r3, [sp, #24]
 8006ff0:	9a07      	ldr	r2, [sp, #28]
 8006ff2:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006ff6:	0892      	lsrs	r2, r2, #2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2a04      	cmp	r2, #4
 8006ffe:	9207      	str	r2, [sp, #28]
 8007000:	9306      	str	r3, [sp, #24]
 8007002:	d902      	bls.n	800700a <arm_radix4_butterfly_f32+0x2fa>
 8007004:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8007008:	e747      	b.n	8006e9a <arm_radix4_butterfly_f32+0x18a>
 800700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800700e:	3320      	adds	r3, #32
 8007010:	ed53 4a04 	vldr	s9, [r3, #-16]
 8007014:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 8007018:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800701c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8007020:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 8007024:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 8007028:	ed13 7a02 	vldr	s14, [r3, #-8]
 800702c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8007030:	ee34 3a24 	vadd.f32	s6, s8, s9
 8007034:	ee76 3a07 	vadd.f32	s7, s12, s14
 8007038:	ee34 4a64 	vsub.f32	s8, s8, s9
 800703c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007040:	ee75 4a65 	vsub.f32	s9, s10, s11
 8007044:	ee35 6a25 	vadd.f32	s12, s10, s11
 8007048:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800704c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007050:	ee73 2a23 	vadd.f32	s5, s6, s7
 8007054:	ee35 5a86 	vadd.f32	s10, s11, s12
 8007058:	ee73 3a63 	vsub.f32	s7, s6, s7
 800705c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007060:	ee34 3a24 	vadd.f32	s6, s8, s9
 8007064:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007068:	ee74 4a64 	vsub.f32	s9, s8, s9
 800706c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007070:	3a01      	subs	r2, #1
 8007072:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 8007076:	ed43 3a06 	vstr	s7, [r3, #-24]	; 0xffffffe8
 800707a:	ed03 3a04 	vstr	s6, [r3, #-16]
 800707e:	ed43 4a02 	vstr	s9, [r3, #-8]
 8007082:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
 8007086:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 800708a:	ed43 6a03 	vstr	s13, [r3, #-12]
 800708e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8007092:	f103 0320 	add.w	r3, r3, #32
 8007096:	d1bb      	bne.n	8007010 <arm_radix4_butterfly_f32+0x300>
 8007098:	b00d      	add	sp, #52	; 0x34
 800709a:	ecbd 8b06 	vpop	{d8-d10}
 800709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	bf00      	nop

080070a4 <arm_radix4_butterfly_inverse_f32>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	ed2d 8b08 	vpush	{d8-d11}
 80070ac:	b08d      	sub	sp, #52	; 0x34
 80070ae:	468a      	mov	sl, r1
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	0889      	lsrs	r1, r1, #2
 80070b4:	9c00      	ldr	r4, [sp, #0]
 80070b6:	9103      	str	r1, [sp, #12]
 80070b8:	460d      	mov	r5, r1
 80070ba:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80070be:	461f      	mov	r7, r3
 80070c0:	46ab      	mov	fp, r5
 80070c2:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 80070c6:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 80070ca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80070ce:	0125      	lsls	r5, r4, #4
 80070d0:	00e4      	lsls	r4, r4, #3
 80070d2:	9402      	str	r4, [sp, #8]
 80070d4:	9501      	str	r5, [sp, #4]
 80070d6:	4606      	mov	r6, r0
 80070d8:	4691      	mov	r9, r2
 80070da:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 80070de:	9009      	str	r0, [sp, #36]	; 0x24
 80070e0:	f8cd b010 	str.w	fp, [sp, #16]
 80070e4:	f10c 0004 	add.w	r0, ip, #4
 80070e8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80070ec:	f8cd a008 	str.w	sl, [sp, #8]
 80070f0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80070f4:	920a      	str	r2, [sp, #40]	; 0x28
 80070f6:	4430      	add	r0, r6
 80070f8:	4632      	mov	r2, r6
 80070fa:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80070fe:	4647      	mov	r7, r8
 8007100:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8007104:	3604      	adds	r6, #4
 8007106:	464d      	mov	r5, r9
 8007108:	464c      	mov	r4, r9
 800710a:	edd2 4a01 	vldr	s9, [r2, #4]
 800710e:	ed10 4a01 	vldr	s8, [r0, #-4]
 8007112:	ed16 6a01 	vldr	s12, [r6, #-4]
 8007116:	edd1 6a00 	vldr	s13, [r1]
 800711a:	ed97 7a01 	vldr	s14, [r7, #4]
 800711e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007122:	edd3 5a00 	vldr	s11, [r3]
 8007126:	ed91 5a01 	vldr	s10, [r1, #4]
 800712a:	ed99 3a00 	vldr	s6, [r9]
 800712e:	edd9 3a01 	vldr	s7, [r9, #4]
 8007132:	ee36 2a26 	vadd.f32	s4, s12, s13
 8007136:	ee74 2a25 	vadd.f32	s5, s8, s11
 800713a:	ee34 1a85 	vadd.f32	s2, s9, s10
 800713e:	ee77 1a27 	vadd.f32	s3, s14, s15
 8007142:	ee32 8a22 	vadd.f32	s16, s4, s5
 8007146:	ee71 0a21 	vadd.f32	s1, s2, s3
 800714a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800714e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007152:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8007156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800715a:	ed06 8a01 	vstr	s16, [r6, #-4]
 800715e:	edc2 0a01 	vstr	s1, [r2, #4]
 8007162:	ed94 4a00 	vldr	s8, [r4]
 8007166:	edd5 6a00 	vldr	s13, [r5]
 800716a:	edd5 7a01 	vldr	s15, [r5, #4]
 800716e:	ee72 4a62 	vsub.f32	s9, s4, s5
 8007172:	ee71 1a61 	vsub.f32	s3, s2, s3
 8007176:	ee75 2a25 	vadd.f32	s5, s10, s11
 800717a:	ed94 1a01 	vldr	s2, [r4, #4]
 800717e:	ee36 2a47 	vsub.f32	s4, s12, s14
 8007182:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007186:	ee35 6a65 	vsub.f32	s12, s10, s11
 800718a:	ee62 0a04 	vmul.f32	s1, s4, s8
 800718e:	ee21 5a83 	vmul.f32	s10, s3, s6
 8007192:	ee22 2a01 	vmul.f32	s4, s4, s2
 8007196:	ee22 4a84 	vmul.f32	s8, s5, s8
 800719a:	ee22 1a81 	vmul.f32	s2, s5, s2
 800719e:	ee67 5a26 	vmul.f32	s11, s14, s13
 80071a2:	ee64 2a83 	vmul.f32	s5, s9, s6
 80071a6:	ee66 6a26 	vmul.f32	s13, s12, s13
 80071aa:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80071ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80071b2:	ee61 1aa3 	vmul.f32	s3, s3, s7
 80071b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ba:	ee30 3ac1 	vsub.f32	s6, s1, s2
 80071be:	ee34 4a02 	vadd.f32	s8, s8, s4
 80071c2:	ee72 3ae1 	vsub.f32	s7, s5, s3
 80071c6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80071ca:	ee35 7ac6 	vsub.f32	s14, s11, s12
 80071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d2:	3208      	adds	r2, #8
 80071d4:	4542      	cmp	r2, r8
 80071d6:	ed40 3a01 	vstr	s7, [r0, #-4]
 80071da:	f106 0608 	add.w	r6, r6, #8
 80071de:	ed87 5a01 	vstr	s10, [r7, #4]
 80071e2:	44d1      	add	r9, sl
 80071e4:	ed81 3a00 	vstr	s6, [r1]
 80071e8:	ed81 4a01 	vstr	s8, [r1, #4]
 80071ec:	445c      	add	r4, fp
 80071ee:	ed83 7a00 	vstr	s14, [r3]
 80071f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80071f6:	4475      	add	r5, lr
 80071f8:	f100 0008 	add.w	r0, r0, #8
 80071fc:	f107 0708 	add.w	r7, r7, #8
 8007200:	f101 0108 	add.w	r1, r1, #8
 8007204:	f103 0308 	add.w	r3, r3, #8
 8007208:	f47f af7f 	bne.w	800710a <arm_radix4_butterfly_inverse_f32+0x66>
 800720c:	9b00      	ldr	r3, [sp, #0]
 800720e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8007212:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007216:	f8dd a008 	ldr.w	sl, [sp, #8]
 800721a:	920b      	str	r2, [sp, #44]	; 0x2c
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	b29b      	uxth	r3, r3
 8007220:	2a04      	cmp	r2, #4
 8007222:	9306      	str	r3, [sp, #24]
 8007224:	f240 80b9 	bls.w	800739a <arm_radix4_butterfly_inverse_f32+0x2f6>
 8007228:	9207      	str	r2, [sp, #28]
 800722a:	9806      	ldr	r0, [sp, #24]
 800722c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800722e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007230:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8007234:	4619      	mov	r1, r3
 8007236:	9308      	str	r3, [sp, #32]
 8007238:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800723c:	1e4a      	subs	r2, r1, #1
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	9205      	str	r2, [sp, #20]
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	010a      	lsls	r2, r1, #4
 8007246:	0103      	lsls	r3, r0, #4
 8007248:	9204      	str	r2, [sp, #16]
 800724a:	9302      	str	r3, [sp, #8]
 800724c:	00c2      	lsls	r2, r0, #3
 800724e:	2300      	movs	r3, #0
 8007250:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	46b8      	mov	r8, r7
 8007258:	46be      	mov	lr, r7
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	ed97 1a00 	vldr	s2, [r7]
 8007262:	edd7 1a01 	vldr	s3, [r7, #4]
 8007266:	ed9e 2a00 	vldr	s4, [lr]
 800726a:	edde 2a01 	vldr	s5, [lr, #4]
 800726e:	ed98 3a00 	vldr	s6, [r8]
 8007272:	edd8 3a01 	vldr	s7, [r8, #4]
 8007276:	9d00      	ldr	r5, [sp, #0]
 8007278:	18f1      	adds	r1, r6, r3
 800727a:	eb09 0203 	add.w	r2, r9, r3
 800727e:	1d34      	adds	r4, r6, #4
 8007280:	464b      	mov	r3, r9
 8007282:	4630      	mov	r0, r6
 8007284:	ed90 4a01 	vldr	s8, [r0, #4]
 8007288:	ed14 6a01 	vldr	s12, [r4, #-4]
 800728c:	ed91 7a00 	vldr	s14, [r1]
 8007290:	edd2 7a00 	vldr	s15, [r2]
 8007294:	ed93 5a01 	vldr	s10, [r3, #4]
 8007298:	edd1 4a01 	vldr	s9, [r1, #4]
 800729c:	edd2 5a01 	vldr	s11, [r2, #4]
 80072a0:	edd3 6a00 	vldr	s13, [r3]
 80072a4:	ee76 0a07 	vadd.f32	s1, s12, s14
 80072a8:	ee36 8aa7 	vadd.f32	s16, s13, s15
 80072ac:	ee36 6a47 	vsub.f32	s12, s12, s14
 80072b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80072b4:	ee74 8a24 	vadd.f32	s17, s8, s9
 80072b8:	ee74 7a64 	vsub.f32	s15, s8, s9
 80072bc:	ee35 7a65 	vsub.f32	s14, s10, s11
 80072c0:	ee35 4a25 	vadd.f32	s8, s10, s11
 80072c4:	ee70 4ac8 	vsub.f32	s9, s1, s16
 80072c8:	ee76 5a47 	vsub.f32	s11, s12, s14
 80072cc:	ee38 5ac4 	vsub.f32	s10, s17, s8
 80072d0:	ee36 7a07 	vadd.f32	s14, s12, s14
 80072d4:	ee37 6aa6 	vadd.f32	s12, s15, s13
 80072d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072dc:	ee24 ba82 	vmul.f32	s22, s9, s4
 80072e0:	ee65 aa22 	vmul.f32	s21, s10, s5
 80072e4:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80072e8:	ee25 aa81 	vmul.f32	s20, s11, s2
 80072ec:	ee66 9a21 	vmul.f32	s19, s12, s3
 80072f0:	ee27 9a03 	vmul.f32	s18, s14, s6
 80072f4:	ee67 6aa3 	vmul.f32	s13, s15, s7
 80072f8:	ee25 5a02 	vmul.f32	s10, s10, s4
 80072fc:	ee65 5aa1 	vmul.f32	s11, s11, s3
 8007300:	ee26 6a01 	vmul.f32	s12, s12, s2
 8007304:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007308:	ee67 7a83 	vmul.f32	s15, s15, s6
 800730c:	ee70 0a88 	vadd.f32	s1, s1, s16
 8007310:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007314:	ee38 4a84 	vadd.f32	s8, s17, s8
 8007318:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 800731c:	ee7a 4a69 	vsub.f32	s9, s20, s19
 8007320:	ee36 6a25 	vadd.f32	s12, s12, s11
 8007324:	ee79 6a66 	vsub.f32	s13, s18, s13
 8007328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800732c:	445d      	add	r5, fp
 800732e:	45aa      	cmp	sl, r5
 8007330:	ed44 0a01 	vstr	s1, [r4, #-4]
 8007334:	ed80 4a01 	vstr	s8, [r0, #4]
 8007338:	4464      	add	r4, ip
 800733a:	ed83 8a00 	vstr	s16, [r3]
 800733e:	ed83 5a01 	vstr	s10, [r3, #4]
 8007342:	4460      	add	r0, ip
 8007344:	edc1 4a00 	vstr	s9, [r1]
 8007348:	ed81 6a01 	vstr	s12, [r1, #4]
 800734c:	4463      	add	r3, ip
 800734e:	edc2 6a00 	vstr	s13, [r2]
 8007352:	edc2 7a01 	vstr	s15, [r2, #4]
 8007356:	4461      	add	r1, ip
 8007358:	4462      	add	r2, ip
 800735a:	d893      	bhi.n	8007284 <arm_radix4_butterfly_inverse_f32+0x1e0>
 800735c:	9a01      	ldr	r2, [sp, #4]
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	4417      	add	r7, r2
 8007362:	9a02      	ldr	r2, [sp, #8]
 8007364:	4496      	add	lr, r2
 8007366:	9a03      	ldr	r2, [sp, #12]
 8007368:	4490      	add	r8, r2
 800736a:	9a05      	ldr	r2, [sp, #20]
 800736c:	3301      	adds	r3, #1
 800736e:	4293      	cmp	r3, r2
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	f106 0608 	add.w	r6, r6, #8
 8007376:	f109 0908 	add.w	r9, r9, #8
 800737a:	f67f af6f 	bls.w	800725c <arm_radix4_butterfly_inverse_f32+0x1b8>
 800737e:	9b06      	ldr	r3, [sp, #24]
 8007380:	9a07      	ldr	r2, [sp, #28]
 8007382:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007386:	0892      	lsrs	r2, r2, #2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	b29b      	uxth	r3, r3
 800738c:	2a04      	cmp	r2, #4
 800738e:	9207      	str	r2, [sp, #28]
 8007390:	9306      	str	r3, [sp, #24]
 8007392:	d902      	bls.n	800739a <arm_radix4_butterfly_inverse_f32+0x2f6>
 8007394:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8007398:	e747      	b.n	800722a <arm_radix4_butterfly_inverse_f32+0x186>
 800739a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800739e:	3320      	adds	r3, #32
 80073a0:	ed53 4a04 	vldr	s9, [r3, #-16]
 80073a4:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 80073a8:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 80073ac:	ed53 5a01 	vldr	s11, [r3, #-4]
 80073b0:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 80073b4:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 80073b8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80073bc:	ed13 7a03 	vldr	s14, [r3, #-12]
 80073c0:	ee34 3a24 	vadd.f32	s6, s8, s9
 80073c4:	ee76 3a27 	vadd.f32	s7, s12, s15
 80073c8:	ee34 4a64 	vsub.f32	s8, s8, s9
 80073cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80073d0:	ee75 4a65 	vsub.f32	s9, s10, s11
 80073d4:	ee35 6a25 	vadd.f32	s12, s10, s11
 80073d8:	ee76 5a87 	vadd.f32	s11, s13, s14
 80073dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80073e0:	ee73 2a23 	vadd.f32	s5, s6, s7
 80073e4:	ee74 6a24 	vadd.f32	s13, s8, s9
 80073e8:	ee37 5a27 	vadd.f32	s10, s14, s15
 80073ec:	ee73 3a63 	vsub.f32	s7, s6, s7
 80073f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073f4:	ee34 3a64 	vsub.f32	s6, s8, s9
 80073f8:	ee75 4a86 	vadd.f32	s9, s11, s12
 80073fc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007400:	ee62 2a80 	vmul.f32	s5, s5, s0
 8007404:	ee26 7a00 	vmul.f32	s14, s12, s0
 8007408:	ee63 5a80 	vmul.f32	s11, s7, s0
 800740c:	ee23 4a00 	vmul.f32	s8, s6, s0
 8007410:	ee66 6a80 	vmul.f32	s13, s13, s0
 8007414:	ee64 4a80 	vmul.f32	s9, s9, s0
 8007418:	ee25 6a00 	vmul.f32	s12, s10, s0
 800741c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007420:	3a01      	subs	r2, #1
 8007422:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 8007426:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
 800742a:	ed03 4a04 	vstr	s8, [r3, #-16]
 800742e:	ed43 6a02 	vstr	s13, [r3, #-8]
 8007432:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8007436:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800743a:	ed03 6a03 	vstr	s12, [r3, #-12]
 800743e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8007442:	f103 0320 	add.w	r3, r3, #32
 8007446:	d1ab      	bne.n	80073a0 <arm_radix4_butterfly_inverse_f32+0x2fc>
 8007448:	b00d      	add	sp, #52	; 0x34
 800744a:	ecbd 8b08 	vpop	{d8-d11}
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	bf00      	nop

08007454 <arm_cfft_radix4_f32>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	7883      	ldrb	r3, [r0, #2]
 8007458:	4604      	mov	r4, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	460d      	mov	r5, r1
 800745e:	4608      	mov	r0, r1
 8007460:	6862      	ldr	r2, [r4, #4]
 8007462:	8821      	ldrh	r1, [r4, #0]
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	d005      	beq.n	8007474 <arm_cfft_radix4_f32+0x20>
 8007468:	f7ff fc52 	bl	8006d10 <arm_radix4_butterfly_f32>
 800746c:	78e3      	ldrb	r3, [r4, #3]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d007      	beq.n	8007482 <arm_cfft_radix4_f32+0x2e>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	ed94 0a04 	vldr	s0, [r4, #16]
 8007478:	f7ff fe14 	bl	80070a4 <arm_radix4_butterfly_inverse_f32>
 800747c:	78e3      	ldrb	r3, [r4, #3]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d1f7      	bne.n	8007472 <arm_cfft_radix4_f32+0x1e>
 8007482:	4628      	mov	r0, r5
 8007484:	8821      	ldrh	r1, [r4, #0]
 8007486:	89e2      	ldrh	r2, [r4, #14]
 8007488:	68a3      	ldr	r3, [r4, #8]
 800748a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800748e:	f000 b8e9 	b.w	8007664 <arm_bitreversal_f32>
 8007492:	bf00      	nop

08007494 <arm_cmplx_mag_f32>:
 8007494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007498:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800749c:	b084      	sub	sp, #16
 800749e:	d07f      	beq.n	80075a0 <arm_cmplx_mag_f32+0x10c>
 80074a0:	2700      	movs	r7, #0
 80074a2:	f100 0420 	add.w	r4, r0, #32
 80074a6:	f101 0510 	add.w	r5, r1, #16
 80074aa:	4646      	mov	r6, r8
 80074ac:	e05a      	b.n	8007564 <arm_cmplx_mag_f32+0xd0>
 80074ae:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80074b2:	eeb4 0a40 	vcmp.f32	s0, s0
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	f040 80a4 	bne.w	8007606 <arm_cmplx_mag_f32+0x172>
 80074be:	ed05 0a04 	vstr	s0, [r5, #-16]
 80074c2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80074c6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80074ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80074ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80074d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80074d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074de:	f2c0 808f 	blt.w	8007600 <arm_cmplx_mag_f32+0x16c>
 80074e2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80074e6:	eeb4 0a40 	vcmp.f32	s0, s0
 80074ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ee:	f040 80af 	bne.w	8007650 <arm_cmplx_mag_f32+0x1bc>
 80074f2:	ed05 0a03 	vstr	s0, [r5, #-12]
 80074f6:	ed54 7a04 	vldr	s15, [r4, #-16]
 80074fa:	ed14 0a03 	vldr	s0, [r4, #-12]
 80074fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007502:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007506:	ee77 7a80 	vadd.f32	s15, s15, s0
 800750a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007512:	db72      	blt.n	80075fa <arm_cmplx_mag_f32+0x166>
 8007514:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007518:	eeb4 0a40 	vcmp.f32	s0, s0
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	f040 808c 	bne.w	800763c <arm_cmplx_mag_f32+0x1a8>
 8007524:	ed05 0a02 	vstr	s0, [r5, #-8]
 8007528:	ed54 7a02 	vldr	s15, [r4, #-8]
 800752c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007530:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007534:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007538:	ee77 7a80 	vadd.f32	s15, s15, s0
 800753c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007544:	db20      	blt.n	8007588 <arm_cmplx_mag_f32+0xf4>
 8007546:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800754a:	eeb4 0a40 	vcmp.f32	s0, s0
 800754e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007552:	d169      	bne.n	8007628 <arm_cmplx_mag_f32+0x194>
 8007554:	3e01      	subs	r6, #1
 8007556:	ed05 0a01 	vstr	s0, [r5, #-4]
 800755a:	f104 0420 	add.w	r4, r4, #32
 800755e:	f105 0510 	add.w	r5, r5, #16
 8007562:	d019      	beq.n	8007598 <arm_cmplx_mag_f32+0x104>
 8007564:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8007568:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800756c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007570:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007574:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007580:	da95      	bge.n	80074ae <arm_cmplx_mag_f32+0x1a>
 8007582:	f845 7c10 	str.w	r7, [r5, #-16]
 8007586:	e79c      	b.n	80074c2 <arm_cmplx_mag_f32+0x2e>
 8007588:	3e01      	subs	r6, #1
 800758a:	f845 7c04 	str.w	r7, [r5, #-4]
 800758e:	f104 0420 	add.w	r4, r4, #32
 8007592:	f105 0510 	add.w	r5, r5, #16
 8007596:	d1e5      	bne.n	8007564 <arm_cmplx_mag_f32+0xd0>
 8007598:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800759c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80075a0:	f012 0503 	ands.w	r5, r2, #3
 80075a4:	d026      	beq.n	80075f4 <arm_cmplx_mag_f32+0x160>
 80075a6:	2600      	movs	r6, #0
 80075a8:	f100 0408 	add.w	r4, r0, #8
 80075ac:	e00c      	b.n	80075c8 <arm_cmplx_mag_f32+0x134>
 80075ae:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80075b2:	eeb4 0a40 	vcmp.f32	s0, s0
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	d12e      	bne.n	800761a <arm_cmplx_mag_f32+0x186>
 80075bc:	3d01      	subs	r5, #1
 80075be:	ed01 0a01 	vstr	s0, [r1, #-4]
 80075c2:	f104 0408 	add.w	r4, r4, #8
 80075c6:	d015      	beq.n	80075f4 <arm_cmplx_mag_f32+0x160>
 80075c8:	ed54 7a02 	vldr	s15, [r4, #-8]
 80075cc:	ed14 0a01 	vldr	s0, [r4, #-4]
 80075d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80075d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80075d8:	3104      	adds	r1, #4
 80075da:	ee77 7a80 	vadd.f32	s15, s15, s0
 80075de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e6:	dae2      	bge.n	80075ae <arm_cmplx_mag_f32+0x11a>
 80075e8:	3d01      	subs	r5, #1
 80075ea:	f841 6c04 	str.w	r6, [r1, #-4]
 80075ee:	f104 0408 	add.w	r4, r4, #8
 80075f2:	d1e9      	bne.n	80075c8 <arm_cmplx_mag_f32+0x134>
 80075f4:	b004      	add	sp, #16
 80075f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075fa:	f845 7c08 	str.w	r7, [r5, #-8]
 80075fe:	e793      	b.n	8007528 <arm_cmplx_mag_f32+0x94>
 8007600:	f845 7c0c 	str.w	r7, [r5, #-12]
 8007604:	e777      	b.n	80074f6 <arm_cmplx_mag_f32+0x62>
 8007606:	eeb0 0a67 	vmov.f32	s0, s15
 800760a:	9203      	str	r2, [sp, #12]
 800760c:	9102      	str	r1, [sp, #8]
 800760e:	9001      	str	r0, [sp, #4]
 8007610:	f004 fe60 	bl	800c2d4 <sqrtf>
 8007614:	a801      	add	r0, sp, #4
 8007616:	c807      	ldmia	r0, {r0, r1, r2}
 8007618:	e751      	b.n	80074be <arm_cmplx_mag_f32+0x2a>
 800761a:	eeb0 0a67 	vmov.f32	s0, s15
 800761e:	9101      	str	r1, [sp, #4]
 8007620:	f004 fe58 	bl	800c2d4 <sqrtf>
 8007624:	9901      	ldr	r1, [sp, #4]
 8007626:	e7c9      	b.n	80075bc <arm_cmplx_mag_f32+0x128>
 8007628:	eeb0 0a67 	vmov.f32	s0, s15
 800762c:	9203      	str	r2, [sp, #12]
 800762e:	9102      	str	r1, [sp, #8]
 8007630:	9001      	str	r0, [sp, #4]
 8007632:	f004 fe4f 	bl	800c2d4 <sqrtf>
 8007636:	a801      	add	r0, sp, #4
 8007638:	c807      	ldmia	r0, {r0, r1, r2}
 800763a:	e78b      	b.n	8007554 <arm_cmplx_mag_f32+0xc0>
 800763c:	eeb0 0a67 	vmov.f32	s0, s15
 8007640:	9203      	str	r2, [sp, #12]
 8007642:	9102      	str	r1, [sp, #8]
 8007644:	9001      	str	r0, [sp, #4]
 8007646:	f004 fe45 	bl	800c2d4 <sqrtf>
 800764a:	a801      	add	r0, sp, #4
 800764c:	c807      	ldmia	r0, {r0, r1, r2}
 800764e:	e769      	b.n	8007524 <arm_cmplx_mag_f32+0x90>
 8007650:	eeb0 0a67 	vmov.f32	s0, s15
 8007654:	9203      	str	r2, [sp, #12]
 8007656:	9102      	str	r1, [sp, #8]
 8007658:	9001      	str	r0, [sp, #4]
 800765a:	f004 fe3b 	bl	800c2d4 <sqrtf>
 800765e:	a801      	add	r0, sp, #4
 8007660:	c807      	ldmia	r0, {r0, r1, r2}
 8007662:	e746      	b.n	80074f2 <arm_cmplx_mag_f32+0x5e>

08007664 <arm_bitreversal_f32>:
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	b085      	sub	sp, #20
 800766a:	0849      	lsrs	r1, r1, #1
 800766c:	0052      	lsls	r2, r2, #1
 800766e:	2400      	movs	r4, #0
 8007670:	9203      	str	r2, [sp, #12]
 8007672:	1e8a      	subs	r2, r1, #2
 8007674:	9101      	str	r1, [sp, #4]
 8007676:	f101 0c01 	add.w	ip, r1, #1
 800767a:	9202      	str	r2, [sp, #8]
 800767c:	4621      	mov	r1, r4
 800767e:	4622      	mov	r2, r4
 8007680:	9d01      	ldr	r5, [sp, #4]
 8007682:	3101      	adds	r1, #1
 8007684:	442a      	add	r2, r5
 8007686:	00c9      	lsls	r1, r1, #3
 8007688:	00d2      	lsls	r2, r2, #3
 800768a:	1846      	adds	r6, r0, r1
 800768c:	1885      	adds	r5, r0, r2
 800768e:	3104      	adds	r1, #4
 8007690:	3204      	adds	r2, #4
 8007692:	6837      	ldr	r7, [r6, #0]
 8007694:	f8d5 e000 	ldr.w	lr, [r5]
 8007698:	f8c6 e000 	str.w	lr, [r6]
 800769c:	4401      	add	r1, r0
 800769e:	4402      	add	r2, r0
 80076a0:	602f      	str	r7, [r5, #0]
 80076a2:	3402      	adds	r4, #2
 80076a4:	680e      	ldr	r6, [r1, #0]
 80076a6:	f8d2 9000 	ldr.w	r9, [r2]
 80076aa:	f8c1 9000 	str.w	r9, [r1]
 80076ae:	b2a4      	uxth	r4, r4
 80076b0:	6016      	str	r6, [r2, #0]
 80076b2:	eb04 050c 	add.w	r5, r4, ip
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	00ed      	lsls	r5, r5, #3
 80076ba:	eb00 0e05 	add.w	lr, r0, r5
 80076be:	3504      	adds	r5, #4
 80076c0:	9500      	str	r5, [sp, #0]
 80076c2:	eb0c 0102 	add.w	r1, ip, r2
 80076c6:	9d02      	ldr	r5, [sp, #8]
 80076c8:	00c9      	lsls	r1, r1, #3
 80076ca:	00e7      	lsls	r7, r4, #3
 80076cc:	00d6      	lsls	r6, r2, #3
 80076ce:	f101 0b04 	add.w	fp, r1, #4
 80076d2:	eb00 0901 	add.w	r9, r0, r1
 80076d6:	42ac      	cmp	r4, r5
 80076d8:	9903      	ldr	r1, [sp, #12]
 80076da:	9d00      	ldr	r5, [sp, #0]
 80076dc:	eb00 0807 	add.w	r8, r0, r7
 80076e0:	eb00 0a06 	add.w	sl, r0, r6
 80076e4:	f107 0704 	add.w	r7, r7, #4
 80076e8:	f106 0604 	add.w	r6, r6, #4
 80076ec:	440b      	add	r3, r1
 80076ee:	4407      	add	r7, r0
 80076f0:	4406      	add	r6, r0
 80076f2:	4621      	mov	r1, r4
 80076f4:	4405      	add	r5, r0
 80076f6:	4483      	add	fp, r0
 80076f8:	d820      	bhi.n	800773c <arm_bitreversal_f32+0xd8>
 80076fa:	42a2      	cmp	r2, r4
 80076fc:	d9c0      	bls.n	8007680 <arm_bitreversal_f32+0x1c>
 80076fe:	edd8 7a00 	vldr	s15, [r8]
 8007702:	ed9a 7a00 	vldr	s14, [sl]
 8007706:	ed88 7a00 	vstr	s14, [r8]
 800770a:	edca 7a00 	vstr	s15, [sl]
 800770e:	f8d7 8000 	ldr.w	r8, [r7]
 8007712:	f8d6 a000 	ldr.w	sl, [r6]
 8007716:	f8c7 a000 	str.w	sl, [r7]
 800771a:	f8c6 8000 	str.w	r8, [r6]
 800771e:	f8de 6000 	ldr.w	r6, [lr]
 8007722:	f8d9 7000 	ldr.w	r7, [r9]
 8007726:	f8ce 7000 	str.w	r7, [lr]
 800772a:	f8c9 6000 	str.w	r6, [r9]
 800772e:	682e      	ldr	r6, [r5, #0]
 8007730:	f8db 7000 	ldr.w	r7, [fp]
 8007734:	602f      	str	r7, [r5, #0]
 8007736:	f8cb 6000 	str.w	r6, [fp]
 800773a:	e7a1      	b.n	8007680 <arm_bitreversal_f32+0x1c>
 800773c:	b005      	add	sp, #20
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	bf00      	nop

08007744 <__errno>:
 8007744:	4b01      	ldr	r3, [pc, #4]	; (800774c <__errno+0x8>)
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20000028 	.word	0x20000028

08007750 <std>:
 8007750:	2300      	movs	r3, #0
 8007752:	b510      	push	{r4, lr}
 8007754:	4604      	mov	r4, r0
 8007756:	e9c0 3300 	strd	r3, r3, [r0]
 800775a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775e:	6083      	str	r3, [r0, #8]
 8007760:	8181      	strh	r1, [r0, #12]
 8007762:	6643      	str	r3, [r0, #100]	; 0x64
 8007764:	81c2      	strh	r2, [r0, #14]
 8007766:	6183      	str	r3, [r0, #24]
 8007768:	4619      	mov	r1, r3
 800776a:	2208      	movs	r2, #8
 800776c:	305c      	adds	r0, #92	; 0x5c
 800776e:	f000 f91a 	bl	80079a6 <memset>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x38>)
 8007774:	6263      	str	r3, [r4, #36]	; 0x24
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <std+0x3c>)
 8007778:	62a3      	str	r3, [r4, #40]	; 0x28
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <std+0x40>)
 800777c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std+0x44>)
 8007780:	6224      	str	r4, [r4, #32]
 8007782:	6323      	str	r3, [r4, #48]	; 0x30
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	08008915 	.word	0x08008915
 800778c:	08008937 	.word	0x08008937
 8007790:	0800896f 	.word	0x0800896f
 8007794:	08008993 	.word	0x08008993

08007798 <_cleanup_r>:
 8007798:	4901      	ldr	r1, [pc, #4]	; (80077a0 <_cleanup_r+0x8>)
 800779a:	f000 b8af 	b.w	80078fc <_fwalk_reent>
 800779e:	bf00      	nop
 80077a0:	0800a551 	.word	0x0800a551

080077a4 <__sfmoreglue>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	2268      	movs	r2, #104	; 0x68
 80077a8:	1e4d      	subs	r5, r1, #1
 80077aa:	4355      	muls	r5, r2
 80077ac:	460e      	mov	r6, r1
 80077ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077b2:	f000 f921 	bl	80079f8 <_malloc_r>
 80077b6:	4604      	mov	r4, r0
 80077b8:	b140      	cbz	r0, 80077cc <__sfmoreglue+0x28>
 80077ba:	2100      	movs	r1, #0
 80077bc:	e9c0 1600 	strd	r1, r6, [r0]
 80077c0:	300c      	adds	r0, #12
 80077c2:	60a0      	str	r0, [r4, #8]
 80077c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077c8:	f000 f8ed 	bl	80079a6 <memset>
 80077cc:	4620      	mov	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__sfp_lock_acquire>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_acquire+0x8>)
 80077d2:	f000 b8d8 	b.w	8007986 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20010249 	.word	0x20010249

080077dc <__sfp_lock_release>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sfp_lock_release+0x8>)
 80077de:	f000 b8d3 	b.w	8007988 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20010249 	.word	0x20010249

080077e8 <__sinit_lock_acquire>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__sinit_lock_acquire+0x8>)
 80077ea:	f000 b8cc 	b.w	8007986 <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	2001024a 	.word	0x2001024a

080077f4 <__sinit_lock_release>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sinit_lock_release+0x8>)
 80077f6:	f000 b8c7 	b.w	8007988 <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	2001024a 	.word	0x2001024a

08007800 <__sinit>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	f7ff fff0 	bl	80077e8 <__sinit_lock_acquire>
 8007808:	69a3      	ldr	r3, [r4, #24]
 800780a:	b11b      	cbz	r3, 8007814 <__sinit+0x14>
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007810:	f7ff bff0 	b.w	80077f4 <__sinit_lock_release>
 8007814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007818:	6523      	str	r3, [r4, #80]	; 0x50
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <__sinit+0x68>)
 800781c:	4a13      	ldr	r2, [pc, #76]	; (800786c <__sinit+0x6c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	62a2      	str	r2, [r4, #40]	; 0x28
 8007822:	42a3      	cmp	r3, r4
 8007824:	bf04      	itt	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	61a3      	streq	r3, [r4, #24]
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f820 	bl	8007870 <__sfp>
 8007830:	6060      	str	r0, [r4, #4]
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f81c 	bl	8007870 <__sfp>
 8007838:	60a0      	str	r0, [r4, #8]
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f818 	bl	8007870 <__sfp>
 8007840:	2200      	movs	r2, #0
 8007842:	60e0      	str	r0, [r4, #12]
 8007844:	2104      	movs	r1, #4
 8007846:	6860      	ldr	r0, [r4, #4]
 8007848:	f7ff ff82 	bl	8007750 <std>
 800784c:	68a0      	ldr	r0, [r4, #8]
 800784e:	2201      	movs	r2, #1
 8007850:	2109      	movs	r1, #9
 8007852:	f7ff ff7d 	bl	8007750 <std>
 8007856:	68e0      	ldr	r0, [r4, #12]
 8007858:	2202      	movs	r2, #2
 800785a:	2112      	movs	r1, #18
 800785c:	f7ff ff78 	bl	8007750 <std>
 8007860:	2301      	movs	r3, #1
 8007862:	61a3      	str	r3, [r4, #24]
 8007864:	e7d2      	b.n	800780c <__sinit+0xc>
 8007866:	bf00      	nop
 8007868:	08029178 	.word	0x08029178
 800786c:	08007799 	.word	0x08007799

08007870 <__sfp>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	4607      	mov	r7, r0
 8007874:	f7ff ffac 	bl	80077d0 <__sfp_lock_acquire>
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <__sfp+0x84>)
 800787a:	681e      	ldr	r6, [r3, #0]
 800787c:	69b3      	ldr	r3, [r6, #24]
 800787e:	b913      	cbnz	r3, 8007886 <__sfp+0x16>
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ffbd 	bl	8007800 <__sinit>
 8007886:	3648      	adds	r6, #72	; 0x48
 8007888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800788c:	3b01      	subs	r3, #1
 800788e:	d503      	bpl.n	8007898 <__sfp+0x28>
 8007890:	6833      	ldr	r3, [r6, #0]
 8007892:	b30b      	cbz	r3, 80078d8 <__sfp+0x68>
 8007894:	6836      	ldr	r6, [r6, #0]
 8007896:	e7f7      	b.n	8007888 <__sfp+0x18>
 8007898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800789c:	b9d5      	cbnz	r5, 80078d4 <__sfp+0x64>
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <__sfp+0x88>)
 80078a0:	60e3      	str	r3, [r4, #12]
 80078a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078a6:	6665      	str	r5, [r4, #100]	; 0x64
 80078a8:	f000 f86c 	bl	8007984 <__retarget_lock_init_recursive>
 80078ac:	f7ff ff96 	bl	80077dc <__sfp_lock_release>
 80078b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078b8:	6025      	str	r5, [r4, #0]
 80078ba:	61a5      	str	r5, [r4, #24]
 80078bc:	2208      	movs	r2, #8
 80078be:	4629      	mov	r1, r5
 80078c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078c4:	f000 f86f 	bl	80079a6 <memset>
 80078c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078d0:	4620      	mov	r0, r4
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	3468      	adds	r4, #104	; 0x68
 80078d6:	e7d9      	b.n	800788c <__sfp+0x1c>
 80078d8:	2104      	movs	r1, #4
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ff62 	bl	80077a4 <__sfmoreglue>
 80078e0:	4604      	mov	r4, r0
 80078e2:	6030      	str	r0, [r6, #0]
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1d5      	bne.n	8007894 <__sfp+0x24>
 80078e8:	f7ff ff78 	bl	80077dc <__sfp_lock_release>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	e7ee      	b.n	80078d0 <__sfp+0x60>
 80078f2:	bf00      	nop
 80078f4:	08029178 	.word	0x08029178
 80078f8:	ffff0001 	.word	0xffff0001

080078fc <_fwalk_reent>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4606      	mov	r6, r0
 8007902:	4688      	mov	r8, r1
 8007904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007908:	2700      	movs	r7, #0
 800790a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790e:	f1b9 0901 	subs.w	r9, r9, #1
 8007912:	d505      	bpl.n	8007920 <_fwalk_reent+0x24>
 8007914:	6824      	ldr	r4, [r4, #0]
 8007916:	2c00      	cmp	r4, #0
 8007918:	d1f7      	bne.n	800790a <_fwalk_reent+0xe>
 800791a:	4638      	mov	r0, r7
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d907      	bls.n	8007936 <_fwalk_reent+0x3a>
 8007926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792a:	3301      	adds	r3, #1
 800792c:	d003      	beq.n	8007936 <_fwalk_reent+0x3a>
 800792e:	4629      	mov	r1, r5
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	4307      	orrs	r7, r0
 8007936:	3568      	adds	r5, #104	; 0x68
 8007938:	e7e9      	b.n	800790e <_fwalk_reent+0x12>
	...

0800793c <__libc_init_array>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	4d0d      	ldr	r5, [pc, #52]	; (8007974 <__libc_init_array+0x38>)
 8007940:	4c0d      	ldr	r4, [pc, #52]	; (8007978 <__libc_init_array+0x3c>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	2600      	movs	r6, #0
 8007948:	42a6      	cmp	r6, r4
 800794a:	d109      	bne.n	8007960 <__libc_init_array+0x24>
 800794c:	4d0b      	ldr	r5, [pc, #44]	; (800797c <__libc_init_array+0x40>)
 800794e:	4c0c      	ldr	r4, [pc, #48]	; (8007980 <__libc_init_array+0x44>)
 8007950:	f005 fd48 	bl	800d3e4 <_init>
 8007954:	1b64      	subs	r4, r4, r5
 8007956:	10a4      	asrs	r4, r4, #2
 8007958:	2600      	movs	r6, #0
 800795a:	42a6      	cmp	r6, r4
 800795c:	d105      	bne.n	800796a <__libc_init_array+0x2e>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	f855 3b04 	ldr.w	r3, [r5], #4
 8007964:	4798      	blx	r3
 8007966:	3601      	adds	r6, #1
 8007968:	e7ee      	b.n	8007948 <__libc_init_array+0xc>
 800796a:	f855 3b04 	ldr.w	r3, [r5], #4
 800796e:	4798      	blx	r3
 8007970:	3601      	adds	r6, #1
 8007972:	e7f2      	b.n	800795a <__libc_init_array+0x1e>
 8007974:	080295f8 	.word	0x080295f8
 8007978:	080295f8 	.word	0x080295f8
 800797c:	080295f8 	.word	0x080295f8
 8007980:	080295fc 	.word	0x080295fc

08007984 <__retarget_lock_init_recursive>:
 8007984:	4770      	bx	lr

08007986 <__retarget_lock_acquire_recursive>:
 8007986:	4770      	bx	lr

08007988 <__retarget_lock_release_recursive>:
 8007988:	4770      	bx	lr

0800798a <memcpy>:
 800798a:	440a      	add	r2, r1
 800798c:	4291      	cmp	r1, r2
 800798e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007992:	d100      	bne.n	8007996 <memcpy+0xc>
 8007994:	4770      	bx	lr
 8007996:	b510      	push	{r4, lr}
 8007998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a0:	4291      	cmp	r1, r2
 80079a2:	d1f9      	bne.n	8007998 <memcpy+0xe>
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <memset>:
 80079a6:	4402      	add	r2, r0
 80079a8:	4603      	mov	r3, r0
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d100      	bne.n	80079b0 <memset+0xa>
 80079ae:	4770      	bx	lr
 80079b0:	f803 1b01 	strb.w	r1, [r3], #1
 80079b4:	e7f9      	b.n	80079aa <memset+0x4>
	...

080079b8 <sbrk_aligned>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	4e0e      	ldr	r6, [pc, #56]	; (80079f4 <sbrk_aligned+0x3c>)
 80079bc:	460c      	mov	r4, r1
 80079be:	6831      	ldr	r1, [r6, #0]
 80079c0:	4605      	mov	r5, r0
 80079c2:	b911      	cbnz	r1, 80079ca <sbrk_aligned+0x12>
 80079c4:	f000 ff70 	bl	80088a8 <_sbrk_r>
 80079c8:	6030      	str	r0, [r6, #0]
 80079ca:	4621      	mov	r1, r4
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 ff6b 	bl	80088a8 <_sbrk_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d00a      	beq.n	80079ec <sbrk_aligned+0x34>
 80079d6:	1cc4      	adds	r4, r0, #3
 80079d8:	f024 0403 	bic.w	r4, r4, #3
 80079dc:	42a0      	cmp	r0, r4
 80079de:	d007      	beq.n	80079f0 <sbrk_aligned+0x38>
 80079e0:	1a21      	subs	r1, r4, r0
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 ff60 	bl	80088a8 <_sbrk_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d101      	bne.n	80079f0 <sbrk_aligned+0x38>
 80079ec:	f04f 34ff 	mov.w	r4, #4294967295
 80079f0:	4620      	mov	r0, r4
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	20010250 	.word	0x20010250

080079f8 <_malloc_r>:
 80079f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	1ccd      	adds	r5, r1, #3
 80079fe:	f025 0503 	bic.w	r5, r5, #3
 8007a02:	3508      	adds	r5, #8
 8007a04:	2d0c      	cmp	r5, #12
 8007a06:	bf38      	it	cc
 8007a08:	250c      	movcc	r5, #12
 8007a0a:	2d00      	cmp	r5, #0
 8007a0c:	4607      	mov	r7, r0
 8007a0e:	db01      	blt.n	8007a14 <_malloc_r+0x1c>
 8007a10:	42a9      	cmp	r1, r5
 8007a12:	d905      	bls.n	8007a20 <_malloc_r+0x28>
 8007a14:	230c      	movs	r3, #12
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	2600      	movs	r6, #0
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a20:	4e2e      	ldr	r6, [pc, #184]	; (8007adc <_malloc_r+0xe4>)
 8007a22:	f003 f971 	bl	800ad08 <__malloc_lock>
 8007a26:	6833      	ldr	r3, [r6, #0]
 8007a28:	461c      	mov	r4, r3
 8007a2a:	bb34      	cbnz	r4, 8007a7a <_malloc_r+0x82>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f7ff ffc2 	bl	80079b8 <sbrk_aligned>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	4604      	mov	r4, r0
 8007a38:	d14d      	bne.n	8007ad6 <_malloc_r+0xde>
 8007a3a:	6834      	ldr	r4, [r6, #0]
 8007a3c:	4626      	mov	r6, r4
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d140      	bne.n	8007ac4 <_malloc_r+0xcc>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	4631      	mov	r1, r6
 8007a46:	4638      	mov	r0, r7
 8007a48:	eb04 0803 	add.w	r8, r4, r3
 8007a4c:	f000 ff2c 	bl	80088a8 <_sbrk_r>
 8007a50:	4580      	cmp	r8, r0
 8007a52:	d13a      	bne.n	8007aca <_malloc_r+0xd2>
 8007a54:	6821      	ldr	r1, [r4, #0]
 8007a56:	3503      	adds	r5, #3
 8007a58:	1a6d      	subs	r5, r5, r1
 8007a5a:	f025 0503 	bic.w	r5, r5, #3
 8007a5e:	3508      	adds	r5, #8
 8007a60:	2d0c      	cmp	r5, #12
 8007a62:	bf38      	it	cc
 8007a64:	250c      	movcc	r5, #12
 8007a66:	4629      	mov	r1, r5
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff ffa5 	bl	80079b8 <sbrk_aligned>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d02b      	beq.n	8007aca <_malloc_r+0xd2>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	442b      	add	r3, r5
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	e00e      	b.n	8007a98 <_malloc_r+0xa0>
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	1b52      	subs	r2, r2, r5
 8007a7e:	d41e      	bmi.n	8007abe <_malloc_r+0xc6>
 8007a80:	2a0b      	cmp	r2, #11
 8007a82:	d916      	bls.n	8007ab2 <_malloc_r+0xba>
 8007a84:	1961      	adds	r1, r4, r5
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	6025      	str	r5, [r4, #0]
 8007a8a:	bf18      	it	ne
 8007a8c:	6059      	strne	r1, [r3, #4]
 8007a8e:	6863      	ldr	r3, [r4, #4]
 8007a90:	bf08      	it	eq
 8007a92:	6031      	streq	r1, [r6, #0]
 8007a94:	5162      	str	r2, [r4, r5]
 8007a96:	604b      	str	r3, [r1, #4]
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f104 060b 	add.w	r6, r4, #11
 8007a9e:	f003 f939 	bl	800ad14 <__malloc_unlock>
 8007aa2:	f026 0607 	bic.w	r6, r6, #7
 8007aa6:	1d23      	adds	r3, r4, #4
 8007aa8:	1af2      	subs	r2, r6, r3
 8007aaa:	d0b6      	beq.n	8007a1a <_malloc_r+0x22>
 8007aac:	1b9b      	subs	r3, r3, r6
 8007aae:	50a3      	str	r3, [r4, r2]
 8007ab0:	e7b3      	b.n	8007a1a <_malloc_r+0x22>
 8007ab2:	6862      	ldr	r2, [r4, #4]
 8007ab4:	42a3      	cmp	r3, r4
 8007ab6:	bf0c      	ite	eq
 8007ab8:	6032      	streq	r2, [r6, #0]
 8007aba:	605a      	strne	r2, [r3, #4]
 8007abc:	e7ec      	b.n	8007a98 <_malloc_r+0xa0>
 8007abe:	4623      	mov	r3, r4
 8007ac0:	6864      	ldr	r4, [r4, #4]
 8007ac2:	e7b2      	b.n	8007a2a <_malloc_r+0x32>
 8007ac4:	4634      	mov	r4, r6
 8007ac6:	6876      	ldr	r6, [r6, #4]
 8007ac8:	e7b9      	b.n	8007a3e <_malloc_r+0x46>
 8007aca:	230c      	movs	r3, #12
 8007acc:	603b      	str	r3, [r7, #0]
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f003 f920 	bl	800ad14 <__malloc_unlock>
 8007ad4:	e7a1      	b.n	8007a1a <_malloc_r+0x22>
 8007ad6:	6025      	str	r5, [r4, #0]
 8007ad8:	e7de      	b.n	8007a98 <_malloc_r+0xa0>
 8007ada:	bf00      	nop
 8007adc:	2001024c 	.word	0x2001024c

08007ae0 <__cvt>:
 8007ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	ec55 4b10 	vmov	r4, r5, d0
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	460e      	mov	r6, r1
 8007aec:	4619      	mov	r1, r3
 8007aee:	462b      	mov	r3, r5
 8007af0:	bfbb      	ittet	lt
 8007af2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007af6:	461d      	movlt	r5, r3
 8007af8:	2300      	movge	r3, #0
 8007afa:	232d      	movlt	r3, #45	; 0x2d
 8007afc:	700b      	strb	r3, [r1, #0]
 8007afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b04:	4691      	mov	r9, r2
 8007b06:	f023 0820 	bic.w	r8, r3, #32
 8007b0a:	bfbc      	itt	lt
 8007b0c:	4622      	movlt	r2, r4
 8007b0e:	4614      	movlt	r4, r2
 8007b10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b14:	d005      	beq.n	8007b22 <__cvt+0x42>
 8007b16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b1a:	d100      	bne.n	8007b1e <__cvt+0x3e>
 8007b1c:	3601      	adds	r6, #1
 8007b1e:	2102      	movs	r1, #2
 8007b20:	e000      	b.n	8007b24 <__cvt+0x44>
 8007b22:	2103      	movs	r1, #3
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	ab02      	add	r3, sp, #8
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	ec45 4b10 	vmov	d0, r4, r5
 8007b30:	4653      	mov	r3, sl
 8007b32:	4632      	mov	r2, r6
 8007b34:	f001 fe98 	bl	8009868 <_dtoa_r>
 8007b38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	d102      	bne.n	8007b46 <__cvt+0x66>
 8007b40:	f019 0f01 	tst.w	r9, #1
 8007b44:	d022      	beq.n	8007b8c <__cvt+0xac>
 8007b46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b4a:	eb07 0906 	add.w	r9, r7, r6
 8007b4e:	d110      	bne.n	8007b72 <__cvt+0x92>
 8007b50:	783b      	ldrb	r3, [r7, #0]
 8007b52:	2b30      	cmp	r3, #48	; 0x30
 8007b54:	d10a      	bne.n	8007b6c <__cvt+0x8c>
 8007b56:	2200      	movs	r2, #0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	f7f8 ffd3 	bl	8000b08 <__aeabi_dcmpeq>
 8007b62:	b918      	cbnz	r0, 8007b6c <__cvt+0x8c>
 8007b64:	f1c6 0601 	rsb	r6, r6, #1
 8007b68:	f8ca 6000 	str.w	r6, [sl]
 8007b6c:	f8da 3000 	ldr.w	r3, [sl]
 8007b70:	4499      	add	r9, r3
 8007b72:	2200      	movs	r2, #0
 8007b74:	2300      	movs	r3, #0
 8007b76:	4620      	mov	r0, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7f8 ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 8007b7e:	b108      	cbz	r0, 8007b84 <__cvt+0xa4>
 8007b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b84:	2230      	movs	r2, #48	; 0x30
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	454b      	cmp	r3, r9
 8007b8a:	d307      	bcc.n	8007b9c <__cvt+0xbc>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b90:	1bdb      	subs	r3, r3, r7
 8007b92:	4638      	mov	r0, r7
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	b004      	add	sp, #16
 8007b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9c:	1c59      	adds	r1, r3, #1
 8007b9e:	9103      	str	r1, [sp, #12]
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	e7f0      	b.n	8007b86 <__cvt+0xa6>

08007ba4 <__exponent>:
 8007ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	bfb8      	it	lt
 8007bac:	4249      	neglt	r1, r1
 8007bae:	f803 2b02 	strb.w	r2, [r3], #2
 8007bb2:	bfb4      	ite	lt
 8007bb4:	222d      	movlt	r2, #45	; 0x2d
 8007bb6:	222b      	movge	r2, #43	; 0x2b
 8007bb8:	2909      	cmp	r1, #9
 8007bba:	7042      	strb	r2, [r0, #1]
 8007bbc:	dd2a      	ble.n	8007c14 <__exponent+0x70>
 8007bbe:	f10d 0407 	add.w	r4, sp, #7
 8007bc2:	46a4      	mov	ip, r4
 8007bc4:	270a      	movs	r7, #10
 8007bc6:	46a6      	mov	lr, r4
 8007bc8:	460a      	mov	r2, r1
 8007bca:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bce:	fb07 1516 	mls	r5, r7, r6, r1
 8007bd2:	3530      	adds	r5, #48	; 0x30
 8007bd4:	2a63      	cmp	r2, #99	; 0x63
 8007bd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007bde:	4631      	mov	r1, r6
 8007be0:	dcf1      	bgt.n	8007bc6 <__exponent+0x22>
 8007be2:	3130      	adds	r1, #48	; 0x30
 8007be4:	f1ae 0502 	sub.w	r5, lr, #2
 8007be8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bec:	1c44      	adds	r4, r0, #1
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4561      	cmp	r1, ip
 8007bf2:	d30a      	bcc.n	8007c0a <__exponent+0x66>
 8007bf4:	f10d 0209 	add.w	r2, sp, #9
 8007bf8:	eba2 020e 	sub.w	r2, r2, lr
 8007bfc:	4565      	cmp	r5, ip
 8007bfe:	bf88      	it	hi
 8007c00:	2200      	movhi	r2, #0
 8007c02:	4413      	add	r3, r2
 8007c04:	1a18      	subs	r0, r3, r0
 8007c06:	b003      	add	sp, #12
 8007c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c12:	e7ed      	b.n	8007bf0 <__exponent+0x4c>
 8007c14:	2330      	movs	r3, #48	; 0x30
 8007c16:	3130      	adds	r1, #48	; 0x30
 8007c18:	7083      	strb	r3, [r0, #2]
 8007c1a:	70c1      	strb	r1, [r0, #3]
 8007c1c:	1d03      	adds	r3, r0, #4
 8007c1e:	e7f1      	b.n	8007c04 <__exponent+0x60>

08007c20 <_printf_float>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	ed2d 8b02 	vpush	{d8}
 8007c28:	b08d      	sub	sp, #52	; 0x34
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c30:	4616      	mov	r6, r2
 8007c32:	461f      	mov	r7, r3
 8007c34:	4605      	mov	r5, r0
 8007c36:	f003 f837 	bl	800aca8 <_localeconv_r>
 8007c3a:	f8d0 a000 	ldr.w	sl, [r0]
 8007c3e:	4650      	mov	r0, sl
 8007c40:	f7f8 fae6 	bl	8000210 <strlen>
 8007c44:	2300      	movs	r3, #0
 8007c46:	930a      	str	r3, [sp, #40]	; 0x28
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	9305      	str	r3, [sp, #20]
 8007c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c54:	3307      	adds	r3, #7
 8007c56:	f023 0307 	bic.w	r3, r3, #7
 8007c5a:	f103 0208 	add.w	r2, r3, #8
 8007c5e:	f8c8 2000 	str.w	r2, [r8]
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c72:	9307      	str	r3, [sp, #28]
 8007c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c78:	ee08 0a10 	vmov	s16, r0
 8007c7c:	4b9f      	ldr	r3, [pc, #636]	; (8007efc <_printf_float+0x2dc>)
 8007c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c82:	f04f 32ff 	mov.w	r2, #4294967295
 8007c86:	f7f8 ff71 	bl	8000b6c <__aeabi_dcmpun>
 8007c8a:	bb88      	cbnz	r0, 8007cf0 <_printf_float+0xd0>
 8007c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c90:	4b9a      	ldr	r3, [pc, #616]	; (8007efc <_printf_float+0x2dc>)
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	f7f8 ff4b 	bl	8000b30 <__aeabi_dcmple>
 8007c9a:	bb48      	cbnz	r0, 8007cf0 <_printf_float+0xd0>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 ff3a 	bl	8000b1c <__aeabi_dcmplt>
 8007ca8:	b110      	cbz	r0, 8007cb0 <_printf_float+0x90>
 8007caa:	232d      	movs	r3, #45	; 0x2d
 8007cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb0:	4b93      	ldr	r3, [pc, #588]	; (8007f00 <_printf_float+0x2e0>)
 8007cb2:	4894      	ldr	r0, [pc, #592]	; (8007f04 <_printf_float+0x2e4>)
 8007cb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cb8:	bf94      	ite	ls
 8007cba:	4698      	movls	r8, r3
 8007cbc:	4680      	movhi	r8, r0
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	6123      	str	r3, [r4, #16]
 8007cc2:	9b05      	ldr	r3, [sp, #20]
 8007cc4:	f023 0204 	bic.w	r2, r3, #4
 8007cc8:	6022      	str	r2, [r4, #0]
 8007cca:	f04f 0900 	mov.w	r9, #0
 8007cce:	9700      	str	r7, [sp, #0]
 8007cd0:	4633      	mov	r3, r6
 8007cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 f9d8 	bl	800808c <_printf_common>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f040 8090 	bne.w	8007e02 <_printf_float+0x1e2>
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce6:	b00d      	add	sp, #52	; 0x34
 8007ce8:	ecbd 8b02 	vpop	{d8}
 8007cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	f7f8 ff38 	bl	8000b6c <__aeabi_dcmpun>
 8007cfc:	b140      	cbz	r0, 8007d10 <_printf_float+0xf0>
 8007cfe:	464b      	mov	r3, r9
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfbc      	itt	lt
 8007d04:	232d      	movlt	r3, #45	; 0x2d
 8007d06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d0a:	487f      	ldr	r0, [pc, #508]	; (8007f08 <_printf_float+0x2e8>)
 8007d0c:	4b7f      	ldr	r3, [pc, #508]	; (8007f0c <_printf_float+0x2ec>)
 8007d0e:	e7d1      	b.n	8007cb4 <_printf_float+0x94>
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d16:	9206      	str	r2, [sp, #24]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	d13f      	bne.n	8007d9c <_printf_float+0x17c>
 8007d1c:	2306      	movs	r3, #6
 8007d1e:	6063      	str	r3, [r4, #4]
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	6861      	ldr	r1, [r4, #4]
 8007d24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d32:	ab09      	add	r3, sp, #36	; 0x24
 8007d34:	ec49 8b10 	vmov	d0, r8, r9
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	6022      	str	r2, [r4, #0]
 8007d3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7ff fecd 	bl	8007ae0 <__cvt>
 8007d46:	9b06      	ldr	r3, [sp, #24]
 8007d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4a:	2b47      	cmp	r3, #71	; 0x47
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	d108      	bne.n	8007d62 <_printf_float+0x142>
 8007d50:	1cc8      	adds	r0, r1, #3
 8007d52:	db02      	blt.n	8007d5a <_printf_float+0x13a>
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	4299      	cmp	r1, r3
 8007d58:	dd41      	ble.n	8007dde <_printf_float+0x1be>
 8007d5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d5e:	fa5f fb8b 	uxtb.w	fp, fp
 8007d62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d66:	d820      	bhi.n	8007daa <_printf_float+0x18a>
 8007d68:	3901      	subs	r1, #1
 8007d6a:	465a      	mov	r2, fp
 8007d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d70:	9109      	str	r1, [sp, #36]	; 0x24
 8007d72:	f7ff ff17 	bl	8007ba4 <__exponent>
 8007d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d78:	1813      	adds	r3, r2, r0
 8007d7a:	2a01      	cmp	r2, #1
 8007d7c:	4681      	mov	r9, r0
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	dc02      	bgt.n	8007d88 <_printf_float+0x168>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	07d2      	lsls	r2, r2, #31
 8007d86:	d501      	bpl.n	8007d8c <_printf_float+0x16c>
 8007d88:	3301      	adds	r3, #1
 8007d8a:	6123      	str	r3, [r4, #16]
 8007d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d09c      	beq.n	8007cce <_printf_float+0xae>
 8007d94:	232d      	movs	r3, #45	; 0x2d
 8007d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9a:	e798      	b.n	8007cce <_printf_float+0xae>
 8007d9c:	9a06      	ldr	r2, [sp, #24]
 8007d9e:	2a47      	cmp	r2, #71	; 0x47
 8007da0:	d1be      	bne.n	8007d20 <_printf_float+0x100>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1bc      	bne.n	8007d20 <_printf_float+0x100>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e7b9      	b.n	8007d1e <_printf_float+0xfe>
 8007daa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007dae:	d118      	bne.n	8007de2 <_printf_float+0x1c2>
 8007db0:	2900      	cmp	r1, #0
 8007db2:	6863      	ldr	r3, [r4, #4]
 8007db4:	dd0b      	ble.n	8007dce <_printf_float+0x1ae>
 8007db6:	6121      	str	r1, [r4, #16]
 8007db8:	b913      	cbnz	r3, 8007dc0 <_printf_float+0x1a0>
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	07d0      	lsls	r0, r2, #31
 8007dbe:	d502      	bpl.n	8007dc6 <_printf_float+0x1a6>
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	440b      	add	r3, r1
 8007dc4:	6123      	str	r3, [r4, #16]
 8007dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dc8:	f04f 0900 	mov.w	r9, #0
 8007dcc:	e7de      	b.n	8007d8c <_printf_float+0x16c>
 8007dce:	b913      	cbnz	r3, 8007dd6 <_printf_float+0x1b6>
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	07d2      	lsls	r2, r2, #31
 8007dd4:	d501      	bpl.n	8007dda <_printf_float+0x1ba>
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	e7f4      	b.n	8007dc4 <_printf_float+0x1a4>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e7f2      	b.n	8007dc4 <_printf_float+0x1a4>
 8007dde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de4:	4299      	cmp	r1, r3
 8007de6:	db05      	blt.n	8007df4 <_printf_float+0x1d4>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	6121      	str	r1, [r4, #16]
 8007dec:	07d8      	lsls	r0, r3, #31
 8007dee:	d5ea      	bpl.n	8007dc6 <_printf_float+0x1a6>
 8007df0:	1c4b      	adds	r3, r1, #1
 8007df2:	e7e7      	b.n	8007dc4 <_printf_float+0x1a4>
 8007df4:	2900      	cmp	r1, #0
 8007df6:	bfd4      	ite	le
 8007df8:	f1c1 0202 	rsble	r2, r1, #2
 8007dfc:	2201      	movgt	r2, #1
 8007dfe:	4413      	add	r3, r2
 8007e00:	e7e0      	b.n	8007dc4 <_printf_float+0x1a4>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	055a      	lsls	r2, r3, #21
 8007e06:	d407      	bmi.n	8007e18 <_printf_float+0x1f8>
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	d12c      	bne.n	8007e70 <_printf_float+0x250>
 8007e16:	e764      	b.n	8007ce2 <_printf_float+0xc2>
 8007e18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e1c:	f240 80e0 	bls.w	8007fe0 <_printf_float+0x3c0>
 8007e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e24:	2200      	movs	r2, #0
 8007e26:	2300      	movs	r3, #0
 8007e28:	f7f8 fe6e 	bl	8000b08 <__aeabi_dcmpeq>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d034      	beq.n	8007e9a <_printf_float+0x27a>
 8007e30:	4a37      	ldr	r2, [pc, #220]	; (8007f10 <_printf_float+0x2f0>)
 8007e32:	2301      	movs	r3, #1
 8007e34:	4631      	mov	r1, r6
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f af51 	beq.w	8007ce2 <_printf_float+0xc2>
 8007e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e44:	429a      	cmp	r2, r3
 8007e46:	db02      	blt.n	8007e4e <_printf_float+0x22e>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	07d8      	lsls	r0, r3, #31
 8007e4c:	d510      	bpl.n	8007e70 <_printf_float+0x250>
 8007e4e:	ee18 3a10 	vmov	r3, s16
 8007e52:	4652      	mov	r2, sl
 8007e54:	4631      	mov	r1, r6
 8007e56:	4628      	mov	r0, r5
 8007e58:	47b8      	blx	r7
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	f43f af41 	beq.w	8007ce2 <_printf_float+0xc2>
 8007e60:	f04f 0800 	mov.w	r8, #0
 8007e64:	f104 091a 	add.w	r9, r4, #26
 8007e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	4543      	cmp	r3, r8
 8007e6e:	dc09      	bgt.n	8007e84 <_printf_float+0x264>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	079b      	lsls	r3, r3, #30
 8007e74:	f100 8105 	bmi.w	8008082 <_printf_float+0x462>
 8007e78:	68e0      	ldr	r0, [r4, #12]
 8007e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e7c:	4298      	cmp	r0, r3
 8007e7e:	bfb8      	it	lt
 8007e80:	4618      	movlt	r0, r3
 8007e82:	e730      	b.n	8007ce6 <_printf_float+0xc6>
 8007e84:	2301      	movs	r3, #1
 8007e86:	464a      	mov	r2, r9
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f af27 	beq.w	8007ce2 <_printf_float+0xc2>
 8007e94:	f108 0801 	add.w	r8, r8, #1
 8007e98:	e7e6      	b.n	8007e68 <_printf_float+0x248>
 8007e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dc39      	bgt.n	8007f14 <_printf_float+0x2f4>
 8007ea0:	4a1b      	ldr	r2, [pc, #108]	; (8007f10 <_printf_float+0x2f0>)
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b8      	blx	r7
 8007eaa:	3001      	adds	r0, #1
 8007eac:	f43f af19 	beq.w	8007ce2 <_printf_float+0xc2>
 8007eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	d102      	bne.n	8007ebe <_printf_float+0x29e>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	07d9      	lsls	r1, r3, #31
 8007ebc:	d5d8      	bpl.n	8007e70 <_printf_float+0x250>
 8007ebe:	ee18 3a10 	vmov	r3, s16
 8007ec2:	4652      	mov	r2, sl
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b8      	blx	r7
 8007eca:	3001      	adds	r0, #1
 8007ecc:	f43f af09 	beq.w	8007ce2 <_printf_float+0xc2>
 8007ed0:	f04f 0900 	mov.w	r9, #0
 8007ed4:	f104 0a1a 	add.w	sl, r4, #26
 8007ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eda:	425b      	negs	r3, r3
 8007edc:	454b      	cmp	r3, r9
 8007ede:	dc01      	bgt.n	8007ee4 <_printf_float+0x2c4>
 8007ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee2:	e792      	b.n	8007e0a <_printf_float+0x1ea>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4652      	mov	r2, sl
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f aef7 	beq.w	8007ce2 <_printf_float+0xc2>
 8007ef4:	f109 0901 	add.w	r9, r9, #1
 8007ef8:	e7ee      	b.n	8007ed8 <_printf_float+0x2b8>
 8007efa:	bf00      	nop
 8007efc:	7fefffff 	.word	0x7fefffff
 8007f00:	0802917c 	.word	0x0802917c
 8007f04:	08029180 	.word	0x08029180
 8007f08:	08029188 	.word	0x08029188
 8007f0c:	08029184 	.word	0x08029184
 8007f10:	0802918c 	.word	0x0802918c
 8007f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	bfa8      	it	ge
 8007f1c:	461a      	movge	r2, r3
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	4691      	mov	r9, r2
 8007f22:	dc37      	bgt.n	8007f94 <_printf_float+0x374>
 8007f24:	f04f 0b00 	mov.w	fp, #0
 8007f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f2c:	f104 021a 	add.w	r2, r4, #26
 8007f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	eba3 0309 	sub.w	r3, r3, r9
 8007f38:	455b      	cmp	r3, fp
 8007f3a:	dc33      	bgt.n	8007fa4 <_printf_float+0x384>
 8007f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f40:	429a      	cmp	r2, r3
 8007f42:	db3b      	blt.n	8007fbc <_printf_float+0x39c>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	07da      	lsls	r2, r3, #31
 8007f48:	d438      	bmi.n	8007fbc <_printf_float+0x39c>
 8007f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4c:	9a05      	ldr	r2, [sp, #20]
 8007f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f50:	1a9a      	subs	r2, r3, r2
 8007f52:	eba3 0901 	sub.w	r9, r3, r1
 8007f56:	4591      	cmp	r9, r2
 8007f58:	bfa8      	it	ge
 8007f5a:	4691      	movge	r9, r2
 8007f5c:	f1b9 0f00 	cmp.w	r9, #0
 8007f60:	dc35      	bgt.n	8007fce <_printf_float+0x3ae>
 8007f62:	f04f 0800 	mov.w	r8, #0
 8007f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6a:	f104 0a1a 	add.w	sl, r4, #26
 8007f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	eba3 0309 	sub.w	r3, r3, r9
 8007f78:	4543      	cmp	r3, r8
 8007f7a:	f77f af79 	ble.w	8007e70 <_printf_float+0x250>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4652      	mov	r2, sl
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f43f aeaa 	beq.w	8007ce2 <_printf_float+0xc2>
 8007f8e:	f108 0801 	add.w	r8, r8, #1
 8007f92:	e7ec      	b.n	8007f6e <_printf_float+0x34e>
 8007f94:	4613      	mov	r3, r2
 8007f96:	4631      	mov	r1, r6
 8007f98:	4642      	mov	r2, r8
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d1c0      	bne.n	8007f24 <_printf_float+0x304>
 8007fa2:	e69e      	b.n	8007ce2 <_printf_float+0xc2>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4628      	mov	r0, r5
 8007faa:	9205      	str	r2, [sp, #20]
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	f43f ae97 	beq.w	8007ce2 <_printf_float+0xc2>
 8007fb4:	9a05      	ldr	r2, [sp, #20]
 8007fb6:	f10b 0b01 	add.w	fp, fp, #1
 8007fba:	e7b9      	b.n	8007f30 <_printf_float+0x310>
 8007fbc:	ee18 3a10 	vmov	r3, s16
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d1be      	bne.n	8007f4a <_printf_float+0x32a>
 8007fcc:	e689      	b.n	8007ce2 <_printf_float+0xc2>
 8007fce:	9a05      	ldr	r2, [sp, #20]
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	4442      	add	r2, r8
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d1c1      	bne.n	8007f62 <_printf_float+0x342>
 8007fde:	e680      	b.n	8007ce2 <_printf_float+0xc2>
 8007fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe2:	2a01      	cmp	r2, #1
 8007fe4:	dc01      	bgt.n	8007fea <_printf_float+0x3ca>
 8007fe6:	07db      	lsls	r3, r3, #31
 8007fe8:	d538      	bpl.n	800805c <_printf_float+0x43c>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4642      	mov	r2, r8
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f43f ae74 	beq.w	8007ce2 <_printf_float+0xc2>
 8007ffa:	ee18 3a10 	vmov	r3, s16
 8007ffe:	4652      	mov	r2, sl
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f ae6b 	beq.w	8007ce2 <_printf_float+0xc2>
 800800c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008010:	2200      	movs	r2, #0
 8008012:	2300      	movs	r3, #0
 8008014:	f7f8 fd78 	bl	8000b08 <__aeabi_dcmpeq>
 8008018:	b9d8      	cbnz	r0, 8008052 <_printf_float+0x432>
 800801a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801c:	f108 0201 	add.w	r2, r8, #1
 8008020:	3b01      	subs	r3, #1
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d10e      	bne.n	800804a <_printf_float+0x42a>
 800802c:	e659      	b.n	8007ce2 <_printf_float+0xc2>
 800802e:	2301      	movs	r3, #1
 8008030:	4652      	mov	r2, sl
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f ae52 	beq.w	8007ce2 <_printf_float+0xc2>
 800803e:	f108 0801 	add.w	r8, r8, #1
 8008042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008044:	3b01      	subs	r3, #1
 8008046:	4543      	cmp	r3, r8
 8008048:	dcf1      	bgt.n	800802e <_printf_float+0x40e>
 800804a:	464b      	mov	r3, r9
 800804c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008050:	e6dc      	b.n	8007e0c <_printf_float+0x1ec>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	f104 0a1a 	add.w	sl, r4, #26
 800805a:	e7f2      	b.n	8008042 <_printf_float+0x422>
 800805c:	2301      	movs	r3, #1
 800805e:	4642      	mov	r2, r8
 8008060:	e7df      	b.n	8008022 <_printf_float+0x402>
 8008062:	2301      	movs	r3, #1
 8008064:	464a      	mov	r2, r9
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f ae38 	beq.w	8007ce2 <_printf_float+0xc2>
 8008072:	f108 0801 	add.w	r8, r8, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	4543      	cmp	r3, r8
 800807e:	dcf0      	bgt.n	8008062 <_printf_float+0x442>
 8008080:	e6fa      	b.n	8007e78 <_printf_float+0x258>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	f104 0919 	add.w	r9, r4, #25
 800808a:	e7f4      	b.n	8008076 <_printf_float+0x456>

0800808c <_printf_common>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	4616      	mov	r6, r2
 8008092:	4699      	mov	r9, r3
 8008094:	688a      	ldr	r2, [r1, #8]
 8008096:	690b      	ldr	r3, [r1, #16]
 8008098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800809c:	4293      	cmp	r3, r2
 800809e:	bfb8      	it	lt
 80080a0:	4613      	movlt	r3, r2
 80080a2:	6033      	str	r3, [r6, #0]
 80080a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080a8:	4607      	mov	r7, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	b10a      	cbz	r2, 80080b2 <_printf_common+0x26>
 80080ae:	3301      	adds	r3, #1
 80080b0:	6033      	str	r3, [r6, #0]
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	0699      	lsls	r1, r3, #26
 80080b6:	bf42      	ittt	mi
 80080b8:	6833      	ldrmi	r3, [r6, #0]
 80080ba:	3302      	addmi	r3, #2
 80080bc:	6033      	strmi	r3, [r6, #0]
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	f015 0506 	ands.w	r5, r5, #6
 80080c4:	d106      	bne.n	80080d4 <_printf_common+0x48>
 80080c6:	f104 0a19 	add.w	sl, r4, #25
 80080ca:	68e3      	ldr	r3, [r4, #12]
 80080cc:	6832      	ldr	r2, [r6, #0]
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	42ab      	cmp	r3, r5
 80080d2:	dc26      	bgt.n	8008122 <_printf_common+0x96>
 80080d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080d8:	1e13      	subs	r3, r2, #0
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	bf18      	it	ne
 80080de:	2301      	movne	r3, #1
 80080e0:	0692      	lsls	r2, r2, #26
 80080e2:	d42b      	bmi.n	800813c <_printf_common+0xb0>
 80080e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080e8:	4649      	mov	r1, r9
 80080ea:	4638      	mov	r0, r7
 80080ec:	47c0      	blx	r8
 80080ee:	3001      	adds	r0, #1
 80080f0:	d01e      	beq.n	8008130 <_printf_common+0xa4>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	68e5      	ldr	r5, [r4, #12]
 80080f6:	6832      	ldr	r2, [r6, #0]
 80080f8:	f003 0306 	and.w	r3, r3, #6
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	bf08      	it	eq
 8008100:	1aad      	subeq	r5, r5, r2
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	6922      	ldr	r2, [r4, #16]
 8008106:	bf0c      	ite	eq
 8008108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800810c:	2500      	movne	r5, #0
 800810e:	4293      	cmp	r3, r2
 8008110:	bfc4      	itt	gt
 8008112:	1a9b      	subgt	r3, r3, r2
 8008114:	18ed      	addgt	r5, r5, r3
 8008116:	2600      	movs	r6, #0
 8008118:	341a      	adds	r4, #26
 800811a:	42b5      	cmp	r5, r6
 800811c:	d11a      	bne.n	8008154 <_printf_common+0xc8>
 800811e:	2000      	movs	r0, #0
 8008120:	e008      	b.n	8008134 <_printf_common+0xa8>
 8008122:	2301      	movs	r3, #1
 8008124:	4652      	mov	r2, sl
 8008126:	4649      	mov	r1, r9
 8008128:	4638      	mov	r0, r7
 800812a:	47c0      	blx	r8
 800812c:	3001      	adds	r0, #1
 800812e:	d103      	bne.n	8008138 <_printf_common+0xac>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008138:	3501      	adds	r5, #1
 800813a:	e7c6      	b.n	80080ca <_printf_common+0x3e>
 800813c:	18e1      	adds	r1, r4, r3
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	2030      	movs	r0, #48	; 0x30
 8008142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008146:	4422      	add	r2, r4
 8008148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800814c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008150:	3302      	adds	r3, #2
 8008152:	e7c7      	b.n	80080e4 <_printf_common+0x58>
 8008154:	2301      	movs	r3, #1
 8008156:	4622      	mov	r2, r4
 8008158:	4649      	mov	r1, r9
 800815a:	4638      	mov	r0, r7
 800815c:	47c0      	blx	r8
 800815e:	3001      	adds	r0, #1
 8008160:	d0e6      	beq.n	8008130 <_printf_common+0xa4>
 8008162:	3601      	adds	r6, #1
 8008164:	e7d9      	b.n	800811a <_printf_common+0x8e>
	...

08008168 <_printf_i>:
 8008168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800816c:	7e0f      	ldrb	r7, [r1, #24]
 800816e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008170:	2f78      	cmp	r7, #120	; 0x78
 8008172:	4691      	mov	r9, r2
 8008174:	4680      	mov	r8, r0
 8008176:	460c      	mov	r4, r1
 8008178:	469a      	mov	sl, r3
 800817a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800817e:	d807      	bhi.n	8008190 <_printf_i+0x28>
 8008180:	2f62      	cmp	r7, #98	; 0x62
 8008182:	d80a      	bhi.n	800819a <_printf_i+0x32>
 8008184:	2f00      	cmp	r7, #0
 8008186:	f000 80d8 	beq.w	800833a <_printf_i+0x1d2>
 800818a:	2f58      	cmp	r7, #88	; 0x58
 800818c:	f000 80a3 	beq.w	80082d6 <_printf_i+0x16e>
 8008190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008198:	e03a      	b.n	8008210 <_printf_i+0xa8>
 800819a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800819e:	2b15      	cmp	r3, #21
 80081a0:	d8f6      	bhi.n	8008190 <_printf_i+0x28>
 80081a2:	a101      	add	r1, pc, #4	; (adr r1, 80081a8 <_printf_i+0x40>)
 80081a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081a8:	08008201 	.word	0x08008201
 80081ac:	08008215 	.word	0x08008215
 80081b0:	08008191 	.word	0x08008191
 80081b4:	08008191 	.word	0x08008191
 80081b8:	08008191 	.word	0x08008191
 80081bc:	08008191 	.word	0x08008191
 80081c0:	08008215 	.word	0x08008215
 80081c4:	08008191 	.word	0x08008191
 80081c8:	08008191 	.word	0x08008191
 80081cc:	08008191 	.word	0x08008191
 80081d0:	08008191 	.word	0x08008191
 80081d4:	08008321 	.word	0x08008321
 80081d8:	08008245 	.word	0x08008245
 80081dc:	08008303 	.word	0x08008303
 80081e0:	08008191 	.word	0x08008191
 80081e4:	08008191 	.word	0x08008191
 80081e8:	08008343 	.word	0x08008343
 80081ec:	08008191 	.word	0x08008191
 80081f0:	08008245 	.word	0x08008245
 80081f4:	08008191 	.word	0x08008191
 80081f8:	08008191 	.word	0x08008191
 80081fc:	0800830b 	.word	0x0800830b
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	602a      	str	r2, [r5, #0]
 8008208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800820c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008210:	2301      	movs	r3, #1
 8008212:	e0a3      	b.n	800835c <_printf_i+0x1f4>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	6829      	ldr	r1, [r5, #0]
 8008218:	0606      	lsls	r6, r0, #24
 800821a:	f101 0304 	add.w	r3, r1, #4
 800821e:	d50a      	bpl.n	8008236 <_printf_i+0xce>
 8008220:	680e      	ldr	r6, [r1, #0]
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	2e00      	cmp	r6, #0
 8008226:	da03      	bge.n	8008230 <_printf_i+0xc8>
 8008228:	232d      	movs	r3, #45	; 0x2d
 800822a:	4276      	negs	r6, r6
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	485e      	ldr	r0, [pc, #376]	; (80083ac <_printf_i+0x244>)
 8008232:	230a      	movs	r3, #10
 8008234:	e019      	b.n	800826a <_printf_i+0x102>
 8008236:	680e      	ldr	r6, [r1, #0]
 8008238:	602b      	str	r3, [r5, #0]
 800823a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800823e:	bf18      	it	ne
 8008240:	b236      	sxthne	r6, r6
 8008242:	e7ef      	b.n	8008224 <_printf_i+0xbc>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	6820      	ldr	r0, [r4, #0]
 8008248:	1d19      	adds	r1, r3, #4
 800824a:	6029      	str	r1, [r5, #0]
 800824c:	0601      	lsls	r1, r0, #24
 800824e:	d501      	bpl.n	8008254 <_printf_i+0xec>
 8008250:	681e      	ldr	r6, [r3, #0]
 8008252:	e002      	b.n	800825a <_printf_i+0xf2>
 8008254:	0646      	lsls	r6, r0, #25
 8008256:	d5fb      	bpl.n	8008250 <_printf_i+0xe8>
 8008258:	881e      	ldrh	r6, [r3, #0]
 800825a:	4854      	ldr	r0, [pc, #336]	; (80083ac <_printf_i+0x244>)
 800825c:	2f6f      	cmp	r7, #111	; 0x6f
 800825e:	bf0c      	ite	eq
 8008260:	2308      	moveq	r3, #8
 8008262:	230a      	movne	r3, #10
 8008264:	2100      	movs	r1, #0
 8008266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800826a:	6865      	ldr	r5, [r4, #4]
 800826c:	60a5      	str	r5, [r4, #8]
 800826e:	2d00      	cmp	r5, #0
 8008270:	bfa2      	ittt	ge
 8008272:	6821      	ldrge	r1, [r4, #0]
 8008274:	f021 0104 	bicge.w	r1, r1, #4
 8008278:	6021      	strge	r1, [r4, #0]
 800827a:	b90e      	cbnz	r6, 8008280 <_printf_i+0x118>
 800827c:	2d00      	cmp	r5, #0
 800827e:	d04d      	beq.n	800831c <_printf_i+0x1b4>
 8008280:	4615      	mov	r5, r2
 8008282:	fbb6 f1f3 	udiv	r1, r6, r3
 8008286:	fb03 6711 	mls	r7, r3, r1, r6
 800828a:	5dc7      	ldrb	r7, [r0, r7]
 800828c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008290:	4637      	mov	r7, r6
 8008292:	42bb      	cmp	r3, r7
 8008294:	460e      	mov	r6, r1
 8008296:	d9f4      	bls.n	8008282 <_printf_i+0x11a>
 8008298:	2b08      	cmp	r3, #8
 800829a:	d10b      	bne.n	80082b4 <_printf_i+0x14c>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	07de      	lsls	r6, r3, #31
 80082a0:	d508      	bpl.n	80082b4 <_printf_i+0x14c>
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	6861      	ldr	r1, [r4, #4]
 80082a6:	4299      	cmp	r1, r3
 80082a8:	bfde      	ittt	le
 80082aa:	2330      	movle	r3, #48	; 0x30
 80082ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082b4:	1b52      	subs	r2, r2, r5
 80082b6:	6122      	str	r2, [r4, #16]
 80082b8:	f8cd a000 	str.w	sl, [sp]
 80082bc:	464b      	mov	r3, r9
 80082be:	aa03      	add	r2, sp, #12
 80082c0:	4621      	mov	r1, r4
 80082c2:	4640      	mov	r0, r8
 80082c4:	f7ff fee2 	bl	800808c <_printf_common>
 80082c8:	3001      	adds	r0, #1
 80082ca:	d14c      	bne.n	8008366 <_printf_i+0x1fe>
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	b004      	add	sp, #16
 80082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d6:	4835      	ldr	r0, [pc, #212]	; (80083ac <_printf_i+0x244>)
 80082d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082dc:	6829      	ldr	r1, [r5, #0]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082e4:	6029      	str	r1, [r5, #0]
 80082e6:	061d      	lsls	r5, r3, #24
 80082e8:	d514      	bpl.n	8008314 <_printf_i+0x1ac>
 80082ea:	07df      	lsls	r7, r3, #31
 80082ec:	bf44      	itt	mi
 80082ee:	f043 0320 	orrmi.w	r3, r3, #32
 80082f2:	6023      	strmi	r3, [r4, #0]
 80082f4:	b91e      	cbnz	r6, 80082fe <_printf_i+0x196>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	f023 0320 	bic.w	r3, r3, #32
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	2310      	movs	r3, #16
 8008300:	e7b0      	b.n	8008264 <_printf_i+0xfc>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	f043 0320 	orr.w	r3, r3, #32
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	2378      	movs	r3, #120	; 0x78
 800830c:	4828      	ldr	r0, [pc, #160]	; (80083b0 <_printf_i+0x248>)
 800830e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008312:	e7e3      	b.n	80082dc <_printf_i+0x174>
 8008314:	0659      	lsls	r1, r3, #25
 8008316:	bf48      	it	mi
 8008318:	b2b6      	uxthmi	r6, r6
 800831a:	e7e6      	b.n	80082ea <_printf_i+0x182>
 800831c:	4615      	mov	r5, r2
 800831e:	e7bb      	b.n	8008298 <_printf_i+0x130>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	6826      	ldr	r6, [r4, #0]
 8008324:	6961      	ldr	r1, [r4, #20]
 8008326:	1d18      	adds	r0, r3, #4
 8008328:	6028      	str	r0, [r5, #0]
 800832a:	0635      	lsls	r5, r6, #24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	d501      	bpl.n	8008334 <_printf_i+0x1cc>
 8008330:	6019      	str	r1, [r3, #0]
 8008332:	e002      	b.n	800833a <_printf_i+0x1d2>
 8008334:	0670      	lsls	r0, r6, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0x1c8>
 8008338:	8019      	strh	r1, [r3, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	6123      	str	r3, [r4, #16]
 800833e:	4615      	mov	r5, r2
 8008340:	e7ba      	b.n	80082b8 <_printf_i+0x150>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	602a      	str	r2, [r5, #0]
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	6862      	ldr	r2, [r4, #4]
 800834c:	2100      	movs	r1, #0
 800834e:	4628      	mov	r0, r5
 8008350:	f7f7 ff66 	bl	8000220 <memchr>
 8008354:	b108      	cbz	r0, 800835a <_printf_i+0x1f2>
 8008356:	1b40      	subs	r0, r0, r5
 8008358:	6060      	str	r0, [r4, #4]
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	2300      	movs	r3, #0
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008364:	e7a8      	b.n	80082b8 <_printf_i+0x150>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	462a      	mov	r2, r5
 800836a:	4649      	mov	r1, r9
 800836c:	4640      	mov	r0, r8
 800836e:	47d0      	blx	sl
 8008370:	3001      	adds	r0, #1
 8008372:	d0ab      	beq.n	80082cc <_printf_i+0x164>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	079b      	lsls	r3, r3, #30
 8008378:	d413      	bmi.n	80083a2 <_printf_i+0x23a>
 800837a:	68e0      	ldr	r0, [r4, #12]
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	4298      	cmp	r0, r3
 8008380:	bfb8      	it	lt
 8008382:	4618      	movlt	r0, r3
 8008384:	e7a4      	b.n	80082d0 <_printf_i+0x168>
 8008386:	2301      	movs	r3, #1
 8008388:	4632      	mov	r2, r6
 800838a:	4649      	mov	r1, r9
 800838c:	4640      	mov	r0, r8
 800838e:	47d0      	blx	sl
 8008390:	3001      	adds	r0, #1
 8008392:	d09b      	beq.n	80082cc <_printf_i+0x164>
 8008394:	3501      	adds	r5, #1
 8008396:	68e3      	ldr	r3, [r4, #12]
 8008398:	9903      	ldr	r1, [sp, #12]
 800839a:	1a5b      	subs	r3, r3, r1
 800839c:	42ab      	cmp	r3, r5
 800839e:	dcf2      	bgt.n	8008386 <_printf_i+0x21e>
 80083a0:	e7eb      	b.n	800837a <_printf_i+0x212>
 80083a2:	2500      	movs	r5, #0
 80083a4:	f104 0619 	add.w	r6, r4, #25
 80083a8:	e7f5      	b.n	8008396 <_printf_i+0x22e>
 80083aa:	bf00      	nop
 80083ac:	0802918e 	.word	0x0802918e
 80083b0:	0802919f 	.word	0x0802919f

080083b4 <_scanf_float>:
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	b087      	sub	sp, #28
 80083ba:	4617      	mov	r7, r2
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	688b      	ldr	r3, [r1, #8]
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083c6:	bf83      	ittte	hi
 80083c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083cc:	195b      	addhi	r3, r3, r5
 80083ce:	9302      	strhi	r3, [sp, #8]
 80083d0:	2300      	movls	r3, #0
 80083d2:	bf86      	itte	hi
 80083d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083d8:	608b      	strhi	r3, [r1, #8]
 80083da:	9302      	strls	r3, [sp, #8]
 80083dc:	680b      	ldr	r3, [r1, #0]
 80083de:	468b      	mov	fp, r1
 80083e0:	2500      	movs	r5, #0
 80083e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80083e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80083ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083ee:	4680      	mov	r8, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	465e      	mov	r6, fp
 80083f4:	46aa      	mov	sl, r5
 80083f6:	46a9      	mov	r9, r5
 80083f8:	9501      	str	r5, [sp, #4]
 80083fa:	68a2      	ldr	r2, [r4, #8]
 80083fc:	b152      	cbz	r2, 8008414 <_scanf_float+0x60>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b4e      	cmp	r3, #78	; 0x4e
 8008404:	d864      	bhi.n	80084d0 <_scanf_float+0x11c>
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d83c      	bhi.n	8008484 <_scanf_float+0xd0>
 800840a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800840e:	b2c8      	uxtb	r0, r1
 8008410:	280e      	cmp	r0, #14
 8008412:	d93a      	bls.n	800848a <_scanf_float+0xd6>
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	d003      	beq.n	8008422 <_scanf_float+0x6e>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008426:	f1ba 0f01 	cmp.w	sl, #1
 800842a:	f200 8113 	bhi.w	8008654 <_scanf_float+0x2a0>
 800842e:	455e      	cmp	r6, fp
 8008430:	f200 8105 	bhi.w	800863e <_scanf_float+0x28a>
 8008434:	2501      	movs	r5, #1
 8008436:	4628      	mov	r0, r5
 8008438:	b007      	add	sp, #28
 800843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800843e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008442:	2a0d      	cmp	r2, #13
 8008444:	d8e6      	bhi.n	8008414 <_scanf_float+0x60>
 8008446:	a101      	add	r1, pc, #4	; (adr r1, 800844c <_scanf_float+0x98>)
 8008448:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800844c:	0800858b 	.word	0x0800858b
 8008450:	08008415 	.word	0x08008415
 8008454:	08008415 	.word	0x08008415
 8008458:	08008415 	.word	0x08008415
 800845c:	080085eb 	.word	0x080085eb
 8008460:	080085c3 	.word	0x080085c3
 8008464:	08008415 	.word	0x08008415
 8008468:	08008415 	.word	0x08008415
 800846c:	08008599 	.word	0x08008599
 8008470:	08008415 	.word	0x08008415
 8008474:	08008415 	.word	0x08008415
 8008478:	08008415 	.word	0x08008415
 800847c:	08008415 	.word	0x08008415
 8008480:	08008551 	.word	0x08008551
 8008484:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008488:	e7db      	b.n	8008442 <_scanf_float+0x8e>
 800848a:	290e      	cmp	r1, #14
 800848c:	d8c2      	bhi.n	8008414 <_scanf_float+0x60>
 800848e:	a001      	add	r0, pc, #4	; (adr r0, 8008494 <_scanf_float+0xe0>)
 8008490:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008494:	08008543 	.word	0x08008543
 8008498:	08008415 	.word	0x08008415
 800849c:	08008543 	.word	0x08008543
 80084a0:	080085d7 	.word	0x080085d7
 80084a4:	08008415 	.word	0x08008415
 80084a8:	080084f1 	.word	0x080084f1
 80084ac:	0800852d 	.word	0x0800852d
 80084b0:	0800852d 	.word	0x0800852d
 80084b4:	0800852d 	.word	0x0800852d
 80084b8:	0800852d 	.word	0x0800852d
 80084bc:	0800852d 	.word	0x0800852d
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	0800852d 	.word	0x0800852d
 80084cc:	0800852d 	.word	0x0800852d
 80084d0:	2b6e      	cmp	r3, #110	; 0x6e
 80084d2:	d809      	bhi.n	80084e8 <_scanf_float+0x134>
 80084d4:	2b60      	cmp	r3, #96	; 0x60
 80084d6:	d8b2      	bhi.n	800843e <_scanf_float+0x8a>
 80084d8:	2b54      	cmp	r3, #84	; 0x54
 80084da:	d077      	beq.n	80085cc <_scanf_float+0x218>
 80084dc:	2b59      	cmp	r3, #89	; 0x59
 80084de:	d199      	bne.n	8008414 <_scanf_float+0x60>
 80084e0:	2d07      	cmp	r5, #7
 80084e2:	d197      	bne.n	8008414 <_scanf_float+0x60>
 80084e4:	2508      	movs	r5, #8
 80084e6:	e029      	b.n	800853c <_scanf_float+0x188>
 80084e8:	2b74      	cmp	r3, #116	; 0x74
 80084ea:	d06f      	beq.n	80085cc <_scanf_float+0x218>
 80084ec:	2b79      	cmp	r3, #121	; 0x79
 80084ee:	e7f6      	b.n	80084de <_scanf_float+0x12a>
 80084f0:	6821      	ldr	r1, [r4, #0]
 80084f2:	05c8      	lsls	r0, r1, #23
 80084f4:	d51a      	bpl.n	800852c <_scanf_float+0x178>
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80084fc:	6021      	str	r1, [r4, #0]
 80084fe:	f109 0901 	add.w	r9, r9, #1
 8008502:	b11b      	cbz	r3, 800850c <_scanf_float+0x158>
 8008504:	3b01      	subs	r3, #1
 8008506:	3201      	adds	r2, #1
 8008508:	9302      	str	r3, [sp, #8]
 800850a:	60a2      	str	r2, [r4, #8]
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	3b01      	subs	r3, #1
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	3301      	adds	r3, #1
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3b01      	subs	r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	f340 8084 	ble.w	800862c <_scanf_float+0x278>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	e766      	b.n	80083fa <_scanf_float+0x46>
 800852c:	eb1a 0f05 	cmn.w	sl, r5
 8008530:	f47f af70 	bne.w	8008414 <_scanf_float+0x60>
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800853a:	6022      	str	r2, [r4, #0]
 800853c:	f806 3b01 	strb.w	r3, [r6], #1
 8008540:	e7e4      	b.n	800850c <_scanf_float+0x158>
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	0610      	lsls	r0, r2, #24
 8008546:	f57f af65 	bpl.w	8008414 <_scanf_float+0x60>
 800854a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800854e:	e7f4      	b.n	800853a <_scanf_float+0x186>
 8008550:	f1ba 0f00 	cmp.w	sl, #0
 8008554:	d10e      	bne.n	8008574 <_scanf_float+0x1c0>
 8008556:	f1b9 0f00 	cmp.w	r9, #0
 800855a:	d10e      	bne.n	800857a <_scanf_float+0x1c6>
 800855c:	6822      	ldr	r2, [r4, #0]
 800855e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008562:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008566:	d108      	bne.n	800857a <_scanf_float+0x1c6>
 8008568:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	f04f 0a01 	mov.w	sl, #1
 8008572:	e7e3      	b.n	800853c <_scanf_float+0x188>
 8008574:	f1ba 0f02 	cmp.w	sl, #2
 8008578:	d055      	beq.n	8008626 <_scanf_float+0x272>
 800857a:	2d01      	cmp	r5, #1
 800857c:	d002      	beq.n	8008584 <_scanf_float+0x1d0>
 800857e:	2d04      	cmp	r5, #4
 8008580:	f47f af48 	bne.w	8008414 <_scanf_float+0x60>
 8008584:	3501      	adds	r5, #1
 8008586:	b2ed      	uxtb	r5, r5
 8008588:	e7d8      	b.n	800853c <_scanf_float+0x188>
 800858a:	f1ba 0f01 	cmp.w	sl, #1
 800858e:	f47f af41 	bne.w	8008414 <_scanf_float+0x60>
 8008592:	f04f 0a02 	mov.w	sl, #2
 8008596:	e7d1      	b.n	800853c <_scanf_float+0x188>
 8008598:	b97d      	cbnz	r5, 80085ba <_scanf_float+0x206>
 800859a:	f1b9 0f00 	cmp.w	r9, #0
 800859e:	f47f af3c 	bne.w	800841a <_scanf_float+0x66>
 80085a2:	6822      	ldr	r2, [r4, #0]
 80085a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085ac:	f47f af39 	bne.w	8008422 <_scanf_float+0x6e>
 80085b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085b4:	6022      	str	r2, [r4, #0]
 80085b6:	2501      	movs	r5, #1
 80085b8:	e7c0      	b.n	800853c <_scanf_float+0x188>
 80085ba:	2d03      	cmp	r5, #3
 80085bc:	d0e2      	beq.n	8008584 <_scanf_float+0x1d0>
 80085be:	2d05      	cmp	r5, #5
 80085c0:	e7de      	b.n	8008580 <_scanf_float+0x1cc>
 80085c2:	2d02      	cmp	r5, #2
 80085c4:	f47f af26 	bne.w	8008414 <_scanf_float+0x60>
 80085c8:	2503      	movs	r5, #3
 80085ca:	e7b7      	b.n	800853c <_scanf_float+0x188>
 80085cc:	2d06      	cmp	r5, #6
 80085ce:	f47f af21 	bne.w	8008414 <_scanf_float+0x60>
 80085d2:	2507      	movs	r5, #7
 80085d4:	e7b2      	b.n	800853c <_scanf_float+0x188>
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	0591      	lsls	r1, r2, #22
 80085da:	f57f af1b 	bpl.w	8008414 <_scanf_float+0x60>
 80085de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085e8:	e7a8      	b.n	800853c <_scanf_float+0x188>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80085f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80085f4:	d006      	beq.n	8008604 <_scanf_float+0x250>
 80085f6:	0550      	lsls	r0, r2, #21
 80085f8:	f57f af0c 	bpl.w	8008414 <_scanf_float+0x60>
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	f43f af0f 	beq.w	8008422 <_scanf_float+0x6e>
 8008604:	0591      	lsls	r1, r2, #22
 8008606:	bf58      	it	pl
 8008608:	9901      	ldrpl	r1, [sp, #4]
 800860a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800860e:	bf58      	it	pl
 8008610:	eba9 0101 	subpl.w	r1, r9, r1
 8008614:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008618:	bf58      	it	pl
 800861a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800861e:	6022      	str	r2, [r4, #0]
 8008620:	f04f 0900 	mov.w	r9, #0
 8008624:	e78a      	b.n	800853c <_scanf_float+0x188>
 8008626:	f04f 0a03 	mov.w	sl, #3
 800862a:	e787      	b.n	800853c <_scanf_float+0x188>
 800862c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008630:	4639      	mov	r1, r7
 8008632:	4640      	mov	r0, r8
 8008634:	4798      	blx	r3
 8008636:	2800      	cmp	r0, #0
 8008638:	f43f aedf 	beq.w	80083fa <_scanf_float+0x46>
 800863c:	e6ea      	b.n	8008414 <_scanf_float+0x60>
 800863e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008646:	463a      	mov	r2, r7
 8008648:	4640      	mov	r0, r8
 800864a:	4798      	blx	r3
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	3b01      	subs	r3, #1
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	e6ec      	b.n	800842e <_scanf_float+0x7a>
 8008654:	1e6b      	subs	r3, r5, #1
 8008656:	2b06      	cmp	r3, #6
 8008658:	d825      	bhi.n	80086a6 <_scanf_float+0x2f2>
 800865a:	2d02      	cmp	r5, #2
 800865c:	d836      	bhi.n	80086cc <_scanf_float+0x318>
 800865e:	455e      	cmp	r6, fp
 8008660:	f67f aee8 	bls.w	8008434 <_scanf_float+0x80>
 8008664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008668:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800866c:	463a      	mov	r2, r7
 800866e:	4640      	mov	r0, r8
 8008670:	4798      	blx	r3
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	3b01      	subs	r3, #1
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	e7f1      	b.n	800865e <_scanf_float+0x2aa>
 800867a:	9802      	ldr	r0, [sp, #8]
 800867c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008680:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	463a      	mov	r2, r7
 8008688:	4640      	mov	r0, r8
 800868a:	4798      	blx	r3
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	3b01      	subs	r3, #1
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008696:	fa5f fa8a 	uxtb.w	sl, sl
 800869a:	f1ba 0f02 	cmp.w	sl, #2
 800869e:	d1ec      	bne.n	800867a <_scanf_float+0x2c6>
 80086a0:	3d03      	subs	r5, #3
 80086a2:	b2ed      	uxtb	r5, r5
 80086a4:	1b76      	subs	r6, r6, r5
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	05da      	lsls	r2, r3, #23
 80086aa:	d52f      	bpl.n	800870c <_scanf_float+0x358>
 80086ac:	055b      	lsls	r3, r3, #21
 80086ae:	d510      	bpl.n	80086d2 <_scanf_float+0x31e>
 80086b0:	455e      	cmp	r6, fp
 80086b2:	f67f aebf 	bls.w	8008434 <_scanf_float+0x80>
 80086b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086be:	463a      	mov	r2, r7
 80086c0:	4640      	mov	r0, r8
 80086c2:	4798      	blx	r3
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	e7f1      	b.n	80086b0 <_scanf_float+0x2fc>
 80086cc:	46aa      	mov	sl, r5
 80086ce:	9602      	str	r6, [sp, #8]
 80086d0:	e7df      	b.n	8008692 <_scanf_float+0x2de>
 80086d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	2965      	cmp	r1, #101	; 0x65
 80086da:	f103 33ff 	add.w	r3, r3, #4294967295
 80086de:	f106 35ff 	add.w	r5, r6, #4294967295
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	d00c      	beq.n	8008700 <_scanf_float+0x34c>
 80086e6:	2945      	cmp	r1, #69	; 0x45
 80086e8:	d00a      	beq.n	8008700 <_scanf_float+0x34c>
 80086ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ee:	463a      	mov	r2, r7
 80086f0:	4640      	mov	r0, r8
 80086f2:	4798      	blx	r3
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	1eb5      	subs	r5, r6, #2
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008704:	463a      	mov	r2, r7
 8008706:	4640      	mov	r0, r8
 8008708:	4798      	blx	r3
 800870a:	462e      	mov	r6, r5
 800870c:	6825      	ldr	r5, [r4, #0]
 800870e:	f015 0510 	ands.w	r5, r5, #16
 8008712:	d159      	bne.n	80087c8 <_scanf_float+0x414>
 8008714:	7035      	strb	r5, [r6, #0]
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800871c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008720:	d11b      	bne.n	800875a <_scanf_float+0x3a6>
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	454b      	cmp	r3, r9
 8008726:	eba3 0209 	sub.w	r2, r3, r9
 800872a:	d123      	bne.n	8008774 <_scanf_float+0x3c0>
 800872c:	2200      	movs	r2, #0
 800872e:	4659      	mov	r1, fp
 8008730:	4640      	mov	r0, r8
 8008732:	f000 ff5f 	bl	80095f4 <_strtod_r>
 8008736:	6822      	ldr	r2, [r4, #0]
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	f012 0f02 	tst.w	r2, #2
 800873e:	ec57 6b10 	vmov	r6, r7, d0
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	d021      	beq.n	800878a <_scanf_float+0x3d6>
 8008746:	9903      	ldr	r1, [sp, #12]
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	600a      	str	r2, [r1, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	e9c3 6700 	strd	r6, r7, [r3]
 8008752:	68e3      	ldr	r3, [r4, #12]
 8008754:	3301      	adds	r3, #1
 8008756:	60e3      	str	r3, [r4, #12]
 8008758:	e66d      	b.n	8008436 <_scanf_float+0x82>
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0e5      	beq.n	800872c <_scanf_float+0x378>
 8008760:	9905      	ldr	r1, [sp, #20]
 8008762:	230a      	movs	r3, #10
 8008764:	462a      	mov	r2, r5
 8008766:	3101      	adds	r1, #1
 8008768:	4640      	mov	r0, r8
 800876a:	f000 ffcb 	bl	8009704 <_strtol_r>
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	9e05      	ldr	r6, [sp, #20]
 8008772:	1ac2      	subs	r2, r0, r3
 8008774:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008778:	429e      	cmp	r6, r3
 800877a:	bf28      	it	cs
 800877c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008780:	4912      	ldr	r1, [pc, #72]	; (80087cc <_scanf_float+0x418>)
 8008782:	4630      	mov	r0, r6
 8008784:	f000 f8a6 	bl	80088d4 <siprintf>
 8008788:	e7d0      	b.n	800872c <_scanf_float+0x378>
 800878a:	9903      	ldr	r1, [sp, #12]
 800878c:	f012 0f04 	tst.w	r2, #4
 8008790:	f103 0204 	add.w	r2, r3, #4
 8008794:	600a      	str	r2, [r1, #0]
 8008796:	d1d9      	bne.n	800874c <_scanf_float+0x398>
 8008798:	f8d3 8000 	ldr.w	r8, [r3]
 800879c:	ee10 2a10 	vmov	r2, s0
 80087a0:	ee10 0a10 	vmov	r0, s0
 80087a4:	463b      	mov	r3, r7
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7f8 f9e0 	bl	8000b6c <__aeabi_dcmpun>
 80087ac:	b128      	cbz	r0, 80087ba <_scanf_float+0x406>
 80087ae:	4808      	ldr	r0, [pc, #32]	; (80087d0 <_scanf_float+0x41c>)
 80087b0:	f000 f88a 	bl	80088c8 <nanf>
 80087b4:	ed88 0a00 	vstr	s0, [r8]
 80087b8:	e7cb      	b.n	8008752 <_scanf_float+0x39e>
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f8 fa33 	bl	8000c28 <__aeabi_d2f>
 80087c2:	f8c8 0000 	str.w	r0, [r8]
 80087c6:	e7c4      	b.n	8008752 <_scanf_float+0x39e>
 80087c8:	2500      	movs	r5, #0
 80087ca:	e634      	b.n	8008436 <_scanf_float+0x82>
 80087cc:	080291b0 	.word	0x080291b0
 80087d0:	080295b8 	.word	0x080295b8

080087d4 <cleanup_glue>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	460c      	mov	r4, r1
 80087d8:	6809      	ldr	r1, [r1, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	b109      	cbz	r1, 80087e2 <cleanup_glue+0xe>
 80087de:	f7ff fff9 	bl	80087d4 <cleanup_glue>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ea:	f002 bf71 	b.w	800b6d0 <_free_r>
	...

080087f0 <_reclaim_reent>:
 80087f0:	4b2c      	ldr	r3, [pc, #176]	; (80088a4 <_reclaim_reent+0xb4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4283      	cmp	r3, r0
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	4604      	mov	r4, r0
 80087fa:	d051      	beq.n	80088a0 <_reclaim_reent+0xb0>
 80087fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80087fe:	b143      	cbz	r3, 8008812 <_reclaim_reent+0x22>
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d14a      	bne.n	800889c <_reclaim_reent+0xac>
 8008806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008808:	6819      	ldr	r1, [r3, #0]
 800880a:	b111      	cbz	r1, 8008812 <_reclaim_reent+0x22>
 800880c:	4620      	mov	r0, r4
 800880e:	f002 ff5f 	bl	800b6d0 <_free_r>
 8008812:	6961      	ldr	r1, [r4, #20]
 8008814:	b111      	cbz	r1, 800881c <_reclaim_reent+0x2c>
 8008816:	4620      	mov	r0, r4
 8008818:	f002 ff5a 	bl	800b6d0 <_free_r>
 800881c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800881e:	b111      	cbz	r1, 8008826 <_reclaim_reent+0x36>
 8008820:	4620      	mov	r0, r4
 8008822:	f002 ff55 	bl	800b6d0 <_free_r>
 8008826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008828:	b111      	cbz	r1, 8008830 <_reclaim_reent+0x40>
 800882a:	4620      	mov	r0, r4
 800882c:	f002 ff50 	bl	800b6d0 <_free_r>
 8008830:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008832:	b111      	cbz	r1, 800883a <_reclaim_reent+0x4a>
 8008834:	4620      	mov	r0, r4
 8008836:	f002 ff4b 	bl	800b6d0 <_free_r>
 800883a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800883c:	b111      	cbz	r1, 8008844 <_reclaim_reent+0x54>
 800883e:	4620      	mov	r0, r4
 8008840:	f002 ff46 	bl	800b6d0 <_free_r>
 8008844:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008846:	b111      	cbz	r1, 800884e <_reclaim_reent+0x5e>
 8008848:	4620      	mov	r0, r4
 800884a:	f002 ff41 	bl	800b6d0 <_free_r>
 800884e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008850:	b111      	cbz	r1, 8008858 <_reclaim_reent+0x68>
 8008852:	4620      	mov	r0, r4
 8008854:	f002 ff3c 	bl	800b6d0 <_free_r>
 8008858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800885a:	b111      	cbz	r1, 8008862 <_reclaim_reent+0x72>
 800885c:	4620      	mov	r0, r4
 800885e:	f002 ff37 	bl	800b6d0 <_free_r>
 8008862:	69a3      	ldr	r3, [r4, #24]
 8008864:	b1e3      	cbz	r3, 80088a0 <_reclaim_reent+0xb0>
 8008866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008868:	4620      	mov	r0, r4
 800886a:	4798      	blx	r3
 800886c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800886e:	b1b9      	cbz	r1, 80088a0 <_reclaim_reent+0xb0>
 8008870:	4620      	mov	r0, r4
 8008872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008876:	f7ff bfad 	b.w	80087d4 <cleanup_glue>
 800887a:	5949      	ldr	r1, [r1, r5]
 800887c:	b941      	cbnz	r1, 8008890 <_reclaim_reent+0xa0>
 800887e:	3504      	adds	r5, #4
 8008880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008882:	2d80      	cmp	r5, #128	; 0x80
 8008884:	68d9      	ldr	r1, [r3, #12]
 8008886:	d1f8      	bne.n	800887a <_reclaim_reent+0x8a>
 8008888:	4620      	mov	r0, r4
 800888a:	f002 ff21 	bl	800b6d0 <_free_r>
 800888e:	e7ba      	b.n	8008806 <_reclaim_reent+0x16>
 8008890:	680e      	ldr	r6, [r1, #0]
 8008892:	4620      	mov	r0, r4
 8008894:	f002 ff1c 	bl	800b6d0 <_free_r>
 8008898:	4631      	mov	r1, r6
 800889a:	e7ef      	b.n	800887c <_reclaim_reent+0x8c>
 800889c:	2500      	movs	r5, #0
 800889e:	e7ef      	b.n	8008880 <_reclaim_reent+0x90>
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	bf00      	nop
 80088a4:	20000028 	.word	0x20000028

080088a8 <_sbrk_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d06      	ldr	r5, [pc, #24]	; (80088c4 <_sbrk_r+0x1c>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	f7f9 fc62 	bl	800217c <_sbrk>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_sbrk_r+0x1a>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_sbrk_r+0x1a>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20010254 	.word	0x20010254

080088c8 <nanf>:
 80088c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088d0 <nanf+0x8>
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	7fc00000 	.word	0x7fc00000

080088d4 <siprintf>:
 80088d4:	b40e      	push	{r1, r2, r3}
 80088d6:	b500      	push	{lr}
 80088d8:	b09c      	sub	sp, #112	; 0x70
 80088da:	ab1d      	add	r3, sp, #116	; 0x74
 80088dc:	9002      	str	r0, [sp, #8]
 80088de:	9006      	str	r0, [sp, #24]
 80088e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088e4:	4809      	ldr	r0, [pc, #36]	; (800890c <siprintf+0x38>)
 80088e6:	9107      	str	r1, [sp, #28]
 80088e8:	9104      	str	r1, [sp, #16]
 80088ea:	4909      	ldr	r1, [pc, #36]	; (8008910 <siprintf+0x3c>)
 80088ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f0:	9105      	str	r1, [sp, #20]
 80088f2:	6800      	ldr	r0, [r0, #0]
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	a902      	add	r1, sp, #8
 80088f8:	f002 ff92 	bl	800b820 <_svfiprintf_r>
 80088fc:	9b02      	ldr	r3, [sp, #8]
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	b01c      	add	sp, #112	; 0x70
 8008904:	f85d eb04 	ldr.w	lr, [sp], #4
 8008908:	b003      	add	sp, #12
 800890a:	4770      	bx	lr
 800890c:	20000028 	.word	0x20000028
 8008910:	ffff0208 	.word	0xffff0208

08008914 <__sread>:
 8008914:	b510      	push	{r4, lr}
 8008916:	460c      	mov	r4, r1
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	f003 f880 	bl	800ba20 <_read_r>
 8008920:	2800      	cmp	r0, #0
 8008922:	bfab      	itete	ge
 8008924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008926:	89a3      	ldrhlt	r3, [r4, #12]
 8008928:	181b      	addge	r3, r3, r0
 800892a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800892e:	bfac      	ite	ge
 8008930:	6563      	strge	r3, [r4, #84]	; 0x54
 8008932:	81a3      	strhlt	r3, [r4, #12]
 8008934:	bd10      	pop	{r4, pc}

08008936 <__swrite>:
 8008936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	461f      	mov	r7, r3
 800893c:	898b      	ldrh	r3, [r1, #12]
 800893e:	05db      	lsls	r3, r3, #23
 8008940:	4605      	mov	r5, r0
 8008942:	460c      	mov	r4, r1
 8008944:	4616      	mov	r6, r2
 8008946:	d505      	bpl.n	8008954 <__swrite+0x1e>
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	2302      	movs	r3, #2
 800894e:	2200      	movs	r2, #0
 8008950:	f002 f9ae 	bl	800acb0 <_lseek_r>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800895a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	4632      	mov	r2, r6
 8008962:	463b      	mov	r3, r7
 8008964:	4628      	mov	r0, r5
 8008966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	f000 becd 	b.w	8009708 <_write_r>

0800896e <__sseek>:
 800896e:	b510      	push	{r4, lr}
 8008970:	460c      	mov	r4, r1
 8008972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008976:	f002 f99b 	bl	800acb0 <_lseek_r>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	bf15      	itete	ne
 8008980:	6560      	strne	r0, [r4, #84]	; 0x54
 8008982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800898a:	81a3      	strheq	r3, [r4, #12]
 800898c:	bf18      	it	ne
 800898e:	81a3      	strhne	r3, [r4, #12]
 8008990:	bd10      	pop	{r4, pc}

08008992 <__sclose>:
 8008992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008996:	f000 bec9 	b.w	800972c <_close_r>

0800899a <strcpy>:
 800899a:	4603      	mov	r3, r0
 800899c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a0:	f803 2b01 	strb.w	r2, [r3], #1
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	d1f9      	bne.n	800899c <strcpy+0x2>
 80089a8:	4770      	bx	lr

080089aa <sulp>:
 80089aa:	b570      	push	{r4, r5, r6, lr}
 80089ac:	4604      	mov	r4, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	ec45 4b10 	vmov	d0, r4, r5
 80089b4:	4616      	mov	r6, r2
 80089b6:	f002 fd25 	bl	800b404 <__ulp>
 80089ba:	ec51 0b10 	vmov	r0, r1, d0
 80089be:	b17e      	cbz	r6, 80089e0 <sulp+0x36>
 80089c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	dd09      	ble.n	80089e0 <sulp+0x36>
 80089cc:	051b      	lsls	r3, r3, #20
 80089ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089d2:	2400      	movs	r4, #0
 80089d4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089d8:	4622      	mov	r2, r4
 80089da:	462b      	mov	r3, r5
 80089dc:	f7f7 fe2c 	bl	8000638 <__aeabi_dmul>
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	0000      	movs	r0, r0
 80089e4:	0000      	movs	r0, r0
	...

080089e8 <_strtod_l>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	ed2d 8b02 	vpush	{d8}
 80089f0:	b09d      	sub	sp, #116	; 0x74
 80089f2:	461f      	mov	r7, r3
 80089f4:	2300      	movs	r3, #0
 80089f6:	9318      	str	r3, [sp, #96]	; 0x60
 80089f8:	4ba2      	ldr	r3, [pc, #648]	; (8008c84 <_strtod_l+0x29c>)
 80089fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	4604      	mov	r4, r0
 8008a02:	4618      	mov	r0, r3
 8008a04:	4688      	mov	r8, r1
 8008a06:	f7f7 fc03 	bl	8000210 <strlen>
 8008a0a:	f04f 0a00 	mov.w	sl, #0
 8008a0e:	4605      	mov	r5, r0
 8008a10:	f04f 0b00 	mov.w	fp, #0
 8008a14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a1e:	d04e      	beq.n	8008abe <_strtod_l+0xd6>
 8008a20:	d83b      	bhi.n	8008a9a <_strtod_l+0xb2>
 8008a22:	2a0d      	cmp	r2, #13
 8008a24:	d834      	bhi.n	8008a90 <_strtod_l+0xa8>
 8008a26:	2a08      	cmp	r2, #8
 8008a28:	d834      	bhi.n	8008a94 <_strtod_l+0xac>
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d03e      	beq.n	8008aac <_strtod_l+0xc4>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	930a      	str	r3, [sp, #40]	; 0x28
 8008a32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a34:	7833      	ldrb	r3, [r6, #0]
 8008a36:	2b30      	cmp	r3, #48	; 0x30
 8008a38:	f040 80b0 	bne.w	8008b9c <_strtod_l+0x1b4>
 8008a3c:	7873      	ldrb	r3, [r6, #1]
 8008a3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a42:	2b58      	cmp	r3, #88	; 0x58
 8008a44:	d168      	bne.n	8008b18 <_strtod_l+0x130>
 8008a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	ab18      	add	r3, sp, #96	; 0x60
 8008a4c:	9702      	str	r7, [sp, #8]
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	4a8d      	ldr	r2, [pc, #564]	; (8008c88 <_strtod_l+0x2a0>)
 8008a52:	ab19      	add	r3, sp, #100	; 0x64
 8008a54:	a917      	add	r1, sp, #92	; 0x5c
 8008a56:	4620      	mov	r0, r4
 8008a58:	f001 fe1e 	bl	800a698 <__gethex>
 8008a5c:	f010 0707 	ands.w	r7, r0, #7
 8008a60:	4605      	mov	r5, r0
 8008a62:	d005      	beq.n	8008a70 <_strtod_l+0x88>
 8008a64:	2f06      	cmp	r7, #6
 8008a66:	d12c      	bne.n	8008ac2 <_strtod_l+0xda>
 8008a68:	3601      	adds	r6, #1
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 8590 	bne.w	8009598 <_strtod_l+0xbb0>
 8008a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7a:	b1eb      	cbz	r3, 8008ab8 <_strtod_l+0xd0>
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a82:	ec43 2b10 	vmov	d0, r2, r3
 8008a86:	b01d      	add	sp, #116	; 0x74
 8008a88:	ecbd 8b02 	vpop	{d8}
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	2a20      	cmp	r2, #32
 8008a92:	d1cc      	bne.n	8008a2e <_strtod_l+0x46>
 8008a94:	3301      	adds	r3, #1
 8008a96:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a98:	e7be      	b.n	8008a18 <_strtod_l+0x30>
 8008a9a:	2a2d      	cmp	r2, #45	; 0x2d
 8008a9c:	d1c7      	bne.n	8008a2e <_strtod_l+0x46>
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	920a      	str	r2, [sp, #40]	; 0x28
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1c2      	bne.n	8008a32 <_strtod_l+0x4a>
 8008aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 856e 	bne.w	8009594 <_strtod_l+0xbac>
 8008ab8:	4652      	mov	r2, sl
 8008aba:	465b      	mov	r3, fp
 8008abc:	e7e1      	b.n	8008a82 <_strtod_l+0x9a>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	e7ee      	b.n	8008aa0 <_strtod_l+0xb8>
 8008ac2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ac4:	b13a      	cbz	r2, 8008ad6 <_strtod_l+0xee>
 8008ac6:	2135      	movs	r1, #53	; 0x35
 8008ac8:	a81a      	add	r0, sp, #104	; 0x68
 8008aca:	f002 fda6 	bl	800b61a <__copybits>
 8008ace:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f002 f965 	bl	800ada0 <_Bfree>
 8008ad6:	3f01      	subs	r7, #1
 8008ad8:	2f04      	cmp	r7, #4
 8008ada:	d806      	bhi.n	8008aea <_strtod_l+0x102>
 8008adc:	e8df f007 	tbb	[pc, r7]
 8008ae0:	1714030a 	.word	0x1714030a
 8008ae4:	0a          	.byte	0x0a
 8008ae5:	00          	.byte	0x00
 8008ae6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008aea:	0728      	lsls	r0, r5, #28
 8008aec:	d5c0      	bpl.n	8008a70 <_strtod_l+0x88>
 8008aee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008af2:	e7bd      	b.n	8008a70 <_strtod_l+0x88>
 8008af4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008af8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008afa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008afe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b06:	e7f0      	b.n	8008aea <_strtod_l+0x102>
 8008b08:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c8c <_strtod_l+0x2a4>
 8008b0c:	e7ed      	b.n	8008aea <_strtod_l+0x102>
 8008b0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b12:	f04f 3aff 	mov.w	sl, #4294967295
 8008b16:	e7e8      	b.n	8008aea <_strtod_l+0x102>
 8008b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	2b30      	cmp	r3, #48	; 0x30
 8008b22:	d0f9      	beq.n	8008b18 <_strtod_l+0x130>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0a3      	beq.n	8008a70 <_strtod_l+0x88>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	f04f 0900 	mov.w	r9, #0
 8008b2e:	9304      	str	r3, [sp, #16]
 8008b30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b32:	9308      	str	r3, [sp, #32]
 8008b34:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b38:	464f      	mov	r7, r9
 8008b3a:	220a      	movs	r2, #10
 8008b3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b3e:	7806      	ldrb	r6, [r0, #0]
 8008b40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b44:	b2d9      	uxtb	r1, r3
 8008b46:	2909      	cmp	r1, #9
 8008b48:	d92a      	bls.n	8008ba0 <_strtod_l+0x1b8>
 8008b4a:	9905      	ldr	r1, [sp, #20]
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	f002 ff83 	bl	800ba58 <strncmp>
 8008b52:	b398      	cbz	r0, 8008bbc <_strtod_l+0x1d4>
 8008b54:	2000      	movs	r0, #0
 8008b56:	4632      	mov	r2, r6
 8008b58:	463d      	mov	r5, r7
 8008b5a:	9005      	str	r0, [sp, #20]
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2a65      	cmp	r2, #101	; 0x65
 8008b60:	d001      	beq.n	8008b66 <_strtod_l+0x17e>
 8008b62:	2a45      	cmp	r2, #69	; 0x45
 8008b64:	d118      	bne.n	8008b98 <_strtod_l+0x1b0>
 8008b66:	b91d      	cbnz	r5, 8008b70 <_strtod_l+0x188>
 8008b68:	9a04      	ldr	r2, [sp, #16]
 8008b6a:	4302      	orrs	r2, r0
 8008b6c:	d09e      	beq.n	8008aac <_strtod_l+0xc4>
 8008b6e:	2500      	movs	r5, #0
 8008b70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008b74:	f108 0201 	add.w	r2, r8, #1
 8008b78:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b7e:	2a2b      	cmp	r2, #43	; 0x2b
 8008b80:	d075      	beq.n	8008c6e <_strtod_l+0x286>
 8008b82:	2a2d      	cmp	r2, #45	; 0x2d
 8008b84:	d07b      	beq.n	8008c7e <_strtod_l+0x296>
 8008b86:	f04f 0c00 	mov.w	ip, #0
 8008b8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b8e:	2909      	cmp	r1, #9
 8008b90:	f240 8082 	bls.w	8008c98 <_strtod_l+0x2b0>
 8008b94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b98:	2600      	movs	r6, #0
 8008b9a:	e09d      	b.n	8008cd8 <_strtod_l+0x2f0>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e7c4      	b.n	8008b2a <_strtod_l+0x142>
 8008ba0:	2f08      	cmp	r7, #8
 8008ba2:	bfd8      	it	le
 8008ba4:	9907      	ldrle	r1, [sp, #28]
 8008ba6:	f100 0001 	add.w	r0, r0, #1
 8008baa:	bfda      	itte	le
 8008bac:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bb0:	9307      	strle	r3, [sp, #28]
 8008bb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008bb6:	3701      	adds	r7, #1
 8008bb8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008bba:	e7bf      	b.n	8008b3c <_strtod_l+0x154>
 8008bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bbe:	195a      	adds	r2, r3, r5
 8008bc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bc2:	5d5a      	ldrb	r2, [r3, r5]
 8008bc4:	2f00      	cmp	r7, #0
 8008bc6:	d037      	beq.n	8008c38 <_strtod_l+0x250>
 8008bc8:	9005      	str	r0, [sp, #20]
 8008bca:	463d      	mov	r5, r7
 8008bcc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	d912      	bls.n	8008bfa <_strtod_l+0x212>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e7c2      	b.n	8008b5e <_strtod_l+0x176>
 8008bd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bde:	785a      	ldrb	r2, [r3, #1]
 8008be0:	3001      	adds	r0, #1
 8008be2:	2a30      	cmp	r2, #48	; 0x30
 8008be4:	d0f8      	beq.n	8008bd8 <_strtod_l+0x1f0>
 8008be6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bea:	2b08      	cmp	r3, #8
 8008bec:	f200 84d9 	bhi.w	80095a2 <_strtod_l+0xbba>
 8008bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bf2:	9005      	str	r0, [sp, #20]
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	9308      	str	r3, [sp, #32]
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	3a30      	subs	r2, #48	; 0x30
 8008bfc:	f100 0301 	add.w	r3, r0, #1
 8008c00:	d014      	beq.n	8008c2c <_strtod_l+0x244>
 8008c02:	9905      	ldr	r1, [sp, #20]
 8008c04:	4419      	add	r1, r3
 8008c06:	9105      	str	r1, [sp, #20]
 8008c08:	462b      	mov	r3, r5
 8008c0a:	eb00 0e05 	add.w	lr, r0, r5
 8008c0e:	210a      	movs	r1, #10
 8008c10:	4573      	cmp	r3, lr
 8008c12:	d113      	bne.n	8008c3c <_strtod_l+0x254>
 8008c14:	182b      	adds	r3, r5, r0
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	f105 0501 	add.w	r5, r5, #1
 8008c1c:	4405      	add	r5, r0
 8008c1e:	dc1c      	bgt.n	8008c5a <_strtod_l+0x272>
 8008c20:	9907      	ldr	r1, [sp, #28]
 8008c22:	230a      	movs	r3, #10
 8008c24:	fb03 2301 	mla	r3, r3, r1, r2
 8008c28:	9307      	str	r3, [sp, #28]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c2e:	1c51      	adds	r1, r2, #1
 8008c30:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c32:	7852      	ldrb	r2, [r2, #1]
 8008c34:	4618      	mov	r0, r3
 8008c36:	e7c9      	b.n	8008bcc <_strtod_l+0x1e4>
 8008c38:	4638      	mov	r0, r7
 8008c3a:	e7d2      	b.n	8008be2 <_strtod_l+0x1fa>
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	dc04      	bgt.n	8008c4a <_strtod_l+0x262>
 8008c40:	9e07      	ldr	r6, [sp, #28]
 8008c42:	434e      	muls	r6, r1
 8008c44:	9607      	str	r6, [sp, #28]
 8008c46:	3301      	adds	r3, #1
 8008c48:	e7e2      	b.n	8008c10 <_strtod_l+0x228>
 8008c4a:	f103 0c01 	add.w	ip, r3, #1
 8008c4e:	f1bc 0f10 	cmp.w	ip, #16
 8008c52:	bfd8      	it	le
 8008c54:	fb01 f909 	mulle.w	r9, r1, r9
 8008c58:	e7f5      	b.n	8008c46 <_strtod_l+0x25e>
 8008c5a:	2d10      	cmp	r5, #16
 8008c5c:	bfdc      	itt	le
 8008c5e:	230a      	movle	r3, #10
 8008c60:	fb03 2909 	mlale	r9, r3, r9, r2
 8008c64:	e7e1      	b.n	8008c2a <_strtod_l+0x242>
 8008c66:	2300      	movs	r3, #0
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e77c      	b.n	8008b68 <_strtod_l+0x180>
 8008c6e:	f04f 0c00 	mov.w	ip, #0
 8008c72:	f108 0202 	add.w	r2, r8, #2
 8008c76:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c78:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c7c:	e785      	b.n	8008b8a <_strtod_l+0x1a2>
 8008c7e:	f04f 0c01 	mov.w	ip, #1
 8008c82:	e7f6      	b.n	8008c72 <_strtod_l+0x28a>
 8008c84:	08029400 	.word	0x08029400
 8008c88:	080291b8 	.word	0x080291b8
 8008c8c:	7ff00000 	.word	0x7ff00000
 8008c90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c92:	1c51      	adds	r1, r2, #1
 8008c94:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c96:	7852      	ldrb	r2, [r2, #1]
 8008c98:	2a30      	cmp	r2, #48	; 0x30
 8008c9a:	d0f9      	beq.n	8008c90 <_strtod_l+0x2a8>
 8008c9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ca0:	2908      	cmp	r1, #8
 8008ca2:	f63f af79 	bhi.w	8008b98 <_strtod_l+0x1b0>
 8008ca6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008caa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cac:	9206      	str	r2, [sp, #24]
 8008cae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cb0:	1c51      	adds	r1, r2, #1
 8008cb2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cb4:	7852      	ldrb	r2, [r2, #1]
 8008cb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008cba:	2e09      	cmp	r6, #9
 8008cbc:	d937      	bls.n	8008d2e <_strtod_l+0x346>
 8008cbe:	9e06      	ldr	r6, [sp, #24]
 8008cc0:	1b89      	subs	r1, r1, r6
 8008cc2:	2908      	cmp	r1, #8
 8008cc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008cc8:	dc02      	bgt.n	8008cd0 <_strtod_l+0x2e8>
 8008cca:	4576      	cmp	r6, lr
 8008ccc:	bfa8      	it	ge
 8008cce:	4676      	movge	r6, lr
 8008cd0:	f1bc 0f00 	cmp.w	ip, #0
 8008cd4:	d000      	beq.n	8008cd8 <_strtod_l+0x2f0>
 8008cd6:	4276      	negs	r6, r6
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	d14d      	bne.n	8008d78 <_strtod_l+0x390>
 8008cdc:	9904      	ldr	r1, [sp, #16]
 8008cde:	4301      	orrs	r1, r0
 8008ce0:	f47f aec6 	bne.w	8008a70 <_strtod_l+0x88>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f47f aee1 	bne.w	8008aac <_strtod_l+0xc4>
 8008cea:	2a69      	cmp	r2, #105	; 0x69
 8008cec:	d027      	beq.n	8008d3e <_strtod_l+0x356>
 8008cee:	dc24      	bgt.n	8008d3a <_strtod_l+0x352>
 8008cf0:	2a49      	cmp	r2, #73	; 0x49
 8008cf2:	d024      	beq.n	8008d3e <_strtod_l+0x356>
 8008cf4:	2a4e      	cmp	r2, #78	; 0x4e
 8008cf6:	f47f aed9 	bne.w	8008aac <_strtod_l+0xc4>
 8008cfa:	499f      	ldr	r1, [pc, #636]	; (8008f78 <_strtod_l+0x590>)
 8008cfc:	a817      	add	r0, sp, #92	; 0x5c
 8008cfe:	f001 ff23 	bl	800ab48 <__match>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f43f aed2 	beq.w	8008aac <_strtod_l+0xc4>
 8008d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b28      	cmp	r3, #40	; 0x28
 8008d0e:	d12d      	bne.n	8008d6c <_strtod_l+0x384>
 8008d10:	499a      	ldr	r1, [pc, #616]	; (8008f7c <_strtod_l+0x594>)
 8008d12:	aa1a      	add	r2, sp, #104	; 0x68
 8008d14:	a817      	add	r0, sp, #92	; 0x5c
 8008d16:	f001 ff2b 	bl	800ab70 <__hexnan>
 8008d1a:	2805      	cmp	r0, #5
 8008d1c:	d126      	bne.n	8008d6c <_strtod_l+0x384>
 8008d1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d2c:	e6a0      	b.n	8008a70 <_strtod_l+0x88>
 8008d2e:	210a      	movs	r1, #10
 8008d30:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008d34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d38:	e7b9      	b.n	8008cae <_strtod_l+0x2c6>
 8008d3a:	2a6e      	cmp	r2, #110	; 0x6e
 8008d3c:	e7db      	b.n	8008cf6 <_strtod_l+0x30e>
 8008d3e:	4990      	ldr	r1, [pc, #576]	; (8008f80 <_strtod_l+0x598>)
 8008d40:	a817      	add	r0, sp, #92	; 0x5c
 8008d42:	f001 ff01 	bl	800ab48 <__match>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	f43f aeb0 	beq.w	8008aac <_strtod_l+0xc4>
 8008d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d4e:	498d      	ldr	r1, [pc, #564]	; (8008f84 <_strtod_l+0x59c>)
 8008d50:	3b01      	subs	r3, #1
 8008d52:	a817      	add	r0, sp, #92	; 0x5c
 8008d54:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d56:	f001 fef7 	bl	800ab48 <__match>
 8008d5a:	b910      	cbnz	r0, 8008d62 <_strtod_l+0x37a>
 8008d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d5e:	3301      	adds	r3, #1
 8008d60:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f94 <_strtod_l+0x5ac>
 8008d66:	f04f 0a00 	mov.w	sl, #0
 8008d6a:	e681      	b.n	8008a70 <_strtod_l+0x88>
 8008d6c:	4886      	ldr	r0, [pc, #536]	; (8008f88 <_strtod_l+0x5a0>)
 8008d6e:	f002 fe6b 	bl	800ba48 <nan>
 8008d72:	ec5b ab10 	vmov	sl, fp, d0
 8008d76:	e67b      	b.n	8008a70 <_strtod_l+0x88>
 8008d78:	9b05      	ldr	r3, [sp, #20]
 8008d7a:	9807      	ldr	r0, [sp, #28]
 8008d7c:	1af3      	subs	r3, r6, r3
 8008d7e:	2f00      	cmp	r7, #0
 8008d80:	bf08      	it	eq
 8008d82:	462f      	moveq	r7, r5
 8008d84:	2d10      	cmp	r5, #16
 8008d86:	9306      	str	r3, [sp, #24]
 8008d88:	46a8      	mov	r8, r5
 8008d8a:	bfa8      	it	ge
 8008d8c:	f04f 0810 	movge.w	r8, #16
 8008d90:	f7f7 fbd8 	bl	8000544 <__aeabi_ui2d>
 8008d94:	2d09      	cmp	r5, #9
 8008d96:	4682      	mov	sl, r0
 8008d98:	468b      	mov	fp, r1
 8008d9a:	dd13      	ble.n	8008dc4 <_strtod_l+0x3dc>
 8008d9c:	4b7b      	ldr	r3, [pc, #492]	; (8008f8c <_strtod_l+0x5a4>)
 8008d9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008da2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008da6:	f7f7 fc47 	bl	8000638 <__aeabi_dmul>
 8008daa:	4682      	mov	sl, r0
 8008dac:	4648      	mov	r0, r9
 8008dae:	468b      	mov	fp, r1
 8008db0:	f7f7 fbc8 	bl	8000544 <__aeabi_ui2d>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4650      	mov	r0, sl
 8008dba:	4659      	mov	r1, fp
 8008dbc:	f7f7 fa86 	bl	80002cc <__adddf3>
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	468b      	mov	fp, r1
 8008dc4:	2d0f      	cmp	r5, #15
 8008dc6:	dc38      	bgt.n	8008e3a <_strtod_l+0x452>
 8008dc8:	9b06      	ldr	r3, [sp, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f43f ae50 	beq.w	8008a70 <_strtod_l+0x88>
 8008dd0:	dd24      	ble.n	8008e1c <_strtod_l+0x434>
 8008dd2:	2b16      	cmp	r3, #22
 8008dd4:	dc0b      	bgt.n	8008dee <_strtod_l+0x406>
 8008dd6:	496d      	ldr	r1, [pc, #436]	; (8008f8c <_strtod_l+0x5a4>)
 8008dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de0:	4652      	mov	r2, sl
 8008de2:	465b      	mov	r3, fp
 8008de4:	f7f7 fc28 	bl	8000638 <__aeabi_dmul>
 8008de8:	4682      	mov	sl, r0
 8008dea:	468b      	mov	fp, r1
 8008dec:	e640      	b.n	8008a70 <_strtod_l+0x88>
 8008dee:	9a06      	ldr	r2, [sp, #24]
 8008df0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008df4:	4293      	cmp	r3, r2
 8008df6:	db20      	blt.n	8008e3a <_strtod_l+0x452>
 8008df8:	4c64      	ldr	r4, [pc, #400]	; (8008f8c <_strtod_l+0x5a4>)
 8008dfa:	f1c5 050f 	rsb	r5, r5, #15
 8008dfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e02:	4652      	mov	r2, sl
 8008e04:	465b      	mov	r3, fp
 8008e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e0a:	f7f7 fc15 	bl	8000638 <__aeabi_dmul>
 8008e0e:	9b06      	ldr	r3, [sp, #24]
 8008e10:	1b5d      	subs	r5, r3, r5
 8008e12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e1a:	e7e3      	b.n	8008de4 <_strtod_l+0x3fc>
 8008e1c:	9b06      	ldr	r3, [sp, #24]
 8008e1e:	3316      	adds	r3, #22
 8008e20:	db0b      	blt.n	8008e3a <_strtod_l+0x452>
 8008e22:	9b05      	ldr	r3, [sp, #20]
 8008e24:	1b9e      	subs	r6, r3, r6
 8008e26:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <_strtod_l+0x5a4>)
 8008e28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e30:	4650      	mov	r0, sl
 8008e32:	4659      	mov	r1, fp
 8008e34:	f7f7 fd2a 	bl	800088c <__aeabi_ddiv>
 8008e38:	e7d6      	b.n	8008de8 <_strtod_l+0x400>
 8008e3a:	9b06      	ldr	r3, [sp, #24]
 8008e3c:	eba5 0808 	sub.w	r8, r5, r8
 8008e40:	4498      	add	r8, r3
 8008e42:	f1b8 0f00 	cmp.w	r8, #0
 8008e46:	dd74      	ble.n	8008f32 <_strtod_l+0x54a>
 8008e48:	f018 030f 	ands.w	r3, r8, #15
 8008e4c:	d00a      	beq.n	8008e64 <_strtod_l+0x47c>
 8008e4e:	494f      	ldr	r1, [pc, #316]	; (8008f8c <_strtod_l+0x5a4>)
 8008e50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e54:	4652      	mov	r2, sl
 8008e56:	465b      	mov	r3, fp
 8008e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5c:	f7f7 fbec 	bl	8000638 <__aeabi_dmul>
 8008e60:	4682      	mov	sl, r0
 8008e62:	468b      	mov	fp, r1
 8008e64:	f038 080f 	bics.w	r8, r8, #15
 8008e68:	d04f      	beq.n	8008f0a <_strtod_l+0x522>
 8008e6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e6e:	dd22      	ble.n	8008eb6 <_strtod_l+0x4ce>
 8008e70:	2500      	movs	r5, #0
 8008e72:	462e      	mov	r6, r5
 8008e74:	9507      	str	r5, [sp, #28]
 8008e76:	9505      	str	r5, [sp, #20]
 8008e78:	2322      	movs	r3, #34	; 0x22
 8008e7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f94 <_strtod_l+0x5ac>
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	f04f 0a00 	mov.w	sl, #0
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f43f adf2 	beq.w	8008a70 <_strtod_l+0x88>
 8008e8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 ff86 	bl	800ada0 <_Bfree>
 8008e94:	9905      	ldr	r1, [sp, #20]
 8008e96:	4620      	mov	r0, r4
 8008e98:	f001 ff82 	bl	800ada0 <_Bfree>
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f001 ff7e 	bl	800ada0 <_Bfree>
 8008ea4:	9907      	ldr	r1, [sp, #28]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f001 ff7a 	bl	800ada0 <_Bfree>
 8008eac:	4629      	mov	r1, r5
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f001 ff76 	bl	800ada0 <_Bfree>
 8008eb4:	e5dc      	b.n	8008a70 <_strtod_l+0x88>
 8008eb6:	4b36      	ldr	r3, [pc, #216]	; (8008f90 <_strtod_l+0x5a8>)
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	4699      	mov	r9, r3
 8008ec6:	f1b8 0f01 	cmp.w	r8, #1
 8008eca:	dc21      	bgt.n	8008f10 <_strtod_l+0x528>
 8008ecc:	b10b      	cbz	r3, 8008ed2 <_strtod_l+0x4ea>
 8008ece:	4682      	mov	sl, r0
 8008ed0:	468b      	mov	fp, r1
 8008ed2:	4b2f      	ldr	r3, [pc, #188]	; (8008f90 <_strtod_l+0x5a8>)
 8008ed4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008ed8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008edc:	4652      	mov	r2, sl
 8008ede:	465b      	mov	r3, fp
 8008ee0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ee4:	f7f7 fba8 	bl	8000638 <__aeabi_dmul>
 8008ee8:	4b2a      	ldr	r3, [pc, #168]	; (8008f94 <_strtod_l+0x5ac>)
 8008eea:	460a      	mov	r2, r1
 8008eec:	400b      	ands	r3, r1
 8008eee:	492a      	ldr	r1, [pc, #168]	; (8008f98 <_strtod_l+0x5b0>)
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	d8bc      	bhi.n	8008e70 <_strtod_l+0x488>
 8008ef6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008efa:	428b      	cmp	r3, r1
 8008efc:	bf86      	itte	hi
 8008efe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f9c <_strtod_l+0x5b4>
 8008f02:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	e084      	b.n	800901a <_strtod_l+0x632>
 8008f10:	f018 0f01 	tst.w	r8, #1
 8008f14:	d005      	beq.n	8008f22 <_strtod_l+0x53a>
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f7f7 fb8c 	bl	8000638 <__aeabi_dmul>
 8008f20:	2301      	movs	r3, #1
 8008f22:	9a04      	ldr	r2, [sp, #16]
 8008f24:	3208      	adds	r2, #8
 8008f26:	f109 0901 	add.w	r9, r9, #1
 8008f2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f2e:	9204      	str	r2, [sp, #16]
 8008f30:	e7c9      	b.n	8008ec6 <_strtod_l+0x4de>
 8008f32:	d0ea      	beq.n	8008f0a <_strtod_l+0x522>
 8008f34:	f1c8 0800 	rsb	r8, r8, #0
 8008f38:	f018 020f 	ands.w	r2, r8, #15
 8008f3c:	d00a      	beq.n	8008f54 <_strtod_l+0x56c>
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <_strtod_l+0x5a4>)
 8008f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f44:	4650      	mov	r0, sl
 8008f46:	4659      	mov	r1, fp
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 fc9e 	bl	800088c <__aeabi_ddiv>
 8008f50:	4682      	mov	sl, r0
 8008f52:	468b      	mov	fp, r1
 8008f54:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f58:	d0d7      	beq.n	8008f0a <_strtod_l+0x522>
 8008f5a:	f1b8 0f1f 	cmp.w	r8, #31
 8008f5e:	dd1f      	ble.n	8008fa0 <_strtod_l+0x5b8>
 8008f60:	2500      	movs	r5, #0
 8008f62:	462e      	mov	r6, r5
 8008f64:	9507      	str	r5, [sp, #28]
 8008f66:	9505      	str	r5, [sp, #20]
 8008f68:	2322      	movs	r3, #34	; 0x22
 8008f6a:	f04f 0a00 	mov.w	sl, #0
 8008f6e:	f04f 0b00 	mov.w	fp, #0
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	e786      	b.n	8008e84 <_strtod_l+0x49c>
 8008f76:	bf00      	nop
 8008f78:	08029189 	.word	0x08029189
 8008f7c:	080291cc 	.word	0x080291cc
 8008f80:	08029181 	.word	0x08029181
 8008f84:	0802930c 	.word	0x0802930c
 8008f88:	080295b8 	.word	0x080295b8
 8008f8c:	08029498 	.word	0x08029498
 8008f90:	08029470 	.word	0x08029470
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	7ca00000 	.word	0x7ca00000
 8008f9c:	7fefffff 	.word	0x7fefffff
 8008fa0:	f018 0310 	ands.w	r3, r8, #16
 8008fa4:	bf18      	it	ne
 8008fa6:	236a      	movne	r3, #106	; 0x6a
 8008fa8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009358 <_strtod_l+0x970>
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	4650      	mov	r0, sl
 8008fb0:	4659      	mov	r1, fp
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f018 0f01 	tst.w	r8, #1
 8008fb8:	d004      	beq.n	8008fc4 <_strtod_l+0x5dc>
 8008fba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fbe:	f7f7 fb3b 	bl	8000638 <__aeabi_dmul>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008fc8:	f109 0908 	add.w	r9, r9, #8
 8008fcc:	d1f2      	bne.n	8008fb4 <_strtod_l+0x5cc>
 8008fce:	b10b      	cbz	r3, 8008fd4 <_strtod_l+0x5ec>
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	b1c3      	cbz	r3, 800900a <_strtod_l+0x622>
 8008fd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	dd11      	ble.n	800900a <_strtod_l+0x622>
 8008fe6:	2b1f      	cmp	r3, #31
 8008fe8:	f340 8124 	ble.w	8009234 <_strtod_l+0x84c>
 8008fec:	2b34      	cmp	r3, #52	; 0x34
 8008fee:	bfde      	ittt	le
 8008ff0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ff4:	f04f 33ff 	movle.w	r3, #4294967295
 8008ff8:	fa03 f202 	lslle.w	r2, r3, r2
 8008ffc:	f04f 0a00 	mov.w	sl, #0
 8009000:	bfcc      	ite	gt
 8009002:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009006:	ea02 0b01 	andle.w	fp, r2, r1
 800900a:	2200      	movs	r2, #0
 800900c:	2300      	movs	r3, #0
 800900e:	4650      	mov	r0, sl
 8009010:	4659      	mov	r1, fp
 8009012:	f7f7 fd79 	bl	8000b08 <__aeabi_dcmpeq>
 8009016:	2800      	cmp	r0, #0
 8009018:	d1a2      	bne.n	8008f60 <_strtod_l+0x578>
 800901a:	9b07      	ldr	r3, [sp, #28]
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	9908      	ldr	r1, [sp, #32]
 8009020:	462b      	mov	r3, r5
 8009022:	463a      	mov	r2, r7
 8009024:	4620      	mov	r0, r4
 8009026:	f001 ff23 	bl	800ae70 <__s2b>
 800902a:	9007      	str	r0, [sp, #28]
 800902c:	2800      	cmp	r0, #0
 800902e:	f43f af1f 	beq.w	8008e70 <_strtod_l+0x488>
 8009032:	9b05      	ldr	r3, [sp, #20]
 8009034:	1b9e      	subs	r6, r3, r6
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	bfb4      	ite	lt
 800903c:	4633      	movlt	r3, r6
 800903e:	2300      	movge	r3, #0
 8009040:	930c      	str	r3, [sp, #48]	; 0x30
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	2500      	movs	r5, #0
 8009046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800904a:	9312      	str	r3, [sp, #72]	; 0x48
 800904c:	462e      	mov	r6, r5
 800904e:	9b07      	ldr	r3, [sp, #28]
 8009050:	4620      	mov	r0, r4
 8009052:	6859      	ldr	r1, [r3, #4]
 8009054:	f001 fe64 	bl	800ad20 <_Balloc>
 8009058:	9005      	str	r0, [sp, #20]
 800905a:	2800      	cmp	r0, #0
 800905c:	f43f af0c 	beq.w	8008e78 <_strtod_l+0x490>
 8009060:	9b07      	ldr	r3, [sp, #28]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	3202      	adds	r2, #2
 8009066:	f103 010c 	add.w	r1, r3, #12
 800906a:	0092      	lsls	r2, r2, #2
 800906c:	300c      	adds	r0, #12
 800906e:	f7fe fc8c 	bl	800798a <memcpy>
 8009072:	ec4b ab10 	vmov	d0, sl, fp
 8009076:	aa1a      	add	r2, sp, #104	; 0x68
 8009078:	a919      	add	r1, sp, #100	; 0x64
 800907a:	4620      	mov	r0, r4
 800907c:	f002 fa3e 	bl	800b4fc <__d2b>
 8009080:	ec4b ab18 	vmov	d8, sl, fp
 8009084:	9018      	str	r0, [sp, #96]	; 0x60
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f aef6 	beq.w	8008e78 <_strtod_l+0x490>
 800908c:	2101      	movs	r1, #1
 800908e:	4620      	mov	r0, r4
 8009090:	f001 ff88 	bl	800afa4 <__i2b>
 8009094:	4606      	mov	r6, r0
 8009096:	2800      	cmp	r0, #0
 8009098:	f43f aeee 	beq.w	8008e78 <_strtod_l+0x490>
 800909c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800909e:	9904      	ldr	r1, [sp, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfab      	itete	ge
 80090a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80090a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80090a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80090aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80090ae:	bfac      	ite	ge
 80090b0:	eb03 0902 	addge.w	r9, r3, r2
 80090b4:	1ad7      	sublt	r7, r2, r3
 80090b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090b8:	eba3 0801 	sub.w	r8, r3, r1
 80090bc:	4490      	add	r8, r2
 80090be:	4ba1      	ldr	r3, [pc, #644]	; (8009344 <_strtod_l+0x95c>)
 80090c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80090c4:	4598      	cmp	r8, r3
 80090c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090ca:	f280 80c7 	bge.w	800925c <_strtod_l+0x874>
 80090ce:	eba3 0308 	sub.w	r3, r3, r8
 80090d2:	2b1f      	cmp	r3, #31
 80090d4:	eba2 0203 	sub.w	r2, r2, r3
 80090d8:	f04f 0101 	mov.w	r1, #1
 80090dc:	f300 80b1 	bgt.w	8009242 <_strtod_l+0x85a>
 80090e0:	fa01 f303 	lsl.w	r3, r1, r3
 80090e4:	930d      	str	r3, [sp, #52]	; 0x34
 80090e6:	2300      	movs	r3, #0
 80090e8:	9308      	str	r3, [sp, #32]
 80090ea:	eb09 0802 	add.w	r8, r9, r2
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	45c1      	cmp	r9, r8
 80090f2:	4417      	add	r7, r2
 80090f4:	441f      	add	r7, r3
 80090f6:	464b      	mov	r3, r9
 80090f8:	bfa8      	it	ge
 80090fa:	4643      	movge	r3, r8
 80090fc:	42bb      	cmp	r3, r7
 80090fe:	bfa8      	it	ge
 8009100:	463b      	movge	r3, r7
 8009102:	2b00      	cmp	r3, #0
 8009104:	bfc2      	ittt	gt
 8009106:	eba8 0803 	subgt.w	r8, r8, r3
 800910a:	1aff      	subgt	r7, r7, r3
 800910c:	eba9 0903 	subgt.w	r9, r9, r3
 8009110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd17      	ble.n	8009146 <_strtod_l+0x75e>
 8009116:	4631      	mov	r1, r6
 8009118:	461a      	mov	r2, r3
 800911a:	4620      	mov	r0, r4
 800911c:	f002 f802 	bl	800b124 <__pow5mult>
 8009120:	4606      	mov	r6, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	f43f aea8 	beq.w	8008e78 <_strtod_l+0x490>
 8009128:	4601      	mov	r1, r0
 800912a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800912c:	4620      	mov	r0, r4
 800912e:	f001 ff4f 	bl	800afd0 <__multiply>
 8009132:	900b      	str	r0, [sp, #44]	; 0x2c
 8009134:	2800      	cmp	r0, #0
 8009136:	f43f ae9f 	beq.w	8008e78 <_strtod_l+0x490>
 800913a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800913c:	4620      	mov	r0, r4
 800913e:	f001 fe2f 	bl	800ada0 <_Bfree>
 8009142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009144:	9318      	str	r3, [sp, #96]	; 0x60
 8009146:	f1b8 0f00 	cmp.w	r8, #0
 800914a:	f300 808c 	bgt.w	8009266 <_strtod_l+0x87e>
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	2b00      	cmp	r3, #0
 8009152:	dd08      	ble.n	8009166 <_strtod_l+0x77e>
 8009154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009156:	9905      	ldr	r1, [sp, #20]
 8009158:	4620      	mov	r0, r4
 800915a:	f001 ffe3 	bl	800b124 <__pow5mult>
 800915e:	9005      	str	r0, [sp, #20]
 8009160:	2800      	cmp	r0, #0
 8009162:	f43f ae89 	beq.w	8008e78 <_strtod_l+0x490>
 8009166:	2f00      	cmp	r7, #0
 8009168:	dd08      	ble.n	800917c <_strtod_l+0x794>
 800916a:	9905      	ldr	r1, [sp, #20]
 800916c:	463a      	mov	r2, r7
 800916e:	4620      	mov	r0, r4
 8009170:	f002 f832 	bl	800b1d8 <__lshift>
 8009174:	9005      	str	r0, [sp, #20]
 8009176:	2800      	cmp	r0, #0
 8009178:	f43f ae7e 	beq.w	8008e78 <_strtod_l+0x490>
 800917c:	f1b9 0f00 	cmp.w	r9, #0
 8009180:	dd08      	ble.n	8009194 <_strtod_l+0x7ac>
 8009182:	4631      	mov	r1, r6
 8009184:	464a      	mov	r2, r9
 8009186:	4620      	mov	r0, r4
 8009188:	f002 f826 	bl	800b1d8 <__lshift>
 800918c:	4606      	mov	r6, r0
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f ae72 	beq.w	8008e78 <_strtod_l+0x490>
 8009194:	9a05      	ldr	r2, [sp, #20]
 8009196:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009198:	4620      	mov	r0, r4
 800919a:	f002 f8a9 	bl	800b2f0 <__mdiff>
 800919e:	4605      	mov	r5, r0
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f43f ae69 	beq.w	8008e78 <_strtod_l+0x490>
 80091a6:	68c3      	ldr	r3, [r0, #12]
 80091a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80091aa:	2300      	movs	r3, #0
 80091ac:	60c3      	str	r3, [r0, #12]
 80091ae:	4631      	mov	r1, r6
 80091b0:	f002 f882 	bl	800b2b8 <__mcmp>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	da60      	bge.n	800927a <_strtod_l+0x892>
 80091b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ba:	ea53 030a 	orrs.w	r3, r3, sl
 80091be:	f040 8082 	bne.w	80092c6 <_strtod_l+0x8de>
 80091c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d17d      	bne.n	80092c6 <_strtod_l+0x8de>
 80091ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091ce:	0d1b      	lsrs	r3, r3, #20
 80091d0:	051b      	lsls	r3, r3, #20
 80091d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091d6:	d976      	bls.n	80092c6 <_strtod_l+0x8de>
 80091d8:	696b      	ldr	r3, [r5, #20]
 80091da:	b913      	cbnz	r3, 80091e2 <_strtod_l+0x7fa>
 80091dc:	692b      	ldr	r3, [r5, #16]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	dd71      	ble.n	80092c6 <_strtod_l+0x8de>
 80091e2:	4629      	mov	r1, r5
 80091e4:	2201      	movs	r2, #1
 80091e6:	4620      	mov	r0, r4
 80091e8:	f001 fff6 	bl	800b1d8 <__lshift>
 80091ec:	4631      	mov	r1, r6
 80091ee:	4605      	mov	r5, r0
 80091f0:	f002 f862 	bl	800b2b8 <__mcmp>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	dd66      	ble.n	80092c6 <_strtod_l+0x8de>
 80091f8:	9904      	ldr	r1, [sp, #16]
 80091fa:	4a53      	ldr	r2, [pc, #332]	; (8009348 <_strtod_l+0x960>)
 80091fc:	465b      	mov	r3, fp
 80091fe:	2900      	cmp	r1, #0
 8009200:	f000 8081 	beq.w	8009306 <_strtod_l+0x91e>
 8009204:	ea02 010b 	and.w	r1, r2, fp
 8009208:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800920c:	dc7b      	bgt.n	8009306 <_strtod_l+0x91e>
 800920e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009212:	f77f aea9 	ble.w	8008f68 <_strtod_l+0x580>
 8009216:	4b4d      	ldr	r3, [pc, #308]	; (800934c <_strtod_l+0x964>)
 8009218:	4650      	mov	r0, sl
 800921a:	4659      	mov	r1, fp
 800921c:	2200      	movs	r2, #0
 800921e:	f7f7 fa0b 	bl	8000638 <__aeabi_dmul>
 8009222:	460b      	mov	r3, r1
 8009224:	4303      	orrs	r3, r0
 8009226:	bf08      	it	eq
 8009228:	2322      	moveq	r3, #34	; 0x22
 800922a:	4682      	mov	sl, r0
 800922c:	468b      	mov	fp, r1
 800922e:	bf08      	it	eq
 8009230:	6023      	streq	r3, [r4, #0]
 8009232:	e62b      	b.n	8008e8c <_strtod_l+0x4a4>
 8009234:	f04f 32ff 	mov.w	r2, #4294967295
 8009238:	fa02 f303 	lsl.w	r3, r2, r3
 800923c:	ea03 0a0a 	and.w	sl, r3, sl
 8009240:	e6e3      	b.n	800900a <_strtod_l+0x622>
 8009242:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009246:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800924a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800924e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009252:	fa01 f308 	lsl.w	r3, r1, r8
 8009256:	9308      	str	r3, [sp, #32]
 8009258:	910d      	str	r1, [sp, #52]	; 0x34
 800925a:	e746      	b.n	80090ea <_strtod_l+0x702>
 800925c:	2300      	movs	r3, #0
 800925e:	9308      	str	r3, [sp, #32]
 8009260:	2301      	movs	r3, #1
 8009262:	930d      	str	r3, [sp, #52]	; 0x34
 8009264:	e741      	b.n	80090ea <_strtod_l+0x702>
 8009266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009268:	4642      	mov	r2, r8
 800926a:	4620      	mov	r0, r4
 800926c:	f001 ffb4 	bl	800b1d8 <__lshift>
 8009270:	9018      	str	r0, [sp, #96]	; 0x60
 8009272:	2800      	cmp	r0, #0
 8009274:	f47f af6b 	bne.w	800914e <_strtod_l+0x766>
 8009278:	e5fe      	b.n	8008e78 <_strtod_l+0x490>
 800927a:	465f      	mov	r7, fp
 800927c:	d16e      	bne.n	800935c <_strtod_l+0x974>
 800927e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009284:	b342      	cbz	r2, 80092d8 <_strtod_l+0x8f0>
 8009286:	4a32      	ldr	r2, [pc, #200]	; (8009350 <_strtod_l+0x968>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d128      	bne.n	80092de <_strtod_l+0x8f6>
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	4651      	mov	r1, sl
 8009290:	b1eb      	cbz	r3, 80092ce <_strtod_l+0x8e6>
 8009292:	4b2d      	ldr	r3, [pc, #180]	; (8009348 <_strtod_l+0x960>)
 8009294:	403b      	ands	r3, r7
 8009296:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800929a:	f04f 32ff 	mov.w	r2, #4294967295
 800929e:	d819      	bhi.n	80092d4 <_strtod_l+0x8ec>
 80092a0:	0d1b      	lsrs	r3, r3, #20
 80092a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092a6:	fa02 f303 	lsl.w	r3, r2, r3
 80092aa:	4299      	cmp	r1, r3
 80092ac:	d117      	bne.n	80092de <_strtod_l+0x8f6>
 80092ae:	4b29      	ldr	r3, [pc, #164]	; (8009354 <_strtod_l+0x96c>)
 80092b0:	429f      	cmp	r7, r3
 80092b2:	d102      	bne.n	80092ba <_strtod_l+0x8d2>
 80092b4:	3101      	adds	r1, #1
 80092b6:	f43f addf 	beq.w	8008e78 <_strtod_l+0x490>
 80092ba:	4b23      	ldr	r3, [pc, #140]	; (8009348 <_strtod_l+0x960>)
 80092bc:	403b      	ands	r3, r7
 80092be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092c2:	f04f 0a00 	mov.w	sl, #0
 80092c6:	9b04      	ldr	r3, [sp, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1a4      	bne.n	8009216 <_strtod_l+0x82e>
 80092cc:	e5de      	b.n	8008e8c <_strtod_l+0x4a4>
 80092ce:	f04f 33ff 	mov.w	r3, #4294967295
 80092d2:	e7ea      	b.n	80092aa <_strtod_l+0x8c2>
 80092d4:	4613      	mov	r3, r2
 80092d6:	e7e8      	b.n	80092aa <_strtod_l+0x8c2>
 80092d8:	ea53 030a 	orrs.w	r3, r3, sl
 80092dc:	d08c      	beq.n	80091f8 <_strtod_l+0x810>
 80092de:	9b08      	ldr	r3, [sp, #32]
 80092e0:	b1db      	cbz	r3, 800931a <_strtod_l+0x932>
 80092e2:	423b      	tst	r3, r7
 80092e4:	d0ef      	beq.n	80092c6 <_strtod_l+0x8de>
 80092e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e8:	9a04      	ldr	r2, [sp, #16]
 80092ea:	4650      	mov	r0, sl
 80092ec:	4659      	mov	r1, fp
 80092ee:	b1c3      	cbz	r3, 8009322 <_strtod_l+0x93a>
 80092f0:	f7ff fb5b 	bl	80089aa <sulp>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	ec51 0b18 	vmov	r0, r1, d8
 80092fc:	f7f6 ffe6 	bl	80002cc <__adddf3>
 8009300:	4682      	mov	sl, r0
 8009302:	468b      	mov	fp, r1
 8009304:	e7df      	b.n	80092c6 <_strtod_l+0x8de>
 8009306:	4013      	ands	r3, r2
 8009308:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800930c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009310:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009314:	f04f 3aff 	mov.w	sl, #4294967295
 8009318:	e7d5      	b.n	80092c6 <_strtod_l+0x8de>
 800931a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931c:	ea13 0f0a 	tst.w	r3, sl
 8009320:	e7e0      	b.n	80092e4 <_strtod_l+0x8fc>
 8009322:	f7ff fb42 	bl	80089aa <sulp>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	ec51 0b18 	vmov	r0, r1, d8
 800932e:	f7f6 ffcb 	bl	80002c8 <__aeabi_dsub>
 8009332:	2200      	movs	r2, #0
 8009334:	2300      	movs	r3, #0
 8009336:	4682      	mov	sl, r0
 8009338:	468b      	mov	fp, r1
 800933a:	f7f7 fbe5 	bl	8000b08 <__aeabi_dcmpeq>
 800933e:	2800      	cmp	r0, #0
 8009340:	d0c1      	beq.n	80092c6 <_strtod_l+0x8de>
 8009342:	e611      	b.n	8008f68 <_strtod_l+0x580>
 8009344:	fffffc02 	.word	0xfffffc02
 8009348:	7ff00000 	.word	0x7ff00000
 800934c:	39500000 	.word	0x39500000
 8009350:	000fffff 	.word	0x000fffff
 8009354:	7fefffff 	.word	0x7fefffff
 8009358:	080291e0 	.word	0x080291e0
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	f002 f928 	bl	800b5b4 <__ratio>
 8009364:	ec59 8b10 	vmov	r8, r9, d0
 8009368:	ee10 0a10 	vmov	r0, s0
 800936c:	2200      	movs	r2, #0
 800936e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009372:	4649      	mov	r1, r9
 8009374:	f7f7 fbdc 	bl	8000b30 <__aeabi_dcmple>
 8009378:	2800      	cmp	r0, #0
 800937a:	d07a      	beq.n	8009472 <_strtod_l+0xa8a>
 800937c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d04a      	beq.n	8009418 <_strtod_l+0xa30>
 8009382:	4b95      	ldr	r3, [pc, #596]	; (80095d8 <_strtod_l+0xbf0>)
 8009384:	2200      	movs	r2, #0
 8009386:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800938a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095d8 <_strtod_l+0xbf0>
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	4b92      	ldr	r3, [pc, #584]	; (80095dc <_strtod_l+0xbf4>)
 8009394:	403b      	ands	r3, r7
 8009396:	930d      	str	r3, [sp, #52]	; 0x34
 8009398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800939a:	4b91      	ldr	r3, [pc, #580]	; (80095e0 <_strtod_l+0xbf8>)
 800939c:	429a      	cmp	r2, r3
 800939e:	f040 80b0 	bne.w	8009502 <_strtod_l+0xb1a>
 80093a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80093aa:	ec4b ab10 	vmov	d0, sl, fp
 80093ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093b2:	f002 f827 	bl	800b404 <__ulp>
 80093b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093ba:	ec53 2b10 	vmov	r2, r3, d0
 80093be:	f7f7 f93b 	bl	8000638 <__aeabi_dmul>
 80093c2:	4652      	mov	r2, sl
 80093c4:	465b      	mov	r3, fp
 80093c6:	f7f6 ff81 	bl	80002cc <__adddf3>
 80093ca:	460b      	mov	r3, r1
 80093cc:	4983      	ldr	r1, [pc, #524]	; (80095dc <_strtod_l+0xbf4>)
 80093ce:	4a85      	ldr	r2, [pc, #532]	; (80095e4 <_strtod_l+0xbfc>)
 80093d0:	4019      	ands	r1, r3
 80093d2:	4291      	cmp	r1, r2
 80093d4:	4682      	mov	sl, r0
 80093d6:	d960      	bls.n	800949a <_strtod_l+0xab2>
 80093d8:	ee18 3a90 	vmov	r3, s17
 80093dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d104      	bne.n	80093ee <_strtod_l+0xa06>
 80093e4:	ee18 3a10 	vmov	r3, s16
 80093e8:	3301      	adds	r3, #1
 80093ea:	f43f ad45 	beq.w	8008e78 <_strtod_l+0x490>
 80093ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80095f0 <_strtod_l+0xc08>
 80093f2:	f04f 3aff 	mov.w	sl, #4294967295
 80093f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093f8:	4620      	mov	r0, r4
 80093fa:	f001 fcd1 	bl	800ada0 <_Bfree>
 80093fe:	9905      	ldr	r1, [sp, #20]
 8009400:	4620      	mov	r0, r4
 8009402:	f001 fccd 	bl	800ada0 <_Bfree>
 8009406:	4631      	mov	r1, r6
 8009408:	4620      	mov	r0, r4
 800940a:	f001 fcc9 	bl	800ada0 <_Bfree>
 800940e:	4629      	mov	r1, r5
 8009410:	4620      	mov	r0, r4
 8009412:	f001 fcc5 	bl	800ada0 <_Bfree>
 8009416:	e61a      	b.n	800904e <_strtod_l+0x666>
 8009418:	f1ba 0f00 	cmp.w	sl, #0
 800941c:	d11b      	bne.n	8009456 <_strtod_l+0xa6e>
 800941e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009422:	b9f3      	cbnz	r3, 8009462 <_strtod_l+0xa7a>
 8009424:	4b6c      	ldr	r3, [pc, #432]	; (80095d8 <_strtod_l+0xbf0>)
 8009426:	2200      	movs	r2, #0
 8009428:	4640      	mov	r0, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f7f7 fb76 	bl	8000b1c <__aeabi_dcmplt>
 8009430:	b9d0      	cbnz	r0, 8009468 <_strtod_l+0xa80>
 8009432:	4640      	mov	r0, r8
 8009434:	4649      	mov	r1, r9
 8009436:	4b6c      	ldr	r3, [pc, #432]	; (80095e8 <_strtod_l+0xc00>)
 8009438:	2200      	movs	r2, #0
 800943a:	f7f7 f8fd 	bl	8000638 <__aeabi_dmul>
 800943e:	4680      	mov	r8, r0
 8009440:	4689      	mov	r9, r1
 8009442:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009446:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800944a:	9315      	str	r3, [sp, #84]	; 0x54
 800944c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009450:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009454:	e79d      	b.n	8009392 <_strtod_l+0x9aa>
 8009456:	f1ba 0f01 	cmp.w	sl, #1
 800945a:	d102      	bne.n	8009462 <_strtod_l+0xa7a>
 800945c:	2f00      	cmp	r7, #0
 800945e:	f43f ad83 	beq.w	8008f68 <_strtod_l+0x580>
 8009462:	4b62      	ldr	r3, [pc, #392]	; (80095ec <_strtod_l+0xc04>)
 8009464:	2200      	movs	r2, #0
 8009466:	e78e      	b.n	8009386 <_strtod_l+0x99e>
 8009468:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80095e8 <_strtod_l+0xc00>
 800946c:	f04f 0800 	mov.w	r8, #0
 8009470:	e7e7      	b.n	8009442 <_strtod_l+0xa5a>
 8009472:	4b5d      	ldr	r3, [pc, #372]	; (80095e8 <_strtod_l+0xc00>)
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	2200      	movs	r2, #0
 800947a:	f7f7 f8dd 	bl	8000638 <__aeabi_dmul>
 800947e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009480:	4680      	mov	r8, r0
 8009482:	4689      	mov	r9, r1
 8009484:	b933      	cbnz	r3, 8009494 <_strtod_l+0xaac>
 8009486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800948a:	900e      	str	r0, [sp, #56]	; 0x38
 800948c:	930f      	str	r3, [sp, #60]	; 0x3c
 800948e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009492:	e7dd      	b.n	8009450 <_strtod_l+0xa68>
 8009494:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009498:	e7f9      	b.n	800948e <_strtod_l+0xaa6>
 800949a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1a8      	bne.n	80093f6 <_strtod_l+0xa0e>
 80094a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094aa:	0d1b      	lsrs	r3, r3, #20
 80094ac:	051b      	lsls	r3, r3, #20
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d1a1      	bne.n	80093f6 <_strtod_l+0xa0e>
 80094b2:	4640      	mov	r0, r8
 80094b4:	4649      	mov	r1, r9
 80094b6:	f7f7 fc1f 	bl	8000cf8 <__aeabi_d2lz>
 80094ba:	f7f7 f88f 	bl	80005dc <__aeabi_l2d>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f6 feff 	bl	80002c8 <__aeabi_dsub>
 80094ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094d0:	ea43 030a 	orr.w	r3, r3, sl
 80094d4:	4313      	orrs	r3, r2
 80094d6:	4680      	mov	r8, r0
 80094d8:	4689      	mov	r9, r1
 80094da:	d055      	beq.n	8009588 <_strtod_l+0xba0>
 80094dc:	a336      	add	r3, pc, #216	; (adr r3, 80095b8 <_strtod_l+0xbd0>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f7 fb1b 	bl	8000b1c <__aeabi_dcmplt>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f47f acd0 	bne.w	8008e8c <_strtod_l+0x4a4>
 80094ec:	a334      	add	r3, pc, #208	; (adr r3, 80095c0 <_strtod_l+0xbd8>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f7 fb2f 	bl	8000b58 <__aeabi_dcmpgt>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f43f af7b 	beq.w	80093f6 <_strtod_l+0xa0e>
 8009500:	e4c4      	b.n	8008e8c <_strtod_l+0x4a4>
 8009502:	9b04      	ldr	r3, [sp, #16]
 8009504:	b333      	cbz	r3, 8009554 <_strtod_l+0xb6c>
 8009506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009508:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800950c:	d822      	bhi.n	8009554 <_strtod_l+0xb6c>
 800950e:	a32e      	add	r3, pc, #184	; (adr r3, 80095c8 <_strtod_l+0xbe0>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	4640      	mov	r0, r8
 8009516:	4649      	mov	r1, r9
 8009518:	f7f7 fb0a 	bl	8000b30 <__aeabi_dcmple>
 800951c:	b1a0      	cbz	r0, 8009548 <_strtod_l+0xb60>
 800951e:	4649      	mov	r1, r9
 8009520:	4640      	mov	r0, r8
 8009522:	f7f7 fb61 	bl	8000be8 <__aeabi_d2uiz>
 8009526:	2801      	cmp	r0, #1
 8009528:	bf38      	it	cc
 800952a:	2001      	movcc	r0, #1
 800952c:	f7f7 f80a 	bl	8000544 <__aeabi_ui2d>
 8009530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009532:	4680      	mov	r8, r0
 8009534:	4689      	mov	r9, r1
 8009536:	bb23      	cbnz	r3, 8009582 <_strtod_l+0xb9a>
 8009538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800953c:	9010      	str	r0, [sp, #64]	; 0x40
 800953e:	9311      	str	r3, [sp, #68]	; 0x44
 8009540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009544:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800954c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009550:	1a9b      	subs	r3, r3, r2
 8009552:	9309      	str	r3, [sp, #36]	; 0x24
 8009554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009558:	eeb0 0a48 	vmov.f32	s0, s16
 800955c:	eef0 0a68 	vmov.f32	s1, s17
 8009560:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009564:	f001 ff4e 	bl	800b404 <__ulp>
 8009568:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800956c:	ec53 2b10 	vmov	r2, r3, d0
 8009570:	f7f7 f862 	bl	8000638 <__aeabi_dmul>
 8009574:	ec53 2b18 	vmov	r2, r3, d8
 8009578:	f7f6 fea8 	bl	80002cc <__adddf3>
 800957c:	4682      	mov	sl, r0
 800957e:	468b      	mov	fp, r1
 8009580:	e78d      	b.n	800949e <_strtod_l+0xab6>
 8009582:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009586:	e7db      	b.n	8009540 <_strtod_l+0xb58>
 8009588:	a311      	add	r3, pc, #68	; (adr r3, 80095d0 <_strtod_l+0xbe8>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7f7 fac5 	bl	8000b1c <__aeabi_dcmplt>
 8009592:	e7b2      	b.n	80094fa <_strtod_l+0xb12>
 8009594:	2300      	movs	r3, #0
 8009596:	930a      	str	r3, [sp, #40]	; 0x28
 8009598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800959a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	f7ff ba6b 	b.w	8008a78 <_strtod_l+0x90>
 80095a2:	2a65      	cmp	r2, #101	; 0x65
 80095a4:	f43f ab5f 	beq.w	8008c66 <_strtod_l+0x27e>
 80095a8:	2a45      	cmp	r2, #69	; 0x45
 80095aa:	f43f ab5c 	beq.w	8008c66 <_strtod_l+0x27e>
 80095ae:	2301      	movs	r3, #1
 80095b0:	f7ff bb94 	b.w	8008cdc <_strtod_l+0x2f4>
 80095b4:	f3af 8000 	nop.w
 80095b8:	94a03595 	.word	0x94a03595
 80095bc:	3fdfffff 	.word	0x3fdfffff
 80095c0:	35afe535 	.word	0x35afe535
 80095c4:	3fe00000 	.word	0x3fe00000
 80095c8:	ffc00000 	.word	0xffc00000
 80095cc:	41dfffff 	.word	0x41dfffff
 80095d0:	94a03595 	.word	0x94a03595
 80095d4:	3fcfffff 	.word	0x3fcfffff
 80095d8:	3ff00000 	.word	0x3ff00000
 80095dc:	7ff00000 	.word	0x7ff00000
 80095e0:	7fe00000 	.word	0x7fe00000
 80095e4:	7c9fffff 	.word	0x7c9fffff
 80095e8:	3fe00000 	.word	0x3fe00000
 80095ec:	bff00000 	.word	0xbff00000
 80095f0:	7fefffff 	.word	0x7fefffff

080095f4 <_strtod_r>:
 80095f4:	4b01      	ldr	r3, [pc, #4]	; (80095fc <_strtod_r+0x8>)
 80095f6:	f7ff b9f7 	b.w	80089e8 <_strtod_l>
 80095fa:	bf00      	nop
 80095fc:	20000090 	.word	0x20000090

08009600 <_strtol_l.constprop.0>:
 8009600:	2b01      	cmp	r3, #1
 8009602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009606:	d001      	beq.n	800960c <_strtol_l.constprop.0+0xc>
 8009608:	2b24      	cmp	r3, #36	; 0x24
 800960a:	d906      	bls.n	800961a <_strtol_l.constprop.0+0x1a>
 800960c:	f7fe f89a 	bl	8007744 <__errno>
 8009610:	2316      	movs	r3, #22
 8009612:	6003      	str	r3, [r0, #0]
 8009614:	2000      	movs	r0, #0
 8009616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009700 <_strtol_l.constprop.0+0x100>
 800961e:	460d      	mov	r5, r1
 8009620:	462e      	mov	r6, r5
 8009622:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009626:	f814 700c 	ldrb.w	r7, [r4, ip]
 800962a:	f017 0708 	ands.w	r7, r7, #8
 800962e:	d1f7      	bne.n	8009620 <_strtol_l.constprop.0+0x20>
 8009630:	2c2d      	cmp	r4, #45	; 0x2d
 8009632:	d132      	bne.n	800969a <_strtol_l.constprop.0+0x9a>
 8009634:	782c      	ldrb	r4, [r5, #0]
 8009636:	2701      	movs	r7, #1
 8009638:	1cb5      	adds	r5, r6, #2
 800963a:	2b00      	cmp	r3, #0
 800963c:	d05b      	beq.n	80096f6 <_strtol_l.constprop.0+0xf6>
 800963e:	2b10      	cmp	r3, #16
 8009640:	d109      	bne.n	8009656 <_strtol_l.constprop.0+0x56>
 8009642:	2c30      	cmp	r4, #48	; 0x30
 8009644:	d107      	bne.n	8009656 <_strtol_l.constprop.0+0x56>
 8009646:	782c      	ldrb	r4, [r5, #0]
 8009648:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800964c:	2c58      	cmp	r4, #88	; 0x58
 800964e:	d14d      	bne.n	80096ec <_strtol_l.constprop.0+0xec>
 8009650:	786c      	ldrb	r4, [r5, #1]
 8009652:	2310      	movs	r3, #16
 8009654:	3502      	adds	r5, #2
 8009656:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800965a:	f108 38ff 	add.w	r8, r8, #4294967295
 800965e:	f04f 0c00 	mov.w	ip, #0
 8009662:	fbb8 f9f3 	udiv	r9, r8, r3
 8009666:	4666      	mov	r6, ip
 8009668:	fb03 8a19 	mls	sl, r3, r9, r8
 800966c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009670:	f1be 0f09 	cmp.w	lr, #9
 8009674:	d816      	bhi.n	80096a4 <_strtol_l.constprop.0+0xa4>
 8009676:	4674      	mov	r4, lr
 8009678:	42a3      	cmp	r3, r4
 800967a:	dd24      	ble.n	80096c6 <_strtol_l.constprop.0+0xc6>
 800967c:	f1bc 0f00 	cmp.w	ip, #0
 8009680:	db1e      	blt.n	80096c0 <_strtol_l.constprop.0+0xc0>
 8009682:	45b1      	cmp	r9, r6
 8009684:	d31c      	bcc.n	80096c0 <_strtol_l.constprop.0+0xc0>
 8009686:	d101      	bne.n	800968c <_strtol_l.constprop.0+0x8c>
 8009688:	45a2      	cmp	sl, r4
 800968a:	db19      	blt.n	80096c0 <_strtol_l.constprop.0+0xc0>
 800968c:	fb06 4603 	mla	r6, r6, r3, r4
 8009690:	f04f 0c01 	mov.w	ip, #1
 8009694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009698:	e7e8      	b.n	800966c <_strtol_l.constprop.0+0x6c>
 800969a:	2c2b      	cmp	r4, #43	; 0x2b
 800969c:	bf04      	itt	eq
 800969e:	782c      	ldrbeq	r4, [r5, #0]
 80096a0:	1cb5      	addeq	r5, r6, #2
 80096a2:	e7ca      	b.n	800963a <_strtol_l.constprop.0+0x3a>
 80096a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80096a8:	f1be 0f19 	cmp.w	lr, #25
 80096ac:	d801      	bhi.n	80096b2 <_strtol_l.constprop.0+0xb2>
 80096ae:	3c37      	subs	r4, #55	; 0x37
 80096b0:	e7e2      	b.n	8009678 <_strtol_l.constprop.0+0x78>
 80096b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096b6:	f1be 0f19 	cmp.w	lr, #25
 80096ba:	d804      	bhi.n	80096c6 <_strtol_l.constprop.0+0xc6>
 80096bc:	3c57      	subs	r4, #87	; 0x57
 80096be:	e7db      	b.n	8009678 <_strtol_l.constprop.0+0x78>
 80096c0:	f04f 3cff 	mov.w	ip, #4294967295
 80096c4:	e7e6      	b.n	8009694 <_strtol_l.constprop.0+0x94>
 80096c6:	f1bc 0f00 	cmp.w	ip, #0
 80096ca:	da05      	bge.n	80096d8 <_strtol_l.constprop.0+0xd8>
 80096cc:	2322      	movs	r3, #34	; 0x22
 80096ce:	6003      	str	r3, [r0, #0]
 80096d0:	4646      	mov	r6, r8
 80096d2:	b942      	cbnz	r2, 80096e6 <_strtol_l.constprop.0+0xe6>
 80096d4:	4630      	mov	r0, r6
 80096d6:	e79e      	b.n	8009616 <_strtol_l.constprop.0+0x16>
 80096d8:	b107      	cbz	r7, 80096dc <_strtol_l.constprop.0+0xdc>
 80096da:	4276      	negs	r6, r6
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d0f9      	beq.n	80096d4 <_strtol_l.constprop.0+0xd4>
 80096e0:	f1bc 0f00 	cmp.w	ip, #0
 80096e4:	d000      	beq.n	80096e8 <_strtol_l.constprop.0+0xe8>
 80096e6:	1e69      	subs	r1, r5, #1
 80096e8:	6011      	str	r1, [r2, #0]
 80096ea:	e7f3      	b.n	80096d4 <_strtol_l.constprop.0+0xd4>
 80096ec:	2430      	movs	r4, #48	; 0x30
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1b1      	bne.n	8009656 <_strtol_l.constprop.0+0x56>
 80096f2:	2308      	movs	r3, #8
 80096f4:	e7af      	b.n	8009656 <_strtol_l.constprop.0+0x56>
 80096f6:	2c30      	cmp	r4, #48	; 0x30
 80096f8:	d0a5      	beq.n	8009646 <_strtol_l.constprop.0+0x46>
 80096fa:	230a      	movs	r3, #10
 80096fc:	e7ab      	b.n	8009656 <_strtol_l.constprop.0+0x56>
 80096fe:	bf00      	nop
 8009700:	08029209 	.word	0x08029209

08009704 <_strtol_r>:
 8009704:	f7ff bf7c 	b.w	8009600 <_strtol_l.constprop.0>

08009708 <_write_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d07      	ldr	r5, [pc, #28]	; (8009728 <_write_r+0x20>)
 800970c:	4604      	mov	r4, r0
 800970e:	4608      	mov	r0, r1
 8009710:	4611      	mov	r1, r2
 8009712:	2200      	movs	r2, #0
 8009714:	602a      	str	r2, [r5, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	f7f8 fcdf 	bl	80020da <_write>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_write_r+0x1e>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_write_r+0x1e>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	20010254 	.word	0x20010254

0800972c <_close_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d06      	ldr	r5, [pc, #24]	; (8009748 <_close_r+0x1c>)
 8009730:	2300      	movs	r3, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f8 fceb 	bl	8002112 <_close>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_close_r+0x1a>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_close_r+0x1a>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20010254 	.word	0x20010254

0800974c <quorem>:
 800974c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	6903      	ldr	r3, [r0, #16]
 8009752:	690c      	ldr	r4, [r1, #16]
 8009754:	42a3      	cmp	r3, r4
 8009756:	4607      	mov	r7, r0
 8009758:	f2c0 8081 	blt.w	800985e <quorem+0x112>
 800975c:	3c01      	subs	r4, #1
 800975e:	f101 0814 	add.w	r8, r1, #20
 8009762:	f100 0514 	add.w	r5, r0, #20
 8009766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009774:	3301      	adds	r3, #1
 8009776:	429a      	cmp	r2, r3
 8009778:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800977c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009780:	fbb2 f6f3 	udiv	r6, r2, r3
 8009784:	d331      	bcc.n	80097ea <quorem+0x9e>
 8009786:	f04f 0e00 	mov.w	lr, #0
 800978a:	4640      	mov	r0, r8
 800978c:	46ac      	mov	ip, r5
 800978e:	46f2      	mov	sl, lr
 8009790:	f850 2b04 	ldr.w	r2, [r0], #4
 8009794:	b293      	uxth	r3, r2
 8009796:	fb06 e303 	mla	r3, r6, r3, lr
 800979a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ebaa 0303 	sub.w	r3, sl, r3
 80097a4:	f8dc a000 	ldr.w	sl, [ip]
 80097a8:	0c12      	lsrs	r2, r2, #16
 80097aa:	fa13 f38a 	uxtah	r3, r3, sl
 80097ae:	fb06 e202 	mla	r2, r6, r2, lr
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	9b00      	ldr	r3, [sp, #0]
 80097b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097ba:	b292      	uxth	r2, r2
 80097bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80097c8:	4581      	cmp	r9, r0
 80097ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ce:	f84c 3b04 	str.w	r3, [ip], #4
 80097d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097d6:	d2db      	bcs.n	8009790 <quorem+0x44>
 80097d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80097dc:	b92b      	cbnz	r3, 80097ea <quorem+0x9e>
 80097de:	9b01      	ldr	r3, [sp, #4]
 80097e0:	3b04      	subs	r3, #4
 80097e2:	429d      	cmp	r5, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	d32e      	bcc.n	8009846 <quorem+0xfa>
 80097e8:	613c      	str	r4, [r7, #16]
 80097ea:	4638      	mov	r0, r7
 80097ec:	f001 fd64 	bl	800b2b8 <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	db24      	blt.n	800983e <quorem+0xf2>
 80097f4:	3601      	adds	r6, #1
 80097f6:	4628      	mov	r0, r5
 80097f8:	f04f 0c00 	mov.w	ip, #0
 80097fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009800:	f8d0 e000 	ldr.w	lr, [r0]
 8009804:	b293      	uxth	r3, r2
 8009806:	ebac 0303 	sub.w	r3, ip, r3
 800980a:	0c12      	lsrs	r2, r2, #16
 800980c:	fa13 f38e 	uxtah	r3, r3, lr
 8009810:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009818:	b29b      	uxth	r3, r3
 800981a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800981e:	45c1      	cmp	r9, r8
 8009820:	f840 3b04 	str.w	r3, [r0], #4
 8009824:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009828:	d2e8      	bcs.n	80097fc <quorem+0xb0>
 800982a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800982e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009832:	b922      	cbnz	r2, 800983e <quorem+0xf2>
 8009834:	3b04      	subs	r3, #4
 8009836:	429d      	cmp	r5, r3
 8009838:	461a      	mov	r2, r3
 800983a:	d30a      	bcc.n	8009852 <quorem+0x106>
 800983c:	613c      	str	r4, [r7, #16]
 800983e:	4630      	mov	r0, r6
 8009840:	b003      	add	sp, #12
 8009842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009846:	6812      	ldr	r2, [r2, #0]
 8009848:	3b04      	subs	r3, #4
 800984a:	2a00      	cmp	r2, #0
 800984c:	d1cc      	bne.n	80097e8 <quorem+0x9c>
 800984e:	3c01      	subs	r4, #1
 8009850:	e7c7      	b.n	80097e2 <quorem+0x96>
 8009852:	6812      	ldr	r2, [r2, #0]
 8009854:	3b04      	subs	r3, #4
 8009856:	2a00      	cmp	r2, #0
 8009858:	d1f0      	bne.n	800983c <quorem+0xf0>
 800985a:	3c01      	subs	r4, #1
 800985c:	e7eb      	b.n	8009836 <quorem+0xea>
 800985e:	2000      	movs	r0, #0
 8009860:	e7ee      	b.n	8009840 <quorem+0xf4>
 8009862:	0000      	movs	r0, r0
 8009864:	0000      	movs	r0, r0
	...

08009868 <_dtoa_r>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	ed2d 8b04 	vpush	{d8-d9}
 8009870:	ec57 6b10 	vmov	r6, r7, d0
 8009874:	b093      	sub	sp, #76	; 0x4c
 8009876:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009878:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800987c:	9106      	str	r1, [sp, #24]
 800987e:	ee10 aa10 	vmov	sl, s0
 8009882:	4604      	mov	r4, r0
 8009884:	9209      	str	r2, [sp, #36]	; 0x24
 8009886:	930c      	str	r3, [sp, #48]	; 0x30
 8009888:	46bb      	mov	fp, r7
 800988a:	b975      	cbnz	r5, 80098aa <_dtoa_r+0x42>
 800988c:	2010      	movs	r0, #16
 800988e:	f001 fa21 	bl	800acd4 <malloc>
 8009892:	4602      	mov	r2, r0
 8009894:	6260      	str	r0, [r4, #36]	; 0x24
 8009896:	b920      	cbnz	r0, 80098a2 <_dtoa_r+0x3a>
 8009898:	4ba7      	ldr	r3, [pc, #668]	; (8009b38 <_dtoa_r+0x2d0>)
 800989a:	21ea      	movs	r1, #234	; 0xea
 800989c:	48a7      	ldr	r0, [pc, #668]	; (8009b3c <_dtoa_r+0x2d4>)
 800989e:	f002 f8fd 	bl	800ba9c <__assert_func>
 80098a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098a6:	6005      	str	r5, [r0, #0]
 80098a8:	60c5      	str	r5, [r0, #12]
 80098aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ac:	6819      	ldr	r1, [r3, #0]
 80098ae:	b151      	cbz	r1, 80098c6 <_dtoa_r+0x5e>
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	604a      	str	r2, [r1, #4]
 80098b4:	2301      	movs	r3, #1
 80098b6:	4093      	lsls	r3, r2
 80098b8:	608b      	str	r3, [r1, #8]
 80098ba:	4620      	mov	r0, r4
 80098bc:	f001 fa70 	bl	800ada0 <_Bfree>
 80098c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	1e3b      	subs	r3, r7, #0
 80098c8:	bfaa      	itet	ge
 80098ca:	2300      	movge	r3, #0
 80098cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80098d0:	f8c8 3000 	strge.w	r3, [r8]
 80098d4:	4b9a      	ldr	r3, [pc, #616]	; (8009b40 <_dtoa_r+0x2d8>)
 80098d6:	bfbc      	itt	lt
 80098d8:	2201      	movlt	r2, #1
 80098da:	f8c8 2000 	strlt.w	r2, [r8]
 80098de:	ea33 030b 	bics.w	r3, r3, fp
 80098e2:	d11b      	bne.n	800991c <_dtoa_r+0xb4>
 80098e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098f0:	4333      	orrs	r3, r6
 80098f2:	f000 8592 	beq.w	800a41a <_dtoa_r+0xbb2>
 80098f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f8:	b963      	cbnz	r3, 8009914 <_dtoa_r+0xac>
 80098fa:	4b92      	ldr	r3, [pc, #584]	; (8009b44 <_dtoa_r+0x2dc>)
 80098fc:	e022      	b.n	8009944 <_dtoa_r+0xdc>
 80098fe:	4b92      	ldr	r3, [pc, #584]	; (8009b48 <_dtoa_r+0x2e0>)
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	3308      	adds	r3, #8
 8009904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	9801      	ldr	r0, [sp, #4]
 800990a:	b013      	add	sp, #76	; 0x4c
 800990c:	ecbd 8b04 	vpop	{d8-d9}
 8009910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009914:	4b8b      	ldr	r3, [pc, #556]	; (8009b44 <_dtoa_r+0x2dc>)
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	3303      	adds	r3, #3
 800991a:	e7f3      	b.n	8009904 <_dtoa_r+0x9c>
 800991c:	2200      	movs	r2, #0
 800991e:	2300      	movs	r3, #0
 8009920:	4650      	mov	r0, sl
 8009922:	4659      	mov	r1, fp
 8009924:	f7f7 f8f0 	bl	8000b08 <__aeabi_dcmpeq>
 8009928:	ec4b ab19 	vmov	d9, sl, fp
 800992c:	4680      	mov	r8, r0
 800992e:	b158      	cbz	r0, 8009948 <_dtoa_r+0xe0>
 8009930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009932:	2301      	movs	r3, #1
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 856b 	beq.w	800a414 <_dtoa_r+0xbac>
 800993e:	4883      	ldr	r0, [pc, #524]	; (8009b4c <_dtoa_r+0x2e4>)
 8009940:	6018      	str	r0, [r3, #0]
 8009942:	1e43      	subs	r3, r0, #1
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	e7df      	b.n	8009908 <_dtoa_r+0xa0>
 8009948:	ec4b ab10 	vmov	d0, sl, fp
 800994c:	aa10      	add	r2, sp, #64	; 0x40
 800994e:	a911      	add	r1, sp, #68	; 0x44
 8009950:	4620      	mov	r0, r4
 8009952:	f001 fdd3 	bl	800b4fc <__d2b>
 8009956:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800995a:	ee08 0a10 	vmov	s16, r0
 800995e:	2d00      	cmp	r5, #0
 8009960:	f000 8084 	beq.w	8009a6c <_dtoa_r+0x204>
 8009964:	ee19 3a90 	vmov	r3, s19
 8009968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800996c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009970:	4656      	mov	r6, sl
 8009972:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800997a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800997e:	4b74      	ldr	r3, [pc, #464]	; (8009b50 <_dtoa_r+0x2e8>)
 8009980:	2200      	movs	r2, #0
 8009982:	4630      	mov	r0, r6
 8009984:	4639      	mov	r1, r7
 8009986:	f7f6 fc9f 	bl	80002c8 <__aeabi_dsub>
 800998a:	a365      	add	r3, pc, #404	; (adr r3, 8009b20 <_dtoa_r+0x2b8>)
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f7f6 fe52 	bl	8000638 <__aeabi_dmul>
 8009994:	a364      	add	r3, pc, #400	; (adr r3, 8009b28 <_dtoa_r+0x2c0>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc97 	bl	80002cc <__adddf3>
 800999e:	4606      	mov	r6, r0
 80099a0:	4628      	mov	r0, r5
 80099a2:	460f      	mov	r7, r1
 80099a4:	f7f6 fdde 	bl	8000564 <__aeabi_i2d>
 80099a8:	a361      	add	r3, pc, #388	; (adr r3, 8009b30 <_dtoa_r+0x2c8>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fe43 	bl	8000638 <__aeabi_dmul>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	4630      	mov	r0, r6
 80099b8:	4639      	mov	r1, r7
 80099ba:	f7f6 fc87 	bl	80002cc <__adddf3>
 80099be:	4606      	mov	r6, r0
 80099c0:	460f      	mov	r7, r1
 80099c2:	f7f7 f8e9 	bl	8000b98 <__aeabi_d2iz>
 80099c6:	2200      	movs	r2, #0
 80099c8:	9000      	str	r0, [sp, #0]
 80099ca:	2300      	movs	r3, #0
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f7 f8a4 	bl	8000b1c <__aeabi_dcmplt>
 80099d4:	b150      	cbz	r0, 80099ec <_dtoa_r+0x184>
 80099d6:	9800      	ldr	r0, [sp, #0]
 80099d8:	f7f6 fdc4 	bl	8000564 <__aeabi_i2d>
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	f7f7 f892 	bl	8000b08 <__aeabi_dcmpeq>
 80099e4:	b910      	cbnz	r0, 80099ec <_dtoa_r+0x184>
 80099e6:	9b00      	ldr	r3, [sp, #0]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	9b00      	ldr	r3, [sp, #0]
 80099ee:	2b16      	cmp	r3, #22
 80099f0:	d85a      	bhi.n	8009aa8 <_dtoa_r+0x240>
 80099f2:	9a00      	ldr	r2, [sp, #0]
 80099f4:	4b57      	ldr	r3, [pc, #348]	; (8009b54 <_dtoa_r+0x2ec>)
 80099f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	ec51 0b19 	vmov	r0, r1, d9
 8009a02:	f7f7 f88b 	bl	8000b1c <__aeabi_dcmplt>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d050      	beq.n	8009aac <_dtoa_r+0x244>
 8009a0a:	9b00      	ldr	r3, [sp, #0]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	2300      	movs	r3, #0
 8009a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a16:	1b5d      	subs	r5, r3, r5
 8009a18:	1e6b      	subs	r3, r5, #1
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	bf45      	ittet	mi
 8009a1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a22:	9304      	strmi	r3, [sp, #16]
 8009a24:	2300      	movpl	r3, #0
 8009a26:	2300      	movmi	r3, #0
 8009a28:	bf4c      	ite	mi
 8009a2a:	9305      	strmi	r3, [sp, #20]
 8009a2c:	9304      	strpl	r3, [sp, #16]
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	db3d      	blt.n	8009ab0 <_dtoa_r+0x248>
 8009a34:	9b05      	ldr	r3, [sp, #20]
 8009a36:	9a00      	ldr	r2, [sp, #0]
 8009a38:	920a      	str	r2, [sp, #40]	; 0x28
 8009a3a:	4413      	add	r3, r2
 8009a3c:	9305      	str	r3, [sp, #20]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9307      	str	r3, [sp, #28]
 8009a42:	9b06      	ldr	r3, [sp, #24]
 8009a44:	2b09      	cmp	r3, #9
 8009a46:	f200 8089 	bhi.w	8009b5c <_dtoa_r+0x2f4>
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	bfc4      	itt	gt
 8009a4e:	3b04      	subgt	r3, #4
 8009a50:	9306      	strgt	r3, [sp, #24]
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	f1a3 0302 	sub.w	r3, r3, #2
 8009a58:	bfcc      	ite	gt
 8009a5a:	2500      	movgt	r5, #0
 8009a5c:	2501      	movle	r5, #1
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	f200 8087 	bhi.w	8009b72 <_dtoa_r+0x30a>
 8009a64:	e8df f003 	tbb	[pc, r3]
 8009a68:	59383a2d 	.word	0x59383a2d
 8009a6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a70:	441d      	add	r5, r3
 8009a72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	bfc1      	itttt	gt
 8009a7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a82:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a8a:	bfda      	itte	le
 8009a8c:	f1c3 0320 	rsble	r3, r3, #32
 8009a90:	fa06 f003 	lslle.w	r0, r6, r3
 8009a94:	4318      	orrgt	r0, r3
 8009a96:	f7f6 fd55 	bl	8000544 <__aeabi_ui2d>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009aa2:	3d01      	subs	r5, #1
 8009aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8009aa6:	e76a      	b.n	800997e <_dtoa_r+0x116>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e7b2      	b.n	8009a12 <_dtoa_r+0x1aa>
 8009aac:	900b      	str	r0, [sp, #44]	; 0x2c
 8009aae:	e7b1      	b.n	8009a14 <_dtoa_r+0x1ac>
 8009ab0:	9b04      	ldr	r3, [sp, #16]
 8009ab2:	9a00      	ldr	r2, [sp, #0]
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	9304      	str	r3, [sp, #16]
 8009ab8:	4253      	negs	r3, r2
 8009aba:	9307      	str	r3, [sp, #28]
 8009abc:	2300      	movs	r3, #0
 8009abe:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac0:	e7bf      	b.n	8009a42 <_dtoa_r+0x1da>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dc55      	bgt.n	8009b78 <_dtoa_r+0x310>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad6:	e00c      	b.n	8009af2 <_dtoa_r+0x28a>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e7f3      	b.n	8009ac4 <_dtoa_r+0x25c>
 8009adc:	2300      	movs	r3, #0
 8009ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae0:	9308      	str	r3, [sp, #32]
 8009ae2:	9b00      	ldr	r3, [sp, #0]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	9302      	str	r3, [sp, #8]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	bfb8      	it	lt
 8009af0:	2301      	movlt	r3, #1
 8009af2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009af4:	2200      	movs	r2, #0
 8009af6:	6042      	str	r2, [r0, #4]
 8009af8:	2204      	movs	r2, #4
 8009afa:	f102 0614 	add.w	r6, r2, #20
 8009afe:	429e      	cmp	r6, r3
 8009b00:	6841      	ldr	r1, [r0, #4]
 8009b02:	d93d      	bls.n	8009b80 <_dtoa_r+0x318>
 8009b04:	4620      	mov	r0, r4
 8009b06:	f001 f90b 	bl	800ad20 <_Balloc>
 8009b0a:	9001      	str	r0, [sp, #4]
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d13b      	bne.n	8009b88 <_dtoa_r+0x320>
 8009b10:	4b11      	ldr	r3, [pc, #68]	; (8009b58 <_dtoa_r+0x2f0>)
 8009b12:	4602      	mov	r2, r0
 8009b14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b18:	e6c0      	b.n	800989c <_dtoa_r+0x34>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7df      	b.n	8009ade <_dtoa_r+0x276>
 8009b1e:	bf00      	nop
 8009b20:	636f4361 	.word	0x636f4361
 8009b24:	3fd287a7 	.word	0x3fd287a7
 8009b28:	8b60c8b3 	.word	0x8b60c8b3
 8009b2c:	3fc68a28 	.word	0x3fc68a28
 8009b30:	509f79fb 	.word	0x509f79fb
 8009b34:	3fd34413 	.word	0x3fd34413
 8009b38:	08029316 	.word	0x08029316
 8009b3c:	0802932d 	.word	0x0802932d
 8009b40:	7ff00000 	.word	0x7ff00000
 8009b44:	08029312 	.word	0x08029312
 8009b48:	08029309 	.word	0x08029309
 8009b4c:	0802918d 	.word	0x0802918d
 8009b50:	3ff80000 	.word	0x3ff80000
 8009b54:	08029498 	.word	0x08029498
 8009b58:	08029388 	.word	0x08029388
 8009b5c:	2501      	movs	r5, #1
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9306      	str	r3, [sp, #24]
 8009b62:	9508      	str	r5, [sp, #32]
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2312      	movs	r3, #18
 8009b70:	e7b0      	b.n	8009ad4 <_dtoa_r+0x26c>
 8009b72:	2301      	movs	r3, #1
 8009b74:	9308      	str	r3, [sp, #32]
 8009b76:	e7f5      	b.n	8009b64 <_dtoa_r+0x2fc>
 8009b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b7e:	e7b8      	b.n	8009af2 <_dtoa_r+0x28a>
 8009b80:	3101      	adds	r1, #1
 8009b82:	6041      	str	r1, [r0, #4]
 8009b84:	0052      	lsls	r2, r2, #1
 8009b86:	e7b8      	b.n	8009afa <_dtoa_r+0x292>
 8009b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b8a:	9a01      	ldr	r2, [sp, #4]
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	2b0e      	cmp	r3, #14
 8009b92:	f200 809d 	bhi.w	8009cd0 <_dtoa_r+0x468>
 8009b96:	2d00      	cmp	r5, #0
 8009b98:	f000 809a 	beq.w	8009cd0 <_dtoa_r+0x468>
 8009b9c:	9b00      	ldr	r3, [sp, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	dd32      	ble.n	8009c08 <_dtoa_r+0x3a0>
 8009ba2:	4ab7      	ldr	r2, [pc, #732]	; (8009e80 <_dtoa_r+0x618>)
 8009ba4:	f003 030f 	and.w	r3, r3, #15
 8009ba8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bb0:	9b00      	ldr	r3, [sp, #0]
 8009bb2:	05d8      	lsls	r0, r3, #23
 8009bb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009bb8:	d516      	bpl.n	8009be8 <_dtoa_r+0x380>
 8009bba:	4bb2      	ldr	r3, [pc, #712]	; (8009e84 <_dtoa_r+0x61c>)
 8009bbc:	ec51 0b19 	vmov	r0, r1, d9
 8009bc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bc4:	f7f6 fe62 	bl	800088c <__aeabi_ddiv>
 8009bc8:	f007 070f 	and.w	r7, r7, #15
 8009bcc:	4682      	mov	sl, r0
 8009bce:	468b      	mov	fp, r1
 8009bd0:	2503      	movs	r5, #3
 8009bd2:	4eac      	ldr	r6, [pc, #688]	; (8009e84 <_dtoa_r+0x61c>)
 8009bd4:	b957      	cbnz	r7, 8009bec <_dtoa_r+0x384>
 8009bd6:	4642      	mov	r2, r8
 8009bd8:	464b      	mov	r3, r9
 8009bda:	4650      	mov	r0, sl
 8009bdc:	4659      	mov	r1, fp
 8009bde:	f7f6 fe55 	bl	800088c <__aeabi_ddiv>
 8009be2:	4682      	mov	sl, r0
 8009be4:	468b      	mov	fp, r1
 8009be6:	e028      	b.n	8009c3a <_dtoa_r+0x3d2>
 8009be8:	2502      	movs	r5, #2
 8009bea:	e7f2      	b.n	8009bd2 <_dtoa_r+0x36a>
 8009bec:	07f9      	lsls	r1, r7, #31
 8009bee:	d508      	bpl.n	8009c02 <_dtoa_r+0x39a>
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bf8:	f7f6 fd1e 	bl	8000638 <__aeabi_dmul>
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	4680      	mov	r8, r0
 8009c00:	4689      	mov	r9, r1
 8009c02:	107f      	asrs	r7, r7, #1
 8009c04:	3608      	adds	r6, #8
 8009c06:	e7e5      	b.n	8009bd4 <_dtoa_r+0x36c>
 8009c08:	f000 809b 	beq.w	8009d42 <_dtoa_r+0x4da>
 8009c0c:	9b00      	ldr	r3, [sp, #0]
 8009c0e:	4f9d      	ldr	r7, [pc, #628]	; (8009e84 <_dtoa_r+0x61c>)
 8009c10:	425e      	negs	r6, r3
 8009c12:	4b9b      	ldr	r3, [pc, #620]	; (8009e80 <_dtoa_r+0x618>)
 8009c14:	f006 020f 	and.w	r2, r6, #15
 8009c18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	ec51 0b19 	vmov	r0, r1, d9
 8009c24:	f7f6 fd08 	bl	8000638 <__aeabi_dmul>
 8009c28:	1136      	asrs	r6, r6, #4
 8009c2a:	4682      	mov	sl, r0
 8009c2c:	468b      	mov	fp, r1
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2502      	movs	r5, #2
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	d17a      	bne.n	8009d2c <_dtoa_r+0x4c4>
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1d3      	bne.n	8009be2 <_dtoa_r+0x37a>
 8009c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 8082 	beq.w	8009d46 <_dtoa_r+0x4de>
 8009c42:	4b91      	ldr	r3, [pc, #580]	; (8009e88 <_dtoa_r+0x620>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	4650      	mov	r0, sl
 8009c48:	4659      	mov	r1, fp
 8009c4a:	f7f6 ff67 	bl	8000b1c <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d079      	beq.n	8009d46 <_dtoa_r+0x4de>
 8009c52:	9b03      	ldr	r3, [sp, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d076      	beq.n	8009d46 <_dtoa_r+0x4de>
 8009c58:	9b02      	ldr	r3, [sp, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	dd36      	ble.n	8009ccc <_dtoa_r+0x464>
 8009c5e:	9b00      	ldr	r3, [sp, #0]
 8009c60:	4650      	mov	r0, sl
 8009c62:	4659      	mov	r1, fp
 8009c64:	1e5f      	subs	r7, r3, #1
 8009c66:	2200      	movs	r2, #0
 8009c68:	4b88      	ldr	r3, [pc, #544]	; (8009e8c <_dtoa_r+0x624>)
 8009c6a:	f7f6 fce5 	bl	8000638 <__aeabi_dmul>
 8009c6e:	9e02      	ldr	r6, [sp, #8]
 8009c70:	4682      	mov	sl, r0
 8009c72:	468b      	mov	fp, r1
 8009c74:	3501      	adds	r5, #1
 8009c76:	4628      	mov	r0, r5
 8009c78:	f7f6 fc74 	bl	8000564 <__aeabi_i2d>
 8009c7c:	4652      	mov	r2, sl
 8009c7e:	465b      	mov	r3, fp
 8009c80:	f7f6 fcda 	bl	8000638 <__aeabi_dmul>
 8009c84:	4b82      	ldr	r3, [pc, #520]	; (8009e90 <_dtoa_r+0x628>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	f7f6 fb20 	bl	80002cc <__adddf3>
 8009c8c:	46d0      	mov	r8, sl
 8009c8e:	46d9      	mov	r9, fp
 8009c90:	4682      	mov	sl, r0
 8009c92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c96:	2e00      	cmp	r6, #0
 8009c98:	d158      	bne.n	8009d4c <_dtoa_r+0x4e4>
 8009c9a:	4b7e      	ldr	r3, [pc, #504]	; (8009e94 <_dtoa_r+0x62c>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	f7f6 fb11 	bl	80002c8 <__aeabi_dsub>
 8009ca6:	4652      	mov	r2, sl
 8009ca8:	465b      	mov	r3, fp
 8009caa:	4680      	mov	r8, r0
 8009cac:	4689      	mov	r9, r1
 8009cae:	f7f6 ff53 	bl	8000b58 <__aeabi_dcmpgt>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	f040 8295 	bne.w	800a1e2 <_dtoa_r+0x97a>
 8009cb8:	4652      	mov	r2, sl
 8009cba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	f7f6 ff2b 	bl	8000b1c <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f040 8289 	bne.w	800a1de <_dtoa_r+0x976>
 8009ccc:	ec5b ab19 	vmov	sl, fp, d9
 8009cd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f2c0 8148 	blt.w	8009f68 <_dtoa_r+0x700>
 8009cd8:	9a00      	ldr	r2, [sp, #0]
 8009cda:	2a0e      	cmp	r2, #14
 8009cdc:	f300 8144 	bgt.w	8009f68 <_dtoa_r+0x700>
 8009ce0:	4b67      	ldr	r3, [pc, #412]	; (8009e80 <_dtoa_r+0x618>)
 8009ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ce6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f280 80d5 	bge.w	8009e9c <_dtoa_r+0x634>
 8009cf2:	9b03      	ldr	r3, [sp, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f300 80d1 	bgt.w	8009e9c <_dtoa_r+0x634>
 8009cfa:	f040 826f 	bne.w	800a1dc <_dtoa_r+0x974>
 8009cfe:	4b65      	ldr	r3, [pc, #404]	; (8009e94 <_dtoa_r+0x62c>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	4640      	mov	r0, r8
 8009d04:	4649      	mov	r1, r9
 8009d06:	f7f6 fc97 	bl	8000638 <__aeabi_dmul>
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	465b      	mov	r3, fp
 8009d0e:	f7f6 ff19 	bl	8000b44 <__aeabi_dcmpge>
 8009d12:	9e03      	ldr	r6, [sp, #12]
 8009d14:	4637      	mov	r7, r6
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f040 8245 	bne.w	800a1a6 <_dtoa_r+0x93e>
 8009d1c:	9d01      	ldr	r5, [sp, #4]
 8009d1e:	2331      	movs	r3, #49	; 0x31
 8009d20:	f805 3b01 	strb.w	r3, [r5], #1
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	3301      	adds	r3, #1
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	e240      	b.n	800a1ae <_dtoa_r+0x946>
 8009d2c:	07f2      	lsls	r2, r6, #31
 8009d2e:	d505      	bpl.n	8009d3c <_dtoa_r+0x4d4>
 8009d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d34:	f7f6 fc80 	bl	8000638 <__aeabi_dmul>
 8009d38:	3501      	adds	r5, #1
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	1076      	asrs	r6, r6, #1
 8009d3e:	3708      	adds	r7, #8
 8009d40:	e777      	b.n	8009c32 <_dtoa_r+0x3ca>
 8009d42:	2502      	movs	r5, #2
 8009d44:	e779      	b.n	8009c3a <_dtoa_r+0x3d2>
 8009d46:	9f00      	ldr	r7, [sp, #0]
 8009d48:	9e03      	ldr	r6, [sp, #12]
 8009d4a:	e794      	b.n	8009c76 <_dtoa_r+0x40e>
 8009d4c:	9901      	ldr	r1, [sp, #4]
 8009d4e:	4b4c      	ldr	r3, [pc, #304]	; (8009e80 <_dtoa_r+0x618>)
 8009d50:	4431      	add	r1, r6
 8009d52:	910d      	str	r1, [sp, #52]	; 0x34
 8009d54:	9908      	ldr	r1, [sp, #32]
 8009d56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d5e:	2900      	cmp	r1, #0
 8009d60:	d043      	beq.n	8009dea <_dtoa_r+0x582>
 8009d62:	494d      	ldr	r1, [pc, #308]	; (8009e98 <_dtoa_r+0x630>)
 8009d64:	2000      	movs	r0, #0
 8009d66:	f7f6 fd91 	bl	800088c <__aeabi_ddiv>
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	f7f6 faab 	bl	80002c8 <__aeabi_dsub>
 8009d72:	9d01      	ldr	r5, [sp, #4]
 8009d74:	4682      	mov	sl, r0
 8009d76:	468b      	mov	fp, r1
 8009d78:	4649      	mov	r1, r9
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f7f6 ff0c 	bl	8000b98 <__aeabi_d2iz>
 8009d80:	4606      	mov	r6, r0
 8009d82:	f7f6 fbef 	bl	8000564 <__aeabi_i2d>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	f7f6 fa9b 	bl	80002c8 <__aeabi_dsub>
 8009d92:	3630      	adds	r6, #48	; 0x30
 8009d94:	f805 6b01 	strb.w	r6, [r5], #1
 8009d98:	4652      	mov	r2, sl
 8009d9a:	465b      	mov	r3, fp
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	f7f6 febc 	bl	8000b1c <__aeabi_dcmplt>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d163      	bne.n	8009e70 <_dtoa_r+0x608>
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	4936      	ldr	r1, [pc, #216]	; (8009e88 <_dtoa_r+0x620>)
 8009dae:	2000      	movs	r0, #0
 8009db0:	f7f6 fa8a 	bl	80002c8 <__aeabi_dsub>
 8009db4:	4652      	mov	r2, sl
 8009db6:	465b      	mov	r3, fp
 8009db8:	f7f6 feb0 	bl	8000b1c <__aeabi_dcmplt>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f040 80b5 	bne.w	8009f2c <_dtoa_r+0x6c4>
 8009dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dc4:	429d      	cmp	r5, r3
 8009dc6:	d081      	beq.n	8009ccc <_dtoa_r+0x464>
 8009dc8:	4b30      	ldr	r3, [pc, #192]	; (8009e8c <_dtoa_r+0x624>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	4650      	mov	r0, sl
 8009dce:	4659      	mov	r1, fp
 8009dd0:	f7f6 fc32 	bl	8000638 <__aeabi_dmul>
 8009dd4:	4b2d      	ldr	r3, [pc, #180]	; (8009e8c <_dtoa_r+0x624>)
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	468b      	mov	fp, r1
 8009dda:	4640      	mov	r0, r8
 8009ddc:	4649      	mov	r1, r9
 8009dde:	2200      	movs	r2, #0
 8009de0:	f7f6 fc2a 	bl	8000638 <__aeabi_dmul>
 8009de4:	4680      	mov	r8, r0
 8009de6:	4689      	mov	r9, r1
 8009de8:	e7c6      	b.n	8009d78 <_dtoa_r+0x510>
 8009dea:	4650      	mov	r0, sl
 8009dec:	4659      	mov	r1, fp
 8009dee:	f7f6 fc23 	bl	8000638 <__aeabi_dmul>
 8009df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df4:	9d01      	ldr	r5, [sp, #4]
 8009df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df8:	4682      	mov	sl, r0
 8009dfa:	468b      	mov	fp, r1
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	4640      	mov	r0, r8
 8009e00:	f7f6 feca 	bl	8000b98 <__aeabi_d2iz>
 8009e04:	4606      	mov	r6, r0
 8009e06:	f7f6 fbad 	bl	8000564 <__aeabi_i2d>
 8009e0a:	3630      	adds	r6, #48	; 0x30
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4640      	mov	r0, r8
 8009e12:	4649      	mov	r1, r9
 8009e14:	f7f6 fa58 	bl	80002c8 <__aeabi_dsub>
 8009e18:	f805 6b01 	strb.w	r6, [r5], #1
 8009e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e1e:	429d      	cmp	r5, r3
 8009e20:	4680      	mov	r8, r0
 8009e22:	4689      	mov	r9, r1
 8009e24:	f04f 0200 	mov.w	r2, #0
 8009e28:	d124      	bne.n	8009e74 <_dtoa_r+0x60c>
 8009e2a:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <_dtoa_r+0x630>)
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	4659      	mov	r1, fp
 8009e30:	f7f6 fa4c 	bl	80002cc <__adddf3>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	f7f6 fe8c 	bl	8000b58 <__aeabi_dcmpgt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d173      	bne.n	8009f2c <_dtoa_r+0x6c4>
 8009e44:	4652      	mov	r2, sl
 8009e46:	465b      	mov	r3, fp
 8009e48:	4913      	ldr	r1, [pc, #76]	; (8009e98 <_dtoa_r+0x630>)
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f7f6 fa3c 	bl	80002c8 <__aeabi_dsub>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4640      	mov	r0, r8
 8009e56:	4649      	mov	r1, r9
 8009e58:	f7f6 fe60 	bl	8000b1c <__aeabi_dcmplt>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	f43f af35 	beq.w	8009ccc <_dtoa_r+0x464>
 8009e62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e64:	1e6b      	subs	r3, r5, #1
 8009e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e6c:	2b30      	cmp	r3, #48	; 0x30
 8009e6e:	d0f8      	beq.n	8009e62 <_dtoa_r+0x5fa>
 8009e70:	9700      	str	r7, [sp, #0]
 8009e72:	e049      	b.n	8009f08 <_dtoa_r+0x6a0>
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <_dtoa_r+0x624>)
 8009e76:	f7f6 fbdf 	bl	8000638 <__aeabi_dmul>
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	4689      	mov	r9, r1
 8009e7e:	e7bd      	b.n	8009dfc <_dtoa_r+0x594>
 8009e80:	08029498 	.word	0x08029498
 8009e84:	08029470 	.word	0x08029470
 8009e88:	3ff00000 	.word	0x3ff00000
 8009e8c:	40240000 	.word	0x40240000
 8009e90:	401c0000 	.word	0x401c0000
 8009e94:	40140000 	.word	0x40140000
 8009e98:	3fe00000 	.word	0x3fe00000
 8009e9c:	9d01      	ldr	r5, [sp, #4]
 8009e9e:	4656      	mov	r6, sl
 8009ea0:	465f      	mov	r7, fp
 8009ea2:	4642      	mov	r2, r8
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	f7f6 fcef 	bl	800088c <__aeabi_ddiv>
 8009eae:	f7f6 fe73 	bl	8000b98 <__aeabi_d2iz>
 8009eb2:	4682      	mov	sl, r0
 8009eb4:	f7f6 fb56 	bl	8000564 <__aeabi_i2d>
 8009eb8:	4642      	mov	r2, r8
 8009eba:	464b      	mov	r3, r9
 8009ebc:	f7f6 fbbc 	bl	8000638 <__aeabi_dmul>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ecc:	f7f6 f9fc 	bl	80002c8 <__aeabi_dsub>
 8009ed0:	f805 6b01 	strb.w	r6, [r5], #1
 8009ed4:	9e01      	ldr	r6, [sp, #4]
 8009ed6:	9f03      	ldr	r7, [sp, #12]
 8009ed8:	1bae      	subs	r6, r5, r6
 8009eda:	42b7      	cmp	r7, r6
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	d135      	bne.n	8009f4e <_dtoa_r+0x6e6>
 8009ee2:	f7f6 f9f3 	bl	80002cc <__adddf3>
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	464b      	mov	r3, r9
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	f7f6 fe33 	bl	8000b58 <__aeabi_dcmpgt>
 8009ef2:	b9d0      	cbnz	r0, 8009f2a <_dtoa_r+0x6c2>
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f7f6 fe04 	bl	8000b08 <__aeabi_dcmpeq>
 8009f00:	b110      	cbz	r0, 8009f08 <_dtoa_r+0x6a0>
 8009f02:	f01a 0f01 	tst.w	sl, #1
 8009f06:	d110      	bne.n	8009f2a <_dtoa_r+0x6c2>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	ee18 1a10 	vmov	r1, s16
 8009f0e:	f000 ff47 	bl	800ada0 <_Bfree>
 8009f12:	2300      	movs	r3, #0
 8009f14:	9800      	ldr	r0, [sp, #0]
 8009f16:	702b      	strb	r3, [r5, #0]
 8009f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	6018      	str	r0, [r3, #0]
 8009f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f43f acf1 	beq.w	8009908 <_dtoa_r+0xa0>
 8009f26:	601d      	str	r5, [r3, #0]
 8009f28:	e4ee      	b.n	8009908 <_dtoa_r+0xa0>
 8009f2a:	9f00      	ldr	r7, [sp, #0]
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	461d      	mov	r5, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a39      	cmp	r2, #57	; 0x39
 8009f36:	d106      	bne.n	8009f46 <_dtoa_r+0x6de>
 8009f38:	9a01      	ldr	r2, [sp, #4]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d1f7      	bne.n	8009f2e <_dtoa_r+0x6c6>
 8009f3e:	9901      	ldr	r1, [sp, #4]
 8009f40:	2230      	movs	r2, #48	; 0x30
 8009f42:	3701      	adds	r7, #1
 8009f44:	700a      	strb	r2, [r1, #0]
 8009f46:	781a      	ldrb	r2, [r3, #0]
 8009f48:	3201      	adds	r2, #1
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	e790      	b.n	8009e70 <_dtoa_r+0x608>
 8009f4e:	4ba6      	ldr	r3, [pc, #664]	; (800a1e8 <_dtoa_r+0x980>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	f7f6 fb71 	bl	8000638 <__aeabi_dmul>
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460f      	mov	r7, r1
 8009f5e:	f7f6 fdd3 	bl	8000b08 <__aeabi_dcmpeq>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d09d      	beq.n	8009ea2 <_dtoa_r+0x63a>
 8009f66:	e7cf      	b.n	8009f08 <_dtoa_r+0x6a0>
 8009f68:	9a08      	ldr	r2, [sp, #32]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	f000 80d7 	beq.w	800a11e <_dtoa_r+0x8b6>
 8009f70:	9a06      	ldr	r2, [sp, #24]
 8009f72:	2a01      	cmp	r2, #1
 8009f74:	f300 80ba 	bgt.w	800a0ec <_dtoa_r+0x884>
 8009f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f7a:	2a00      	cmp	r2, #0
 8009f7c:	f000 80b2 	beq.w	800a0e4 <_dtoa_r+0x87c>
 8009f80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f84:	9e07      	ldr	r6, [sp, #28]
 8009f86:	9d04      	ldr	r5, [sp, #16]
 8009f88:	9a04      	ldr	r2, [sp, #16]
 8009f8a:	441a      	add	r2, r3
 8009f8c:	9204      	str	r2, [sp, #16]
 8009f8e:	9a05      	ldr	r2, [sp, #20]
 8009f90:	2101      	movs	r1, #1
 8009f92:	441a      	add	r2, r3
 8009f94:	4620      	mov	r0, r4
 8009f96:	9205      	str	r2, [sp, #20]
 8009f98:	f001 f804 	bl	800afa4 <__i2b>
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	dd0c      	ble.n	8009fbc <_dtoa_r+0x754>
 8009fa2:	9b05      	ldr	r3, [sp, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dd09      	ble.n	8009fbc <_dtoa_r+0x754>
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	9a04      	ldr	r2, [sp, #16]
 8009fac:	bfa8      	it	ge
 8009fae:	462b      	movge	r3, r5
 8009fb0:	1ad2      	subs	r2, r2, r3
 8009fb2:	9204      	str	r2, [sp, #16]
 8009fb4:	9a05      	ldr	r2, [sp, #20]
 8009fb6:	1aed      	subs	r5, r5, r3
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	9305      	str	r3, [sp, #20]
 8009fbc:	9b07      	ldr	r3, [sp, #28]
 8009fbe:	b31b      	cbz	r3, 800a008 <_dtoa_r+0x7a0>
 8009fc0:	9b08      	ldr	r3, [sp, #32]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 80af 	beq.w	800a126 <_dtoa_r+0x8be>
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	dd13      	ble.n	8009ff4 <_dtoa_r+0x78c>
 8009fcc:	4639      	mov	r1, r7
 8009fce:	4632      	mov	r2, r6
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f001 f8a7 	bl	800b124 <__pow5mult>
 8009fd6:	ee18 2a10 	vmov	r2, s16
 8009fda:	4601      	mov	r1, r0
 8009fdc:	4607      	mov	r7, r0
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fff6 	bl	800afd0 <__multiply>
 8009fe4:	ee18 1a10 	vmov	r1, s16
 8009fe8:	4680      	mov	r8, r0
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fed8 	bl	800ada0 <_Bfree>
 8009ff0:	ee08 8a10 	vmov	s16, r8
 8009ff4:	9b07      	ldr	r3, [sp, #28]
 8009ff6:	1b9a      	subs	r2, r3, r6
 8009ff8:	d006      	beq.n	800a008 <_dtoa_r+0x7a0>
 8009ffa:	ee18 1a10 	vmov	r1, s16
 8009ffe:	4620      	mov	r0, r4
 800a000:	f001 f890 	bl	800b124 <__pow5mult>
 800a004:	ee08 0a10 	vmov	s16, r0
 800a008:	2101      	movs	r1, #1
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 ffca 	bl	800afa4 <__i2b>
 800a010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a012:	2b00      	cmp	r3, #0
 800a014:	4606      	mov	r6, r0
 800a016:	f340 8088 	ble.w	800a12a <_dtoa_r+0x8c2>
 800a01a:	461a      	mov	r2, r3
 800a01c:	4601      	mov	r1, r0
 800a01e:	4620      	mov	r0, r4
 800a020:	f001 f880 	bl	800b124 <__pow5mult>
 800a024:	9b06      	ldr	r3, [sp, #24]
 800a026:	2b01      	cmp	r3, #1
 800a028:	4606      	mov	r6, r0
 800a02a:	f340 8081 	ble.w	800a130 <_dtoa_r+0x8c8>
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	6933      	ldr	r3, [r6, #16]
 800a034:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a038:	6918      	ldr	r0, [r3, #16]
 800a03a:	f000 ff63 	bl	800af04 <__hi0bits>
 800a03e:	f1c0 0020 	rsb	r0, r0, #32
 800a042:	9b05      	ldr	r3, [sp, #20]
 800a044:	4418      	add	r0, r3
 800a046:	f010 001f 	ands.w	r0, r0, #31
 800a04a:	f000 8092 	beq.w	800a172 <_dtoa_r+0x90a>
 800a04e:	f1c0 0320 	rsb	r3, r0, #32
 800a052:	2b04      	cmp	r3, #4
 800a054:	f340 808a 	ble.w	800a16c <_dtoa_r+0x904>
 800a058:	f1c0 001c 	rsb	r0, r0, #28
 800a05c:	9b04      	ldr	r3, [sp, #16]
 800a05e:	4403      	add	r3, r0
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	9b05      	ldr	r3, [sp, #20]
 800a064:	4403      	add	r3, r0
 800a066:	4405      	add	r5, r0
 800a068:	9305      	str	r3, [sp, #20]
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dd07      	ble.n	800a080 <_dtoa_r+0x818>
 800a070:	ee18 1a10 	vmov	r1, s16
 800a074:	461a      	mov	r2, r3
 800a076:	4620      	mov	r0, r4
 800a078:	f001 f8ae 	bl	800b1d8 <__lshift>
 800a07c:	ee08 0a10 	vmov	s16, r0
 800a080:	9b05      	ldr	r3, [sp, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	dd05      	ble.n	800a092 <_dtoa_r+0x82a>
 800a086:	4631      	mov	r1, r6
 800a088:	461a      	mov	r2, r3
 800a08a:	4620      	mov	r0, r4
 800a08c:	f001 f8a4 	bl	800b1d8 <__lshift>
 800a090:	4606      	mov	r6, r0
 800a092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d06e      	beq.n	800a176 <_dtoa_r+0x90e>
 800a098:	ee18 0a10 	vmov	r0, s16
 800a09c:	4631      	mov	r1, r6
 800a09e:	f001 f90b 	bl	800b2b8 <__mcmp>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	da67      	bge.n	800a176 <_dtoa_r+0x90e>
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	ee18 1a10 	vmov	r1, s16
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f000 fe95 	bl	800ade4 <__multadd>
 800a0ba:	9b08      	ldr	r3, [sp, #32]
 800a0bc:	ee08 0a10 	vmov	s16, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 81b1 	beq.w	800a428 <_dtoa_r+0xbc0>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 fe89 	bl	800ade4 <__multadd>
 800a0d2:	9b02      	ldr	r3, [sp, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	f300 808e 	bgt.w	800a1f8 <_dtoa_r+0x990>
 800a0dc:	9b06      	ldr	r3, [sp, #24]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	dc51      	bgt.n	800a186 <_dtoa_r+0x91e>
 800a0e2:	e089      	b.n	800a1f8 <_dtoa_r+0x990>
 800a0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ea:	e74b      	b.n	8009f84 <_dtoa_r+0x71c>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	1e5e      	subs	r6, r3, #1
 800a0f0:	9b07      	ldr	r3, [sp, #28]
 800a0f2:	42b3      	cmp	r3, r6
 800a0f4:	bfbf      	itttt	lt
 800a0f6:	9b07      	ldrlt	r3, [sp, #28]
 800a0f8:	9607      	strlt	r6, [sp, #28]
 800a0fa:	1af2      	sublt	r2, r6, r3
 800a0fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0fe:	bfb6      	itet	lt
 800a100:	189b      	addlt	r3, r3, r2
 800a102:	1b9e      	subge	r6, r3, r6
 800a104:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	bfb8      	it	lt
 800a10a:	2600      	movlt	r6, #0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bfb7      	itett	lt
 800a110:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a114:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a118:	1a9d      	sublt	r5, r3, r2
 800a11a:	2300      	movlt	r3, #0
 800a11c:	e734      	b.n	8009f88 <_dtoa_r+0x720>
 800a11e:	9e07      	ldr	r6, [sp, #28]
 800a120:	9d04      	ldr	r5, [sp, #16]
 800a122:	9f08      	ldr	r7, [sp, #32]
 800a124:	e73b      	b.n	8009f9e <_dtoa_r+0x736>
 800a126:	9a07      	ldr	r2, [sp, #28]
 800a128:	e767      	b.n	8009ffa <_dtoa_r+0x792>
 800a12a:	9b06      	ldr	r3, [sp, #24]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	dc18      	bgt.n	800a162 <_dtoa_r+0x8fa>
 800a130:	f1ba 0f00 	cmp.w	sl, #0
 800a134:	d115      	bne.n	800a162 <_dtoa_r+0x8fa>
 800a136:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a13a:	b993      	cbnz	r3, 800a162 <_dtoa_r+0x8fa>
 800a13c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a140:	0d1b      	lsrs	r3, r3, #20
 800a142:	051b      	lsls	r3, r3, #20
 800a144:	b183      	cbz	r3, 800a168 <_dtoa_r+0x900>
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	3301      	adds	r3, #1
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	9b05      	ldr	r3, [sp, #20]
 800a14e:	3301      	adds	r3, #1
 800a150:	9305      	str	r3, [sp, #20]
 800a152:	f04f 0801 	mov.w	r8, #1
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f47f af6a 	bne.w	800a032 <_dtoa_r+0x7ca>
 800a15e:	2001      	movs	r0, #1
 800a160:	e76f      	b.n	800a042 <_dtoa_r+0x7da>
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	e7f6      	b.n	800a156 <_dtoa_r+0x8ee>
 800a168:	4698      	mov	r8, r3
 800a16a:	e7f4      	b.n	800a156 <_dtoa_r+0x8ee>
 800a16c:	f43f af7d 	beq.w	800a06a <_dtoa_r+0x802>
 800a170:	4618      	mov	r0, r3
 800a172:	301c      	adds	r0, #28
 800a174:	e772      	b.n	800a05c <_dtoa_r+0x7f4>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dc37      	bgt.n	800a1ec <_dtoa_r+0x984>
 800a17c:	9b06      	ldr	r3, [sp, #24]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	dd34      	ble.n	800a1ec <_dtoa_r+0x984>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	9302      	str	r3, [sp, #8]
 800a186:	9b02      	ldr	r3, [sp, #8]
 800a188:	b96b      	cbnz	r3, 800a1a6 <_dtoa_r+0x93e>
 800a18a:	4631      	mov	r1, r6
 800a18c:	2205      	movs	r2, #5
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 fe28 	bl	800ade4 <__multadd>
 800a194:	4601      	mov	r1, r0
 800a196:	4606      	mov	r6, r0
 800a198:	ee18 0a10 	vmov	r0, s16
 800a19c:	f001 f88c 	bl	800b2b8 <__mcmp>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f73f adbb 	bgt.w	8009d1c <_dtoa_r+0x4b4>
 800a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a8:	9d01      	ldr	r5, [sp, #4]
 800a1aa:	43db      	mvns	r3, r3
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	f04f 0800 	mov.w	r8, #0
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 fdf3 	bl	800ada0 <_Bfree>
 800a1ba:	2f00      	cmp	r7, #0
 800a1bc:	f43f aea4 	beq.w	8009f08 <_dtoa_r+0x6a0>
 800a1c0:	f1b8 0f00 	cmp.w	r8, #0
 800a1c4:	d005      	beq.n	800a1d2 <_dtoa_r+0x96a>
 800a1c6:	45b8      	cmp	r8, r7
 800a1c8:	d003      	beq.n	800a1d2 <_dtoa_r+0x96a>
 800a1ca:	4641      	mov	r1, r8
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fde7 	bl	800ada0 <_Bfree>
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fde3 	bl	800ada0 <_Bfree>
 800a1da:	e695      	b.n	8009f08 <_dtoa_r+0x6a0>
 800a1dc:	2600      	movs	r6, #0
 800a1de:	4637      	mov	r7, r6
 800a1e0:	e7e1      	b.n	800a1a6 <_dtoa_r+0x93e>
 800a1e2:	9700      	str	r7, [sp, #0]
 800a1e4:	4637      	mov	r7, r6
 800a1e6:	e599      	b.n	8009d1c <_dtoa_r+0x4b4>
 800a1e8:	40240000 	.word	0x40240000
 800a1ec:	9b08      	ldr	r3, [sp, #32]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 80ca 	beq.w	800a388 <_dtoa_r+0xb20>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	9302      	str	r3, [sp, #8]
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	dd05      	ble.n	800a208 <_dtoa_r+0x9a0>
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	462a      	mov	r2, r5
 800a200:	4620      	mov	r0, r4
 800a202:	f000 ffe9 	bl	800b1d8 <__lshift>
 800a206:	4607      	mov	r7, r0
 800a208:	f1b8 0f00 	cmp.w	r8, #0
 800a20c:	d05b      	beq.n	800a2c6 <_dtoa_r+0xa5e>
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	4620      	mov	r0, r4
 800a212:	f000 fd85 	bl	800ad20 <_Balloc>
 800a216:	4605      	mov	r5, r0
 800a218:	b928      	cbnz	r0, 800a226 <_dtoa_r+0x9be>
 800a21a:	4b87      	ldr	r3, [pc, #540]	; (800a438 <_dtoa_r+0xbd0>)
 800a21c:	4602      	mov	r2, r0
 800a21e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a222:	f7ff bb3b 	b.w	800989c <_dtoa_r+0x34>
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	3202      	adds	r2, #2
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	f107 010c 	add.w	r1, r7, #12
 800a230:	300c      	adds	r0, #12
 800a232:	f7fd fbaa 	bl	800798a <memcpy>
 800a236:	2201      	movs	r2, #1
 800a238:	4629      	mov	r1, r5
 800a23a:	4620      	mov	r0, r4
 800a23c:	f000 ffcc 	bl	800b1d8 <__lshift>
 800a240:	9b01      	ldr	r3, [sp, #4]
 800a242:	f103 0901 	add.w	r9, r3, #1
 800a246:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a24a:	4413      	add	r3, r2
 800a24c:	9305      	str	r3, [sp, #20]
 800a24e:	f00a 0301 	and.w	r3, sl, #1
 800a252:	46b8      	mov	r8, r7
 800a254:	9304      	str	r3, [sp, #16]
 800a256:	4607      	mov	r7, r0
 800a258:	4631      	mov	r1, r6
 800a25a:	ee18 0a10 	vmov	r0, s16
 800a25e:	f7ff fa75 	bl	800974c <quorem>
 800a262:	4641      	mov	r1, r8
 800a264:	9002      	str	r0, [sp, #8]
 800a266:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a26a:	ee18 0a10 	vmov	r0, s16
 800a26e:	f001 f823 	bl	800b2b8 <__mcmp>
 800a272:	463a      	mov	r2, r7
 800a274:	9003      	str	r0, [sp, #12]
 800a276:	4631      	mov	r1, r6
 800a278:	4620      	mov	r0, r4
 800a27a:	f001 f839 	bl	800b2f0 <__mdiff>
 800a27e:	68c2      	ldr	r2, [r0, #12]
 800a280:	f109 3bff 	add.w	fp, r9, #4294967295
 800a284:	4605      	mov	r5, r0
 800a286:	bb02      	cbnz	r2, 800a2ca <_dtoa_r+0xa62>
 800a288:	4601      	mov	r1, r0
 800a28a:	ee18 0a10 	vmov	r0, s16
 800a28e:	f001 f813 	bl	800b2b8 <__mcmp>
 800a292:	4602      	mov	r2, r0
 800a294:	4629      	mov	r1, r5
 800a296:	4620      	mov	r0, r4
 800a298:	9207      	str	r2, [sp, #28]
 800a29a:	f000 fd81 	bl	800ada0 <_Bfree>
 800a29e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a2a2:	ea43 0102 	orr.w	r1, r3, r2
 800a2a6:	9b04      	ldr	r3, [sp, #16]
 800a2a8:	430b      	orrs	r3, r1
 800a2aa:	464d      	mov	r5, r9
 800a2ac:	d10f      	bne.n	800a2ce <_dtoa_r+0xa66>
 800a2ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2b2:	d02a      	beq.n	800a30a <_dtoa_r+0xaa2>
 800a2b4:	9b03      	ldr	r3, [sp, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dd02      	ble.n	800a2c0 <_dtoa_r+0xa58>
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a2c0:	f88b a000 	strb.w	sl, [fp]
 800a2c4:	e775      	b.n	800a1b2 <_dtoa_r+0x94a>
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	e7ba      	b.n	800a240 <_dtoa_r+0x9d8>
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	e7e2      	b.n	800a294 <_dtoa_r+0xa2c>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	db04      	blt.n	800a2de <_dtoa_r+0xa76>
 800a2d4:	9906      	ldr	r1, [sp, #24]
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	9904      	ldr	r1, [sp, #16]
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	d122      	bne.n	800a324 <_dtoa_r+0xabc>
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	ddee      	ble.n	800a2c0 <_dtoa_r+0xa58>
 800a2e2:	ee18 1a10 	vmov	r1, s16
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 ff75 	bl	800b1d8 <__lshift>
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	ee08 0a10 	vmov	s16, r0
 800a2f4:	f000 ffe0 	bl	800b2b8 <__mcmp>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	dc03      	bgt.n	800a304 <_dtoa_r+0xa9c>
 800a2fc:	d1e0      	bne.n	800a2c0 <_dtoa_r+0xa58>
 800a2fe:	f01a 0f01 	tst.w	sl, #1
 800a302:	d0dd      	beq.n	800a2c0 <_dtoa_r+0xa58>
 800a304:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a308:	d1d7      	bne.n	800a2ba <_dtoa_r+0xa52>
 800a30a:	2339      	movs	r3, #57	; 0x39
 800a30c:	f88b 3000 	strb.w	r3, [fp]
 800a310:	462b      	mov	r3, r5
 800a312:	461d      	mov	r5, r3
 800a314:	3b01      	subs	r3, #1
 800a316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a31a:	2a39      	cmp	r2, #57	; 0x39
 800a31c:	d071      	beq.n	800a402 <_dtoa_r+0xb9a>
 800a31e:	3201      	adds	r2, #1
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	e746      	b.n	800a1b2 <_dtoa_r+0x94a>
 800a324:	2a00      	cmp	r2, #0
 800a326:	dd07      	ble.n	800a338 <_dtoa_r+0xad0>
 800a328:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a32c:	d0ed      	beq.n	800a30a <_dtoa_r+0xaa2>
 800a32e:	f10a 0301 	add.w	r3, sl, #1
 800a332:	f88b 3000 	strb.w	r3, [fp]
 800a336:	e73c      	b.n	800a1b2 <_dtoa_r+0x94a>
 800a338:	9b05      	ldr	r3, [sp, #20]
 800a33a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a33e:	4599      	cmp	r9, r3
 800a340:	d047      	beq.n	800a3d2 <_dtoa_r+0xb6a>
 800a342:	ee18 1a10 	vmov	r1, s16
 800a346:	2300      	movs	r3, #0
 800a348:	220a      	movs	r2, #10
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 fd4a 	bl	800ade4 <__multadd>
 800a350:	45b8      	cmp	r8, r7
 800a352:	ee08 0a10 	vmov	s16, r0
 800a356:	f04f 0300 	mov.w	r3, #0
 800a35a:	f04f 020a 	mov.w	r2, #10
 800a35e:	4641      	mov	r1, r8
 800a360:	4620      	mov	r0, r4
 800a362:	d106      	bne.n	800a372 <_dtoa_r+0xb0a>
 800a364:	f000 fd3e 	bl	800ade4 <__multadd>
 800a368:	4680      	mov	r8, r0
 800a36a:	4607      	mov	r7, r0
 800a36c:	f109 0901 	add.w	r9, r9, #1
 800a370:	e772      	b.n	800a258 <_dtoa_r+0x9f0>
 800a372:	f000 fd37 	bl	800ade4 <__multadd>
 800a376:	4639      	mov	r1, r7
 800a378:	4680      	mov	r8, r0
 800a37a:	2300      	movs	r3, #0
 800a37c:	220a      	movs	r2, #10
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 fd30 	bl	800ade4 <__multadd>
 800a384:	4607      	mov	r7, r0
 800a386:	e7f1      	b.n	800a36c <_dtoa_r+0xb04>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	9302      	str	r3, [sp, #8]
 800a38c:	9d01      	ldr	r5, [sp, #4]
 800a38e:	ee18 0a10 	vmov	r0, s16
 800a392:	4631      	mov	r1, r6
 800a394:	f7ff f9da 	bl	800974c <quorem>
 800a398:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	f805 ab01 	strb.w	sl, [r5], #1
 800a3a2:	1aea      	subs	r2, r5, r3
 800a3a4:	9b02      	ldr	r3, [sp, #8]
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	dd09      	ble.n	800a3be <_dtoa_r+0xb56>
 800a3aa:	ee18 1a10 	vmov	r1, s16
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fd16 	bl	800ade4 <__multadd>
 800a3b8:	ee08 0a10 	vmov	s16, r0
 800a3bc:	e7e7      	b.n	800a38e <_dtoa_r+0xb26>
 800a3be:	9b02      	ldr	r3, [sp, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bfc8      	it	gt
 800a3c4:	461d      	movgt	r5, r3
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	bfd8      	it	le
 800a3ca:	2501      	movle	r5, #1
 800a3cc:	441d      	add	r5, r3
 800a3ce:	f04f 0800 	mov.w	r8, #0
 800a3d2:	ee18 1a10 	vmov	r1, s16
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 fefd 	bl	800b1d8 <__lshift>
 800a3de:	4631      	mov	r1, r6
 800a3e0:	ee08 0a10 	vmov	s16, r0
 800a3e4:	f000 ff68 	bl	800b2b8 <__mcmp>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	dc91      	bgt.n	800a310 <_dtoa_r+0xaa8>
 800a3ec:	d102      	bne.n	800a3f4 <_dtoa_r+0xb8c>
 800a3ee:	f01a 0f01 	tst.w	sl, #1
 800a3f2:	d18d      	bne.n	800a310 <_dtoa_r+0xaa8>
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	461d      	mov	r5, r3
 800a3f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3fc:	2a30      	cmp	r2, #48	; 0x30
 800a3fe:	d0fa      	beq.n	800a3f6 <_dtoa_r+0xb8e>
 800a400:	e6d7      	b.n	800a1b2 <_dtoa_r+0x94a>
 800a402:	9a01      	ldr	r2, [sp, #4]
 800a404:	429a      	cmp	r2, r3
 800a406:	d184      	bne.n	800a312 <_dtoa_r+0xaaa>
 800a408:	9b00      	ldr	r3, [sp, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	2331      	movs	r3, #49	; 0x31
 800a410:	7013      	strb	r3, [r2, #0]
 800a412:	e6ce      	b.n	800a1b2 <_dtoa_r+0x94a>
 800a414:	4b09      	ldr	r3, [pc, #36]	; (800a43c <_dtoa_r+0xbd4>)
 800a416:	f7ff ba95 	b.w	8009944 <_dtoa_r+0xdc>
 800a41a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f47f aa6e 	bne.w	80098fe <_dtoa_r+0x96>
 800a422:	4b07      	ldr	r3, [pc, #28]	; (800a440 <_dtoa_r+0xbd8>)
 800a424:	f7ff ba8e 	b.w	8009944 <_dtoa_r+0xdc>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dcae      	bgt.n	800a38c <_dtoa_r+0xb24>
 800a42e:	9b06      	ldr	r3, [sp, #24]
 800a430:	2b02      	cmp	r3, #2
 800a432:	f73f aea8 	bgt.w	800a186 <_dtoa_r+0x91e>
 800a436:	e7a9      	b.n	800a38c <_dtoa_r+0xb24>
 800a438:	08029388 	.word	0x08029388
 800a43c:	0802918c 	.word	0x0802918c
 800a440:	08029309 	.word	0x08029309

0800a444 <__sflush_r>:
 800a444:	898a      	ldrh	r2, [r1, #12]
 800a446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44a:	4605      	mov	r5, r0
 800a44c:	0710      	lsls	r0, r2, #28
 800a44e:	460c      	mov	r4, r1
 800a450:	d458      	bmi.n	800a504 <__sflush_r+0xc0>
 800a452:	684b      	ldr	r3, [r1, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	dc05      	bgt.n	800a464 <__sflush_r+0x20>
 800a458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dc02      	bgt.n	800a464 <__sflush_r+0x20>
 800a45e:	2000      	movs	r0, #0
 800a460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a466:	2e00      	cmp	r6, #0
 800a468:	d0f9      	beq.n	800a45e <__sflush_r+0x1a>
 800a46a:	2300      	movs	r3, #0
 800a46c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a470:	682f      	ldr	r7, [r5, #0]
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	d032      	beq.n	800a4dc <__sflush_r+0x98>
 800a476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	075a      	lsls	r2, r3, #29
 800a47c:	d505      	bpl.n	800a48a <__sflush_r+0x46>
 800a47e:	6863      	ldr	r3, [r4, #4]
 800a480:	1ac0      	subs	r0, r0, r3
 800a482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a484:	b10b      	cbz	r3, 800a48a <__sflush_r+0x46>
 800a486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a488:	1ac0      	subs	r0, r0, r3
 800a48a:	2300      	movs	r3, #0
 800a48c:	4602      	mov	r2, r0
 800a48e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a490:	6a21      	ldr	r1, [r4, #32]
 800a492:	4628      	mov	r0, r5
 800a494:	47b0      	blx	r6
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	d106      	bne.n	800a4aa <__sflush_r+0x66>
 800a49c:	6829      	ldr	r1, [r5, #0]
 800a49e:	291d      	cmp	r1, #29
 800a4a0:	d82c      	bhi.n	800a4fc <__sflush_r+0xb8>
 800a4a2:	4a2a      	ldr	r2, [pc, #168]	; (800a54c <__sflush_r+0x108>)
 800a4a4:	40ca      	lsrs	r2, r1
 800a4a6:	07d6      	lsls	r6, r2, #31
 800a4a8:	d528      	bpl.n	800a4fc <__sflush_r+0xb8>
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	6062      	str	r2, [r4, #4]
 800a4ae:	04d9      	lsls	r1, r3, #19
 800a4b0:	6922      	ldr	r2, [r4, #16]
 800a4b2:	6022      	str	r2, [r4, #0]
 800a4b4:	d504      	bpl.n	800a4c0 <__sflush_r+0x7c>
 800a4b6:	1c42      	adds	r2, r0, #1
 800a4b8:	d101      	bne.n	800a4be <__sflush_r+0x7a>
 800a4ba:	682b      	ldr	r3, [r5, #0]
 800a4bc:	b903      	cbnz	r3, 800a4c0 <__sflush_r+0x7c>
 800a4be:	6560      	str	r0, [r4, #84]	; 0x54
 800a4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c2:	602f      	str	r7, [r5, #0]
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	d0ca      	beq.n	800a45e <__sflush_r+0x1a>
 800a4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4cc:	4299      	cmp	r1, r3
 800a4ce:	d002      	beq.n	800a4d6 <__sflush_r+0x92>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f001 f8fd 	bl	800b6d0 <_free_r>
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	6360      	str	r0, [r4, #52]	; 0x34
 800a4da:	e7c1      	b.n	800a460 <__sflush_r+0x1c>
 800a4dc:	6a21      	ldr	r1, [r4, #32]
 800a4de:	2301      	movs	r3, #1
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b0      	blx	r6
 800a4e4:	1c41      	adds	r1, r0, #1
 800a4e6:	d1c7      	bne.n	800a478 <__sflush_r+0x34>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0c4      	beq.n	800a478 <__sflush_r+0x34>
 800a4ee:	2b1d      	cmp	r3, #29
 800a4f0:	d001      	beq.n	800a4f6 <__sflush_r+0xb2>
 800a4f2:	2b16      	cmp	r3, #22
 800a4f4:	d101      	bne.n	800a4fa <__sflush_r+0xb6>
 800a4f6:	602f      	str	r7, [r5, #0]
 800a4f8:	e7b1      	b.n	800a45e <__sflush_r+0x1a>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a500:	81a3      	strh	r3, [r4, #12]
 800a502:	e7ad      	b.n	800a460 <__sflush_r+0x1c>
 800a504:	690f      	ldr	r7, [r1, #16]
 800a506:	2f00      	cmp	r7, #0
 800a508:	d0a9      	beq.n	800a45e <__sflush_r+0x1a>
 800a50a:	0793      	lsls	r3, r2, #30
 800a50c:	680e      	ldr	r6, [r1, #0]
 800a50e:	bf08      	it	eq
 800a510:	694b      	ldreq	r3, [r1, #20]
 800a512:	600f      	str	r7, [r1, #0]
 800a514:	bf18      	it	ne
 800a516:	2300      	movne	r3, #0
 800a518:	eba6 0807 	sub.w	r8, r6, r7
 800a51c:	608b      	str	r3, [r1, #8]
 800a51e:	f1b8 0f00 	cmp.w	r8, #0
 800a522:	dd9c      	ble.n	800a45e <__sflush_r+0x1a>
 800a524:	6a21      	ldr	r1, [r4, #32]
 800a526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a528:	4643      	mov	r3, r8
 800a52a:	463a      	mov	r2, r7
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b0      	blx	r6
 800a530:	2800      	cmp	r0, #0
 800a532:	dc06      	bgt.n	800a542 <__sflush_r+0xfe>
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53a:	81a3      	strh	r3, [r4, #12]
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	e78e      	b.n	800a460 <__sflush_r+0x1c>
 800a542:	4407      	add	r7, r0
 800a544:	eba8 0800 	sub.w	r8, r8, r0
 800a548:	e7e9      	b.n	800a51e <__sflush_r+0xda>
 800a54a:	bf00      	nop
 800a54c:	20400001 	.word	0x20400001

0800a550 <_fflush_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	690b      	ldr	r3, [r1, #16]
 800a554:	4605      	mov	r5, r0
 800a556:	460c      	mov	r4, r1
 800a558:	b913      	cbnz	r3, 800a560 <_fflush_r+0x10>
 800a55a:	2500      	movs	r5, #0
 800a55c:	4628      	mov	r0, r5
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	b118      	cbz	r0, 800a56a <_fflush_r+0x1a>
 800a562:	6983      	ldr	r3, [r0, #24]
 800a564:	b90b      	cbnz	r3, 800a56a <_fflush_r+0x1a>
 800a566:	f7fd f94b 	bl	8007800 <__sinit>
 800a56a:	4b14      	ldr	r3, [pc, #80]	; (800a5bc <_fflush_r+0x6c>)
 800a56c:	429c      	cmp	r4, r3
 800a56e:	d11b      	bne.n	800a5a8 <_fflush_r+0x58>
 800a570:	686c      	ldr	r4, [r5, #4]
 800a572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0ef      	beq.n	800a55a <_fflush_r+0xa>
 800a57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a57c:	07d0      	lsls	r0, r2, #31
 800a57e:	d404      	bmi.n	800a58a <_fflush_r+0x3a>
 800a580:	0599      	lsls	r1, r3, #22
 800a582:	d402      	bmi.n	800a58a <_fflush_r+0x3a>
 800a584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a586:	f7fd f9fe 	bl	8007986 <__retarget_lock_acquire_recursive>
 800a58a:	4628      	mov	r0, r5
 800a58c:	4621      	mov	r1, r4
 800a58e:	f7ff ff59 	bl	800a444 <__sflush_r>
 800a592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a594:	07da      	lsls	r2, r3, #31
 800a596:	4605      	mov	r5, r0
 800a598:	d4e0      	bmi.n	800a55c <_fflush_r+0xc>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	059b      	lsls	r3, r3, #22
 800a59e:	d4dd      	bmi.n	800a55c <_fflush_r+0xc>
 800a5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a2:	f7fd f9f1 	bl	8007988 <__retarget_lock_release_recursive>
 800a5a6:	e7d9      	b.n	800a55c <_fflush_r+0xc>
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <_fflush_r+0x70>)
 800a5aa:	429c      	cmp	r4, r3
 800a5ac:	d101      	bne.n	800a5b2 <_fflush_r+0x62>
 800a5ae:	68ac      	ldr	r4, [r5, #8]
 800a5b0:	e7df      	b.n	800a572 <_fflush_r+0x22>
 800a5b2:	4b04      	ldr	r3, [pc, #16]	; (800a5c4 <_fflush_r+0x74>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	bf08      	it	eq
 800a5b8:	68ec      	ldreq	r4, [r5, #12]
 800a5ba:	e7da      	b.n	800a572 <_fflush_r+0x22>
 800a5bc:	08029138 	.word	0x08029138
 800a5c0:	08029158 	.word	0x08029158
 800a5c4:	08029118 	.word	0x08029118

0800a5c8 <rshift>:
 800a5c8:	6903      	ldr	r3, [r0, #16]
 800a5ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5d6:	f100 0414 	add.w	r4, r0, #20
 800a5da:	dd45      	ble.n	800a668 <rshift+0xa0>
 800a5dc:	f011 011f 	ands.w	r1, r1, #31
 800a5e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5e8:	d10c      	bne.n	800a604 <rshift+0x3c>
 800a5ea:	f100 0710 	add.w	r7, r0, #16
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	42b1      	cmp	r1, r6
 800a5f2:	d334      	bcc.n	800a65e <rshift+0x96>
 800a5f4:	1a9b      	subs	r3, r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	1eea      	subs	r2, r5, #3
 800a5fa:	4296      	cmp	r6, r2
 800a5fc:	bf38      	it	cc
 800a5fe:	2300      	movcc	r3, #0
 800a600:	4423      	add	r3, r4
 800a602:	e015      	b.n	800a630 <rshift+0x68>
 800a604:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a608:	f1c1 0820 	rsb	r8, r1, #32
 800a60c:	40cf      	lsrs	r7, r1
 800a60e:	f105 0e04 	add.w	lr, r5, #4
 800a612:	46a1      	mov	r9, r4
 800a614:	4576      	cmp	r6, lr
 800a616:	46f4      	mov	ip, lr
 800a618:	d815      	bhi.n	800a646 <rshift+0x7e>
 800a61a:	1a9a      	subs	r2, r3, r2
 800a61c:	0092      	lsls	r2, r2, #2
 800a61e:	3a04      	subs	r2, #4
 800a620:	3501      	adds	r5, #1
 800a622:	42ae      	cmp	r6, r5
 800a624:	bf38      	it	cc
 800a626:	2200      	movcc	r2, #0
 800a628:	18a3      	adds	r3, r4, r2
 800a62a:	50a7      	str	r7, [r4, r2]
 800a62c:	b107      	cbz	r7, 800a630 <rshift+0x68>
 800a62e:	3304      	adds	r3, #4
 800a630:	1b1a      	subs	r2, r3, r4
 800a632:	42a3      	cmp	r3, r4
 800a634:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a638:	bf08      	it	eq
 800a63a:	2300      	moveq	r3, #0
 800a63c:	6102      	str	r2, [r0, #16]
 800a63e:	bf08      	it	eq
 800a640:	6143      	streq	r3, [r0, #20]
 800a642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a646:	f8dc c000 	ldr.w	ip, [ip]
 800a64a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a64e:	ea4c 0707 	orr.w	r7, ip, r7
 800a652:	f849 7b04 	str.w	r7, [r9], #4
 800a656:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a65a:	40cf      	lsrs	r7, r1
 800a65c:	e7da      	b.n	800a614 <rshift+0x4c>
 800a65e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a662:	f847 cf04 	str.w	ip, [r7, #4]!
 800a666:	e7c3      	b.n	800a5f0 <rshift+0x28>
 800a668:	4623      	mov	r3, r4
 800a66a:	e7e1      	b.n	800a630 <rshift+0x68>

0800a66c <__hexdig_fun>:
 800a66c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a670:	2b09      	cmp	r3, #9
 800a672:	d802      	bhi.n	800a67a <__hexdig_fun+0xe>
 800a674:	3820      	subs	r0, #32
 800a676:	b2c0      	uxtb	r0, r0
 800a678:	4770      	bx	lr
 800a67a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a67e:	2b05      	cmp	r3, #5
 800a680:	d801      	bhi.n	800a686 <__hexdig_fun+0x1a>
 800a682:	3847      	subs	r0, #71	; 0x47
 800a684:	e7f7      	b.n	800a676 <__hexdig_fun+0xa>
 800a686:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a68a:	2b05      	cmp	r3, #5
 800a68c:	d801      	bhi.n	800a692 <__hexdig_fun+0x26>
 800a68e:	3827      	subs	r0, #39	; 0x27
 800a690:	e7f1      	b.n	800a676 <__hexdig_fun+0xa>
 800a692:	2000      	movs	r0, #0
 800a694:	4770      	bx	lr
	...

0800a698 <__gethex>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	ed2d 8b02 	vpush	{d8}
 800a6a0:	b089      	sub	sp, #36	; 0x24
 800a6a2:	ee08 0a10 	vmov	s16, r0
 800a6a6:	9304      	str	r3, [sp, #16]
 800a6a8:	4bb4      	ldr	r3, [pc, #720]	; (800a97c <__gethex+0x2e4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	468b      	mov	fp, r1
 800a6b2:	4690      	mov	r8, r2
 800a6b4:	f7f5 fdac 	bl	8000210 <strlen>
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	f8db 2000 	ldr.w	r2, [fp]
 800a6be:	4403      	add	r3, r0
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a6c6:	9305      	str	r3, [sp, #20]
 800a6c8:	1c93      	adds	r3, r2, #2
 800a6ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a6ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a6d2:	32fe      	adds	r2, #254	; 0xfe
 800a6d4:	18d1      	adds	r1, r2, r3
 800a6d6:	461f      	mov	r7, r3
 800a6d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a6dc:	9100      	str	r1, [sp, #0]
 800a6de:	2830      	cmp	r0, #48	; 0x30
 800a6e0:	d0f8      	beq.n	800a6d4 <__gethex+0x3c>
 800a6e2:	f7ff ffc3 	bl	800a66c <__hexdig_fun>
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d13a      	bne.n	800a762 <__gethex+0xca>
 800a6ec:	9901      	ldr	r1, [sp, #4]
 800a6ee:	4652      	mov	r2, sl
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f001 f9b1 	bl	800ba58 <strncmp>
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d168      	bne.n	800a7ce <__gethex+0x136>
 800a6fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a700:	eb07 060a 	add.w	r6, r7, sl
 800a704:	f7ff ffb2 	bl	800a66c <__hexdig_fun>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d062      	beq.n	800a7d2 <__gethex+0x13a>
 800a70c:	4633      	mov	r3, r6
 800a70e:	7818      	ldrb	r0, [r3, #0]
 800a710:	2830      	cmp	r0, #48	; 0x30
 800a712:	461f      	mov	r7, r3
 800a714:	f103 0301 	add.w	r3, r3, #1
 800a718:	d0f9      	beq.n	800a70e <__gethex+0x76>
 800a71a:	f7ff ffa7 	bl	800a66c <__hexdig_fun>
 800a71e:	2301      	movs	r3, #1
 800a720:	fab0 f480 	clz	r4, r0
 800a724:	0964      	lsrs	r4, r4, #5
 800a726:	4635      	mov	r5, r6
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	463a      	mov	r2, r7
 800a72c:	4616      	mov	r6, r2
 800a72e:	3201      	adds	r2, #1
 800a730:	7830      	ldrb	r0, [r6, #0]
 800a732:	f7ff ff9b 	bl	800a66c <__hexdig_fun>
 800a736:	2800      	cmp	r0, #0
 800a738:	d1f8      	bne.n	800a72c <__gethex+0x94>
 800a73a:	9901      	ldr	r1, [sp, #4]
 800a73c:	4652      	mov	r2, sl
 800a73e:	4630      	mov	r0, r6
 800a740:	f001 f98a 	bl	800ba58 <strncmp>
 800a744:	b980      	cbnz	r0, 800a768 <__gethex+0xd0>
 800a746:	b94d      	cbnz	r5, 800a75c <__gethex+0xc4>
 800a748:	eb06 050a 	add.w	r5, r6, sl
 800a74c:	462a      	mov	r2, r5
 800a74e:	4616      	mov	r6, r2
 800a750:	3201      	adds	r2, #1
 800a752:	7830      	ldrb	r0, [r6, #0]
 800a754:	f7ff ff8a 	bl	800a66c <__hexdig_fun>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d1f8      	bne.n	800a74e <__gethex+0xb6>
 800a75c:	1bad      	subs	r5, r5, r6
 800a75e:	00ad      	lsls	r5, r5, #2
 800a760:	e004      	b.n	800a76c <__gethex+0xd4>
 800a762:	2400      	movs	r4, #0
 800a764:	4625      	mov	r5, r4
 800a766:	e7e0      	b.n	800a72a <__gethex+0x92>
 800a768:	2d00      	cmp	r5, #0
 800a76a:	d1f7      	bne.n	800a75c <__gethex+0xc4>
 800a76c:	7833      	ldrb	r3, [r6, #0]
 800a76e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a772:	2b50      	cmp	r3, #80	; 0x50
 800a774:	d13b      	bne.n	800a7ee <__gethex+0x156>
 800a776:	7873      	ldrb	r3, [r6, #1]
 800a778:	2b2b      	cmp	r3, #43	; 0x2b
 800a77a:	d02c      	beq.n	800a7d6 <__gethex+0x13e>
 800a77c:	2b2d      	cmp	r3, #45	; 0x2d
 800a77e:	d02e      	beq.n	800a7de <__gethex+0x146>
 800a780:	1c71      	adds	r1, r6, #1
 800a782:	f04f 0900 	mov.w	r9, #0
 800a786:	7808      	ldrb	r0, [r1, #0]
 800a788:	f7ff ff70 	bl	800a66c <__hexdig_fun>
 800a78c:	1e43      	subs	r3, r0, #1
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b18      	cmp	r3, #24
 800a792:	d82c      	bhi.n	800a7ee <__gethex+0x156>
 800a794:	f1a0 0210 	sub.w	r2, r0, #16
 800a798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a79c:	f7ff ff66 	bl	800a66c <__hexdig_fun>
 800a7a0:	1e43      	subs	r3, r0, #1
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b18      	cmp	r3, #24
 800a7a6:	d91d      	bls.n	800a7e4 <__gethex+0x14c>
 800a7a8:	f1b9 0f00 	cmp.w	r9, #0
 800a7ac:	d000      	beq.n	800a7b0 <__gethex+0x118>
 800a7ae:	4252      	negs	r2, r2
 800a7b0:	4415      	add	r5, r2
 800a7b2:	f8cb 1000 	str.w	r1, [fp]
 800a7b6:	b1e4      	cbz	r4, 800a7f2 <__gethex+0x15a>
 800a7b8:	9b00      	ldr	r3, [sp, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	bf14      	ite	ne
 800a7be:	2700      	movne	r7, #0
 800a7c0:	2706      	moveq	r7, #6
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	b009      	add	sp, #36	; 0x24
 800a7c6:	ecbd 8b02 	vpop	{d8}
 800a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ce:	463e      	mov	r6, r7
 800a7d0:	4625      	mov	r5, r4
 800a7d2:	2401      	movs	r4, #1
 800a7d4:	e7ca      	b.n	800a76c <__gethex+0xd4>
 800a7d6:	f04f 0900 	mov.w	r9, #0
 800a7da:	1cb1      	adds	r1, r6, #2
 800a7dc:	e7d3      	b.n	800a786 <__gethex+0xee>
 800a7de:	f04f 0901 	mov.w	r9, #1
 800a7e2:	e7fa      	b.n	800a7da <__gethex+0x142>
 800a7e4:	230a      	movs	r3, #10
 800a7e6:	fb03 0202 	mla	r2, r3, r2, r0
 800a7ea:	3a10      	subs	r2, #16
 800a7ec:	e7d4      	b.n	800a798 <__gethex+0x100>
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	e7df      	b.n	800a7b2 <__gethex+0x11a>
 800a7f2:	1bf3      	subs	r3, r6, r7
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	2b07      	cmp	r3, #7
 800a7fa:	dc0b      	bgt.n	800a814 <__gethex+0x17c>
 800a7fc:	ee18 0a10 	vmov	r0, s16
 800a800:	f000 fa8e 	bl	800ad20 <_Balloc>
 800a804:	4604      	mov	r4, r0
 800a806:	b940      	cbnz	r0, 800a81a <__gethex+0x182>
 800a808:	4b5d      	ldr	r3, [pc, #372]	; (800a980 <__gethex+0x2e8>)
 800a80a:	4602      	mov	r2, r0
 800a80c:	21de      	movs	r1, #222	; 0xde
 800a80e:	485d      	ldr	r0, [pc, #372]	; (800a984 <__gethex+0x2ec>)
 800a810:	f001 f944 	bl	800ba9c <__assert_func>
 800a814:	3101      	adds	r1, #1
 800a816:	105b      	asrs	r3, r3, #1
 800a818:	e7ee      	b.n	800a7f8 <__gethex+0x160>
 800a81a:	f100 0914 	add.w	r9, r0, #20
 800a81e:	f04f 0b00 	mov.w	fp, #0
 800a822:	f1ca 0301 	rsb	r3, sl, #1
 800a826:	f8cd 9008 	str.w	r9, [sp, #8]
 800a82a:	f8cd b000 	str.w	fp, [sp]
 800a82e:	9306      	str	r3, [sp, #24]
 800a830:	42b7      	cmp	r7, r6
 800a832:	d340      	bcc.n	800a8b6 <__gethex+0x21e>
 800a834:	9802      	ldr	r0, [sp, #8]
 800a836:	9b00      	ldr	r3, [sp, #0]
 800a838:	f840 3b04 	str.w	r3, [r0], #4
 800a83c:	eba0 0009 	sub.w	r0, r0, r9
 800a840:	1080      	asrs	r0, r0, #2
 800a842:	0146      	lsls	r6, r0, #5
 800a844:	6120      	str	r0, [r4, #16]
 800a846:	4618      	mov	r0, r3
 800a848:	f000 fb5c 	bl	800af04 <__hi0bits>
 800a84c:	1a30      	subs	r0, r6, r0
 800a84e:	f8d8 6000 	ldr.w	r6, [r8]
 800a852:	42b0      	cmp	r0, r6
 800a854:	dd63      	ble.n	800a91e <__gethex+0x286>
 800a856:	1b87      	subs	r7, r0, r6
 800a858:	4639      	mov	r1, r7
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 ff00 	bl	800b660 <__any_on>
 800a860:	4682      	mov	sl, r0
 800a862:	b1a8      	cbz	r0, 800a890 <__gethex+0x1f8>
 800a864:	1e7b      	subs	r3, r7, #1
 800a866:	1159      	asrs	r1, r3, #5
 800a868:	f003 021f 	and.w	r2, r3, #31
 800a86c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a870:	f04f 0a01 	mov.w	sl, #1
 800a874:	fa0a f202 	lsl.w	r2, sl, r2
 800a878:	420a      	tst	r2, r1
 800a87a:	d009      	beq.n	800a890 <__gethex+0x1f8>
 800a87c:	4553      	cmp	r3, sl
 800a87e:	dd05      	ble.n	800a88c <__gethex+0x1f4>
 800a880:	1eb9      	subs	r1, r7, #2
 800a882:	4620      	mov	r0, r4
 800a884:	f000 feec 	bl	800b660 <__any_on>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d145      	bne.n	800a918 <__gethex+0x280>
 800a88c:	f04f 0a02 	mov.w	sl, #2
 800a890:	4639      	mov	r1, r7
 800a892:	4620      	mov	r0, r4
 800a894:	f7ff fe98 	bl	800a5c8 <rshift>
 800a898:	443d      	add	r5, r7
 800a89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a89e:	42ab      	cmp	r3, r5
 800a8a0:	da4c      	bge.n	800a93c <__gethex+0x2a4>
 800a8a2:	ee18 0a10 	vmov	r0, s16
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	f000 fa7a 	bl	800ada0 <_Bfree>
 800a8ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	27a3      	movs	r7, #163	; 0xa3
 800a8b4:	e785      	b.n	800a7c2 <__gethex+0x12a>
 800a8b6:	1e73      	subs	r3, r6, #1
 800a8b8:	9a05      	ldr	r2, [sp, #20]
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d019      	beq.n	800a8f8 <__gethex+0x260>
 800a8c4:	f1bb 0f20 	cmp.w	fp, #32
 800a8c8:	d107      	bne.n	800a8da <__gethex+0x242>
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	9a00      	ldr	r2, [sp, #0]
 800a8ce:	f843 2b04 	str.w	r2, [r3], #4
 800a8d2:	9302      	str	r3, [sp, #8]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	469b      	mov	fp, r3
 800a8da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a8de:	f7ff fec5 	bl	800a66c <__hexdig_fun>
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	f000 000f 	and.w	r0, r0, #15
 800a8e8:	fa00 f00b 	lsl.w	r0, r0, fp
 800a8ec:	4303      	orrs	r3, r0
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	f10b 0b04 	add.w	fp, fp, #4
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	e00d      	b.n	800a914 <__gethex+0x27c>
 800a8f8:	9b03      	ldr	r3, [sp, #12]
 800a8fa:	9a06      	ldr	r2, [sp, #24]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	42bb      	cmp	r3, r7
 800a900:	d3e0      	bcc.n	800a8c4 <__gethex+0x22c>
 800a902:	4618      	mov	r0, r3
 800a904:	9901      	ldr	r1, [sp, #4]
 800a906:	9307      	str	r3, [sp, #28]
 800a908:	4652      	mov	r2, sl
 800a90a:	f001 f8a5 	bl	800ba58 <strncmp>
 800a90e:	9b07      	ldr	r3, [sp, #28]
 800a910:	2800      	cmp	r0, #0
 800a912:	d1d7      	bne.n	800a8c4 <__gethex+0x22c>
 800a914:	461e      	mov	r6, r3
 800a916:	e78b      	b.n	800a830 <__gethex+0x198>
 800a918:	f04f 0a03 	mov.w	sl, #3
 800a91c:	e7b8      	b.n	800a890 <__gethex+0x1f8>
 800a91e:	da0a      	bge.n	800a936 <__gethex+0x29e>
 800a920:	1a37      	subs	r7, r6, r0
 800a922:	4621      	mov	r1, r4
 800a924:	ee18 0a10 	vmov	r0, s16
 800a928:	463a      	mov	r2, r7
 800a92a:	f000 fc55 	bl	800b1d8 <__lshift>
 800a92e:	1bed      	subs	r5, r5, r7
 800a930:	4604      	mov	r4, r0
 800a932:	f100 0914 	add.w	r9, r0, #20
 800a936:	f04f 0a00 	mov.w	sl, #0
 800a93a:	e7ae      	b.n	800a89a <__gethex+0x202>
 800a93c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a940:	42a8      	cmp	r0, r5
 800a942:	dd72      	ble.n	800aa2a <__gethex+0x392>
 800a944:	1b45      	subs	r5, r0, r5
 800a946:	42ae      	cmp	r6, r5
 800a948:	dc36      	bgt.n	800a9b8 <__gethex+0x320>
 800a94a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d02a      	beq.n	800a9a8 <__gethex+0x310>
 800a952:	2b03      	cmp	r3, #3
 800a954:	d02c      	beq.n	800a9b0 <__gethex+0x318>
 800a956:	2b01      	cmp	r3, #1
 800a958:	d11c      	bne.n	800a994 <__gethex+0x2fc>
 800a95a:	42ae      	cmp	r6, r5
 800a95c:	d11a      	bne.n	800a994 <__gethex+0x2fc>
 800a95e:	2e01      	cmp	r6, #1
 800a960:	d112      	bne.n	800a988 <__gethex+0x2f0>
 800a962:	9a04      	ldr	r2, [sp, #16]
 800a964:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	2301      	movs	r3, #1
 800a96c:	6123      	str	r3, [r4, #16]
 800a96e:	f8c9 3000 	str.w	r3, [r9]
 800a972:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a974:	2762      	movs	r7, #98	; 0x62
 800a976:	601c      	str	r4, [r3, #0]
 800a978:	e723      	b.n	800a7c2 <__gethex+0x12a>
 800a97a:	bf00      	nop
 800a97c:	08029400 	.word	0x08029400
 800a980:	08029388 	.word	0x08029388
 800a984:	08029399 	.word	0x08029399
 800a988:	1e71      	subs	r1, r6, #1
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 fe68 	bl	800b660 <__any_on>
 800a990:	2800      	cmp	r0, #0
 800a992:	d1e6      	bne.n	800a962 <__gethex+0x2ca>
 800a994:	ee18 0a10 	vmov	r0, s16
 800a998:	4621      	mov	r1, r4
 800a99a:	f000 fa01 	bl	800ada0 <_Bfree>
 800a99e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	2750      	movs	r7, #80	; 0x50
 800a9a6:	e70c      	b.n	800a7c2 <__gethex+0x12a>
 800a9a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f2      	bne.n	800a994 <__gethex+0x2fc>
 800a9ae:	e7d8      	b.n	800a962 <__gethex+0x2ca>
 800a9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1d5      	bne.n	800a962 <__gethex+0x2ca>
 800a9b6:	e7ed      	b.n	800a994 <__gethex+0x2fc>
 800a9b8:	1e6f      	subs	r7, r5, #1
 800a9ba:	f1ba 0f00 	cmp.w	sl, #0
 800a9be:	d131      	bne.n	800aa24 <__gethex+0x38c>
 800a9c0:	b127      	cbz	r7, 800a9cc <__gethex+0x334>
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 fe4b 	bl	800b660 <__any_on>
 800a9ca:	4682      	mov	sl, r0
 800a9cc:	117b      	asrs	r3, r7, #5
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a9d4:	f007 071f 	and.w	r7, r7, #31
 800a9d8:	fa01 f707 	lsl.w	r7, r1, r7
 800a9dc:	421f      	tst	r7, r3
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	bf18      	it	ne
 800a9e4:	f04a 0a02 	orrne.w	sl, sl, #2
 800a9e8:	1b76      	subs	r6, r6, r5
 800a9ea:	f7ff fded 	bl	800a5c8 <rshift>
 800a9ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a9f2:	2702      	movs	r7, #2
 800a9f4:	f1ba 0f00 	cmp.w	sl, #0
 800a9f8:	d048      	beq.n	800aa8c <__gethex+0x3f4>
 800a9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d015      	beq.n	800aa2e <__gethex+0x396>
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d017      	beq.n	800aa36 <__gethex+0x39e>
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d109      	bne.n	800aa1e <__gethex+0x386>
 800aa0a:	f01a 0f02 	tst.w	sl, #2
 800aa0e:	d006      	beq.n	800aa1e <__gethex+0x386>
 800aa10:	f8d9 0000 	ldr.w	r0, [r9]
 800aa14:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa18:	f01a 0f01 	tst.w	sl, #1
 800aa1c:	d10e      	bne.n	800aa3c <__gethex+0x3a4>
 800aa1e:	f047 0710 	orr.w	r7, r7, #16
 800aa22:	e033      	b.n	800aa8c <__gethex+0x3f4>
 800aa24:	f04f 0a01 	mov.w	sl, #1
 800aa28:	e7d0      	b.n	800a9cc <__gethex+0x334>
 800aa2a:	2701      	movs	r7, #1
 800aa2c:	e7e2      	b.n	800a9f4 <__gethex+0x35c>
 800aa2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa30:	f1c3 0301 	rsb	r3, r3, #1
 800aa34:	9315      	str	r3, [sp, #84]	; 0x54
 800aa36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0f0      	beq.n	800aa1e <__gethex+0x386>
 800aa3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa40:	f104 0314 	add.w	r3, r4, #20
 800aa44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aa48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aa4c:	f04f 0c00 	mov.w	ip, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa56:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa5a:	d01c      	beq.n	800aa96 <__gethex+0x3fe>
 800aa5c:	3201      	adds	r2, #1
 800aa5e:	6002      	str	r2, [r0, #0]
 800aa60:	2f02      	cmp	r7, #2
 800aa62:	f104 0314 	add.w	r3, r4, #20
 800aa66:	d13f      	bne.n	800aae8 <__gethex+0x450>
 800aa68:	f8d8 2000 	ldr.w	r2, [r8]
 800aa6c:	3a01      	subs	r2, #1
 800aa6e:	42b2      	cmp	r2, r6
 800aa70:	d10a      	bne.n	800aa88 <__gethex+0x3f0>
 800aa72:	1171      	asrs	r1, r6, #5
 800aa74:	2201      	movs	r2, #1
 800aa76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa7a:	f006 061f 	and.w	r6, r6, #31
 800aa7e:	fa02 f606 	lsl.w	r6, r2, r6
 800aa82:	421e      	tst	r6, r3
 800aa84:	bf18      	it	ne
 800aa86:	4617      	movne	r7, r2
 800aa88:	f047 0720 	orr.w	r7, r7, #32
 800aa8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa8e:	601c      	str	r4, [r3, #0]
 800aa90:	9b04      	ldr	r3, [sp, #16]
 800aa92:	601d      	str	r5, [r3, #0]
 800aa94:	e695      	b.n	800a7c2 <__gethex+0x12a>
 800aa96:	4299      	cmp	r1, r3
 800aa98:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa9c:	d8d8      	bhi.n	800aa50 <__gethex+0x3b8>
 800aa9e:	68a3      	ldr	r3, [r4, #8]
 800aaa0:	459b      	cmp	fp, r3
 800aaa2:	db19      	blt.n	800aad8 <__gethex+0x440>
 800aaa4:	6861      	ldr	r1, [r4, #4]
 800aaa6:	ee18 0a10 	vmov	r0, s16
 800aaaa:	3101      	adds	r1, #1
 800aaac:	f000 f938 	bl	800ad20 <_Balloc>
 800aab0:	4681      	mov	r9, r0
 800aab2:	b918      	cbnz	r0, 800aabc <__gethex+0x424>
 800aab4:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <__gethex+0x488>)
 800aab6:	4602      	mov	r2, r0
 800aab8:	2184      	movs	r1, #132	; 0x84
 800aaba:	e6a8      	b.n	800a80e <__gethex+0x176>
 800aabc:	6922      	ldr	r2, [r4, #16]
 800aabe:	3202      	adds	r2, #2
 800aac0:	f104 010c 	add.w	r1, r4, #12
 800aac4:	0092      	lsls	r2, r2, #2
 800aac6:	300c      	adds	r0, #12
 800aac8:	f7fc ff5f 	bl	800798a <memcpy>
 800aacc:	4621      	mov	r1, r4
 800aace:	ee18 0a10 	vmov	r0, s16
 800aad2:	f000 f965 	bl	800ada0 <_Bfree>
 800aad6:	464c      	mov	r4, r9
 800aad8:	6923      	ldr	r3, [r4, #16]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aae0:	6122      	str	r2, [r4, #16]
 800aae2:	2201      	movs	r2, #1
 800aae4:	615a      	str	r2, [r3, #20]
 800aae6:	e7bb      	b.n	800aa60 <__gethex+0x3c8>
 800aae8:	6922      	ldr	r2, [r4, #16]
 800aaea:	455a      	cmp	r2, fp
 800aaec:	dd0b      	ble.n	800ab06 <__gethex+0x46e>
 800aaee:	2101      	movs	r1, #1
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f7ff fd69 	bl	800a5c8 <rshift>
 800aaf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aafa:	3501      	adds	r5, #1
 800aafc:	42ab      	cmp	r3, r5
 800aafe:	f6ff aed0 	blt.w	800a8a2 <__gethex+0x20a>
 800ab02:	2701      	movs	r7, #1
 800ab04:	e7c0      	b.n	800aa88 <__gethex+0x3f0>
 800ab06:	f016 061f 	ands.w	r6, r6, #31
 800ab0a:	d0fa      	beq.n	800ab02 <__gethex+0x46a>
 800ab0c:	4453      	add	r3, sl
 800ab0e:	f1c6 0620 	rsb	r6, r6, #32
 800ab12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab16:	f000 f9f5 	bl	800af04 <__hi0bits>
 800ab1a:	42b0      	cmp	r0, r6
 800ab1c:	dbe7      	blt.n	800aaee <__gethex+0x456>
 800ab1e:	e7f0      	b.n	800ab02 <__gethex+0x46a>
 800ab20:	08029388 	.word	0x08029388

0800ab24 <L_shift>:
 800ab24:	f1c2 0208 	rsb	r2, r2, #8
 800ab28:	0092      	lsls	r2, r2, #2
 800ab2a:	b570      	push	{r4, r5, r6, lr}
 800ab2c:	f1c2 0620 	rsb	r6, r2, #32
 800ab30:	6843      	ldr	r3, [r0, #4]
 800ab32:	6804      	ldr	r4, [r0, #0]
 800ab34:	fa03 f506 	lsl.w	r5, r3, r6
 800ab38:	432c      	orrs	r4, r5
 800ab3a:	40d3      	lsrs	r3, r2
 800ab3c:	6004      	str	r4, [r0, #0]
 800ab3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab42:	4288      	cmp	r0, r1
 800ab44:	d3f4      	bcc.n	800ab30 <L_shift+0xc>
 800ab46:	bd70      	pop	{r4, r5, r6, pc}

0800ab48 <__match>:
 800ab48:	b530      	push	{r4, r5, lr}
 800ab4a:	6803      	ldr	r3, [r0, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab52:	b914      	cbnz	r4, 800ab5a <__match+0x12>
 800ab54:	6003      	str	r3, [r0, #0]
 800ab56:	2001      	movs	r0, #1
 800ab58:	bd30      	pop	{r4, r5, pc}
 800ab5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ab62:	2d19      	cmp	r5, #25
 800ab64:	bf98      	it	ls
 800ab66:	3220      	addls	r2, #32
 800ab68:	42a2      	cmp	r2, r4
 800ab6a:	d0f0      	beq.n	800ab4e <__match+0x6>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e7f3      	b.n	800ab58 <__match+0x10>

0800ab70 <__hexnan>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	680b      	ldr	r3, [r1, #0]
 800ab76:	115e      	asrs	r6, r3, #5
 800ab78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab7c:	f013 031f 	ands.w	r3, r3, #31
 800ab80:	b087      	sub	sp, #28
 800ab82:	bf18      	it	ne
 800ab84:	3604      	addne	r6, #4
 800ab86:	2500      	movs	r5, #0
 800ab88:	1f37      	subs	r7, r6, #4
 800ab8a:	4690      	mov	r8, r2
 800ab8c:	6802      	ldr	r2, [r0, #0]
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	4682      	mov	sl, r0
 800ab92:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab96:	46b9      	mov	r9, r7
 800ab98:	463c      	mov	r4, r7
 800ab9a:	9502      	str	r5, [sp, #8]
 800ab9c:	46ab      	mov	fp, r5
 800ab9e:	7851      	ldrb	r1, [r2, #1]
 800aba0:	1c53      	adds	r3, r2, #1
 800aba2:	9303      	str	r3, [sp, #12]
 800aba4:	b341      	cbz	r1, 800abf8 <__hexnan+0x88>
 800aba6:	4608      	mov	r0, r1
 800aba8:	9205      	str	r2, [sp, #20]
 800abaa:	9104      	str	r1, [sp, #16]
 800abac:	f7ff fd5e 	bl	800a66c <__hexdig_fun>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d14f      	bne.n	800ac54 <__hexnan+0xe4>
 800abb4:	9904      	ldr	r1, [sp, #16]
 800abb6:	9a05      	ldr	r2, [sp, #20]
 800abb8:	2920      	cmp	r1, #32
 800abba:	d818      	bhi.n	800abee <__hexnan+0x7e>
 800abbc:	9b02      	ldr	r3, [sp, #8]
 800abbe:	459b      	cmp	fp, r3
 800abc0:	dd13      	ble.n	800abea <__hexnan+0x7a>
 800abc2:	454c      	cmp	r4, r9
 800abc4:	d206      	bcs.n	800abd4 <__hexnan+0x64>
 800abc6:	2d07      	cmp	r5, #7
 800abc8:	dc04      	bgt.n	800abd4 <__hexnan+0x64>
 800abca:	462a      	mov	r2, r5
 800abcc:	4649      	mov	r1, r9
 800abce:	4620      	mov	r0, r4
 800abd0:	f7ff ffa8 	bl	800ab24 <L_shift>
 800abd4:	4544      	cmp	r4, r8
 800abd6:	d950      	bls.n	800ac7a <__hexnan+0x10a>
 800abd8:	2300      	movs	r3, #0
 800abda:	f1a4 0904 	sub.w	r9, r4, #4
 800abde:	f844 3c04 	str.w	r3, [r4, #-4]
 800abe2:	f8cd b008 	str.w	fp, [sp, #8]
 800abe6:	464c      	mov	r4, r9
 800abe8:	461d      	mov	r5, r3
 800abea:	9a03      	ldr	r2, [sp, #12]
 800abec:	e7d7      	b.n	800ab9e <__hexnan+0x2e>
 800abee:	2929      	cmp	r1, #41	; 0x29
 800abf0:	d156      	bne.n	800aca0 <__hexnan+0x130>
 800abf2:	3202      	adds	r2, #2
 800abf4:	f8ca 2000 	str.w	r2, [sl]
 800abf8:	f1bb 0f00 	cmp.w	fp, #0
 800abfc:	d050      	beq.n	800aca0 <__hexnan+0x130>
 800abfe:	454c      	cmp	r4, r9
 800ac00:	d206      	bcs.n	800ac10 <__hexnan+0xa0>
 800ac02:	2d07      	cmp	r5, #7
 800ac04:	dc04      	bgt.n	800ac10 <__hexnan+0xa0>
 800ac06:	462a      	mov	r2, r5
 800ac08:	4649      	mov	r1, r9
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f7ff ff8a 	bl	800ab24 <L_shift>
 800ac10:	4544      	cmp	r4, r8
 800ac12:	d934      	bls.n	800ac7e <__hexnan+0x10e>
 800ac14:	f1a8 0204 	sub.w	r2, r8, #4
 800ac18:	4623      	mov	r3, r4
 800ac1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac22:	429f      	cmp	r7, r3
 800ac24:	d2f9      	bcs.n	800ac1a <__hexnan+0xaa>
 800ac26:	1b3b      	subs	r3, r7, r4
 800ac28:	f023 0303 	bic.w	r3, r3, #3
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	3401      	adds	r4, #1
 800ac30:	3e03      	subs	r6, #3
 800ac32:	42b4      	cmp	r4, r6
 800ac34:	bf88      	it	hi
 800ac36:	2304      	movhi	r3, #4
 800ac38:	4443      	add	r3, r8
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f843 2b04 	str.w	r2, [r3], #4
 800ac40:	429f      	cmp	r7, r3
 800ac42:	d2fb      	bcs.n	800ac3c <__hexnan+0xcc>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	b91b      	cbnz	r3, 800ac50 <__hexnan+0xe0>
 800ac48:	4547      	cmp	r7, r8
 800ac4a:	d127      	bne.n	800ac9c <__hexnan+0x12c>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	603b      	str	r3, [r7, #0]
 800ac50:	2005      	movs	r0, #5
 800ac52:	e026      	b.n	800aca2 <__hexnan+0x132>
 800ac54:	3501      	adds	r5, #1
 800ac56:	2d08      	cmp	r5, #8
 800ac58:	f10b 0b01 	add.w	fp, fp, #1
 800ac5c:	dd06      	ble.n	800ac6c <__hexnan+0xfc>
 800ac5e:	4544      	cmp	r4, r8
 800ac60:	d9c3      	bls.n	800abea <__hexnan+0x7a>
 800ac62:	2300      	movs	r3, #0
 800ac64:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac68:	2501      	movs	r5, #1
 800ac6a:	3c04      	subs	r4, #4
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	f000 000f 	and.w	r0, r0, #15
 800ac72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ac76:	6022      	str	r2, [r4, #0]
 800ac78:	e7b7      	b.n	800abea <__hexnan+0x7a>
 800ac7a:	2508      	movs	r5, #8
 800ac7c:	e7b5      	b.n	800abea <__hexnan+0x7a>
 800ac7e:	9b01      	ldr	r3, [sp, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0df      	beq.n	800ac44 <__hexnan+0xd4>
 800ac84:	f04f 32ff 	mov.w	r2, #4294967295
 800ac88:	f1c3 0320 	rsb	r3, r3, #32
 800ac8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac94:	401a      	ands	r2, r3
 800ac96:	f846 2c04 	str.w	r2, [r6, #-4]
 800ac9a:	e7d3      	b.n	800ac44 <__hexnan+0xd4>
 800ac9c:	3f04      	subs	r7, #4
 800ac9e:	e7d1      	b.n	800ac44 <__hexnan+0xd4>
 800aca0:	2004      	movs	r0, #4
 800aca2:	b007      	add	sp, #28
 800aca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aca8 <_localeconv_r>:
 800aca8:	4800      	ldr	r0, [pc, #0]	; (800acac <_localeconv_r+0x4>)
 800acaa:	4770      	bx	lr
 800acac:	20000180 	.word	0x20000180

0800acb0 <_lseek_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d07      	ldr	r5, [pc, #28]	; (800acd0 <_lseek_r+0x20>)
 800acb4:	4604      	mov	r4, r0
 800acb6:	4608      	mov	r0, r1
 800acb8:	4611      	mov	r1, r2
 800acba:	2200      	movs	r2, #0
 800acbc:	602a      	str	r2, [r5, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	f7f7 fa4e 	bl	8002160 <_lseek>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_lseek_r+0x1e>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_lseek_r+0x1e>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20010254 	.word	0x20010254

0800acd4 <malloc>:
 800acd4:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <malloc+0xc>)
 800acd6:	4601      	mov	r1, r0
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	f7fc be8d 	b.w	80079f8 <_malloc_r>
 800acde:	bf00      	nop
 800ace0:	20000028 	.word	0x20000028

0800ace4 <__ascii_mbtowc>:
 800ace4:	b082      	sub	sp, #8
 800ace6:	b901      	cbnz	r1, 800acea <__ascii_mbtowc+0x6>
 800ace8:	a901      	add	r1, sp, #4
 800acea:	b142      	cbz	r2, 800acfe <__ascii_mbtowc+0x1a>
 800acec:	b14b      	cbz	r3, 800ad02 <__ascii_mbtowc+0x1e>
 800acee:	7813      	ldrb	r3, [r2, #0]
 800acf0:	600b      	str	r3, [r1, #0]
 800acf2:	7812      	ldrb	r2, [r2, #0]
 800acf4:	1e10      	subs	r0, r2, #0
 800acf6:	bf18      	it	ne
 800acf8:	2001      	movne	r0, #1
 800acfa:	b002      	add	sp, #8
 800acfc:	4770      	bx	lr
 800acfe:	4610      	mov	r0, r2
 800ad00:	e7fb      	b.n	800acfa <__ascii_mbtowc+0x16>
 800ad02:	f06f 0001 	mvn.w	r0, #1
 800ad06:	e7f8      	b.n	800acfa <__ascii_mbtowc+0x16>

0800ad08 <__malloc_lock>:
 800ad08:	4801      	ldr	r0, [pc, #4]	; (800ad10 <__malloc_lock+0x8>)
 800ad0a:	f7fc be3c 	b.w	8007986 <__retarget_lock_acquire_recursive>
 800ad0e:	bf00      	nop
 800ad10:	20010248 	.word	0x20010248

0800ad14 <__malloc_unlock>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__malloc_unlock+0x8>)
 800ad16:	f7fc be37 	b.w	8007988 <__retarget_lock_release_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	20010248 	.word	0x20010248

0800ad20 <_Balloc>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad24:	4604      	mov	r4, r0
 800ad26:	460d      	mov	r5, r1
 800ad28:	b976      	cbnz	r6, 800ad48 <_Balloc+0x28>
 800ad2a:	2010      	movs	r0, #16
 800ad2c:	f7ff ffd2 	bl	800acd4 <malloc>
 800ad30:	4602      	mov	r2, r0
 800ad32:	6260      	str	r0, [r4, #36]	; 0x24
 800ad34:	b920      	cbnz	r0, 800ad40 <_Balloc+0x20>
 800ad36:	4b18      	ldr	r3, [pc, #96]	; (800ad98 <_Balloc+0x78>)
 800ad38:	4818      	ldr	r0, [pc, #96]	; (800ad9c <_Balloc+0x7c>)
 800ad3a:	2166      	movs	r1, #102	; 0x66
 800ad3c:	f000 feae 	bl	800ba9c <__assert_func>
 800ad40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad44:	6006      	str	r6, [r0, #0]
 800ad46:	60c6      	str	r6, [r0, #12]
 800ad48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad4a:	68f3      	ldr	r3, [r6, #12]
 800ad4c:	b183      	cbz	r3, 800ad70 <_Balloc+0x50>
 800ad4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad56:	b9b8      	cbnz	r0, 800ad88 <_Balloc+0x68>
 800ad58:	2101      	movs	r1, #1
 800ad5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad5e:	1d72      	adds	r2, r6, #5
 800ad60:	0092      	lsls	r2, r2, #2
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 fc9d 	bl	800b6a2 <_calloc_r>
 800ad68:	b160      	cbz	r0, 800ad84 <_Balloc+0x64>
 800ad6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad6e:	e00e      	b.n	800ad8e <_Balloc+0x6e>
 800ad70:	2221      	movs	r2, #33	; 0x21
 800ad72:	2104      	movs	r1, #4
 800ad74:	4620      	mov	r0, r4
 800ad76:	f000 fc94 	bl	800b6a2 <_calloc_r>
 800ad7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad7c:	60f0      	str	r0, [r6, #12]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e4      	bne.n	800ad4e <_Balloc+0x2e>
 800ad84:	2000      	movs	r0, #0
 800ad86:	bd70      	pop	{r4, r5, r6, pc}
 800ad88:	6802      	ldr	r2, [r0, #0]
 800ad8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad94:	e7f7      	b.n	800ad86 <_Balloc+0x66>
 800ad96:	bf00      	nop
 800ad98:	08029316 	.word	0x08029316
 800ad9c:	08029414 	.word	0x08029414

0800ada0 <_Bfree>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ada4:	4605      	mov	r5, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	b976      	cbnz	r6, 800adc8 <_Bfree+0x28>
 800adaa:	2010      	movs	r0, #16
 800adac:	f7ff ff92 	bl	800acd4 <malloc>
 800adb0:	4602      	mov	r2, r0
 800adb2:	6268      	str	r0, [r5, #36]	; 0x24
 800adb4:	b920      	cbnz	r0, 800adc0 <_Bfree+0x20>
 800adb6:	4b09      	ldr	r3, [pc, #36]	; (800addc <_Bfree+0x3c>)
 800adb8:	4809      	ldr	r0, [pc, #36]	; (800ade0 <_Bfree+0x40>)
 800adba:	218a      	movs	r1, #138	; 0x8a
 800adbc:	f000 fe6e 	bl	800ba9c <__assert_func>
 800adc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adc4:	6006      	str	r6, [r0, #0]
 800adc6:	60c6      	str	r6, [r0, #12]
 800adc8:	b13c      	cbz	r4, 800adda <_Bfree+0x3a>
 800adca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800adcc:	6862      	ldr	r2, [r4, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800add4:	6021      	str	r1, [r4, #0]
 800add6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adda:	bd70      	pop	{r4, r5, r6, pc}
 800addc:	08029316 	.word	0x08029316
 800ade0:	08029414 	.word	0x08029414

0800ade4 <__multadd>:
 800ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade8:	690d      	ldr	r5, [r1, #16]
 800adea:	4607      	mov	r7, r0
 800adec:	460c      	mov	r4, r1
 800adee:	461e      	mov	r6, r3
 800adf0:	f101 0c14 	add.w	ip, r1, #20
 800adf4:	2000      	movs	r0, #0
 800adf6:	f8dc 3000 	ldr.w	r3, [ip]
 800adfa:	b299      	uxth	r1, r3
 800adfc:	fb02 6101 	mla	r1, r2, r1, r6
 800ae00:	0c1e      	lsrs	r6, r3, #16
 800ae02:	0c0b      	lsrs	r3, r1, #16
 800ae04:	fb02 3306 	mla	r3, r2, r6, r3
 800ae08:	b289      	uxth	r1, r1
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae10:	4285      	cmp	r5, r0
 800ae12:	f84c 1b04 	str.w	r1, [ip], #4
 800ae16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae1a:	dcec      	bgt.n	800adf6 <__multadd+0x12>
 800ae1c:	b30e      	cbz	r6, 800ae62 <__multadd+0x7e>
 800ae1e:	68a3      	ldr	r3, [r4, #8]
 800ae20:	42ab      	cmp	r3, r5
 800ae22:	dc19      	bgt.n	800ae58 <__multadd+0x74>
 800ae24:	6861      	ldr	r1, [r4, #4]
 800ae26:	4638      	mov	r0, r7
 800ae28:	3101      	adds	r1, #1
 800ae2a:	f7ff ff79 	bl	800ad20 <_Balloc>
 800ae2e:	4680      	mov	r8, r0
 800ae30:	b928      	cbnz	r0, 800ae3e <__multadd+0x5a>
 800ae32:	4602      	mov	r2, r0
 800ae34:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <__multadd+0x84>)
 800ae36:	480d      	ldr	r0, [pc, #52]	; (800ae6c <__multadd+0x88>)
 800ae38:	21b5      	movs	r1, #181	; 0xb5
 800ae3a:	f000 fe2f 	bl	800ba9c <__assert_func>
 800ae3e:	6922      	ldr	r2, [r4, #16]
 800ae40:	3202      	adds	r2, #2
 800ae42:	f104 010c 	add.w	r1, r4, #12
 800ae46:	0092      	lsls	r2, r2, #2
 800ae48:	300c      	adds	r0, #12
 800ae4a:	f7fc fd9e 	bl	800798a <memcpy>
 800ae4e:	4621      	mov	r1, r4
 800ae50:	4638      	mov	r0, r7
 800ae52:	f7ff ffa5 	bl	800ada0 <_Bfree>
 800ae56:	4644      	mov	r4, r8
 800ae58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae5c:	3501      	adds	r5, #1
 800ae5e:	615e      	str	r6, [r3, #20]
 800ae60:	6125      	str	r5, [r4, #16]
 800ae62:	4620      	mov	r0, r4
 800ae64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae68:	08029388 	.word	0x08029388
 800ae6c:	08029414 	.word	0x08029414

0800ae70 <__s2b>:
 800ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae74:	460c      	mov	r4, r1
 800ae76:	4615      	mov	r5, r2
 800ae78:	461f      	mov	r7, r3
 800ae7a:	2209      	movs	r2, #9
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	4606      	mov	r6, r0
 800ae80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae84:	2100      	movs	r1, #0
 800ae86:	2201      	movs	r2, #1
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	db09      	blt.n	800aea0 <__s2b+0x30>
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f7ff ff47 	bl	800ad20 <_Balloc>
 800ae92:	b940      	cbnz	r0, 800aea6 <__s2b+0x36>
 800ae94:	4602      	mov	r2, r0
 800ae96:	4b19      	ldr	r3, [pc, #100]	; (800aefc <__s2b+0x8c>)
 800ae98:	4819      	ldr	r0, [pc, #100]	; (800af00 <__s2b+0x90>)
 800ae9a:	21ce      	movs	r1, #206	; 0xce
 800ae9c:	f000 fdfe 	bl	800ba9c <__assert_func>
 800aea0:	0052      	lsls	r2, r2, #1
 800aea2:	3101      	adds	r1, #1
 800aea4:	e7f0      	b.n	800ae88 <__s2b+0x18>
 800aea6:	9b08      	ldr	r3, [sp, #32]
 800aea8:	6143      	str	r3, [r0, #20]
 800aeaa:	2d09      	cmp	r5, #9
 800aeac:	f04f 0301 	mov.w	r3, #1
 800aeb0:	6103      	str	r3, [r0, #16]
 800aeb2:	dd16      	ble.n	800aee2 <__s2b+0x72>
 800aeb4:	f104 0909 	add.w	r9, r4, #9
 800aeb8:	46c8      	mov	r8, r9
 800aeba:	442c      	add	r4, r5
 800aebc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aec0:	4601      	mov	r1, r0
 800aec2:	3b30      	subs	r3, #48	; 0x30
 800aec4:	220a      	movs	r2, #10
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff ff8c 	bl	800ade4 <__multadd>
 800aecc:	45a0      	cmp	r8, r4
 800aece:	d1f5      	bne.n	800aebc <__s2b+0x4c>
 800aed0:	f1a5 0408 	sub.w	r4, r5, #8
 800aed4:	444c      	add	r4, r9
 800aed6:	1b2d      	subs	r5, r5, r4
 800aed8:	1963      	adds	r3, r4, r5
 800aeda:	42bb      	cmp	r3, r7
 800aedc:	db04      	blt.n	800aee8 <__s2b+0x78>
 800aede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee2:	340a      	adds	r4, #10
 800aee4:	2509      	movs	r5, #9
 800aee6:	e7f6      	b.n	800aed6 <__s2b+0x66>
 800aee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aeec:	4601      	mov	r1, r0
 800aeee:	3b30      	subs	r3, #48	; 0x30
 800aef0:	220a      	movs	r2, #10
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7ff ff76 	bl	800ade4 <__multadd>
 800aef8:	e7ee      	b.n	800aed8 <__s2b+0x68>
 800aefa:	bf00      	nop
 800aefc:	08029388 	.word	0x08029388
 800af00:	08029414 	.word	0x08029414

0800af04 <__hi0bits>:
 800af04:	0c03      	lsrs	r3, r0, #16
 800af06:	041b      	lsls	r3, r3, #16
 800af08:	b9d3      	cbnz	r3, 800af40 <__hi0bits+0x3c>
 800af0a:	0400      	lsls	r0, r0, #16
 800af0c:	2310      	movs	r3, #16
 800af0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af12:	bf04      	itt	eq
 800af14:	0200      	lsleq	r0, r0, #8
 800af16:	3308      	addeq	r3, #8
 800af18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af1c:	bf04      	itt	eq
 800af1e:	0100      	lsleq	r0, r0, #4
 800af20:	3304      	addeq	r3, #4
 800af22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af26:	bf04      	itt	eq
 800af28:	0080      	lsleq	r0, r0, #2
 800af2a:	3302      	addeq	r3, #2
 800af2c:	2800      	cmp	r0, #0
 800af2e:	db05      	blt.n	800af3c <__hi0bits+0x38>
 800af30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af34:	f103 0301 	add.w	r3, r3, #1
 800af38:	bf08      	it	eq
 800af3a:	2320      	moveq	r3, #32
 800af3c:	4618      	mov	r0, r3
 800af3e:	4770      	bx	lr
 800af40:	2300      	movs	r3, #0
 800af42:	e7e4      	b.n	800af0e <__hi0bits+0xa>

0800af44 <__lo0bits>:
 800af44:	6803      	ldr	r3, [r0, #0]
 800af46:	f013 0207 	ands.w	r2, r3, #7
 800af4a:	4601      	mov	r1, r0
 800af4c:	d00b      	beq.n	800af66 <__lo0bits+0x22>
 800af4e:	07da      	lsls	r2, r3, #31
 800af50:	d423      	bmi.n	800af9a <__lo0bits+0x56>
 800af52:	0798      	lsls	r0, r3, #30
 800af54:	bf49      	itett	mi
 800af56:	085b      	lsrmi	r3, r3, #1
 800af58:	089b      	lsrpl	r3, r3, #2
 800af5a:	2001      	movmi	r0, #1
 800af5c:	600b      	strmi	r3, [r1, #0]
 800af5e:	bf5c      	itt	pl
 800af60:	600b      	strpl	r3, [r1, #0]
 800af62:	2002      	movpl	r0, #2
 800af64:	4770      	bx	lr
 800af66:	b298      	uxth	r0, r3
 800af68:	b9a8      	cbnz	r0, 800af96 <__lo0bits+0x52>
 800af6a:	0c1b      	lsrs	r3, r3, #16
 800af6c:	2010      	movs	r0, #16
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	b90a      	cbnz	r2, 800af76 <__lo0bits+0x32>
 800af72:	3008      	adds	r0, #8
 800af74:	0a1b      	lsrs	r3, r3, #8
 800af76:	071a      	lsls	r2, r3, #28
 800af78:	bf04      	itt	eq
 800af7a:	091b      	lsreq	r3, r3, #4
 800af7c:	3004      	addeq	r0, #4
 800af7e:	079a      	lsls	r2, r3, #30
 800af80:	bf04      	itt	eq
 800af82:	089b      	lsreq	r3, r3, #2
 800af84:	3002      	addeq	r0, #2
 800af86:	07da      	lsls	r2, r3, #31
 800af88:	d403      	bmi.n	800af92 <__lo0bits+0x4e>
 800af8a:	085b      	lsrs	r3, r3, #1
 800af8c:	f100 0001 	add.w	r0, r0, #1
 800af90:	d005      	beq.n	800af9e <__lo0bits+0x5a>
 800af92:	600b      	str	r3, [r1, #0]
 800af94:	4770      	bx	lr
 800af96:	4610      	mov	r0, r2
 800af98:	e7e9      	b.n	800af6e <__lo0bits+0x2a>
 800af9a:	2000      	movs	r0, #0
 800af9c:	4770      	bx	lr
 800af9e:	2020      	movs	r0, #32
 800afa0:	4770      	bx	lr
	...

0800afa4 <__i2b>:
 800afa4:	b510      	push	{r4, lr}
 800afa6:	460c      	mov	r4, r1
 800afa8:	2101      	movs	r1, #1
 800afaa:	f7ff feb9 	bl	800ad20 <_Balloc>
 800afae:	4602      	mov	r2, r0
 800afb0:	b928      	cbnz	r0, 800afbe <__i2b+0x1a>
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <__i2b+0x24>)
 800afb4:	4805      	ldr	r0, [pc, #20]	; (800afcc <__i2b+0x28>)
 800afb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800afba:	f000 fd6f 	bl	800ba9c <__assert_func>
 800afbe:	2301      	movs	r3, #1
 800afc0:	6144      	str	r4, [r0, #20]
 800afc2:	6103      	str	r3, [r0, #16]
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	bf00      	nop
 800afc8:	08029388 	.word	0x08029388
 800afcc:	08029414 	.word	0x08029414

0800afd0 <__multiply>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	4691      	mov	r9, r2
 800afd6:	690a      	ldr	r2, [r1, #16]
 800afd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afdc:	429a      	cmp	r2, r3
 800afde:	bfb8      	it	lt
 800afe0:	460b      	movlt	r3, r1
 800afe2:	460c      	mov	r4, r1
 800afe4:	bfbc      	itt	lt
 800afe6:	464c      	movlt	r4, r9
 800afe8:	4699      	movlt	r9, r3
 800afea:	6927      	ldr	r7, [r4, #16]
 800afec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aff0:	68a3      	ldr	r3, [r4, #8]
 800aff2:	6861      	ldr	r1, [r4, #4]
 800aff4:	eb07 060a 	add.w	r6, r7, sl
 800aff8:	42b3      	cmp	r3, r6
 800affa:	b085      	sub	sp, #20
 800affc:	bfb8      	it	lt
 800affe:	3101      	addlt	r1, #1
 800b000:	f7ff fe8e 	bl	800ad20 <_Balloc>
 800b004:	b930      	cbnz	r0, 800b014 <__multiply+0x44>
 800b006:	4602      	mov	r2, r0
 800b008:	4b44      	ldr	r3, [pc, #272]	; (800b11c <__multiply+0x14c>)
 800b00a:	4845      	ldr	r0, [pc, #276]	; (800b120 <__multiply+0x150>)
 800b00c:	f240 115d 	movw	r1, #349	; 0x15d
 800b010:	f000 fd44 	bl	800ba9c <__assert_func>
 800b014:	f100 0514 	add.w	r5, r0, #20
 800b018:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b01c:	462b      	mov	r3, r5
 800b01e:	2200      	movs	r2, #0
 800b020:	4543      	cmp	r3, r8
 800b022:	d321      	bcc.n	800b068 <__multiply+0x98>
 800b024:	f104 0314 	add.w	r3, r4, #20
 800b028:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b02c:	f109 0314 	add.w	r3, r9, #20
 800b030:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b034:	9202      	str	r2, [sp, #8]
 800b036:	1b3a      	subs	r2, r7, r4
 800b038:	3a15      	subs	r2, #21
 800b03a:	f022 0203 	bic.w	r2, r2, #3
 800b03e:	3204      	adds	r2, #4
 800b040:	f104 0115 	add.w	r1, r4, #21
 800b044:	428f      	cmp	r7, r1
 800b046:	bf38      	it	cc
 800b048:	2204      	movcc	r2, #4
 800b04a:	9201      	str	r2, [sp, #4]
 800b04c:	9a02      	ldr	r2, [sp, #8]
 800b04e:	9303      	str	r3, [sp, #12]
 800b050:	429a      	cmp	r2, r3
 800b052:	d80c      	bhi.n	800b06e <__multiply+0x9e>
 800b054:	2e00      	cmp	r6, #0
 800b056:	dd03      	ble.n	800b060 <__multiply+0x90>
 800b058:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d05a      	beq.n	800b116 <__multiply+0x146>
 800b060:	6106      	str	r6, [r0, #16]
 800b062:	b005      	add	sp, #20
 800b064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b068:	f843 2b04 	str.w	r2, [r3], #4
 800b06c:	e7d8      	b.n	800b020 <__multiply+0x50>
 800b06e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b072:	f1ba 0f00 	cmp.w	sl, #0
 800b076:	d024      	beq.n	800b0c2 <__multiply+0xf2>
 800b078:	f104 0e14 	add.w	lr, r4, #20
 800b07c:	46a9      	mov	r9, r5
 800b07e:	f04f 0c00 	mov.w	ip, #0
 800b082:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b086:	f8d9 1000 	ldr.w	r1, [r9]
 800b08a:	fa1f fb82 	uxth.w	fp, r2
 800b08e:	b289      	uxth	r1, r1
 800b090:	fb0a 110b 	mla	r1, sl, fp, r1
 800b094:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b098:	f8d9 2000 	ldr.w	r2, [r9]
 800b09c:	4461      	add	r1, ip
 800b09e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0aa:	b289      	uxth	r1, r1
 800b0ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0b0:	4577      	cmp	r7, lr
 800b0b2:	f849 1b04 	str.w	r1, [r9], #4
 800b0b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0ba:	d8e2      	bhi.n	800b082 <__multiply+0xb2>
 800b0bc:	9a01      	ldr	r2, [sp, #4]
 800b0be:	f845 c002 	str.w	ip, [r5, r2]
 800b0c2:	9a03      	ldr	r2, [sp, #12]
 800b0c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	f1b9 0f00 	cmp.w	r9, #0
 800b0ce:	d020      	beq.n	800b112 <__multiply+0x142>
 800b0d0:	6829      	ldr	r1, [r5, #0]
 800b0d2:	f104 0c14 	add.w	ip, r4, #20
 800b0d6:	46ae      	mov	lr, r5
 800b0d8:	f04f 0a00 	mov.w	sl, #0
 800b0dc:	f8bc b000 	ldrh.w	fp, [ip]
 800b0e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0e4:	fb09 220b 	mla	r2, r9, fp, r2
 800b0e8:	4492      	add	sl, r2
 800b0ea:	b289      	uxth	r1, r1
 800b0ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b0f0:	f84e 1b04 	str.w	r1, [lr], #4
 800b0f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b0f8:	f8be 1000 	ldrh.w	r1, [lr]
 800b0fc:	0c12      	lsrs	r2, r2, #16
 800b0fe:	fb09 1102 	mla	r1, r9, r2, r1
 800b102:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b106:	4567      	cmp	r7, ip
 800b108:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b10c:	d8e6      	bhi.n	800b0dc <__multiply+0x10c>
 800b10e:	9a01      	ldr	r2, [sp, #4]
 800b110:	50a9      	str	r1, [r5, r2]
 800b112:	3504      	adds	r5, #4
 800b114:	e79a      	b.n	800b04c <__multiply+0x7c>
 800b116:	3e01      	subs	r6, #1
 800b118:	e79c      	b.n	800b054 <__multiply+0x84>
 800b11a:	bf00      	nop
 800b11c:	08029388 	.word	0x08029388
 800b120:	08029414 	.word	0x08029414

0800b124 <__pow5mult>:
 800b124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b128:	4615      	mov	r5, r2
 800b12a:	f012 0203 	ands.w	r2, r2, #3
 800b12e:	4606      	mov	r6, r0
 800b130:	460f      	mov	r7, r1
 800b132:	d007      	beq.n	800b144 <__pow5mult+0x20>
 800b134:	4c25      	ldr	r4, [pc, #148]	; (800b1cc <__pow5mult+0xa8>)
 800b136:	3a01      	subs	r2, #1
 800b138:	2300      	movs	r3, #0
 800b13a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b13e:	f7ff fe51 	bl	800ade4 <__multadd>
 800b142:	4607      	mov	r7, r0
 800b144:	10ad      	asrs	r5, r5, #2
 800b146:	d03d      	beq.n	800b1c4 <__pow5mult+0xa0>
 800b148:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b14a:	b97c      	cbnz	r4, 800b16c <__pow5mult+0x48>
 800b14c:	2010      	movs	r0, #16
 800b14e:	f7ff fdc1 	bl	800acd4 <malloc>
 800b152:	4602      	mov	r2, r0
 800b154:	6270      	str	r0, [r6, #36]	; 0x24
 800b156:	b928      	cbnz	r0, 800b164 <__pow5mult+0x40>
 800b158:	4b1d      	ldr	r3, [pc, #116]	; (800b1d0 <__pow5mult+0xac>)
 800b15a:	481e      	ldr	r0, [pc, #120]	; (800b1d4 <__pow5mult+0xb0>)
 800b15c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b160:	f000 fc9c 	bl	800ba9c <__assert_func>
 800b164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b168:	6004      	str	r4, [r0, #0]
 800b16a:	60c4      	str	r4, [r0, #12]
 800b16c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b174:	b94c      	cbnz	r4, 800b18a <__pow5mult+0x66>
 800b176:	f240 2171 	movw	r1, #625	; 0x271
 800b17a:	4630      	mov	r0, r6
 800b17c:	f7ff ff12 	bl	800afa4 <__i2b>
 800b180:	2300      	movs	r3, #0
 800b182:	f8c8 0008 	str.w	r0, [r8, #8]
 800b186:	4604      	mov	r4, r0
 800b188:	6003      	str	r3, [r0, #0]
 800b18a:	f04f 0900 	mov.w	r9, #0
 800b18e:	07eb      	lsls	r3, r5, #31
 800b190:	d50a      	bpl.n	800b1a8 <__pow5mult+0x84>
 800b192:	4639      	mov	r1, r7
 800b194:	4622      	mov	r2, r4
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff ff1a 	bl	800afd0 <__multiply>
 800b19c:	4639      	mov	r1, r7
 800b19e:	4680      	mov	r8, r0
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff fdfd 	bl	800ada0 <_Bfree>
 800b1a6:	4647      	mov	r7, r8
 800b1a8:	106d      	asrs	r5, r5, #1
 800b1aa:	d00b      	beq.n	800b1c4 <__pow5mult+0xa0>
 800b1ac:	6820      	ldr	r0, [r4, #0]
 800b1ae:	b938      	cbnz	r0, 800b1c0 <__pow5mult+0x9c>
 800b1b0:	4622      	mov	r2, r4
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7ff ff0b 	bl	800afd0 <__multiply>
 800b1ba:	6020      	str	r0, [r4, #0]
 800b1bc:	f8c0 9000 	str.w	r9, [r0]
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	e7e4      	b.n	800b18e <__pow5mult+0x6a>
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ca:	bf00      	nop
 800b1cc:	08029560 	.word	0x08029560
 800b1d0:	08029316 	.word	0x08029316
 800b1d4:	08029414 	.word	0x08029414

0800b1d8 <__lshift>:
 800b1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	6849      	ldr	r1, [r1, #4]
 800b1e0:	6923      	ldr	r3, [r4, #16]
 800b1e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1e6:	68a3      	ldr	r3, [r4, #8]
 800b1e8:	4607      	mov	r7, r0
 800b1ea:	4691      	mov	r9, r2
 800b1ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1f0:	f108 0601 	add.w	r6, r8, #1
 800b1f4:	42b3      	cmp	r3, r6
 800b1f6:	db0b      	blt.n	800b210 <__lshift+0x38>
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	f7ff fd91 	bl	800ad20 <_Balloc>
 800b1fe:	4605      	mov	r5, r0
 800b200:	b948      	cbnz	r0, 800b216 <__lshift+0x3e>
 800b202:	4602      	mov	r2, r0
 800b204:	4b2a      	ldr	r3, [pc, #168]	; (800b2b0 <__lshift+0xd8>)
 800b206:	482b      	ldr	r0, [pc, #172]	; (800b2b4 <__lshift+0xdc>)
 800b208:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b20c:	f000 fc46 	bl	800ba9c <__assert_func>
 800b210:	3101      	adds	r1, #1
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	e7ee      	b.n	800b1f4 <__lshift+0x1c>
 800b216:	2300      	movs	r3, #0
 800b218:	f100 0114 	add.w	r1, r0, #20
 800b21c:	f100 0210 	add.w	r2, r0, #16
 800b220:	4618      	mov	r0, r3
 800b222:	4553      	cmp	r3, sl
 800b224:	db37      	blt.n	800b296 <__lshift+0xbe>
 800b226:	6920      	ldr	r0, [r4, #16]
 800b228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b22c:	f104 0314 	add.w	r3, r4, #20
 800b230:	f019 091f 	ands.w	r9, r9, #31
 800b234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b238:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b23c:	d02f      	beq.n	800b29e <__lshift+0xc6>
 800b23e:	f1c9 0e20 	rsb	lr, r9, #32
 800b242:	468a      	mov	sl, r1
 800b244:	f04f 0c00 	mov.w	ip, #0
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	fa02 f209 	lsl.w	r2, r2, r9
 800b24e:	ea42 020c 	orr.w	r2, r2, ip
 800b252:	f84a 2b04 	str.w	r2, [sl], #4
 800b256:	f853 2b04 	ldr.w	r2, [r3], #4
 800b25a:	4298      	cmp	r0, r3
 800b25c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b260:	d8f2      	bhi.n	800b248 <__lshift+0x70>
 800b262:	1b03      	subs	r3, r0, r4
 800b264:	3b15      	subs	r3, #21
 800b266:	f023 0303 	bic.w	r3, r3, #3
 800b26a:	3304      	adds	r3, #4
 800b26c:	f104 0215 	add.w	r2, r4, #21
 800b270:	4290      	cmp	r0, r2
 800b272:	bf38      	it	cc
 800b274:	2304      	movcc	r3, #4
 800b276:	f841 c003 	str.w	ip, [r1, r3]
 800b27a:	f1bc 0f00 	cmp.w	ip, #0
 800b27e:	d001      	beq.n	800b284 <__lshift+0xac>
 800b280:	f108 0602 	add.w	r6, r8, #2
 800b284:	3e01      	subs	r6, #1
 800b286:	4638      	mov	r0, r7
 800b288:	612e      	str	r6, [r5, #16]
 800b28a:	4621      	mov	r1, r4
 800b28c:	f7ff fd88 	bl	800ada0 <_Bfree>
 800b290:	4628      	mov	r0, r5
 800b292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b296:	f842 0f04 	str.w	r0, [r2, #4]!
 800b29a:	3301      	adds	r3, #1
 800b29c:	e7c1      	b.n	800b222 <__lshift+0x4a>
 800b29e:	3904      	subs	r1, #4
 800b2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2a8:	4298      	cmp	r0, r3
 800b2aa:	d8f9      	bhi.n	800b2a0 <__lshift+0xc8>
 800b2ac:	e7ea      	b.n	800b284 <__lshift+0xac>
 800b2ae:	bf00      	nop
 800b2b0:	08029388 	.word	0x08029388
 800b2b4:	08029414 	.word	0x08029414

0800b2b8 <__mcmp>:
 800b2b8:	b530      	push	{r4, r5, lr}
 800b2ba:	6902      	ldr	r2, [r0, #16]
 800b2bc:	690c      	ldr	r4, [r1, #16]
 800b2be:	1b12      	subs	r2, r2, r4
 800b2c0:	d10e      	bne.n	800b2e0 <__mcmp+0x28>
 800b2c2:	f100 0314 	add.w	r3, r0, #20
 800b2c6:	3114      	adds	r1, #20
 800b2c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2d8:	42a5      	cmp	r5, r4
 800b2da:	d003      	beq.n	800b2e4 <__mcmp+0x2c>
 800b2dc:	d305      	bcc.n	800b2ea <__mcmp+0x32>
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	bd30      	pop	{r4, r5, pc}
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	d3f3      	bcc.n	800b2d0 <__mcmp+0x18>
 800b2e8:	e7fa      	b.n	800b2e0 <__mcmp+0x28>
 800b2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ee:	e7f7      	b.n	800b2e0 <__mcmp+0x28>

0800b2f0 <__mdiff>:
 800b2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	4690      	mov	r8, r2
 800b2fe:	f7ff ffdb 	bl	800b2b8 <__mcmp>
 800b302:	1e05      	subs	r5, r0, #0
 800b304:	d110      	bne.n	800b328 <__mdiff+0x38>
 800b306:	4629      	mov	r1, r5
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff fd09 	bl	800ad20 <_Balloc>
 800b30e:	b930      	cbnz	r0, 800b31e <__mdiff+0x2e>
 800b310:	4b3a      	ldr	r3, [pc, #232]	; (800b3fc <__mdiff+0x10c>)
 800b312:	4602      	mov	r2, r0
 800b314:	f240 2132 	movw	r1, #562	; 0x232
 800b318:	4839      	ldr	r0, [pc, #228]	; (800b400 <__mdiff+0x110>)
 800b31a:	f000 fbbf 	bl	800ba9c <__assert_func>
 800b31e:	2301      	movs	r3, #1
 800b320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b328:	bfa4      	itt	ge
 800b32a:	4643      	movge	r3, r8
 800b32c:	46a0      	movge	r8, r4
 800b32e:	4630      	mov	r0, r6
 800b330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b334:	bfa6      	itte	ge
 800b336:	461c      	movge	r4, r3
 800b338:	2500      	movge	r5, #0
 800b33a:	2501      	movlt	r5, #1
 800b33c:	f7ff fcf0 	bl	800ad20 <_Balloc>
 800b340:	b920      	cbnz	r0, 800b34c <__mdiff+0x5c>
 800b342:	4b2e      	ldr	r3, [pc, #184]	; (800b3fc <__mdiff+0x10c>)
 800b344:	4602      	mov	r2, r0
 800b346:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b34a:	e7e5      	b.n	800b318 <__mdiff+0x28>
 800b34c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b350:	6926      	ldr	r6, [r4, #16]
 800b352:	60c5      	str	r5, [r0, #12]
 800b354:	f104 0914 	add.w	r9, r4, #20
 800b358:	f108 0514 	add.w	r5, r8, #20
 800b35c:	f100 0e14 	add.w	lr, r0, #20
 800b360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b368:	f108 0210 	add.w	r2, r8, #16
 800b36c:	46f2      	mov	sl, lr
 800b36e:	2100      	movs	r1, #0
 800b370:	f859 3b04 	ldr.w	r3, [r9], #4
 800b374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b378:	fa1f f883 	uxth.w	r8, r3
 800b37c:	fa11 f18b 	uxtah	r1, r1, fp
 800b380:	0c1b      	lsrs	r3, r3, #16
 800b382:	eba1 0808 	sub.w	r8, r1, r8
 800b386:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b38a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b38e:	fa1f f888 	uxth.w	r8, r8
 800b392:	1419      	asrs	r1, r3, #16
 800b394:	454e      	cmp	r6, r9
 800b396:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b39a:	f84a 3b04 	str.w	r3, [sl], #4
 800b39e:	d8e7      	bhi.n	800b370 <__mdiff+0x80>
 800b3a0:	1b33      	subs	r3, r6, r4
 800b3a2:	3b15      	subs	r3, #21
 800b3a4:	f023 0303 	bic.w	r3, r3, #3
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	3415      	adds	r4, #21
 800b3ac:	42a6      	cmp	r6, r4
 800b3ae:	bf38      	it	cc
 800b3b0:	2304      	movcc	r3, #4
 800b3b2:	441d      	add	r5, r3
 800b3b4:	4473      	add	r3, lr
 800b3b6:	469e      	mov	lr, r3
 800b3b8:	462e      	mov	r6, r5
 800b3ba:	4566      	cmp	r6, ip
 800b3bc:	d30e      	bcc.n	800b3dc <__mdiff+0xec>
 800b3be:	f10c 0203 	add.w	r2, ip, #3
 800b3c2:	1b52      	subs	r2, r2, r5
 800b3c4:	f022 0203 	bic.w	r2, r2, #3
 800b3c8:	3d03      	subs	r5, #3
 800b3ca:	45ac      	cmp	ip, r5
 800b3cc:	bf38      	it	cc
 800b3ce:	2200      	movcc	r2, #0
 800b3d0:	441a      	add	r2, r3
 800b3d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3d6:	b17b      	cbz	r3, 800b3f8 <__mdiff+0x108>
 800b3d8:	6107      	str	r7, [r0, #16]
 800b3da:	e7a3      	b.n	800b324 <__mdiff+0x34>
 800b3dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b3e0:	fa11 f288 	uxtah	r2, r1, r8
 800b3e4:	1414      	asrs	r4, r2, #16
 800b3e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3ea:	b292      	uxth	r2, r2
 800b3ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3f0:	f84e 2b04 	str.w	r2, [lr], #4
 800b3f4:	1421      	asrs	r1, r4, #16
 800b3f6:	e7e0      	b.n	800b3ba <__mdiff+0xca>
 800b3f8:	3f01      	subs	r7, #1
 800b3fa:	e7ea      	b.n	800b3d2 <__mdiff+0xe2>
 800b3fc:	08029388 	.word	0x08029388
 800b400:	08029414 	.word	0x08029414

0800b404 <__ulp>:
 800b404:	b082      	sub	sp, #8
 800b406:	ed8d 0b00 	vstr	d0, [sp]
 800b40a:	9b01      	ldr	r3, [sp, #4]
 800b40c:	4912      	ldr	r1, [pc, #72]	; (800b458 <__ulp+0x54>)
 800b40e:	4019      	ands	r1, r3
 800b410:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b414:	2900      	cmp	r1, #0
 800b416:	dd05      	ble.n	800b424 <__ulp+0x20>
 800b418:	2200      	movs	r2, #0
 800b41a:	460b      	mov	r3, r1
 800b41c:	ec43 2b10 	vmov	d0, r2, r3
 800b420:	b002      	add	sp, #8
 800b422:	4770      	bx	lr
 800b424:	4249      	negs	r1, r1
 800b426:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b42a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	f04f 0300 	mov.w	r3, #0
 800b436:	da04      	bge.n	800b442 <__ulp+0x3e>
 800b438:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b43c:	fa41 f300 	asr.w	r3, r1, r0
 800b440:	e7ec      	b.n	800b41c <__ulp+0x18>
 800b442:	f1a0 0114 	sub.w	r1, r0, #20
 800b446:	291e      	cmp	r1, #30
 800b448:	bfda      	itte	le
 800b44a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b44e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b452:	2101      	movgt	r1, #1
 800b454:	460a      	mov	r2, r1
 800b456:	e7e1      	b.n	800b41c <__ulp+0x18>
 800b458:	7ff00000 	.word	0x7ff00000

0800b45c <__b2d>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	6905      	ldr	r5, [r0, #16]
 800b460:	f100 0714 	add.w	r7, r0, #20
 800b464:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b468:	1f2e      	subs	r6, r5, #4
 800b46a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b46e:	4620      	mov	r0, r4
 800b470:	f7ff fd48 	bl	800af04 <__hi0bits>
 800b474:	f1c0 0320 	rsb	r3, r0, #32
 800b478:	280a      	cmp	r0, #10
 800b47a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b4f8 <__b2d+0x9c>
 800b47e:	600b      	str	r3, [r1, #0]
 800b480:	dc14      	bgt.n	800b4ac <__b2d+0x50>
 800b482:	f1c0 0e0b 	rsb	lr, r0, #11
 800b486:	fa24 f10e 	lsr.w	r1, r4, lr
 800b48a:	42b7      	cmp	r7, r6
 800b48c:	ea41 030c 	orr.w	r3, r1, ip
 800b490:	bf34      	ite	cc
 800b492:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b496:	2100      	movcs	r1, #0
 800b498:	3015      	adds	r0, #21
 800b49a:	fa04 f000 	lsl.w	r0, r4, r0
 800b49e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b4a2:	ea40 0201 	orr.w	r2, r0, r1
 800b4a6:	ec43 2b10 	vmov	d0, r2, r3
 800b4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ac:	42b7      	cmp	r7, r6
 800b4ae:	bf3a      	itte	cc
 800b4b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4b8:	2100      	movcs	r1, #0
 800b4ba:	380b      	subs	r0, #11
 800b4bc:	d017      	beq.n	800b4ee <__b2d+0x92>
 800b4be:	f1c0 0c20 	rsb	ip, r0, #32
 800b4c2:	fa04 f500 	lsl.w	r5, r4, r0
 800b4c6:	42be      	cmp	r6, r7
 800b4c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b4cc:	ea45 0504 	orr.w	r5, r5, r4
 800b4d0:	bf8c      	ite	hi
 800b4d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b4d6:	2400      	movls	r4, #0
 800b4d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b4dc:	fa01 f000 	lsl.w	r0, r1, r0
 800b4e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b4e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b4e8:	ea40 0204 	orr.w	r2, r0, r4
 800b4ec:	e7db      	b.n	800b4a6 <__b2d+0x4a>
 800b4ee:	ea44 030c 	orr.w	r3, r4, ip
 800b4f2:	460a      	mov	r2, r1
 800b4f4:	e7d7      	b.n	800b4a6 <__b2d+0x4a>
 800b4f6:	bf00      	nop
 800b4f8:	3ff00000 	.word	0x3ff00000

0800b4fc <__d2b>:
 800b4fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b500:	4689      	mov	r9, r1
 800b502:	2101      	movs	r1, #1
 800b504:	ec57 6b10 	vmov	r6, r7, d0
 800b508:	4690      	mov	r8, r2
 800b50a:	f7ff fc09 	bl	800ad20 <_Balloc>
 800b50e:	4604      	mov	r4, r0
 800b510:	b930      	cbnz	r0, 800b520 <__d2b+0x24>
 800b512:	4602      	mov	r2, r0
 800b514:	4b25      	ldr	r3, [pc, #148]	; (800b5ac <__d2b+0xb0>)
 800b516:	4826      	ldr	r0, [pc, #152]	; (800b5b0 <__d2b+0xb4>)
 800b518:	f240 310a 	movw	r1, #778	; 0x30a
 800b51c:	f000 fabe 	bl	800ba9c <__assert_func>
 800b520:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b524:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b528:	bb35      	cbnz	r5, 800b578 <__d2b+0x7c>
 800b52a:	2e00      	cmp	r6, #0
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	d028      	beq.n	800b582 <__d2b+0x86>
 800b530:	4668      	mov	r0, sp
 800b532:	9600      	str	r6, [sp, #0]
 800b534:	f7ff fd06 	bl	800af44 <__lo0bits>
 800b538:	9900      	ldr	r1, [sp, #0]
 800b53a:	b300      	cbz	r0, 800b57e <__d2b+0x82>
 800b53c:	9a01      	ldr	r2, [sp, #4]
 800b53e:	f1c0 0320 	rsb	r3, r0, #32
 800b542:	fa02 f303 	lsl.w	r3, r2, r3
 800b546:	430b      	orrs	r3, r1
 800b548:	40c2      	lsrs	r2, r0
 800b54a:	6163      	str	r3, [r4, #20]
 800b54c:	9201      	str	r2, [sp, #4]
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	61a3      	str	r3, [r4, #24]
 800b552:	2b00      	cmp	r3, #0
 800b554:	bf14      	ite	ne
 800b556:	2202      	movne	r2, #2
 800b558:	2201      	moveq	r2, #1
 800b55a:	6122      	str	r2, [r4, #16]
 800b55c:	b1d5      	cbz	r5, 800b594 <__d2b+0x98>
 800b55e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b562:	4405      	add	r5, r0
 800b564:	f8c9 5000 	str.w	r5, [r9]
 800b568:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b56c:	f8c8 0000 	str.w	r0, [r8]
 800b570:	4620      	mov	r0, r4
 800b572:	b003      	add	sp, #12
 800b574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b57c:	e7d5      	b.n	800b52a <__d2b+0x2e>
 800b57e:	6161      	str	r1, [r4, #20]
 800b580:	e7e5      	b.n	800b54e <__d2b+0x52>
 800b582:	a801      	add	r0, sp, #4
 800b584:	f7ff fcde 	bl	800af44 <__lo0bits>
 800b588:	9b01      	ldr	r3, [sp, #4]
 800b58a:	6163      	str	r3, [r4, #20]
 800b58c:	2201      	movs	r2, #1
 800b58e:	6122      	str	r2, [r4, #16]
 800b590:	3020      	adds	r0, #32
 800b592:	e7e3      	b.n	800b55c <__d2b+0x60>
 800b594:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b598:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b59c:	f8c9 0000 	str.w	r0, [r9]
 800b5a0:	6918      	ldr	r0, [r3, #16]
 800b5a2:	f7ff fcaf 	bl	800af04 <__hi0bits>
 800b5a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5aa:	e7df      	b.n	800b56c <__d2b+0x70>
 800b5ac:	08029388 	.word	0x08029388
 800b5b0:	08029414 	.word	0x08029414

0800b5b4 <__ratio>:
 800b5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	4688      	mov	r8, r1
 800b5ba:	4669      	mov	r1, sp
 800b5bc:	4681      	mov	r9, r0
 800b5be:	f7ff ff4d 	bl	800b45c <__b2d>
 800b5c2:	a901      	add	r1, sp, #4
 800b5c4:	4640      	mov	r0, r8
 800b5c6:	ec55 4b10 	vmov	r4, r5, d0
 800b5ca:	f7ff ff47 	bl	800b45c <__b2d>
 800b5ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b5d6:	eba3 0c02 	sub.w	ip, r3, r2
 800b5da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5de:	1a9b      	subs	r3, r3, r2
 800b5e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b5e4:	ec51 0b10 	vmov	r0, r1, d0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	bfd6      	itet	le
 800b5ec:	460a      	movle	r2, r1
 800b5ee:	462a      	movgt	r2, r5
 800b5f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b5f4:	468b      	mov	fp, r1
 800b5f6:	462f      	mov	r7, r5
 800b5f8:	bfd4      	ite	le
 800b5fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b5fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b602:	4620      	mov	r0, r4
 800b604:	ee10 2a10 	vmov	r2, s0
 800b608:	465b      	mov	r3, fp
 800b60a:	4639      	mov	r1, r7
 800b60c:	f7f5 f93e 	bl	800088c <__aeabi_ddiv>
 800b610:	ec41 0b10 	vmov	d0, r0, r1
 800b614:	b003      	add	sp, #12
 800b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b61a <__copybits>:
 800b61a:	3901      	subs	r1, #1
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	1149      	asrs	r1, r1, #5
 800b620:	6914      	ldr	r4, [r2, #16]
 800b622:	3101      	adds	r1, #1
 800b624:	f102 0314 	add.w	r3, r2, #20
 800b628:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b62c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b630:	1f05      	subs	r5, r0, #4
 800b632:	42a3      	cmp	r3, r4
 800b634:	d30c      	bcc.n	800b650 <__copybits+0x36>
 800b636:	1aa3      	subs	r3, r4, r2
 800b638:	3b11      	subs	r3, #17
 800b63a:	f023 0303 	bic.w	r3, r3, #3
 800b63e:	3211      	adds	r2, #17
 800b640:	42a2      	cmp	r2, r4
 800b642:	bf88      	it	hi
 800b644:	2300      	movhi	r3, #0
 800b646:	4418      	add	r0, r3
 800b648:	2300      	movs	r3, #0
 800b64a:	4288      	cmp	r0, r1
 800b64c:	d305      	bcc.n	800b65a <__copybits+0x40>
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	f853 6b04 	ldr.w	r6, [r3], #4
 800b654:	f845 6f04 	str.w	r6, [r5, #4]!
 800b658:	e7eb      	b.n	800b632 <__copybits+0x18>
 800b65a:	f840 3b04 	str.w	r3, [r0], #4
 800b65e:	e7f4      	b.n	800b64a <__copybits+0x30>

0800b660 <__any_on>:
 800b660:	f100 0214 	add.w	r2, r0, #20
 800b664:	6900      	ldr	r0, [r0, #16]
 800b666:	114b      	asrs	r3, r1, #5
 800b668:	4298      	cmp	r0, r3
 800b66a:	b510      	push	{r4, lr}
 800b66c:	db11      	blt.n	800b692 <__any_on+0x32>
 800b66e:	dd0a      	ble.n	800b686 <__any_on+0x26>
 800b670:	f011 011f 	ands.w	r1, r1, #31
 800b674:	d007      	beq.n	800b686 <__any_on+0x26>
 800b676:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b67a:	fa24 f001 	lsr.w	r0, r4, r1
 800b67e:	fa00 f101 	lsl.w	r1, r0, r1
 800b682:	428c      	cmp	r4, r1
 800b684:	d10b      	bne.n	800b69e <__any_on+0x3e>
 800b686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d803      	bhi.n	800b696 <__any_on+0x36>
 800b68e:	2000      	movs	r0, #0
 800b690:	bd10      	pop	{r4, pc}
 800b692:	4603      	mov	r3, r0
 800b694:	e7f7      	b.n	800b686 <__any_on+0x26>
 800b696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b69a:	2900      	cmp	r1, #0
 800b69c:	d0f5      	beq.n	800b68a <__any_on+0x2a>
 800b69e:	2001      	movs	r0, #1
 800b6a0:	e7f6      	b.n	800b690 <__any_on+0x30>

0800b6a2 <_calloc_r>:
 800b6a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6a4:	fba1 2402 	umull	r2, r4, r1, r2
 800b6a8:	b94c      	cbnz	r4, 800b6be <_calloc_r+0x1c>
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	9201      	str	r2, [sp, #4]
 800b6ae:	f7fc f9a3 	bl	80079f8 <_malloc_r>
 800b6b2:	9a01      	ldr	r2, [sp, #4]
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	b930      	cbnz	r0, 800b6c6 <_calloc_r+0x24>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	b003      	add	sp, #12
 800b6bc:	bd30      	pop	{r4, r5, pc}
 800b6be:	220c      	movs	r2, #12
 800b6c0:	6002      	str	r2, [r0, #0]
 800b6c2:	2500      	movs	r5, #0
 800b6c4:	e7f8      	b.n	800b6b8 <_calloc_r+0x16>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	f7fc f96d 	bl	80079a6 <memset>
 800b6cc:	e7f4      	b.n	800b6b8 <_calloc_r+0x16>
	...

0800b6d0 <_free_r>:
 800b6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	d044      	beq.n	800b760 <_free_r+0x90>
 800b6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6da:	9001      	str	r0, [sp, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f1a1 0404 	sub.w	r4, r1, #4
 800b6e2:	bfb8      	it	lt
 800b6e4:	18e4      	addlt	r4, r4, r3
 800b6e6:	f7ff fb0f 	bl	800ad08 <__malloc_lock>
 800b6ea:	4a1e      	ldr	r2, [pc, #120]	; (800b764 <_free_r+0x94>)
 800b6ec:	9801      	ldr	r0, [sp, #4]
 800b6ee:	6813      	ldr	r3, [r2, #0]
 800b6f0:	b933      	cbnz	r3, 800b700 <_free_r+0x30>
 800b6f2:	6063      	str	r3, [r4, #4]
 800b6f4:	6014      	str	r4, [r2, #0]
 800b6f6:	b003      	add	sp, #12
 800b6f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6fc:	f7ff bb0a 	b.w	800ad14 <__malloc_unlock>
 800b700:	42a3      	cmp	r3, r4
 800b702:	d908      	bls.n	800b716 <_free_r+0x46>
 800b704:	6825      	ldr	r5, [r4, #0]
 800b706:	1961      	adds	r1, r4, r5
 800b708:	428b      	cmp	r3, r1
 800b70a:	bf01      	itttt	eq
 800b70c:	6819      	ldreq	r1, [r3, #0]
 800b70e:	685b      	ldreq	r3, [r3, #4]
 800b710:	1949      	addeq	r1, r1, r5
 800b712:	6021      	streq	r1, [r4, #0]
 800b714:	e7ed      	b.n	800b6f2 <_free_r+0x22>
 800b716:	461a      	mov	r2, r3
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	b10b      	cbz	r3, 800b720 <_free_r+0x50>
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	d9fa      	bls.n	800b716 <_free_r+0x46>
 800b720:	6811      	ldr	r1, [r2, #0]
 800b722:	1855      	adds	r5, r2, r1
 800b724:	42a5      	cmp	r5, r4
 800b726:	d10b      	bne.n	800b740 <_free_r+0x70>
 800b728:	6824      	ldr	r4, [r4, #0]
 800b72a:	4421      	add	r1, r4
 800b72c:	1854      	adds	r4, r2, r1
 800b72e:	42a3      	cmp	r3, r4
 800b730:	6011      	str	r1, [r2, #0]
 800b732:	d1e0      	bne.n	800b6f6 <_free_r+0x26>
 800b734:	681c      	ldr	r4, [r3, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	6053      	str	r3, [r2, #4]
 800b73a:	4421      	add	r1, r4
 800b73c:	6011      	str	r1, [r2, #0]
 800b73e:	e7da      	b.n	800b6f6 <_free_r+0x26>
 800b740:	d902      	bls.n	800b748 <_free_r+0x78>
 800b742:	230c      	movs	r3, #12
 800b744:	6003      	str	r3, [r0, #0]
 800b746:	e7d6      	b.n	800b6f6 <_free_r+0x26>
 800b748:	6825      	ldr	r5, [r4, #0]
 800b74a:	1961      	adds	r1, r4, r5
 800b74c:	428b      	cmp	r3, r1
 800b74e:	bf04      	itt	eq
 800b750:	6819      	ldreq	r1, [r3, #0]
 800b752:	685b      	ldreq	r3, [r3, #4]
 800b754:	6063      	str	r3, [r4, #4]
 800b756:	bf04      	itt	eq
 800b758:	1949      	addeq	r1, r1, r5
 800b75a:	6021      	streq	r1, [r4, #0]
 800b75c:	6054      	str	r4, [r2, #4]
 800b75e:	e7ca      	b.n	800b6f6 <_free_r+0x26>
 800b760:	b003      	add	sp, #12
 800b762:	bd30      	pop	{r4, r5, pc}
 800b764:	2001024c 	.word	0x2001024c

0800b768 <__ssputs_r>:
 800b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76c:	688e      	ldr	r6, [r1, #8]
 800b76e:	429e      	cmp	r6, r3
 800b770:	4682      	mov	sl, r0
 800b772:	460c      	mov	r4, r1
 800b774:	4690      	mov	r8, r2
 800b776:	461f      	mov	r7, r3
 800b778:	d838      	bhi.n	800b7ec <__ssputs_r+0x84>
 800b77a:	898a      	ldrh	r2, [r1, #12]
 800b77c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b780:	d032      	beq.n	800b7e8 <__ssputs_r+0x80>
 800b782:	6825      	ldr	r5, [r4, #0]
 800b784:	6909      	ldr	r1, [r1, #16]
 800b786:	eba5 0901 	sub.w	r9, r5, r1
 800b78a:	6965      	ldr	r5, [r4, #20]
 800b78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b794:	3301      	adds	r3, #1
 800b796:	444b      	add	r3, r9
 800b798:	106d      	asrs	r5, r5, #1
 800b79a:	429d      	cmp	r5, r3
 800b79c:	bf38      	it	cc
 800b79e:	461d      	movcc	r5, r3
 800b7a0:	0553      	lsls	r3, r2, #21
 800b7a2:	d531      	bpl.n	800b808 <__ssputs_r+0xa0>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	f7fc f927 	bl	80079f8 <_malloc_r>
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	b950      	cbnz	r0, 800b7c4 <__ssputs_r+0x5c>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	f8ca 3000 	str.w	r3, [sl]
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c4:	6921      	ldr	r1, [r4, #16]
 800b7c6:	464a      	mov	r2, r9
 800b7c8:	f7fc f8df 	bl	800798a <memcpy>
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d6:	81a3      	strh	r3, [r4, #12]
 800b7d8:	6126      	str	r6, [r4, #16]
 800b7da:	6165      	str	r5, [r4, #20]
 800b7dc:	444e      	add	r6, r9
 800b7de:	eba5 0509 	sub.w	r5, r5, r9
 800b7e2:	6026      	str	r6, [r4, #0]
 800b7e4:	60a5      	str	r5, [r4, #8]
 800b7e6:	463e      	mov	r6, r7
 800b7e8:	42be      	cmp	r6, r7
 800b7ea:	d900      	bls.n	800b7ee <__ssputs_r+0x86>
 800b7ec:	463e      	mov	r6, r7
 800b7ee:	6820      	ldr	r0, [r4, #0]
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	4641      	mov	r1, r8
 800b7f4:	f000 f982 	bl	800bafc <memmove>
 800b7f8:	68a3      	ldr	r3, [r4, #8]
 800b7fa:	1b9b      	subs	r3, r3, r6
 800b7fc:	60a3      	str	r3, [r4, #8]
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	4433      	add	r3, r6
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	2000      	movs	r0, #0
 800b806:	e7db      	b.n	800b7c0 <__ssputs_r+0x58>
 800b808:	462a      	mov	r2, r5
 800b80a:	f000 f991 	bl	800bb30 <_realloc_r>
 800b80e:	4606      	mov	r6, r0
 800b810:	2800      	cmp	r0, #0
 800b812:	d1e1      	bne.n	800b7d8 <__ssputs_r+0x70>
 800b814:	6921      	ldr	r1, [r4, #16]
 800b816:	4650      	mov	r0, sl
 800b818:	f7ff ff5a 	bl	800b6d0 <_free_r>
 800b81c:	e7c7      	b.n	800b7ae <__ssputs_r+0x46>
	...

0800b820 <_svfiprintf_r>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	4698      	mov	r8, r3
 800b826:	898b      	ldrh	r3, [r1, #12]
 800b828:	061b      	lsls	r3, r3, #24
 800b82a:	b09d      	sub	sp, #116	; 0x74
 800b82c:	4607      	mov	r7, r0
 800b82e:	460d      	mov	r5, r1
 800b830:	4614      	mov	r4, r2
 800b832:	d50e      	bpl.n	800b852 <_svfiprintf_r+0x32>
 800b834:	690b      	ldr	r3, [r1, #16]
 800b836:	b963      	cbnz	r3, 800b852 <_svfiprintf_r+0x32>
 800b838:	2140      	movs	r1, #64	; 0x40
 800b83a:	f7fc f8dd 	bl	80079f8 <_malloc_r>
 800b83e:	6028      	str	r0, [r5, #0]
 800b840:	6128      	str	r0, [r5, #16]
 800b842:	b920      	cbnz	r0, 800b84e <_svfiprintf_r+0x2e>
 800b844:	230c      	movs	r3, #12
 800b846:	603b      	str	r3, [r7, #0]
 800b848:	f04f 30ff 	mov.w	r0, #4294967295
 800b84c:	e0d1      	b.n	800b9f2 <_svfiprintf_r+0x1d2>
 800b84e:	2340      	movs	r3, #64	; 0x40
 800b850:	616b      	str	r3, [r5, #20]
 800b852:	2300      	movs	r3, #0
 800b854:	9309      	str	r3, [sp, #36]	; 0x24
 800b856:	2320      	movs	r3, #32
 800b858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b85c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b860:	2330      	movs	r3, #48	; 0x30
 800b862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba0c <_svfiprintf_r+0x1ec>
 800b866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b86a:	f04f 0901 	mov.w	r9, #1
 800b86e:	4623      	mov	r3, r4
 800b870:	469a      	mov	sl, r3
 800b872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b876:	b10a      	cbz	r2, 800b87c <_svfiprintf_r+0x5c>
 800b878:	2a25      	cmp	r2, #37	; 0x25
 800b87a:	d1f9      	bne.n	800b870 <_svfiprintf_r+0x50>
 800b87c:	ebba 0b04 	subs.w	fp, sl, r4
 800b880:	d00b      	beq.n	800b89a <_svfiprintf_r+0x7a>
 800b882:	465b      	mov	r3, fp
 800b884:	4622      	mov	r2, r4
 800b886:	4629      	mov	r1, r5
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff ff6d 	bl	800b768 <__ssputs_r>
 800b88e:	3001      	adds	r0, #1
 800b890:	f000 80aa 	beq.w	800b9e8 <_svfiprintf_r+0x1c8>
 800b894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b896:	445a      	add	r2, fp
 800b898:	9209      	str	r2, [sp, #36]	; 0x24
 800b89a:	f89a 3000 	ldrb.w	r3, [sl]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 80a2 	beq.w	800b9e8 <_svfiprintf_r+0x1c8>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8ae:	f10a 0a01 	add.w	sl, sl, #1
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	9307      	str	r3, [sp, #28]
 800b8b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b8bc:	4654      	mov	r4, sl
 800b8be:	2205      	movs	r2, #5
 800b8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c4:	4851      	ldr	r0, [pc, #324]	; (800ba0c <_svfiprintf_r+0x1ec>)
 800b8c6:	f7f4 fcab 	bl	8000220 <memchr>
 800b8ca:	9a04      	ldr	r2, [sp, #16]
 800b8cc:	b9d8      	cbnz	r0, 800b906 <_svfiprintf_r+0xe6>
 800b8ce:	06d0      	lsls	r0, r2, #27
 800b8d0:	bf44      	itt	mi
 800b8d2:	2320      	movmi	r3, #32
 800b8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8d8:	0711      	lsls	r1, r2, #28
 800b8da:	bf44      	itt	mi
 800b8dc:	232b      	movmi	r3, #43	; 0x2b
 800b8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8e8:	d015      	beq.n	800b916 <_svfiprintf_r+0xf6>
 800b8ea:	9a07      	ldr	r2, [sp, #28]
 800b8ec:	4654      	mov	r4, sl
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	f04f 0c0a 	mov.w	ip, #10
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8fa:	3b30      	subs	r3, #48	; 0x30
 800b8fc:	2b09      	cmp	r3, #9
 800b8fe:	d94e      	bls.n	800b99e <_svfiprintf_r+0x17e>
 800b900:	b1b0      	cbz	r0, 800b930 <_svfiprintf_r+0x110>
 800b902:	9207      	str	r2, [sp, #28]
 800b904:	e014      	b.n	800b930 <_svfiprintf_r+0x110>
 800b906:	eba0 0308 	sub.w	r3, r0, r8
 800b90a:	fa09 f303 	lsl.w	r3, r9, r3
 800b90e:	4313      	orrs	r3, r2
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	46a2      	mov	sl, r4
 800b914:	e7d2      	b.n	800b8bc <_svfiprintf_r+0x9c>
 800b916:	9b03      	ldr	r3, [sp, #12]
 800b918:	1d19      	adds	r1, r3, #4
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	9103      	str	r1, [sp, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bfbb      	ittet	lt
 800b922:	425b      	neglt	r3, r3
 800b924:	f042 0202 	orrlt.w	r2, r2, #2
 800b928:	9307      	strge	r3, [sp, #28]
 800b92a:	9307      	strlt	r3, [sp, #28]
 800b92c:	bfb8      	it	lt
 800b92e:	9204      	strlt	r2, [sp, #16]
 800b930:	7823      	ldrb	r3, [r4, #0]
 800b932:	2b2e      	cmp	r3, #46	; 0x2e
 800b934:	d10c      	bne.n	800b950 <_svfiprintf_r+0x130>
 800b936:	7863      	ldrb	r3, [r4, #1]
 800b938:	2b2a      	cmp	r3, #42	; 0x2a
 800b93a:	d135      	bne.n	800b9a8 <_svfiprintf_r+0x188>
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	1d1a      	adds	r2, r3, #4
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	9203      	str	r2, [sp, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	bfb8      	it	lt
 800b948:	f04f 33ff 	movlt.w	r3, #4294967295
 800b94c:	3402      	adds	r4, #2
 800b94e:	9305      	str	r3, [sp, #20]
 800b950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba1c <_svfiprintf_r+0x1fc>
 800b954:	7821      	ldrb	r1, [r4, #0]
 800b956:	2203      	movs	r2, #3
 800b958:	4650      	mov	r0, sl
 800b95a:	f7f4 fc61 	bl	8000220 <memchr>
 800b95e:	b140      	cbz	r0, 800b972 <_svfiprintf_r+0x152>
 800b960:	2340      	movs	r3, #64	; 0x40
 800b962:	eba0 000a 	sub.w	r0, r0, sl
 800b966:	fa03 f000 	lsl.w	r0, r3, r0
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	4303      	orrs	r3, r0
 800b96e:	3401      	adds	r4, #1
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b976:	4826      	ldr	r0, [pc, #152]	; (800ba10 <_svfiprintf_r+0x1f0>)
 800b978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b97c:	2206      	movs	r2, #6
 800b97e:	f7f4 fc4f 	bl	8000220 <memchr>
 800b982:	2800      	cmp	r0, #0
 800b984:	d038      	beq.n	800b9f8 <_svfiprintf_r+0x1d8>
 800b986:	4b23      	ldr	r3, [pc, #140]	; (800ba14 <_svfiprintf_r+0x1f4>)
 800b988:	bb1b      	cbnz	r3, 800b9d2 <_svfiprintf_r+0x1b2>
 800b98a:	9b03      	ldr	r3, [sp, #12]
 800b98c:	3307      	adds	r3, #7
 800b98e:	f023 0307 	bic.w	r3, r3, #7
 800b992:	3308      	adds	r3, #8
 800b994:	9303      	str	r3, [sp, #12]
 800b996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b998:	4433      	add	r3, r6
 800b99a:	9309      	str	r3, [sp, #36]	; 0x24
 800b99c:	e767      	b.n	800b86e <_svfiprintf_r+0x4e>
 800b99e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	e7a5      	b.n	800b8f4 <_svfiprintf_r+0xd4>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	3401      	adds	r4, #1
 800b9ac:	9305      	str	r3, [sp, #20]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	f04f 0c0a 	mov.w	ip, #10
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9ba:	3a30      	subs	r2, #48	; 0x30
 800b9bc:	2a09      	cmp	r2, #9
 800b9be:	d903      	bls.n	800b9c8 <_svfiprintf_r+0x1a8>
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d0c5      	beq.n	800b950 <_svfiprintf_r+0x130>
 800b9c4:	9105      	str	r1, [sp, #20]
 800b9c6:	e7c3      	b.n	800b950 <_svfiprintf_r+0x130>
 800b9c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e7f0      	b.n	800b9b4 <_svfiprintf_r+0x194>
 800b9d2:	ab03      	add	r3, sp, #12
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	462a      	mov	r2, r5
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <_svfiprintf_r+0x1f8>)
 800b9da:	a904      	add	r1, sp, #16
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f7fc f91f 	bl	8007c20 <_printf_float>
 800b9e2:	1c42      	adds	r2, r0, #1
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	d1d6      	bne.n	800b996 <_svfiprintf_r+0x176>
 800b9e8:	89ab      	ldrh	r3, [r5, #12]
 800b9ea:	065b      	lsls	r3, r3, #25
 800b9ec:	f53f af2c 	bmi.w	800b848 <_svfiprintf_r+0x28>
 800b9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9f2:	b01d      	add	sp, #116	; 0x74
 800b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f8:	ab03      	add	r3, sp, #12
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	462a      	mov	r2, r5
 800b9fe:	4b06      	ldr	r3, [pc, #24]	; (800ba18 <_svfiprintf_r+0x1f8>)
 800ba00:	a904      	add	r1, sp, #16
 800ba02:	4638      	mov	r0, r7
 800ba04:	f7fc fbb0 	bl	8008168 <_printf_i>
 800ba08:	e7eb      	b.n	800b9e2 <_svfiprintf_r+0x1c2>
 800ba0a:	bf00      	nop
 800ba0c:	0802956c 	.word	0x0802956c
 800ba10:	08029576 	.word	0x08029576
 800ba14:	08007c21 	.word	0x08007c21
 800ba18:	0800b769 	.word	0x0800b769
 800ba1c:	08029572 	.word	0x08029572

0800ba20 <_read_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d07      	ldr	r5, [pc, #28]	; (800ba40 <_read_r+0x20>)
 800ba24:	4604      	mov	r4, r0
 800ba26:	4608      	mov	r0, r1
 800ba28:	4611      	mov	r1, r2
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	602a      	str	r2, [r5, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f7f6 fb36 	bl	80020a0 <_read>
 800ba34:	1c43      	adds	r3, r0, #1
 800ba36:	d102      	bne.n	800ba3e <_read_r+0x1e>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	b103      	cbz	r3, 800ba3e <_read_r+0x1e>
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
 800ba40:	20010254 	.word	0x20010254
 800ba44:	00000000 	.word	0x00000000

0800ba48 <nan>:
 800ba48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba50 <nan+0x8>
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	00000000 	.word	0x00000000
 800ba54:	7ff80000 	.word	0x7ff80000

0800ba58 <strncmp>:
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	b17a      	cbz	r2, 800ba7c <strncmp+0x24>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	3901      	subs	r1, #1
 800ba60:	1884      	adds	r4, r0, r2
 800ba62:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba6a:	4290      	cmp	r0, r2
 800ba6c:	d101      	bne.n	800ba72 <strncmp+0x1a>
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	d101      	bne.n	800ba76 <strncmp+0x1e>
 800ba72:	1a80      	subs	r0, r0, r2
 800ba74:	bd10      	pop	{r4, pc}
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d1f3      	bne.n	800ba62 <strncmp+0xa>
 800ba7a:	e7fa      	b.n	800ba72 <strncmp+0x1a>
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	e7f9      	b.n	800ba74 <strncmp+0x1c>

0800ba80 <__ascii_wctomb>:
 800ba80:	b149      	cbz	r1, 800ba96 <__ascii_wctomb+0x16>
 800ba82:	2aff      	cmp	r2, #255	; 0xff
 800ba84:	bf85      	ittet	hi
 800ba86:	238a      	movhi	r3, #138	; 0x8a
 800ba88:	6003      	strhi	r3, [r0, #0]
 800ba8a:	700a      	strbls	r2, [r1, #0]
 800ba8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba90:	bf98      	it	ls
 800ba92:	2001      	movls	r0, #1
 800ba94:	4770      	bx	lr
 800ba96:	4608      	mov	r0, r1
 800ba98:	4770      	bx	lr
	...

0800ba9c <__assert_func>:
 800ba9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba9e:	4614      	mov	r4, r2
 800baa0:	461a      	mov	r2, r3
 800baa2:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <__assert_func+0x2c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4605      	mov	r5, r0
 800baa8:	68d8      	ldr	r0, [r3, #12]
 800baaa:	b14c      	cbz	r4, 800bac0 <__assert_func+0x24>
 800baac:	4b07      	ldr	r3, [pc, #28]	; (800bacc <__assert_func+0x30>)
 800baae:	9100      	str	r1, [sp, #0]
 800bab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bab4:	4906      	ldr	r1, [pc, #24]	; (800bad0 <__assert_func+0x34>)
 800bab6:	462b      	mov	r3, r5
 800bab8:	f000 f80e 	bl	800bad8 <fiprintf>
 800babc:	f000 fa80 	bl	800bfc0 <abort>
 800bac0:	4b04      	ldr	r3, [pc, #16]	; (800bad4 <__assert_func+0x38>)
 800bac2:	461c      	mov	r4, r3
 800bac4:	e7f3      	b.n	800baae <__assert_func+0x12>
 800bac6:	bf00      	nop
 800bac8:	20000028 	.word	0x20000028
 800bacc:	0802957d 	.word	0x0802957d
 800bad0:	0802958a 	.word	0x0802958a
 800bad4:	080295b8 	.word	0x080295b8

0800bad8 <fiprintf>:
 800bad8:	b40e      	push	{r1, r2, r3}
 800bada:	b503      	push	{r0, r1, lr}
 800badc:	4601      	mov	r1, r0
 800bade:	ab03      	add	r3, sp, #12
 800bae0:	4805      	ldr	r0, [pc, #20]	; (800baf8 <fiprintf+0x20>)
 800bae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bae6:	6800      	ldr	r0, [r0, #0]
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	f000 f879 	bl	800bbe0 <_vfiprintf_r>
 800baee:	b002      	add	sp, #8
 800baf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800baf4:	b003      	add	sp, #12
 800baf6:	4770      	bx	lr
 800baf8:	20000028 	.word	0x20000028

0800bafc <memmove>:
 800bafc:	4288      	cmp	r0, r1
 800bafe:	b510      	push	{r4, lr}
 800bb00:	eb01 0402 	add.w	r4, r1, r2
 800bb04:	d902      	bls.n	800bb0c <memmove+0x10>
 800bb06:	4284      	cmp	r4, r0
 800bb08:	4623      	mov	r3, r4
 800bb0a:	d807      	bhi.n	800bb1c <memmove+0x20>
 800bb0c:	1e43      	subs	r3, r0, #1
 800bb0e:	42a1      	cmp	r1, r4
 800bb10:	d008      	beq.n	800bb24 <memmove+0x28>
 800bb12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb1a:	e7f8      	b.n	800bb0e <memmove+0x12>
 800bb1c:	4402      	add	r2, r0
 800bb1e:	4601      	mov	r1, r0
 800bb20:	428a      	cmp	r2, r1
 800bb22:	d100      	bne.n	800bb26 <memmove+0x2a>
 800bb24:	bd10      	pop	{r4, pc}
 800bb26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb2e:	e7f7      	b.n	800bb20 <memmove+0x24>

0800bb30 <_realloc_r>:
 800bb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	4680      	mov	r8, r0
 800bb36:	4614      	mov	r4, r2
 800bb38:	460e      	mov	r6, r1
 800bb3a:	b921      	cbnz	r1, 800bb46 <_realloc_r+0x16>
 800bb3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	4611      	mov	r1, r2
 800bb42:	f7fb bf59 	b.w	80079f8 <_malloc_r>
 800bb46:	b92a      	cbnz	r2, 800bb54 <_realloc_r+0x24>
 800bb48:	f7ff fdc2 	bl	800b6d0 <_free_r>
 800bb4c:	4625      	mov	r5, r4
 800bb4e:	4628      	mov	r0, r5
 800bb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb54:	f000 faa0 	bl	800c098 <_malloc_usable_size_r>
 800bb58:	4284      	cmp	r4, r0
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	d802      	bhi.n	800bb64 <_realloc_r+0x34>
 800bb5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb62:	d812      	bhi.n	800bb8a <_realloc_r+0x5a>
 800bb64:	4621      	mov	r1, r4
 800bb66:	4640      	mov	r0, r8
 800bb68:	f7fb ff46 	bl	80079f8 <_malloc_r>
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d0ed      	beq.n	800bb4e <_realloc_r+0x1e>
 800bb72:	42bc      	cmp	r4, r7
 800bb74:	4622      	mov	r2, r4
 800bb76:	4631      	mov	r1, r6
 800bb78:	bf28      	it	cs
 800bb7a:	463a      	movcs	r2, r7
 800bb7c:	f7fb ff05 	bl	800798a <memcpy>
 800bb80:	4631      	mov	r1, r6
 800bb82:	4640      	mov	r0, r8
 800bb84:	f7ff fda4 	bl	800b6d0 <_free_r>
 800bb88:	e7e1      	b.n	800bb4e <_realloc_r+0x1e>
 800bb8a:	4635      	mov	r5, r6
 800bb8c:	e7df      	b.n	800bb4e <_realloc_r+0x1e>

0800bb8e <__sfputc_r>:
 800bb8e:	6893      	ldr	r3, [r2, #8]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	b410      	push	{r4}
 800bb96:	6093      	str	r3, [r2, #8]
 800bb98:	da08      	bge.n	800bbac <__sfputc_r+0x1e>
 800bb9a:	6994      	ldr	r4, [r2, #24]
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	db01      	blt.n	800bba4 <__sfputc_r+0x16>
 800bba0:	290a      	cmp	r1, #10
 800bba2:	d103      	bne.n	800bbac <__sfputc_r+0x1e>
 800bba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba8:	f000 b94a 	b.w	800be40 <__swbuf_r>
 800bbac:	6813      	ldr	r3, [r2, #0]
 800bbae:	1c58      	adds	r0, r3, #1
 800bbb0:	6010      	str	r0, [r2, #0]
 800bbb2:	7019      	strb	r1, [r3, #0]
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <__sfputs_r>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	4614      	mov	r4, r2
 800bbc4:	18d5      	adds	r5, r2, r3
 800bbc6:	42ac      	cmp	r4, r5
 800bbc8:	d101      	bne.n	800bbce <__sfputs_r+0x12>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	e007      	b.n	800bbde <__sfputs_r+0x22>
 800bbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd2:	463a      	mov	r2, r7
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff ffda 	bl	800bb8e <__sfputc_r>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	d1f3      	bne.n	800bbc6 <__sfputs_r+0xa>
 800bbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbe0 <_vfiprintf_r>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	b09d      	sub	sp, #116	; 0x74
 800bbe8:	4614      	mov	r4, r2
 800bbea:	4698      	mov	r8, r3
 800bbec:	4606      	mov	r6, r0
 800bbee:	b118      	cbz	r0, 800bbf8 <_vfiprintf_r+0x18>
 800bbf0:	6983      	ldr	r3, [r0, #24]
 800bbf2:	b90b      	cbnz	r3, 800bbf8 <_vfiprintf_r+0x18>
 800bbf4:	f7fb fe04 	bl	8007800 <__sinit>
 800bbf8:	4b89      	ldr	r3, [pc, #548]	; (800be20 <_vfiprintf_r+0x240>)
 800bbfa:	429d      	cmp	r5, r3
 800bbfc:	d11b      	bne.n	800bc36 <_vfiprintf_r+0x56>
 800bbfe:	6875      	ldr	r5, [r6, #4]
 800bc00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc02:	07d9      	lsls	r1, r3, #31
 800bc04:	d405      	bmi.n	800bc12 <_vfiprintf_r+0x32>
 800bc06:	89ab      	ldrh	r3, [r5, #12]
 800bc08:	059a      	lsls	r2, r3, #22
 800bc0a:	d402      	bmi.n	800bc12 <_vfiprintf_r+0x32>
 800bc0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc0e:	f7fb feba 	bl	8007986 <__retarget_lock_acquire_recursive>
 800bc12:	89ab      	ldrh	r3, [r5, #12]
 800bc14:	071b      	lsls	r3, r3, #28
 800bc16:	d501      	bpl.n	800bc1c <_vfiprintf_r+0x3c>
 800bc18:	692b      	ldr	r3, [r5, #16]
 800bc1a:	b9eb      	cbnz	r3, 800bc58 <_vfiprintf_r+0x78>
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f000 f960 	bl	800bee4 <__swsetup_r>
 800bc24:	b1c0      	cbz	r0, 800bc58 <_vfiprintf_r+0x78>
 800bc26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc28:	07dc      	lsls	r4, r3, #31
 800bc2a:	d50e      	bpl.n	800bc4a <_vfiprintf_r+0x6a>
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc30:	b01d      	add	sp, #116	; 0x74
 800bc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc36:	4b7b      	ldr	r3, [pc, #492]	; (800be24 <_vfiprintf_r+0x244>)
 800bc38:	429d      	cmp	r5, r3
 800bc3a:	d101      	bne.n	800bc40 <_vfiprintf_r+0x60>
 800bc3c:	68b5      	ldr	r5, [r6, #8]
 800bc3e:	e7df      	b.n	800bc00 <_vfiprintf_r+0x20>
 800bc40:	4b79      	ldr	r3, [pc, #484]	; (800be28 <_vfiprintf_r+0x248>)
 800bc42:	429d      	cmp	r5, r3
 800bc44:	bf08      	it	eq
 800bc46:	68f5      	ldreq	r5, [r6, #12]
 800bc48:	e7da      	b.n	800bc00 <_vfiprintf_r+0x20>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	0598      	lsls	r0, r3, #22
 800bc4e:	d4ed      	bmi.n	800bc2c <_vfiprintf_r+0x4c>
 800bc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc52:	f7fb fe99 	bl	8007988 <__retarget_lock_release_recursive>
 800bc56:	e7e9      	b.n	800bc2c <_vfiprintf_r+0x4c>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5c:	2320      	movs	r3, #32
 800bc5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc62:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc66:	2330      	movs	r3, #48	; 0x30
 800bc68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be2c <_vfiprintf_r+0x24c>
 800bc6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc70:	f04f 0901 	mov.w	r9, #1
 800bc74:	4623      	mov	r3, r4
 800bc76:	469a      	mov	sl, r3
 800bc78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc7c:	b10a      	cbz	r2, 800bc82 <_vfiprintf_r+0xa2>
 800bc7e:	2a25      	cmp	r2, #37	; 0x25
 800bc80:	d1f9      	bne.n	800bc76 <_vfiprintf_r+0x96>
 800bc82:	ebba 0b04 	subs.w	fp, sl, r4
 800bc86:	d00b      	beq.n	800bca0 <_vfiprintf_r+0xc0>
 800bc88:	465b      	mov	r3, fp
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f7ff ff94 	bl	800bbbc <__sfputs_r>
 800bc94:	3001      	adds	r0, #1
 800bc96:	f000 80aa 	beq.w	800bdee <_vfiprintf_r+0x20e>
 800bc9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc9c:	445a      	add	r2, fp
 800bc9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bca0:	f89a 3000 	ldrb.w	r3, [sl]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 80a2 	beq.w	800bdee <_vfiprintf_r+0x20e>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb4:	f10a 0a01 	add.w	sl, sl, #1
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	9307      	str	r3, [sp, #28]
 800bcbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcc0:	931a      	str	r3, [sp, #104]	; 0x68
 800bcc2:	4654      	mov	r4, sl
 800bcc4:	2205      	movs	r2, #5
 800bcc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcca:	4858      	ldr	r0, [pc, #352]	; (800be2c <_vfiprintf_r+0x24c>)
 800bccc:	f7f4 faa8 	bl	8000220 <memchr>
 800bcd0:	9a04      	ldr	r2, [sp, #16]
 800bcd2:	b9d8      	cbnz	r0, 800bd0c <_vfiprintf_r+0x12c>
 800bcd4:	06d1      	lsls	r1, r2, #27
 800bcd6:	bf44      	itt	mi
 800bcd8:	2320      	movmi	r3, #32
 800bcda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcde:	0713      	lsls	r3, r2, #28
 800bce0:	bf44      	itt	mi
 800bce2:	232b      	movmi	r3, #43	; 0x2b
 800bce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bce8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcec:	2b2a      	cmp	r3, #42	; 0x2a
 800bcee:	d015      	beq.n	800bd1c <_vfiprintf_r+0x13c>
 800bcf0:	9a07      	ldr	r2, [sp, #28]
 800bcf2:	4654      	mov	r4, sl
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	f04f 0c0a 	mov.w	ip, #10
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd00:	3b30      	subs	r3, #48	; 0x30
 800bd02:	2b09      	cmp	r3, #9
 800bd04:	d94e      	bls.n	800bda4 <_vfiprintf_r+0x1c4>
 800bd06:	b1b0      	cbz	r0, 800bd36 <_vfiprintf_r+0x156>
 800bd08:	9207      	str	r2, [sp, #28]
 800bd0a:	e014      	b.n	800bd36 <_vfiprintf_r+0x156>
 800bd0c:	eba0 0308 	sub.w	r3, r0, r8
 800bd10:	fa09 f303 	lsl.w	r3, r9, r3
 800bd14:	4313      	orrs	r3, r2
 800bd16:	9304      	str	r3, [sp, #16]
 800bd18:	46a2      	mov	sl, r4
 800bd1a:	e7d2      	b.n	800bcc2 <_vfiprintf_r+0xe2>
 800bd1c:	9b03      	ldr	r3, [sp, #12]
 800bd1e:	1d19      	adds	r1, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	9103      	str	r1, [sp, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	bfbb      	ittet	lt
 800bd28:	425b      	neglt	r3, r3
 800bd2a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd2e:	9307      	strge	r3, [sp, #28]
 800bd30:	9307      	strlt	r3, [sp, #28]
 800bd32:	bfb8      	it	lt
 800bd34:	9204      	strlt	r2, [sp, #16]
 800bd36:	7823      	ldrb	r3, [r4, #0]
 800bd38:	2b2e      	cmp	r3, #46	; 0x2e
 800bd3a:	d10c      	bne.n	800bd56 <_vfiprintf_r+0x176>
 800bd3c:	7863      	ldrb	r3, [r4, #1]
 800bd3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd40:	d135      	bne.n	800bdae <_vfiprintf_r+0x1ce>
 800bd42:	9b03      	ldr	r3, [sp, #12]
 800bd44:	1d1a      	adds	r2, r3, #4
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	9203      	str	r2, [sp, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	bfb8      	it	lt
 800bd4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd52:	3402      	adds	r4, #2
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be3c <_vfiprintf_r+0x25c>
 800bd5a:	7821      	ldrb	r1, [r4, #0]
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	4650      	mov	r0, sl
 800bd60:	f7f4 fa5e 	bl	8000220 <memchr>
 800bd64:	b140      	cbz	r0, 800bd78 <_vfiprintf_r+0x198>
 800bd66:	2340      	movs	r3, #64	; 0x40
 800bd68:	eba0 000a 	sub.w	r0, r0, sl
 800bd6c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd70:	9b04      	ldr	r3, [sp, #16]
 800bd72:	4303      	orrs	r3, r0
 800bd74:	3401      	adds	r4, #1
 800bd76:	9304      	str	r3, [sp, #16]
 800bd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd7c:	482c      	ldr	r0, [pc, #176]	; (800be30 <_vfiprintf_r+0x250>)
 800bd7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd82:	2206      	movs	r2, #6
 800bd84:	f7f4 fa4c 	bl	8000220 <memchr>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d03f      	beq.n	800be0c <_vfiprintf_r+0x22c>
 800bd8c:	4b29      	ldr	r3, [pc, #164]	; (800be34 <_vfiprintf_r+0x254>)
 800bd8e:	bb1b      	cbnz	r3, 800bdd8 <_vfiprintf_r+0x1f8>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	3307      	adds	r3, #7
 800bd94:	f023 0307 	bic.w	r3, r3, #7
 800bd98:	3308      	adds	r3, #8
 800bd9a:	9303      	str	r3, [sp, #12]
 800bd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9e:	443b      	add	r3, r7
 800bda0:	9309      	str	r3, [sp, #36]	; 0x24
 800bda2:	e767      	b.n	800bc74 <_vfiprintf_r+0x94>
 800bda4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bda8:	460c      	mov	r4, r1
 800bdaa:	2001      	movs	r0, #1
 800bdac:	e7a5      	b.n	800bcfa <_vfiprintf_r+0x11a>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	3401      	adds	r4, #1
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	f04f 0c0a 	mov.w	ip, #10
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc0:	3a30      	subs	r2, #48	; 0x30
 800bdc2:	2a09      	cmp	r2, #9
 800bdc4:	d903      	bls.n	800bdce <_vfiprintf_r+0x1ee>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0c5      	beq.n	800bd56 <_vfiprintf_r+0x176>
 800bdca:	9105      	str	r1, [sp, #20]
 800bdcc:	e7c3      	b.n	800bd56 <_vfiprintf_r+0x176>
 800bdce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e7f0      	b.n	800bdba <_vfiprintf_r+0x1da>
 800bdd8:	ab03      	add	r3, sp, #12
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	462a      	mov	r2, r5
 800bdde:	4b16      	ldr	r3, [pc, #88]	; (800be38 <_vfiprintf_r+0x258>)
 800bde0:	a904      	add	r1, sp, #16
 800bde2:	4630      	mov	r0, r6
 800bde4:	f7fb ff1c 	bl	8007c20 <_printf_float>
 800bde8:	4607      	mov	r7, r0
 800bdea:	1c78      	adds	r0, r7, #1
 800bdec:	d1d6      	bne.n	800bd9c <_vfiprintf_r+0x1bc>
 800bdee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdf0:	07d9      	lsls	r1, r3, #31
 800bdf2:	d405      	bmi.n	800be00 <_vfiprintf_r+0x220>
 800bdf4:	89ab      	ldrh	r3, [r5, #12]
 800bdf6:	059a      	lsls	r2, r3, #22
 800bdf8:	d402      	bmi.n	800be00 <_vfiprintf_r+0x220>
 800bdfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdfc:	f7fb fdc4 	bl	8007988 <__retarget_lock_release_recursive>
 800be00:	89ab      	ldrh	r3, [r5, #12]
 800be02:	065b      	lsls	r3, r3, #25
 800be04:	f53f af12 	bmi.w	800bc2c <_vfiprintf_r+0x4c>
 800be08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be0a:	e711      	b.n	800bc30 <_vfiprintf_r+0x50>
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	462a      	mov	r2, r5
 800be12:	4b09      	ldr	r3, [pc, #36]	; (800be38 <_vfiprintf_r+0x258>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	4630      	mov	r0, r6
 800be18:	f7fc f9a6 	bl	8008168 <_printf_i>
 800be1c:	e7e4      	b.n	800bde8 <_vfiprintf_r+0x208>
 800be1e:	bf00      	nop
 800be20:	08029138 	.word	0x08029138
 800be24:	08029158 	.word	0x08029158
 800be28:	08029118 	.word	0x08029118
 800be2c:	0802956c 	.word	0x0802956c
 800be30:	08029576 	.word	0x08029576
 800be34:	08007c21 	.word	0x08007c21
 800be38:	0800bbbd 	.word	0x0800bbbd
 800be3c:	08029572 	.word	0x08029572

0800be40 <__swbuf_r>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	460e      	mov	r6, r1
 800be44:	4614      	mov	r4, r2
 800be46:	4605      	mov	r5, r0
 800be48:	b118      	cbz	r0, 800be52 <__swbuf_r+0x12>
 800be4a:	6983      	ldr	r3, [r0, #24]
 800be4c:	b90b      	cbnz	r3, 800be52 <__swbuf_r+0x12>
 800be4e:	f7fb fcd7 	bl	8007800 <__sinit>
 800be52:	4b21      	ldr	r3, [pc, #132]	; (800bed8 <__swbuf_r+0x98>)
 800be54:	429c      	cmp	r4, r3
 800be56:	d12b      	bne.n	800beb0 <__swbuf_r+0x70>
 800be58:	686c      	ldr	r4, [r5, #4]
 800be5a:	69a3      	ldr	r3, [r4, #24]
 800be5c:	60a3      	str	r3, [r4, #8]
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	071a      	lsls	r2, r3, #28
 800be62:	d52f      	bpl.n	800bec4 <__swbuf_r+0x84>
 800be64:	6923      	ldr	r3, [r4, #16]
 800be66:	b36b      	cbz	r3, 800bec4 <__swbuf_r+0x84>
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	6820      	ldr	r0, [r4, #0]
 800be6c:	1ac0      	subs	r0, r0, r3
 800be6e:	6963      	ldr	r3, [r4, #20]
 800be70:	b2f6      	uxtb	r6, r6
 800be72:	4283      	cmp	r3, r0
 800be74:	4637      	mov	r7, r6
 800be76:	dc04      	bgt.n	800be82 <__swbuf_r+0x42>
 800be78:	4621      	mov	r1, r4
 800be7a:	4628      	mov	r0, r5
 800be7c:	f7fe fb68 	bl	800a550 <_fflush_r>
 800be80:	bb30      	cbnz	r0, 800bed0 <__swbuf_r+0x90>
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	3b01      	subs	r3, #1
 800be86:	60a3      	str	r3, [r4, #8]
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	6022      	str	r2, [r4, #0]
 800be8e:	701e      	strb	r6, [r3, #0]
 800be90:	6963      	ldr	r3, [r4, #20]
 800be92:	3001      	adds	r0, #1
 800be94:	4283      	cmp	r3, r0
 800be96:	d004      	beq.n	800bea2 <__swbuf_r+0x62>
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	07db      	lsls	r3, r3, #31
 800be9c:	d506      	bpl.n	800beac <__swbuf_r+0x6c>
 800be9e:	2e0a      	cmp	r6, #10
 800bea0:	d104      	bne.n	800beac <__swbuf_r+0x6c>
 800bea2:	4621      	mov	r1, r4
 800bea4:	4628      	mov	r0, r5
 800bea6:	f7fe fb53 	bl	800a550 <_fflush_r>
 800beaa:	b988      	cbnz	r0, 800bed0 <__swbuf_r+0x90>
 800beac:	4638      	mov	r0, r7
 800beae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb0:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <__swbuf_r+0x9c>)
 800beb2:	429c      	cmp	r4, r3
 800beb4:	d101      	bne.n	800beba <__swbuf_r+0x7a>
 800beb6:	68ac      	ldr	r4, [r5, #8]
 800beb8:	e7cf      	b.n	800be5a <__swbuf_r+0x1a>
 800beba:	4b09      	ldr	r3, [pc, #36]	; (800bee0 <__swbuf_r+0xa0>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	bf08      	it	eq
 800bec0:	68ec      	ldreq	r4, [r5, #12]
 800bec2:	e7ca      	b.n	800be5a <__swbuf_r+0x1a>
 800bec4:	4621      	mov	r1, r4
 800bec6:	4628      	mov	r0, r5
 800bec8:	f000 f80c 	bl	800bee4 <__swsetup_r>
 800becc:	2800      	cmp	r0, #0
 800bece:	d0cb      	beq.n	800be68 <__swbuf_r+0x28>
 800bed0:	f04f 37ff 	mov.w	r7, #4294967295
 800bed4:	e7ea      	b.n	800beac <__swbuf_r+0x6c>
 800bed6:	bf00      	nop
 800bed8:	08029138 	.word	0x08029138
 800bedc:	08029158 	.word	0x08029158
 800bee0:	08029118 	.word	0x08029118

0800bee4 <__swsetup_r>:
 800bee4:	4b32      	ldr	r3, [pc, #200]	; (800bfb0 <__swsetup_r+0xcc>)
 800bee6:	b570      	push	{r4, r5, r6, lr}
 800bee8:	681d      	ldr	r5, [r3, #0]
 800beea:	4606      	mov	r6, r0
 800beec:	460c      	mov	r4, r1
 800beee:	b125      	cbz	r5, 800befa <__swsetup_r+0x16>
 800bef0:	69ab      	ldr	r3, [r5, #24]
 800bef2:	b913      	cbnz	r3, 800befa <__swsetup_r+0x16>
 800bef4:	4628      	mov	r0, r5
 800bef6:	f7fb fc83 	bl	8007800 <__sinit>
 800befa:	4b2e      	ldr	r3, [pc, #184]	; (800bfb4 <__swsetup_r+0xd0>)
 800befc:	429c      	cmp	r4, r3
 800befe:	d10f      	bne.n	800bf20 <__swsetup_r+0x3c>
 800bf00:	686c      	ldr	r4, [r5, #4]
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf08:	0719      	lsls	r1, r3, #28
 800bf0a:	d42c      	bmi.n	800bf66 <__swsetup_r+0x82>
 800bf0c:	06dd      	lsls	r5, r3, #27
 800bf0e:	d411      	bmi.n	800bf34 <__swsetup_r+0x50>
 800bf10:	2309      	movs	r3, #9
 800bf12:	6033      	str	r3, [r6, #0]
 800bf14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf18:	81a3      	strh	r3, [r4, #12]
 800bf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1e:	e03e      	b.n	800bf9e <__swsetup_r+0xba>
 800bf20:	4b25      	ldr	r3, [pc, #148]	; (800bfb8 <__swsetup_r+0xd4>)
 800bf22:	429c      	cmp	r4, r3
 800bf24:	d101      	bne.n	800bf2a <__swsetup_r+0x46>
 800bf26:	68ac      	ldr	r4, [r5, #8]
 800bf28:	e7eb      	b.n	800bf02 <__swsetup_r+0x1e>
 800bf2a:	4b24      	ldr	r3, [pc, #144]	; (800bfbc <__swsetup_r+0xd8>)
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	bf08      	it	eq
 800bf30:	68ec      	ldreq	r4, [r5, #12]
 800bf32:	e7e6      	b.n	800bf02 <__swsetup_r+0x1e>
 800bf34:	0758      	lsls	r0, r3, #29
 800bf36:	d512      	bpl.n	800bf5e <__swsetup_r+0x7a>
 800bf38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf3a:	b141      	cbz	r1, 800bf4e <__swsetup_r+0x6a>
 800bf3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf40:	4299      	cmp	r1, r3
 800bf42:	d002      	beq.n	800bf4a <__swsetup_r+0x66>
 800bf44:	4630      	mov	r0, r6
 800bf46:	f7ff fbc3 	bl	800b6d0 <_free_r>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf54:	81a3      	strh	r3, [r4, #12]
 800bf56:	2300      	movs	r3, #0
 800bf58:	6063      	str	r3, [r4, #4]
 800bf5a:	6923      	ldr	r3, [r4, #16]
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	f043 0308 	orr.w	r3, r3, #8
 800bf64:	81a3      	strh	r3, [r4, #12]
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	b94b      	cbnz	r3, 800bf7e <__swsetup_r+0x9a>
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf74:	d003      	beq.n	800bf7e <__swsetup_r+0x9a>
 800bf76:	4621      	mov	r1, r4
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f000 f84d 	bl	800c018 <__smakebuf_r>
 800bf7e:	89a0      	ldrh	r0, [r4, #12]
 800bf80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf84:	f010 0301 	ands.w	r3, r0, #1
 800bf88:	d00a      	beq.n	800bfa0 <__swsetup_r+0xbc>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60a3      	str	r3, [r4, #8]
 800bf8e:	6963      	ldr	r3, [r4, #20]
 800bf90:	425b      	negs	r3, r3
 800bf92:	61a3      	str	r3, [r4, #24]
 800bf94:	6923      	ldr	r3, [r4, #16]
 800bf96:	b943      	cbnz	r3, 800bfaa <__swsetup_r+0xc6>
 800bf98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf9c:	d1ba      	bne.n	800bf14 <__swsetup_r+0x30>
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	0781      	lsls	r1, r0, #30
 800bfa2:	bf58      	it	pl
 800bfa4:	6963      	ldrpl	r3, [r4, #20]
 800bfa6:	60a3      	str	r3, [r4, #8]
 800bfa8:	e7f4      	b.n	800bf94 <__swsetup_r+0xb0>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e7f7      	b.n	800bf9e <__swsetup_r+0xba>
 800bfae:	bf00      	nop
 800bfb0:	20000028 	.word	0x20000028
 800bfb4:	08029138 	.word	0x08029138
 800bfb8:	08029158 	.word	0x08029158
 800bfbc:	08029118 	.word	0x08029118

0800bfc0 <abort>:
 800bfc0:	b508      	push	{r3, lr}
 800bfc2:	2006      	movs	r0, #6
 800bfc4:	f000 f898 	bl	800c0f8 <raise>
 800bfc8:	2001      	movs	r0, #1
 800bfca:	f7f6 f85f 	bl	800208c <_exit>

0800bfce <__swhatbuf_r>:
 800bfce:	b570      	push	{r4, r5, r6, lr}
 800bfd0:	460e      	mov	r6, r1
 800bfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd6:	2900      	cmp	r1, #0
 800bfd8:	b096      	sub	sp, #88	; 0x58
 800bfda:	4614      	mov	r4, r2
 800bfdc:	461d      	mov	r5, r3
 800bfde:	da08      	bge.n	800bff2 <__swhatbuf_r+0x24>
 800bfe0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	602a      	str	r2, [r5, #0]
 800bfe8:	061a      	lsls	r2, r3, #24
 800bfea:	d410      	bmi.n	800c00e <__swhatbuf_r+0x40>
 800bfec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bff0:	e00e      	b.n	800c010 <__swhatbuf_r+0x42>
 800bff2:	466a      	mov	r2, sp
 800bff4:	f000 f89c 	bl	800c130 <_fstat_r>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	dbf1      	blt.n	800bfe0 <__swhatbuf_r+0x12>
 800bffc:	9a01      	ldr	r2, [sp, #4]
 800bffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c006:	425a      	negs	r2, r3
 800c008:	415a      	adcs	r2, r3
 800c00a:	602a      	str	r2, [r5, #0]
 800c00c:	e7ee      	b.n	800bfec <__swhatbuf_r+0x1e>
 800c00e:	2340      	movs	r3, #64	; 0x40
 800c010:	2000      	movs	r0, #0
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	b016      	add	sp, #88	; 0x58
 800c016:	bd70      	pop	{r4, r5, r6, pc}

0800c018 <__smakebuf_r>:
 800c018:	898b      	ldrh	r3, [r1, #12]
 800c01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c01c:	079d      	lsls	r5, r3, #30
 800c01e:	4606      	mov	r6, r0
 800c020:	460c      	mov	r4, r1
 800c022:	d507      	bpl.n	800c034 <__smakebuf_r+0x1c>
 800c024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	2301      	movs	r3, #1
 800c02e:	6163      	str	r3, [r4, #20]
 800c030:	b002      	add	sp, #8
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	ab01      	add	r3, sp, #4
 800c036:	466a      	mov	r2, sp
 800c038:	f7ff ffc9 	bl	800bfce <__swhatbuf_r>
 800c03c:	9900      	ldr	r1, [sp, #0]
 800c03e:	4605      	mov	r5, r0
 800c040:	4630      	mov	r0, r6
 800c042:	f7fb fcd9 	bl	80079f8 <_malloc_r>
 800c046:	b948      	cbnz	r0, 800c05c <__smakebuf_r+0x44>
 800c048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c04c:	059a      	lsls	r2, r3, #22
 800c04e:	d4ef      	bmi.n	800c030 <__smakebuf_r+0x18>
 800c050:	f023 0303 	bic.w	r3, r3, #3
 800c054:	f043 0302 	orr.w	r3, r3, #2
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	e7e3      	b.n	800c024 <__smakebuf_r+0xc>
 800c05c:	4b0d      	ldr	r3, [pc, #52]	; (800c094 <__smakebuf_r+0x7c>)
 800c05e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	6020      	str	r0, [r4, #0]
 800c064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	9b00      	ldr	r3, [sp, #0]
 800c06c:	6163      	str	r3, [r4, #20]
 800c06e:	9b01      	ldr	r3, [sp, #4]
 800c070:	6120      	str	r0, [r4, #16]
 800c072:	b15b      	cbz	r3, 800c08c <__smakebuf_r+0x74>
 800c074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c078:	4630      	mov	r0, r6
 800c07a:	f000 f86b 	bl	800c154 <_isatty_r>
 800c07e:	b128      	cbz	r0, 800c08c <__smakebuf_r+0x74>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f023 0303 	bic.w	r3, r3, #3
 800c086:	f043 0301 	orr.w	r3, r3, #1
 800c08a:	81a3      	strh	r3, [r4, #12]
 800c08c:	89a0      	ldrh	r0, [r4, #12]
 800c08e:	4305      	orrs	r5, r0
 800c090:	81a5      	strh	r5, [r4, #12]
 800c092:	e7cd      	b.n	800c030 <__smakebuf_r+0x18>
 800c094:	08007799 	.word	0x08007799

0800c098 <_malloc_usable_size_r>:
 800c098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c09c:	1f18      	subs	r0, r3, #4
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	bfbc      	itt	lt
 800c0a2:	580b      	ldrlt	r3, [r1, r0]
 800c0a4:	18c0      	addlt	r0, r0, r3
 800c0a6:	4770      	bx	lr

0800c0a8 <_raise_r>:
 800c0a8:	291f      	cmp	r1, #31
 800c0aa:	b538      	push	{r3, r4, r5, lr}
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	460d      	mov	r5, r1
 800c0b0:	d904      	bls.n	800c0bc <_raise_r+0x14>
 800c0b2:	2316      	movs	r3, #22
 800c0b4:	6003      	str	r3, [r0, #0]
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0be:	b112      	cbz	r2, 800c0c6 <_raise_r+0x1e>
 800c0c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0c4:	b94b      	cbnz	r3, 800c0da <_raise_r+0x32>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 f830 	bl	800c12c <_getpid_r>
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	4601      	mov	r1, r0
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0d6:	f000 b817 	b.w	800c108 <_kill_r>
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d00a      	beq.n	800c0f4 <_raise_r+0x4c>
 800c0de:	1c59      	adds	r1, r3, #1
 800c0e0:	d103      	bne.n	800c0ea <_raise_r+0x42>
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	e7e7      	b.n	800c0ba <_raise_r+0x12>
 800c0ea:	2400      	movs	r4, #0
 800c0ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	4798      	blx	r3
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e7e0      	b.n	800c0ba <_raise_r+0x12>

0800c0f8 <raise>:
 800c0f8:	4b02      	ldr	r3, [pc, #8]	; (800c104 <raise+0xc>)
 800c0fa:	4601      	mov	r1, r0
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	f7ff bfd3 	b.w	800c0a8 <_raise_r>
 800c102:	bf00      	nop
 800c104:	20000028 	.word	0x20000028

0800c108 <_kill_r>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	4d07      	ldr	r5, [pc, #28]	; (800c128 <_kill_r+0x20>)
 800c10c:	2300      	movs	r3, #0
 800c10e:	4604      	mov	r4, r0
 800c110:	4608      	mov	r0, r1
 800c112:	4611      	mov	r1, r2
 800c114:	602b      	str	r3, [r5, #0]
 800c116:	f7f5 ffa9 	bl	800206c <_kill>
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	d102      	bne.n	800c124 <_kill_r+0x1c>
 800c11e:	682b      	ldr	r3, [r5, #0]
 800c120:	b103      	cbz	r3, 800c124 <_kill_r+0x1c>
 800c122:	6023      	str	r3, [r4, #0]
 800c124:	bd38      	pop	{r3, r4, r5, pc}
 800c126:	bf00      	nop
 800c128:	20010254 	.word	0x20010254

0800c12c <_getpid_r>:
 800c12c:	f7f5 bf96 	b.w	800205c <_getpid>

0800c130 <_fstat_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4d07      	ldr	r5, [pc, #28]	; (800c150 <_fstat_r+0x20>)
 800c134:	2300      	movs	r3, #0
 800c136:	4604      	mov	r4, r0
 800c138:	4608      	mov	r0, r1
 800c13a:	4611      	mov	r1, r2
 800c13c:	602b      	str	r3, [r5, #0]
 800c13e:	f7f5 fff4 	bl	800212a <_fstat>
 800c142:	1c43      	adds	r3, r0, #1
 800c144:	d102      	bne.n	800c14c <_fstat_r+0x1c>
 800c146:	682b      	ldr	r3, [r5, #0]
 800c148:	b103      	cbz	r3, 800c14c <_fstat_r+0x1c>
 800c14a:	6023      	str	r3, [r4, #0]
 800c14c:	bd38      	pop	{r3, r4, r5, pc}
 800c14e:	bf00      	nop
 800c150:	20010254 	.word	0x20010254

0800c154 <_isatty_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4d06      	ldr	r5, [pc, #24]	; (800c170 <_isatty_r+0x1c>)
 800c158:	2300      	movs	r3, #0
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	602b      	str	r3, [r5, #0]
 800c160:	f7f5 fff3 	bl	800214a <_isatty>
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	d102      	bne.n	800c16e <_isatty_r+0x1a>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	b103      	cbz	r3, 800c16e <_isatty_r+0x1a>
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	20010254 	.word	0x20010254
 800c174:	00000000 	.word	0x00000000

0800c178 <log>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	ed2d 8b02 	vpush	{d8}
 800c17e:	ec55 4b10 	vmov	r4, r5, d0
 800c182:	f000 f8c5 	bl	800c310 <__ieee754_log>
 800c186:	4622      	mov	r2, r4
 800c188:	462b      	mov	r3, r5
 800c18a:	4620      	mov	r0, r4
 800c18c:	4629      	mov	r1, r5
 800c18e:	eeb0 8a40 	vmov.f32	s16, s0
 800c192:	eef0 8a60 	vmov.f32	s17, s1
 800c196:	f7f4 fce9 	bl	8000b6c <__aeabi_dcmpun>
 800c19a:	b998      	cbnz	r0, 800c1c4 <log+0x4c>
 800c19c:	2200      	movs	r2, #0
 800c19e:	2300      	movs	r3, #0
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	f7f4 fcd8 	bl	8000b58 <__aeabi_dcmpgt>
 800c1a8:	b960      	cbnz	r0, 800c1c4 <log+0x4c>
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7f4 fca9 	bl	8000b08 <__aeabi_dcmpeq>
 800c1b6:	b160      	cbz	r0, 800c1d2 <log+0x5a>
 800c1b8:	f7fb fac4 	bl	8007744 <__errno>
 800c1bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c1e8 <log+0x70>
 800c1c0:	2322      	movs	r3, #34	; 0x22
 800c1c2:	6003      	str	r3, [r0, #0]
 800c1c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c1c8:	eef0 0a68 	vmov.f32	s1, s17
 800c1cc:	ecbd 8b02 	vpop	{d8}
 800c1d0:	bd38      	pop	{r3, r4, r5, pc}
 800c1d2:	f7fb fab7 	bl	8007744 <__errno>
 800c1d6:	ecbd 8b02 	vpop	{d8}
 800c1da:	2321      	movs	r3, #33	; 0x21
 800c1dc:	6003      	str	r3, [r0, #0]
 800c1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1e2:	4803      	ldr	r0, [pc, #12]	; (800c1f0 <log+0x78>)
 800c1e4:	f7ff bc30 	b.w	800ba48 <nan>
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	fff00000 	.word	0xfff00000
 800c1f0:	080295b8 	.word	0x080295b8

0800c1f4 <pow>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	ed2d 8b02 	vpush	{d8}
 800c1fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c1fe:	eef0 8a60 	vmov.f32	s17, s1
 800c202:	ec55 4b11 	vmov	r4, r5, d1
 800c206:	f000 fa3f 	bl	800c688 <__ieee754_pow>
 800c20a:	4622      	mov	r2, r4
 800c20c:	462b      	mov	r3, r5
 800c20e:	4620      	mov	r0, r4
 800c210:	4629      	mov	r1, r5
 800c212:	ec57 6b10 	vmov	r6, r7, d0
 800c216:	f7f4 fca9 	bl	8000b6c <__aeabi_dcmpun>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d13b      	bne.n	800c296 <pow+0xa2>
 800c21e:	ec51 0b18 	vmov	r0, r1, d8
 800c222:	2200      	movs	r2, #0
 800c224:	2300      	movs	r3, #0
 800c226:	f7f4 fc6f 	bl	8000b08 <__aeabi_dcmpeq>
 800c22a:	b1b8      	cbz	r0, 800c25c <pow+0x68>
 800c22c:	2200      	movs	r2, #0
 800c22e:	2300      	movs	r3, #0
 800c230:	4620      	mov	r0, r4
 800c232:	4629      	mov	r1, r5
 800c234:	f7f4 fc68 	bl	8000b08 <__aeabi_dcmpeq>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d146      	bne.n	800c2ca <pow+0xd6>
 800c23c:	ec45 4b10 	vmov	d0, r4, r5
 800c240:	f001 f83e 	bl	800d2c0 <finite>
 800c244:	b338      	cbz	r0, 800c296 <pow+0xa2>
 800c246:	2200      	movs	r2, #0
 800c248:	2300      	movs	r3, #0
 800c24a:	4620      	mov	r0, r4
 800c24c:	4629      	mov	r1, r5
 800c24e:	f7f4 fc65 	bl	8000b1c <__aeabi_dcmplt>
 800c252:	b300      	cbz	r0, 800c296 <pow+0xa2>
 800c254:	f7fb fa76 	bl	8007744 <__errno>
 800c258:	2322      	movs	r3, #34	; 0x22
 800c25a:	e01b      	b.n	800c294 <pow+0xa0>
 800c25c:	ec47 6b10 	vmov	d0, r6, r7
 800c260:	f001 f82e 	bl	800d2c0 <finite>
 800c264:	b9e0      	cbnz	r0, 800c2a0 <pow+0xac>
 800c266:	eeb0 0a48 	vmov.f32	s0, s16
 800c26a:	eef0 0a68 	vmov.f32	s1, s17
 800c26e:	f001 f827 	bl	800d2c0 <finite>
 800c272:	b1a8      	cbz	r0, 800c2a0 <pow+0xac>
 800c274:	ec45 4b10 	vmov	d0, r4, r5
 800c278:	f001 f822 	bl	800d2c0 <finite>
 800c27c:	b180      	cbz	r0, 800c2a0 <pow+0xac>
 800c27e:	4632      	mov	r2, r6
 800c280:	463b      	mov	r3, r7
 800c282:	4630      	mov	r0, r6
 800c284:	4639      	mov	r1, r7
 800c286:	f7f4 fc71 	bl	8000b6c <__aeabi_dcmpun>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d0e2      	beq.n	800c254 <pow+0x60>
 800c28e:	f7fb fa59 	bl	8007744 <__errno>
 800c292:	2321      	movs	r3, #33	; 0x21
 800c294:	6003      	str	r3, [r0, #0]
 800c296:	ecbd 8b02 	vpop	{d8}
 800c29a:	ec47 6b10 	vmov	d0, r6, r7
 800c29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	f7f4 fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d0f2      	beq.n	800c296 <pow+0xa2>
 800c2b0:	eeb0 0a48 	vmov.f32	s0, s16
 800c2b4:	eef0 0a68 	vmov.f32	s1, s17
 800c2b8:	f001 f802 	bl	800d2c0 <finite>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d0ea      	beq.n	800c296 <pow+0xa2>
 800c2c0:	ec45 4b10 	vmov	d0, r4, r5
 800c2c4:	f000 fffc 	bl	800d2c0 <finite>
 800c2c8:	e7c3      	b.n	800c252 <pow+0x5e>
 800c2ca:	4f01      	ldr	r7, [pc, #4]	; (800c2d0 <pow+0xdc>)
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	e7e2      	b.n	800c296 <pow+0xa2>
 800c2d0:	3ff00000 	.word	0x3ff00000

0800c2d4 <sqrtf>:
 800c2d4:	b508      	push	{r3, lr}
 800c2d6:	ed2d 8b02 	vpush	{d8}
 800c2da:	eeb0 8a40 	vmov.f32	s16, s0
 800c2de:	f000 ffb3 	bl	800d248 <__ieee754_sqrtf>
 800c2e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ea:	d60c      	bvs.n	800c306 <sqrtf+0x32>
 800c2ec:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c30c <sqrtf+0x38>
 800c2f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f8:	d505      	bpl.n	800c306 <sqrtf+0x32>
 800c2fa:	f7fb fa23 	bl	8007744 <__errno>
 800c2fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c302:	2321      	movs	r3, #33	; 0x21
 800c304:	6003      	str	r3, [r0, #0]
 800c306:	ecbd 8b02 	vpop	{d8}
 800c30a:	bd08      	pop	{r3, pc}
 800c30c:	00000000 	.word	0x00000000

0800c310 <__ieee754_log>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	ec51 0b10 	vmov	r0, r1, d0
 800c318:	ed2d 8b04 	vpush	{d8-d9}
 800c31c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c320:	b083      	sub	sp, #12
 800c322:	460d      	mov	r5, r1
 800c324:	da29      	bge.n	800c37a <__ieee754_log+0x6a>
 800c326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c32a:	4303      	orrs	r3, r0
 800c32c:	ee10 2a10 	vmov	r2, s0
 800c330:	d10c      	bne.n	800c34c <__ieee754_log+0x3c>
 800c332:	49cf      	ldr	r1, [pc, #828]	; (800c670 <__ieee754_log+0x360>)
 800c334:	2200      	movs	r2, #0
 800c336:	2300      	movs	r3, #0
 800c338:	2000      	movs	r0, #0
 800c33a:	f7f4 faa7 	bl	800088c <__aeabi_ddiv>
 800c33e:	ec41 0b10 	vmov	d0, r0, r1
 800c342:	b003      	add	sp, #12
 800c344:	ecbd 8b04 	vpop	{d8-d9}
 800c348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34c:	2900      	cmp	r1, #0
 800c34e:	da05      	bge.n	800c35c <__ieee754_log+0x4c>
 800c350:	460b      	mov	r3, r1
 800c352:	f7f3 ffb9 	bl	80002c8 <__aeabi_dsub>
 800c356:	2200      	movs	r2, #0
 800c358:	2300      	movs	r3, #0
 800c35a:	e7ee      	b.n	800c33a <__ieee754_log+0x2a>
 800c35c:	4bc5      	ldr	r3, [pc, #788]	; (800c674 <__ieee754_log+0x364>)
 800c35e:	2200      	movs	r2, #0
 800c360:	f7f4 f96a 	bl	8000638 <__aeabi_dmul>
 800c364:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c368:	460d      	mov	r5, r1
 800c36a:	4ac3      	ldr	r2, [pc, #780]	; (800c678 <__ieee754_log+0x368>)
 800c36c:	4295      	cmp	r5, r2
 800c36e:	dd06      	ble.n	800c37e <__ieee754_log+0x6e>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	f7f3 ffaa 	bl	80002cc <__adddf3>
 800c378:	e7e1      	b.n	800c33e <__ieee754_log+0x2e>
 800c37a:	2300      	movs	r3, #0
 800c37c:	e7f5      	b.n	800c36a <__ieee754_log+0x5a>
 800c37e:	152c      	asrs	r4, r5, #20
 800c380:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c384:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c388:	441c      	add	r4, r3
 800c38a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c38e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c396:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c39a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c39e:	ea42 0105 	orr.w	r1, r2, r5
 800c3a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	4bb4      	ldr	r3, [pc, #720]	; (800c67c <__ieee754_log+0x36c>)
 800c3aa:	f7f3 ff8d 	bl	80002c8 <__aeabi_dsub>
 800c3ae:	1cab      	adds	r3, r5, #2
 800c3b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	4682      	mov	sl, r0
 800c3b8:	468b      	mov	fp, r1
 800c3ba:	f04f 0200 	mov.w	r2, #0
 800c3be:	dc53      	bgt.n	800c468 <__ieee754_log+0x158>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f7f4 fba1 	bl	8000b08 <__aeabi_dcmpeq>
 800c3c6:	b1d0      	cbz	r0, 800c3fe <__ieee754_log+0xee>
 800c3c8:	2c00      	cmp	r4, #0
 800c3ca:	f000 8122 	beq.w	800c612 <__ieee754_log+0x302>
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f7f4 f8c8 	bl	8000564 <__aeabi_i2d>
 800c3d4:	a390      	add	r3, pc, #576	; (adr r3, 800c618 <__ieee754_log+0x308>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	4606      	mov	r6, r0
 800c3dc:	460f      	mov	r7, r1
 800c3de:	f7f4 f92b 	bl	8000638 <__aeabi_dmul>
 800c3e2:	a38f      	add	r3, pc, #572	; (adr r3, 800c620 <__ieee754_log+0x310>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	460d      	mov	r5, r1
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	f7f4 f922 	bl	8000638 <__aeabi_dmul>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	e7ba      	b.n	800c374 <__ieee754_log+0x64>
 800c3fe:	a38a      	add	r3, pc, #552	; (adr r3, 800c628 <__ieee754_log+0x318>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	4650      	mov	r0, sl
 800c406:	4659      	mov	r1, fp
 800c408:	f7f4 f916 	bl	8000638 <__aeabi_dmul>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	2000      	movs	r0, #0
 800c412:	499b      	ldr	r1, [pc, #620]	; (800c680 <__ieee754_log+0x370>)
 800c414:	f7f3 ff58 	bl	80002c8 <__aeabi_dsub>
 800c418:	4652      	mov	r2, sl
 800c41a:	4606      	mov	r6, r0
 800c41c:	460f      	mov	r7, r1
 800c41e:	465b      	mov	r3, fp
 800c420:	4650      	mov	r0, sl
 800c422:	4659      	mov	r1, fp
 800c424:	f7f4 f908 	bl	8000638 <__aeabi_dmul>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4630      	mov	r0, r6
 800c42e:	4639      	mov	r1, r7
 800c430:	f7f4 f902 	bl	8000638 <__aeabi_dmul>
 800c434:	4606      	mov	r6, r0
 800c436:	460f      	mov	r7, r1
 800c438:	b914      	cbnz	r4, 800c440 <__ieee754_log+0x130>
 800c43a:	4632      	mov	r2, r6
 800c43c:	463b      	mov	r3, r7
 800c43e:	e0a2      	b.n	800c586 <__ieee754_log+0x276>
 800c440:	4620      	mov	r0, r4
 800c442:	f7f4 f88f 	bl	8000564 <__aeabi_i2d>
 800c446:	a374      	add	r3, pc, #464	; (adr r3, 800c618 <__ieee754_log+0x308>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	4680      	mov	r8, r0
 800c44e:	4689      	mov	r9, r1
 800c450:	f7f4 f8f2 	bl	8000638 <__aeabi_dmul>
 800c454:	a372      	add	r3, pc, #456	; (adr r3, 800c620 <__ieee754_log+0x310>)
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	4604      	mov	r4, r0
 800c45c:	460d      	mov	r5, r1
 800c45e:	4640      	mov	r0, r8
 800c460:	4649      	mov	r1, r9
 800c462:	f7f4 f8e9 	bl	8000638 <__aeabi_dmul>
 800c466:	e0a7      	b.n	800c5b8 <__ieee754_log+0x2a8>
 800c468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c46c:	f7f3 ff2e 	bl	80002cc <__adddf3>
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	4650      	mov	r0, sl
 800c476:	4659      	mov	r1, fp
 800c478:	f7f4 fa08 	bl	800088c <__aeabi_ddiv>
 800c47c:	ec41 0b18 	vmov	d8, r0, r1
 800c480:	4620      	mov	r0, r4
 800c482:	f7f4 f86f 	bl	8000564 <__aeabi_i2d>
 800c486:	ec53 2b18 	vmov	r2, r3, d8
 800c48a:	ec41 0b19 	vmov	d9, r0, r1
 800c48e:	ec51 0b18 	vmov	r0, r1, d8
 800c492:	f7f4 f8d1 	bl	8000638 <__aeabi_dmul>
 800c496:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c49a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4680      	mov	r8, r0
 800c4a6:	4689      	mov	r9, r1
 800c4a8:	f7f4 f8c6 	bl	8000638 <__aeabi_dmul>
 800c4ac:	a360      	add	r3, pc, #384	; (adr r3, 800c630 <__ieee754_log+0x320>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	f7f4 f8bf 	bl	8000638 <__aeabi_dmul>
 800c4ba:	a35f      	add	r3, pc, #380	; (adr r3, 800c638 <__ieee754_log+0x328>)
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	f7f3 ff04 	bl	80002cc <__adddf3>
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	f7f4 f8b6 	bl	8000638 <__aeabi_dmul>
 800c4cc:	a35c      	add	r3, pc, #368	; (adr r3, 800c640 <__ieee754_log+0x330>)
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	f7f3 fefb 	bl	80002cc <__adddf3>
 800c4d6:	4632      	mov	r2, r6
 800c4d8:	463b      	mov	r3, r7
 800c4da:	f7f4 f8ad 	bl	8000638 <__aeabi_dmul>
 800c4de:	a35a      	add	r3, pc, #360	; (adr r3, 800c648 <__ieee754_log+0x338>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	f7f3 fef2 	bl	80002cc <__adddf3>
 800c4e8:	4642      	mov	r2, r8
 800c4ea:	464b      	mov	r3, r9
 800c4ec:	f7f4 f8a4 	bl	8000638 <__aeabi_dmul>
 800c4f0:	a357      	add	r3, pc, #348	; (adr r3, 800c650 <__ieee754_log+0x340>)
 800c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	4689      	mov	r9, r1
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	f7f4 f89b 	bl	8000638 <__aeabi_dmul>
 800c502:	a355      	add	r3, pc, #340	; (adr r3, 800c658 <__ieee754_log+0x348>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7f3 fee0 	bl	80002cc <__adddf3>
 800c50c:	4632      	mov	r2, r6
 800c50e:	463b      	mov	r3, r7
 800c510:	f7f4 f892 	bl	8000638 <__aeabi_dmul>
 800c514:	a352      	add	r3, pc, #328	; (adr r3, 800c660 <__ieee754_log+0x350>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f3 fed7 	bl	80002cc <__adddf3>
 800c51e:	4632      	mov	r2, r6
 800c520:	463b      	mov	r3, r7
 800c522:	f7f4 f889 	bl	8000638 <__aeabi_dmul>
 800c526:	460b      	mov	r3, r1
 800c528:	4602      	mov	r2, r0
 800c52a:	4649      	mov	r1, r9
 800c52c:	4640      	mov	r0, r8
 800c52e:	f7f3 fecd 	bl	80002cc <__adddf3>
 800c532:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	3551      	adds	r5, #81	; 0x51
 800c53a:	431d      	orrs	r5, r3
 800c53c:	2d00      	cmp	r5, #0
 800c53e:	4680      	mov	r8, r0
 800c540:	4689      	mov	r9, r1
 800c542:	dd48      	ble.n	800c5d6 <__ieee754_log+0x2c6>
 800c544:	4b4e      	ldr	r3, [pc, #312]	; (800c680 <__ieee754_log+0x370>)
 800c546:	2200      	movs	r2, #0
 800c548:	4650      	mov	r0, sl
 800c54a:	4659      	mov	r1, fp
 800c54c:	f7f4 f874 	bl	8000638 <__aeabi_dmul>
 800c550:	4652      	mov	r2, sl
 800c552:	465b      	mov	r3, fp
 800c554:	f7f4 f870 	bl	8000638 <__aeabi_dmul>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4606      	mov	r6, r0
 800c55e:	460f      	mov	r7, r1
 800c560:	4640      	mov	r0, r8
 800c562:	4649      	mov	r1, r9
 800c564:	f7f3 feb2 	bl	80002cc <__adddf3>
 800c568:	ec53 2b18 	vmov	r2, r3, d8
 800c56c:	f7f4 f864 	bl	8000638 <__aeabi_dmul>
 800c570:	4680      	mov	r8, r0
 800c572:	4689      	mov	r9, r1
 800c574:	b964      	cbnz	r4, 800c590 <__ieee754_log+0x280>
 800c576:	4602      	mov	r2, r0
 800c578:	460b      	mov	r3, r1
 800c57a:	4630      	mov	r0, r6
 800c57c:	4639      	mov	r1, r7
 800c57e:	f7f3 fea3 	bl	80002c8 <__aeabi_dsub>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4650      	mov	r0, sl
 800c588:	4659      	mov	r1, fp
 800c58a:	f7f3 fe9d 	bl	80002c8 <__aeabi_dsub>
 800c58e:	e6d6      	b.n	800c33e <__ieee754_log+0x2e>
 800c590:	a321      	add	r3, pc, #132	; (adr r3, 800c618 <__ieee754_log+0x308>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	ec51 0b19 	vmov	r0, r1, d9
 800c59a:	f7f4 f84d 	bl	8000638 <__aeabi_dmul>
 800c59e:	a320      	add	r3, pc, #128	; (adr r3, 800c620 <__ieee754_log+0x310>)
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	ec51 0b19 	vmov	r0, r1, d9
 800c5ac:	f7f4 f844 	bl	8000638 <__aeabi_dmul>
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	f7f3 fe8a 	bl	80002cc <__adddf3>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	f7f3 fe82 	bl	80002c8 <__aeabi_dsub>
 800c5c4:	4652      	mov	r2, sl
 800c5c6:	465b      	mov	r3, fp
 800c5c8:	f7f3 fe7e 	bl	80002c8 <__aeabi_dsub>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	e7d9      	b.n	800c58a <__ieee754_log+0x27a>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4650      	mov	r0, sl
 800c5dc:	4659      	mov	r1, fp
 800c5de:	f7f3 fe73 	bl	80002c8 <__aeabi_dsub>
 800c5e2:	ec53 2b18 	vmov	r2, r3, d8
 800c5e6:	f7f4 f827 	bl	8000638 <__aeabi_dmul>
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	460f      	mov	r7, r1
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	f43f af23 	beq.w	800c43a <__ieee754_log+0x12a>
 800c5f4:	a308      	add	r3, pc, #32	; (adr r3, 800c618 <__ieee754_log+0x308>)
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	ec51 0b19 	vmov	r0, r1, d9
 800c5fe:	f7f4 f81b 	bl	8000638 <__aeabi_dmul>
 800c602:	a307      	add	r3, pc, #28	; (adr r3, 800c620 <__ieee754_log+0x310>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	4604      	mov	r4, r0
 800c60a:	460d      	mov	r5, r1
 800c60c:	ec51 0b19 	vmov	r0, r1, d9
 800c610:	e727      	b.n	800c462 <__ieee754_log+0x152>
 800c612:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c668 <__ieee754_log+0x358>
 800c616:	e694      	b.n	800c342 <__ieee754_log+0x32>
 800c618:	fee00000 	.word	0xfee00000
 800c61c:	3fe62e42 	.word	0x3fe62e42
 800c620:	35793c76 	.word	0x35793c76
 800c624:	3dea39ef 	.word	0x3dea39ef
 800c628:	55555555 	.word	0x55555555
 800c62c:	3fd55555 	.word	0x3fd55555
 800c630:	df3e5244 	.word	0xdf3e5244
 800c634:	3fc2f112 	.word	0x3fc2f112
 800c638:	96cb03de 	.word	0x96cb03de
 800c63c:	3fc74664 	.word	0x3fc74664
 800c640:	94229359 	.word	0x94229359
 800c644:	3fd24924 	.word	0x3fd24924
 800c648:	55555593 	.word	0x55555593
 800c64c:	3fe55555 	.word	0x3fe55555
 800c650:	d078c69f 	.word	0xd078c69f
 800c654:	3fc39a09 	.word	0x3fc39a09
 800c658:	1d8e78af 	.word	0x1d8e78af
 800c65c:	3fcc71c5 	.word	0x3fcc71c5
 800c660:	9997fa04 	.word	0x9997fa04
 800c664:	3fd99999 	.word	0x3fd99999
	...
 800c670:	c3500000 	.word	0xc3500000
 800c674:	43500000 	.word	0x43500000
 800c678:	7fefffff 	.word	0x7fefffff
 800c67c:	3ff00000 	.word	0x3ff00000
 800c680:	3fe00000 	.word	0x3fe00000
 800c684:	00000000 	.word	0x00000000

0800c688 <__ieee754_pow>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	ed2d 8b06 	vpush	{d8-d10}
 800c690:	b089      	sub	sp, #36	; 0x24
 800c692:	ed8d 1b00 	vstr	d1, [sp]
 800c696:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c69a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c69e:	ea58 0102 	orrs.w	r1, r8, r2
 800c6a2:	ec57 6b10 	vmov	r6, r7, d0
 800c6a6:	d115      	bne.n	800c6d4 <__ieee754_pow+0x4c>
 800c6a8:	19b3      	adds	r3, r6, r6
 800c6aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c6ae:	4152      	adcs	r2, r2
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	4b89      	ldr	r3, [pc, #548]	; (800c8d8 <__ieee754_pow+0x250>)
 800c6b4:	4193      	sbcs	r3, r2
 800c6b6:	f080 84d2 	bcs.w	800d05e <__ieee754_pow+0x9d6>
 800c6ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6be:	4630      	mov	r0, r6
 800c6c0:	4639      	mov	r1, r7
 800c6c2:	f7f3 fe03 	bl	80002cc <__adddf3>
 800c6c6:	ec41 0b10 	vmov	d0, r0, r1
 800c6ca:	b009      	add	sp, #36	; 0x24
 800c6cc:	ecbd 8b06 	vpop	{d8-d10}
 800c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d4:	4b81      	ldr	r3, [pc, #516]	; (800c8dc <__ieee754_pow+0x254>)
 800c6d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c6da:	429c      	cmp	r4, r3
 800c6dc:	ee10 aa10 	vmov	sl, s0
 800c6e0:	463d      	mov	r5, r7
 800c6e2:	dc06      	bgt.n	800c6f2 <__ieee754_pow+0x6a>
 800c6e4:	d101      	bne.n	800c6ea <__ieee754_pow+0x62>
 800c6e6:	2e00      	cmp	r6, #0
 800c6e8:	d1e7      	bne.n	800c6ba <__ieee754_pow+0x32>
 800c6ea:	4598      	cmp	r8, r3
 800c6ec:	dc01      	bgt.n	800c6f2 <__ieee754_pow+0x6a>
 800c6ee:	d10f      	bne.n	800c710 <__ieee754_pow+0x88>
 800c6f0:	b172      	cbz	r2, 800c710 <__ieee754_pow+0x88>
 800c6f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c6f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c6fa:	ea55 050a 	orrs.w	r5, r5, sl
 800c6fe:	d1dc      	bne.n	800c6ba <__ieee754_pow+0x32>
 800c700:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c704:	18db      	adds	r3, r3, r3
 800c706:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c70a:	4152      	adcs	r2, r2
 800c70c:	429d      	cmp	r5, r3
 800c70e:	e7d0      	b.n	800c6b2 <__ieee754_pow+0x2a>
 800c710:	2d00      	cmp	r5, #0
 800c712:	da3b      	bge.n	800c78c <__ieee754_pow+0x104>
 800c714:	4b72      	ldr	r3, [pc, #456]	; (800c8e0 <__ieee754_pow+0x258>)
 800c716:	4598      	cmp	r8, r3
 800c718:	dc51      	bgt.n	800c7be <__ieee754_pow+0x136>
 800c71a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c71e:	4598      	cmp	r8, r3
 800c720:	f340 84ac 	ble.w	800d07c <__ieee754_pow+0x9f4>
 800c724:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c728:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c72c:	2b14      	cmp	r3, #20
 800c72e:	dd0f      	ble.n	800c750 <__ieee754_pow+0xc8>
 800c730:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c734:	fa22 f103 	lsr.w	r1, r2, r3
 800c738:	fa01 f303 	lsl.w	r3, r1, r3
 800c73c:	4293      	cmp	r3, r2
 800c73e:	f040 849d 	bne.w	800d07c <__ieee754_pow+0x9f4>
 800c742:	f001 0101 	and.w	r1, r1, #1
 800c746:	f1c1 0302 	rsb	r3, r1, #2
 800c74a:	9304      	str	r3, [sp, #16]
 800c74c:	b182      	cbz	r2, 800c770 <__ieee754_pow+0xe8>
 800c74e:	e05f      	b.n	800c810 <__ieee754_pow+0x188>
 800c750:	2a00      	cmp	r2, #0
 800c752:	d15b      	bne.n	800c80c <__ieee754_pow+0x184>
 800c754:	f1c3 0314 	rsb	r3, r3, #20
 800c758:	fa48 f103 	asr.w	r1, r8, r3
 800c75c:	fa01 f303 	lsl.w	r3, r1, r3
 800c760:	4543      	cmp	r3, r8
 800c762:	f040 8488 	bne.w	800d076 <__ieee754_pow+0x9ee>
 800c766:	f001 0101 	and.w	r1, r1, #1
 800c76a:	f1c1 0302 	rsb	r3, r1, #2
 800c76e:	9304      	str	r3, [sp, #16]
 800c770:	4b5c      	ldr	r3, [pc, #368]	; (800c8e4 <__ieee754_pow+0x25c>)
 800c772:	4598      	cmp	r8, r3
 800c774:	d132      	bne.n	800c7dc <__ieee754_pow+0x154>
 800c776:	f1b9 0f00 	cmp.w	r9, #0
 800c77a:	f280 8478 	bge.w	800d06e <__ieee754_pow+0x9e6>
 800c77e:	4959      	ldr	r1, [pc, #356]	; (800c8e4 <__ieee754_pow+0x25c>)
 800c780:	4632      	mov	r2, r6
 800c782:	463b      	mov	r3, r7
 800c784:	2000      	movs	r0, #0
 800c786:	f7f4 f881 	bl	800088c <__aeabi_ddiv>
 800c78a:	e79c      	b.n	800c6c6 <__ieee754_pow+0x3e>
 800c78c:	2300      	movs	r3, #0
 800c78e:	9304      	str	r3, [sp, #16]
 800c790:	2a00      	cmp	r2, #0
 800c792:	d13d      	bne.n	800c810 <__ieee754_pow+0x188>
 800c794:	4b51      	ldr	r3, [pc, #324]	; (800c8dc <__ieee754_pow+0x254>)
 800c796:	4598      	cmp	r8, r3
 800c798:	d1ea      	bne.n	800c770 <__ieee754_pow+0xe8>
 800c79a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c79e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c7a2:	ea53 030a 	orrs.w	r3, r3, sl
 800c7a6:	f000 845a 	beq.w	800d05e <__ieee754_pow+0x9d6>
 800c7aa:	4b4f      	ldr	r3, [pc, #316]	; (800c8e8 <__ieee754_pow+0x260>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	dd08      	ble.n	800c7c2 <__ieee754_pow+0x13a>
 800c7b0:	f1b9 0f00 	cmp.w	r9, #0
 800c7b4:	f2c0 8457 	blt.w	800d066 <__ieee754_pow+0x9de>
 800c7b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7bc:	e783      	b.n	800c6c6 <__ieee754_pow+0x3e>
 800c7be:	2302      	movs	r3, #2
 800c7c0:	e7e5      	b.n	800c78e <__ieee754_pow+0x106>
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	f04f 0000 	mov.w	r0, #0
 800c7ca:	f04f 0100 	mov.w	r1, #0
 800c7ce:	f6bf af7a 	bge.w	800c6c6 <__ieee754_pow+0x3e>
 800c7d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c7d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7da:	e774      	b.n	800c6c6 <__ieee754_pow+0x3e>
 800c7dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c7e0:	d106      	bne.n	800c7f0 <__ieee754_pow+0x168>
 800c7e2:	4632      	mov	r2, r6
 800c7e4:	463b      	mov	r3, r7
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	f7f3 ff25 	bl	8000638 <__aeabi_dmul>
 800c7ee:	e76a      	b.n	800c6c6 <__ieee754_pow+0x3e>
 800c7f0:	4b3e      	ldr	r3, [pc, #248]	; (800c8ec <__ieee754_pow+0x264>)
 800c7f2:	4599      	cmp	r9, r3
 800c7f4:	d10c      	bne.n	800c810 <__ieee754_pow+0x188>
 800c7f6:	2d00      	cmp	r5, #0
 800c7f8:	db0a      	blt.n	800c810 <__ieee754_pow+0x188>
 800c7fa:	ec47 6b10 	vmov	d0, r6, r7
 800c7fe:	b009      	add	sp, #36	; 0x24
 800c800:	ecbd 8b06 	vpop	{d8-d10}
 800c804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	f000 bc6c 	b.w	800d0e4 <__ieee754_sqrt>
 800c80c:	2300      	movs	r3, #0
 800c80e:	9304      	str	r3, [sp, #16]
 800c810:	ec47 6b10 	vmov	d0, r6, r7
 800c814:	f000 fd4b 	bl	800d2ae <fabs>
 800c818:	ec51 0b10 	vmov	r0, r1, d0
 800c81c:	f1ba 0f00 	cmp.w	sl, #0
 800c820:	d129      	bne.n	800c876 <__ieee754_pow+0x1ee>
 800c822:	b124      	cbz	r4, 800c82e <__ieee754_pow+0x1a6>
 800c824:	4b2f      	ldr	r3, [pc, #188]	; (800c8e4 <__ieee754_pow+0x25c>)
 800c826:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d123      	bne.n	800c876 <__ieee754_pow+0x1ee>
 800c82e:	f1b9 0f00 	cmp.w	r9, #0
 800c832:	da05      	bge.n	800c840 <__ieee754_pow+0x1b8>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	2000      	movs	r0, #0
 800c83a:	492a      	ldr	r1, [pc, #168]	; (800c8e4 <__ieee754_pow+0x25c>)
 800c83c:	f7f4 f826 	bl	800088c <__aeabi_ddiv>
 800c840:	2d00      	cmp	r5, #0
 800c842:	f6bf af40 	bge.w	800c6c6 <__ieee754_pow+0x3e>
 800c846:	9b04      	ldr	r3, [sp, #16]
 800c848:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c84c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c850:	4323      	orrs	r3, r4
 800c852:	d108      	bne.n	800c866 <__ieee754_pow+0x1de>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4610      	mov	r0, r2
 800c85a:	4619      	mov	r1, r3
 800c85c:	f7f3 fd34 	bl	80002c8 <__aeabi_dsub>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	e78f      	b.n	800c786 <__ieee754_pow+0xfe>
 800c866:	9b04      	ldr	r3, [sp, #16]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	f47f af2c 	bne.w	800c6c6 <__ieee754_pow+0x3e>
 800c86e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c872:	4619      	mov	r1, r3
 800c874:	e727      	b.n	800c6c6 <__ieee754_pow+0x3e>
 800c876:	0feb      	lsrs	r3, r5, #31
 800c878:	3b01      	subs	r3, #1
 800c87a:	9306      	str	r3, [sp, #24]
 800c87c:	9a06      	ldr	r2, [sp, #24]
 800c87e:	9b04      	ldr	r3, [sp, #16]
 800c880:	4313      	orrs	r3, r2
 800c882:	d102      	bne.n	800c88a <__ieee754_pow+0x202>
 800c884:	4632      	mov	r2, r6
 800c886:	463b      	mov	r3, r7
 800c888:	e7e6      	b.n	800c858 <__ieee754_pow+0x1d0>
 800c88a:	4b19      	ldr	r3, [pc, #100]	; (800c8f0 <__ieee754_pow+0x268>)
 800c88c:	4598      	cmp	r8, r3
 800c88e:	f340 80fb 	ble.w	800ca88 <__ieee754_pow+0x400>
 800c892:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c896:	4598      	cmp	r8, r3
 800c898:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <__ieee754_pow+0x260>)
 800c89a:	dd0c      	ble.n	800c8b6 <__ieee754_pow+0x22e>
 800c89c:	429c      	cmp	r4, r3
 800c89e:	dc0f      	bgt.n	800c8c0 <__ieee754_pow+0x238>
 800c8a0:	f1b9 0f00 	cmp.w	r9, #0
 800c8a4:	da0f      	bge.n	800c8c6 <__ieee754_pow+0x23e>
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	b009      	add	sp, #36	; 0x24
 800c8aa:	ecbd 8b06 	vpop	{d8-d10}
 800c8ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b2:	f000 bcf3 	b.w	800d29c <__math_oflow>
 800c8b6:	429c      	cmp	r4, r3
 800c8b8:	dbf2      	blt.n	800c8a0 <__ieee754_pow+0x218>
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <__ieee754_pow+0x25c>)
 800c8bc:	429c      	cmp	r4, r3
 800c8be:	dd19      	ble.n	800c8f4 <__ieee754_pow+0x26c>
 800c8c0:	f1b9 0f00 	cmp.w	r9, #0
 800c8c4:	dcef      	bgt.n	800c8a6 <__ieee754_pow+0x21e>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	b009      	add	sp, #36	; 0x24
 800c8ca:	ecbd 8b06 	vpop	{d8-d10}
 800c8ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d2:	f000 bcda 	b.w	800d28a <__math_uflow>
 800c8d6:	bf00      	nop
 800c8d8:	fff00000 	.word	0xfff00000
 800c8dc:	7ff00000 	.word	0x7ff00000
 800c8e0:	433fffff 	.word	0x433fffff
 800c8e4:	3ff00000 	.word	0x3ff00000
 800c8e8:	3fefffff 	.word	0x3fefffff
 800c8ec:	3fe00000 	.word	0x3fe00000
 800c8f0:	41e00000 	.word	0x41e00000
 800c8f4:	4b60      	ldr	r3, [pc, #384]	; (800ca78 <__ieee754_pow+0x3f0>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f7f3 fce6 	bl	80002c8 <__aeabi_dsub>
 800c8fc:	a354      	add	r3, pc, #336	; (adr r3, 800ca50 <__ieee754_pow+0x3c8>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	4604      	mov	r4, r0
 800c904:	460d      	mov	r5, r1
 800c906:	f7f3 fe97 	bl	8000638 <__aeabi_dmul>
 800c90a:	a353      	add	r3, pc, #332	; (adr r3, 800ca58 <__ieee754_pow+0x3d0>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	4606      	mov	r6, r0
 800c912:	460f      	mov	r7, r1
 800c914:	4620      	mov	r0, r4
 800c916:	4629      	mov	r1, r5
 800c918:	f7f3 fe8e 	bl	8000638 <__aeabi_dmul>
 800c91c:	4b57      	ldr	r3, [pc, #348]	; (800ca7c <__ieee754_pow+0x3f4>)
 800c91e:	4682      	mov	sl, r0
 800c920:	468b      	mov	fp, r1
 800c922:	2200      	movs	r2, #0
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fe86 	bl	8000638 <__aeabi_dmul>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	a14b      	add	r1, pc, #300	; (adr r1, 800ca60 <__ieee754_pow+0x3d8>)
 800c932:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c936:	f7f3 fcc7 	bl	80002c8 <__aeabi_dsub>
 800c93a:	4622      	mov	r2, r4
 800c93c:	462b      	mov	r3, r5
 800c93e:	f7f3 fe7b 	bl	8000638 <__aeabi_dmul>
 800c942:	4602      	mov	r2, r0
 800c944:	460b      	mov	r3, r1
 800c946:	2000      	movs	r0, #0
 800c948:	494d      	ldr	r1, [pc, #308]	; (800ca80 <__ieee754_pow+0x3f8>)
 800c94a:	f7f3 fcbd 	bl	80002c8 <__aeabi_dsub>
 800c94e:	4622      	mov	r2, r4
 800c950:	4680      	mov	r8, r0
 800c952:	4689      	mov	r9, r1
 800c954:	462b      	mov	r3, r5
 800c956:	4620      	mov	r0, r4
 800c958:	4629      	mov	r1, r5
 800c95a:	f7f3 fe6d 	bl	8000638 <__aeabi_dmul>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	f7f3 fe67 	bl	8000638 <__aeabi_dmul>
 800c96a:	a33f      	add	r3, pc, #252	; (adr r3, 800ca68 <__ieee754_pow+0x3e0>)
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	f7f3 fe62 	bl	8000638 <__aeabi_dmul>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	4650      	mov	r0, sl
 800c97a:	4659      	mov	r1, fp
 800c97c:	f7f3 fca4 	bl	80002c8 <__aeabi_dsub>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4680      	mov	r8, r0
 800c986:	4689      	mov	r9, r1
 800c988:	4630      	mov	r0, r6
 800c98a:	4639      	mov	r1, r7
 800c98c:	f7f3 fc9e 	bl	80002cc <__adddf3>
 800c990:	2000      	movs	r0, #0
 800c992:	4632      	mov	r2, r6
 800c994:	463b      	mov	r3, r7
 800c996:	4604      	mov	r4, r0
 800c998:	460d      	mov	r5, r1
 800c99a:	f7f3 fc95 	bl	80002c8 <__aeabi_dsub>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	f7f3 fc8f 	bl	80002c8 <__aeabi_dsub>
 800c9aa:	9b04      	ldr	r3, [sp, #16]
 800c9ac:	9a06      	ldr	r2, [sp, #24]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	4682      	mov	sl, r0
 800c9b4:	468b      	mov	fp, r1
 800c9b6:	f040 81e7 	bne.w	800cd88 <__ieee754_pow+0x700>
 800c9ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ca70 <__ieee754_pow+0x3e8>
 800c9be:	eeb0 8a47 	vmov.f32	s16, s14
 800c9c2:	eef0 8a67 	vmov.f32	s17, s15
 800c9c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9ca:	2600      	movs	r6, #0
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9d4:	f7f3 fc78 	bl	80002c8 <__aeabi_dsub>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	462b      	mov	r3, r5
 800c9dc:	f7f3 fe2c 	bl	8000638 <__aeabi_dmul>
 800c9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9e4:	4680      	mov	r8, r0
 800c9e6:	4689      	mov	r9, r1
 800c9e8:	4650      	mov	r0, sl
 800c9ea:	4659      	mov	r1, fp
 800c9ec:	f7f3 fe24 	bl	8000638 <__aeabi_dmul>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	f7f3 fc68 	bl	80002cc <__adddf3>
 800c9fc:	4632      	mov	r2, r6
 800c9fe:	463b      	mov	r3, r7
 800ca00:	4680      	mov	r8, r0
 800ca02:	4689      	mov	r9, r1
 800ca04:	4620      	mov	r0, r4
 800ca06:	4629      	mov	r1, r5
 800ca08:	f7f3 fe16 	bl	8000638 <__aeabi_dmul>
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4604      	mov	r4, r0
 800ca10:	460d      	mov	r5, r1
 800ca12:	4602      	mov	r2, r0
 800ca14:	4649      	mov	r1, r9
 800ca16:	4640      	mov	r0, r8
 800ca18:	f7f3 fc58 	bl	80002cc <__adddf3>
 800ca1c:	4b19      	ldr	r3, [pc, #100]	; (800ca84 <__ieee754_pow+0x3fc>)
 800ca1e:	4299      	cmp	r1, r3
 800ca20:	ec45 4b19 	vmov	d9, r4, r5
 800ca24:	4606      	mov	r6, r0
 800ca26:	460f      	mov	r7, r1
 800ca28:	468b      	mov	fp, r1
 800ca2a:	f340 82f1 	ble.w	800d010 <__ieee754_pow+0x988>
 800ca2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ca32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ca36:	4303      	orrs	r3, r0
 800ca38:	f000 81e4 	beq.w	800ce04 <__ieee754_pow+0x77c>
 800ca3c:	ec51 0b18 	vmov	r0, r1, d8
 800ca40:	2200      	movs	r2, #0
 800ca42:	2300      	movs	r3, #0
 800ca44:	f7f4 f86a 	bl	8000b1c <__aeabi_dcmplt>
 800ca48:	3800      	subs	r0, #0
 800ca4a:	bf18      	it	ne
 800ca4c:	2001      	movne	r0, #1
 800ca4e:	e72b      	b.n	800c8a8 <__ieee754_pow+0x220>
 800ca50:	60000000 	.word	0x60000000
 800ca54:	3ff71547 	.word	0x3ff71547
 800ca58:	f85ddf44 	.word	0xf85ddf44
 800ca5c:	3e54ae0b 	.word	0x3e54ae0b
 800ca60:	55555555 	.word	0x55555555
 800ca64:	3fd55555 	.word	0x3fd55555
 800ca68:	652b82fe 	.word	0x652b82fe
 800ca6c:	3ff71547 	.word	0x3ff71547
 800ca70:	00000000 	.word	0x00000000
 800ca74:	bff00000 	.word	0xbff00000
 800ca78:	3ff00000 	.word	0x3ff00000
 800ca7c:	3fd00000 	.word	0x3fd00000
 800ca80:	3fe00000 	.word	0x3fe00000
 800ca84:	408fffff 	.word	0x408fffff
 800ca88:	4bd5      	ldr	r3, [pc, #852]	; (800cde0 <__ieee754_pow+0x758>)
 800ca8a:	402b      	ands	r3, r5
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	b92b      	cbnz	r3, 800ca9c <__ieee754_pow+0x414>
 800ca90:	4bd4      	ldr	r3, [pc, #848]	; (800cde4 <__ieee754_pow+0x75c>)
 800ca92:	f7f3 fdd1 	bl	8000638 <__aeabi_dmul>
 800ca96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	1523      	asrs	r3, r4, #20
 800ca9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800caa2:	4413      	add	r3, r2
 800caa4:	9305      	str	r3, [sp, #20]
 800caa6:	4bd0      	ldr	r3, [pc, #832]	; (800cde8 <__ieee754_pow+0x760>)
 800caa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800caac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cab0:	429c      	cmp	r4, r3
 800cab2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cab6:	dd08      	ble.n	800caca <__ieee754_pow+0x442>
 800cab8:	4bcc      	ldr	r3, [pc, #816]	; (800cdec <__ieee754_pow+0x764>)
 800caba:	429c      	cmp	r4, r3
 800cabc:	f340 8162 	ble.w	800cd84 <__ieee754_pow+0x6fc>
 800cac0:	9b05      	ldr	r3, [sp, #20]
 800cac2:	3301      	adds	r3, #1
 800cac4:	9305      	str	r3, [sp, #20]
 800cac6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800caca:	2400      	movs	r4, #0
 800cacc:	00e3      	lsls	r3, r4, #3
 800cace:	9307      	str	r3, [sp, #28]
 800cad0:	4bc7      	ldr	r3, [pc, #796]	; (800cdf0 <__ieee754_pow+0x768>)
 800cad2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cad6:	ed93 7b00 	vldr	d7, [r3]
 800cada:	4629      	mov	r1, r5
 800cadc:	ec53 2b17 	vmov	r2, r3, d7
 800cae0:	eeb0 9a47 	vmov.f32	s18, s14
 800cae4:	eef0 9a67 	vmov.f32	s19, s15
 800cae8:	4682      	mov	sl, r0
 800caea:	f7f3 fbed 	bl	80002c8 <__aeabi_dsub>
 800caee:	4652      	mov	r2, sl
 800caf0:	4606      	mov	r6, r0
 800caf2:	460f      	mov	r7, r1
 800caf4:	462b      	mov	r3, r5
 800caf6:	ec51 0b19 	vmov	r0, r1, d9
 800cafa:	f7f3 fbe7 	bl	80002cc <__adddf3>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	2000      	movs	r0, #0
 800cb04:	49bb      	ldr	r1, [pc, #748]	; (800cdf4 <__ieee754_pow+0x76c>)
 800cb06:	f7f3 fec1 	bl	800088c <__aeabi_ddiv>
 800cb0a:	ec41 0b1a 	vmov	d10, r0, r1
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	4630      	mov	r0, r6
 800cb14:	4639      	mov	r1, r7
 800cb16:	f7f3 fd8f 	bl	8000638 <__aeabi_dmul>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb20:	9302      	str	r3, [sp, #8]
 800cb22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb26:	46ab      	mov	fp, r5
 800cb28:	106d      	asrs	r5, r5, #1
 800cb2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cb2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cb32:	ec41 0b18 	vmov	d8, r0, r1
 800cb36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	4649      	mov	r1, r9
 800cb40:	4614      	mov	r4, r2
 800cb42:	461d      	mov	r5, r3
 800cb44:	f7f3 fd78 	bl	8000638 <__aeabi_dmul>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	4639      	mov	r1, r7
 800cb50:	f7f3 fbba 	bl	80002c8 <__aeabi_dsub>
 800cb54:	ec53 2b19 	vmov	r2, r3, d9
 800cb58:	4606      	mov	r6, r0
 800cb5a:	460f      	mov	r7, r1
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	4629      	mov	r1, r5
 800cb60:	f7f3 fbb2 	bl	80002c8 <__aeabi_dsub>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4650      	mov	r0, sl
 800cb6a:	4659      	mov	r1, fp
 800cb6c:	f7f3 fbac 	bl	80002c8 <__aeabi_dsub>
 800cb70:	4642      	mov	r2, r8
 800cb72:	464b      	mov	r3, r9
 800cb74:	f7f3 fd60 	bl	8000638 <__aeabi_dmul>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	4639      	mov	r1, r7
 800cb80:	f7f3 fba2 	bl	80002c8 <__aeabi_dsub>
 800cb84:	ec53 2b1a 	vmov	r2, r3, d10
 800cb88:	f7f3 fd56 	bl	8000638 <__aeabi_dmul>
 800cb8c:	ec53 2b18 	vmov	r2, r3, d8
 800cb90:	ec41 0b19 	vmov	d9, r0, r1
 800cb94:	ec51 0b18 	vmov	r0, r1, d8
 800cb98:	f7f3 fd4e 	bl	8000638 <__aeabi_dmul>
 800cb9c:	a37c      	add	r3, pc, #496	; (adr r3, 800cd90 <__ieee754_pow+0x708>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	4604      	mov	r4, r0
 800cba4:	460d      	mov	r5, r1
 800cba6:	f7f3 fd47 	bl	8000638 <__aeabi_dmul>
 800cbaa:	a37b      	add	r3, pc, #492	; (adr r3, 800cd98 <__ieee754_pow+0x710>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fb8c 	bl	80002cc <__adddf3>
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	462b      	mov	r3, r5
 800cbb8:	f7f3 fd3e 	bl	8000638 <__aeabi_dmul>
 800cbbc:	a378      	add	r3, pc, #480	; (adr r3, 800cda0 <__ieee754_pow+0x718>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fb83 	bl	80002cc <__adddf3>
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	462b      	mov	r3, r5
 800cbca:	f7f3 fd35 	bl	8000638 <__aeabi_dmul>
 800cbce:	a376      	add	r3, pc, #472	; (adr r3, 800cda8 <__ieee754_pow+0x720>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	f7f3 fb7a 	bl	80002cc <__adddf3>
 800cbd8:	4622      	mov	r2, r4
 800cbda:	462b      	mov	r3, r5
 800cbdc:	f7f3 fd2c 	bl	8000638 <__aeabi_dmul>
 800cbe0:	a373      	add	r3, pc, #460	; (adr r3, 800cdb0 <__ieee754_pow+0x728>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fb71 	bl	80002cc <__adddf3>
 800cbea:	4622      	mov	r2, r4
 800cbec:	462b      	mov	r3, r5
 800cbee:	f7f3 fd23 	bl	8000638 <__aeabi_dmul>
 800cbf2:	a371      	add	r3, pc, #452	; (adr r3, 800cdb8 <__ieee754_pow+0x730>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fb68 	bl	80002cc <__adddf3>
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	4606      	mov	r6, r0
 800cc00:	460f      	mov	r7, r1
 800cc02:	462b      	mov	r3, r5
 800cc04:	4620      	mov	r0, r4
 800cc06:	4629      	mov	r1, r5
 800cc08:	f7f3 fd16 	bl	8000638 <__aeabi_dmul>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4630      	mov	r0, r6
 800cc12:	4639      	mov	r1, r7
 800cc14:	f7f3 fd10 	bl	8000638 <__aeabi_dmul>
 800cc18:	4642      	mov	r2, r8
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	464b      	mov	r3, r9
 800cc20:	ec51 0b18 	vmov	r0, r1, d8
 800cc24:	f7f3 fb52 	bl	80002cc <__adddf3>
 800cc28:	ec53 2b19 	vmov	r2, r3, d9
 800cc2c:	f7f3 fd04 	bl	8000638 <__aeabi_dmul>
 800cc30:	4622      	mov	r2, r4
 800cc32:	462b      	mov	r3, r5
 800cc34:	f7f3 fb4a 	bl	80002cc <__adddf3>
 800cc38:	4642      	mov	r2, r8
 800cc3a:	4682      	mov	sl, r0
 800cc3c:	468b      	mov	fp, r1
 800cc3e:	464b      	mov	r3, r9
 800cc40:	4640      	mov	r0, r8
 800cc42:	4649      	mov	r1, r9
 800cc44:	f7f3 fcf8 	bl	8000638 <__aeabi_dmul>
 800cc48:	4b6b      	ldr	r3, [pc, #428]	; (800cdf8 <__ieee754_pow+0x770>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	4606      	mov	r6, r0
 800cc4e:	460f      	mov	r7, r1
 800cc50:	f7f3 fb3c 	bl	80002cc <__adddf3>
 800cc54:	4652      	mov	r2, sl
 800cc56:	465b      	mov	r3, fp
 800cc58:	f7f3 fb38 	bl	80002cc <__adddf3>
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	4604      	mov	r4, r0
 800cc60:	460d      	mov	r5, r1
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4640      	mov	r0, r8
 800cc68:	4649      	mov	r1, r9
 800cc6a:	f7f3 fce5 	bl	8000638 <__aeabi_dmul>
 800cc6e:	4b62      	ldr	r3, [pc, #392]	; (800cdf8 <__ieee754_pow+0x770>)
 800cc70:	4680      	mov	r8, r0
 800cc72:	4689      	mov	r9, r1
 800cc74:	2200      	movs	r2, #0
 800cc76:	4620      	mov	r0, r4
 800cc78:	4629      	mov	r1, r5
 800cc7a:	f7f3 fb25 	bl	80002c8 <__aeabi_dsub>
 800cc7e:	4632      	mov	r2, r6
 800cc80:	463b      	mov	r3, r7
 800cc82:	f7f3 fb21 	bl	80002c8 <__aeabi_dsub>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	4650      	mov	r0, sl
 800cc8c:	4659      	mov	r1, fp
 800cc8e:	f7f3 fb1b 	bl	80002c8 <__aeabi_dsub>
 800cc92:	ec53 2b18 	vmov	r2, r3, d8
 800cc96:	f7f3 fccf 	bl	8000638 <__aeabi_dmul>
 800cc9a:	4622      	mov	r2, r4
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	460f      	mov	r7, r1
 800cca0:	462b      	mov	r3, r5
 800cca2:	ec51 0b19 	vmov	r0, r1, d9
 800cca6:	f7f3 fcc7 	bl	8000638 <__aeabi_dmul>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4630      	mov	r0, r6
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	f7f3 fb0b 	bl	80002cc <__adddf3>
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	460f      	mov	r7, r1
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	f7f3 fb03 	bl	80002cc <__adddf3>
 800ccc6:	a33e      	add	r3, pc, #248	; (adr r3, 800cdc0 <__ieee754_pow+0x738>)
 800ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cccc:	2000      	movs	r0, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	f7f3 fcb1 	bl	8000638 <__aeabi_dmul>
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	ec41 0b18 	vmov	d8, r0, r1
 800ccdc:	464b      	mov	r3, r9
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7f3 faf1 	bl	80002c8 <__aeabi_dsub>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	4630      	mov	r0, r6
 800ccec:	4639      	mov	r1, r7
 800ccee:	f7f3 faeb 	bl	80002c8 <__aeabi_dsub>
 800ccf2:	a335      	add	r3, pc, #212	; (adr r3, 800cdc8 <__ieee754_pow+0x740>)
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	f7f3 fc9e 	bl	8000638 <__aeabi_dmul>
 800ccfc:	a334      	add	r3, pc, #208	; (adr r3, 800cdd0 <__ieee754_pow+0x748>)
 800ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd02:	4606      	mov	r6, r0
 800cd04:	460f      	mov	r7, r1
 800cd06:	4620      	mov	r0, r4
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f7f3 fc95 	bl	8000638 <__aeabi_dmul>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	4630      	mov	r0, r6
 800cd14:	4639      	mov	r1, r7
 800cd16:	f7f3 fad9 	bl	80002cc <__adddf3>
 800cd1a:	9a07      	ldr	r2, [sp, #28]
 800cd1c:	4b37      	ldr	r3, [pc, #220]	; (800cdfc <__ieee754_pow+0x774>)
 800cd1e:	4413      	add	r3, r2
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	f7f3 fad2 	bl	80002cc <__adddf3>
 800cd28:	4682      	mov	sl, r0
 800cd2a:	9805      	ldr	r0, [sp, #20]
 800cd2c:	468b      	mov	fp, r1
 800cd2e:	f7f3 fc19 	bl	8000564 <__aeabi_i2d>
 800cd32:	9a07      	ldr	r2, [sp, #28]
 800cd34:	4b32      	ldr	r3, [pc, #200]	; (800ce00 <__ieee754_pow+0x778>)
 800cd36:	4413      	add	r3, r2
 800cd38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	460f      	mov	r7, r1
 800cd40:	4652      	mov	r2, sl
 800cd42:	465b      	mov	r3, fp
 800cd44:	ec51 0b18 	vmov	r0, r1, d8
 800cd48:	f7f3 fac0 	bl	80002cc <__adddf3>
 800cd4c:	4642      	mov	r2, r8
 800cd4e:	464b      	mov	r3, r9
 800cd50:	f7f3 fabc 	bl	80002cc <__adddf3>
 800cd54:	4632      	mov	r2, r6
 800cd56:	463b      	mov	r3, r7
 800cd58:	f7f3 fab8 	bl	80002cc <__adddf3>
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	4632      	mov	r2, r6
 800cd60:	463b      	mov	r3, r7
 800cd62:	4604      	mov	r4, r0
 800cd64:	460d      	mov	r5, r1
 800cd66:	f7f3 faaf 	bl	80002c8 <__aeabi_dsub>
 800cd6a:	4642      	mov	r2, r8
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	f7f3 faab 	bl	80002c8 <__aeabi_dsub>
 800cd72:	ec53 2b18 	vmov	r2, r3, d8
 800cd76:	f7f3 faa7 	bl	80002c8 <__aeabi_dsub>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	4650      	mov	r0, sl
 800cd80:	4659      	mov	r1, fp
 800cd82:	e610      	b.n	800c9a6 <__ieee754_pow+0x31e>
 800cd84:	2401      	movs	r4, #1
 800cd86:	e6a1      	b.n	800cacc <__ieee754_pow+0x444>
 800cd88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cdd8 <__ieee754_pow+0x750>
 800cd8c:	e617      	b.n	800c9be <__ieee754_pow+0x336>
 800cd8e:	bf00      	nop
 800cd90:	4a454eef 	.word	0x4a454eef
 800cd94:	3fca7e28 	.word	0x3fca7e28
 800cd98:	93c9db65 	.word	0x93c9db65
 800cd9c:	3fcd864a 	.word	0x3fcd864a
 800cda0:	a91d4101 	.word	0xa91d4101
 800cda4:	3fd17460 	.word	0x3fd17460
 800cda8:	518f264d 	.word	0x518f264d
 800cdac:	3fd55555 	.word	0x3fd55555
 800cdb0:	db6fabff 	.word	0xdb6fabff
 800cdb4:	3fdb6db6 	.word	0x3fdb6db6
 800cdb8:	33333303 	.word	0x33333303
 800cdbc:	3fe33333 	.word	0x3fe33333
 800cdc0:	e0000000 	.word	0xe0000000
 800cdc4:	3feec709 	.word	0x3feec709
 800cdc8:	dc3a03fd 	.word	0xdc3a03fd
 800cdcc:	3feec709 	.word	0x3feec709
 800cdd0:	145b01f5 	.word	0x145b01f5
 800cdd4:	be3e2fe0 	.word	0xbe3e2fe0
 800cdd8:	00000000 	.word	0x00000000
 800cddc:	3ff00000 	.word	0x3ff00000
 800cde0:	7ff00000 	.word	0x7ff00000
 800cde4:	43400000 	.word	0x43400000
 800cde8:	0003988e 	.word	0x0003988e
 800cdec:	000bb679 	.word	0x000bb679
 800cdf0:	080295c0 	.word	0x080295c0
 800cdf4:	3ff00000 	.word	0x3ff00000
 800cdf8:	40080000 	.word	0x40080000
 800cdfc:	080295e0 	.word	0x080295e0
 800ce00:	080295d0 	.word	0x080295d0
 800ce04:	a3b5      	add	r3, pc, #724	; (adr r3, 800d0dc <__ieee754_pow+0xa54>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	f7f3 fa5d 	bl	80002cc <__adddf3>
 800ce12:	4622      	mov	r2, r4
 800ce14:	ec41 0b1a 	vmov	d10, r0, r1
 800ce18:	462b      	mov	r3, r5
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	f7f3 fa53 	bl	80002c8 <__aeabi_dsub>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	ec51 0b1a 	vmov	r0, r1, d10
 800ce2a:	f7f3 fe95 	bl	8000b58 <__aeabi_dcmpgt>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f47f ae04 	bne.w	800ca3c <__ieee754_pow+0x3b4>
 800ce34:	4aa4      	ldr	r2, [pc, #656]	; (800d0c8 <__ieee754_pow+0xa40>)
 800ce36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	f340 8108 	ble.w	800d050 <__ieee754_pow+0x9c8>
 800ce40:	151b      	asrs	r3, r3, #20
 800ce42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ce46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ce4a:	fa4a f303 	asr.w	r3, sl, r3
 800ce4e:	445b      	add	r3, fp
 800ce50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce54:	4e9d      	ldr	r6, [pc, #628]	; (800d0cc <__ieee754_pow+0xa44>)
 800ce56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ce5a:	4116      	asrs	r6, r2
 800ce5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ce60:	2000      	movs	r0, #0
 800ce62:	ea23 0106 	bic.w	r1, r3, r6
 800ce66:	f1c2 0214 	rsb	r2, r2, #20
 800ce6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ce6e:	fa4a fa02 	asr.w	sl, sl, r2
 800ce72:	f1bb 0f00 	cmp.w	fp, #0
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	bfb8      	it	lt
 800ce80:	f1ca 0a00 	rsblt	sl, sl, #0
 800ce84:	f7f3 fa20 	bl	80002c8 <__aeabi_dsub>
 800ce88:	ec41 0b19 	vmov	d9, r0, r1
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	ec51 0b19 	vmov	r0, r1, d9
 800ce94:	f7f3 fa1a 	bl	80002cc <__adddf3>
 800ce98:	a37b      	add	r3, pc, #492	; (adr r3, 800d088 <__ieee754_pow+0xa00>)
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	2000      	movs	r0, #0
 800cea0:	4604      	mov	r4, r0
 800cea2:	460d      	mov	r5, r1
 800cea4:	f7f3 fbc8 	bl	8000638 <__aeabi_dmul>
 800cea8:	ec53 2b19 	vmov	r2, r3, d9
 800ceac:	4606      	mov	r6, r0
 800ceae:	460f      	mov	r7, r1
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	f7f3 fa08 	bl	80002c8 <__aeabi_dsub>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	4640      	mov	r0, r8
 800cebe:	4649      	mov	r1, r9
 800cec0:	f7f3 fa02 	bl	80002c8 <__aeabi_dsub>
 800cec4:	a372      	add	r3, pc, #456	; (adr r3, 800d090 <__ieee754_pow+0xa08>)
 800cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceca:	f7f3 fbb5 	bl	8000638 <__aeabi_dmul>
 800cece:	a372      	add	r3, pc, #456	; (adr r3, 800d098 <__ieee754_pow+0xa10>)
 800ced0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced4:	4680      	mov	r8, r0
 800ced6:	4689      	mov	r9, r1
 800ced8:	4620      	mov	r0, r4
 800ceda:	4629      	mov	r1, r5
 800cedc:	f7f3 fbac 	bl	8000638 <__aeabi_dmul>
 800cee0:	4602      	mov	r2, r0
 800cee2:	460b      	mov	r3, r1
 800cee4:	4640      	mov	r0, r8
 800cee6:	4649      	mov	r1, r9
 800cee8:	f7f3 f9f0 	bl	80002cc <__adddf3>
 800ceec:	4604      	mov	r4, r0
 800ceee:	460d      	mov	r5, r1
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4630      	mov	r0, r6
 800cef6:	4639      	mov	r1, r7
 800cef8:	f7f3 f9e8 	bl	80002cc <__adddf3>
 800cefc:	4632      	mov	r2, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	4680      	mov	r8, r0
 800cf02:	4689      	mov	r9, r1
 800cf04:	f7f3 f9e0 	bl	80002c8 <__aeabi_dsub>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	4629      	mov	r1, r5
 800cf10:	f7f3 f9da 	bl	80002c8 <__aeabi_dsub>
 800cf14:	4642      	mov	r2, r8
 800cf16:	4606      	mov	r6, r0
 800cf18:	460f      	mov	r7, r1
 800cf1a:	464b      	mov	r3, r9
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	4649      	mov	r1, r9
 800cf20:	f7f3 fb8a 	bl	8000638 <__aeabi_dmul>
 800cf24:	a35e      	add	r3, pc, #376	; (adr r3, 800d0a0 <__ieee754_pow+0xa18>)
 800cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	f7f3 fb83 	bl	8000638 <__aeabi_dmul>
 800cf32:	a35d      	add	r3, pc, #372	; (adr r3, 800d0a8 <__ieee754_pow+0xa20>)
 800cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf38:	f7f3 f9c6 	bl	80002c8 <__aeabi_dsub>
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	462b      	mov	r3, r5
 800cf40:	f7f3 fb7a 	bl	8000638 <__aeabi_dmul>
 800cf44:	a35a      	add	r3, pc, #360	; (adr r3, 800d0b0 <__ieee754_pow+0xa28>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	f7f3 f9bf 	bl	80002cc <__adddf3>
 800cf4e:	4622      	mov	r2, r4
 800cf50:	462b      	mov	r3, r5
 800cf52:	f7f3 fb71 	bl	8000638 <__aeabi_dmul>
 800cf56:	a358      	add	r3, pc, #352	; (adr r3, 800d0b8 <__ieee754_pow+0xa30>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f7f3 f9b4 	bl	80002c8 <__aeabi_dsub>
 800cf60:	4622      	mov	r2, r4
 800cf62:	462b      	mov	r3, r5
 800cf64:	f7f3 fb68 	bl	8000638 <__aeabi_dmul>
 800cf68:	a355      	add	r3, pc, #340	; (adr r3, 800d0c0 <__ieee754_pow+0xa38>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	f7f3 f9ad 	bl	80002cc <__adddf3>
 800cf72:	4622      	mov	r2, r4
 800cf74:	462b      	mov	r3, r5
 800cf76:	f7f3 fb5f 	bl	8000638 <__aeabi_dmul>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4640      	mov	r0, r8
 800cf80:	4649      	mov	r1, r9
 800cf82:	f7f3 f9a1 	bl	80002c8 <__aeabi_dsub>
 800cf86:	4604      	mov	r4, r0
 800cf88:	460d      	mov	r5, r1
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4640      	mov	r0, r8
 800cf90:	4649      	mov	r1, r9
 800cf92:	f7f3 fb51 	bl	8000638 <__aeabi_dmul>
 800cf96:	2200      	movs	r2, #0
 800cf98:	ec41 0b19 	vmov	d9, r0, r1
 800cf9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	f7f3 f990 	bl	80002c8 <__aeabi_dsub>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	ec51 0b19 	vmov	r0, r1, d9
 800cfb0:	f7f3 fc6c 	bl	800088c <__aeabi_ddiv>
 800cfb4:	4632      	mov	r2, r6
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	460d      	mov	r5, r1
 800cfba:	463b      	mov	r3, r7
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	4649      	mov	r1, r9
 800cfc0:	f7f3 fb3a 	bl	8000638 <__aeabi_dmul>
 800cfc4:	4632      	mov	r2, r6
 800cfc6:	463b      	mov	r3, r7
 800cfc8:	f7f3 f980 	bl	80002cc <__adddf3>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	f7f3 f978 	bl	80002c8 <__aeabi_dsub>
 800cfd8:	4642      	mov	r2, r8
 800cfda:	464b      	mov	r3, r9
 800cfdc:	f7f3 f974 	bl	80002c8 <__aeabi_dsub>
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	493a      	ldr	r1, [pc, #232]	; (800d0d0 <__ieee754_pow+0xa48>)
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	f7f3 f96e 	bl	80002c8 <__aeabi_dsub>
 800cfec:	ec41 0b10 	vmov	d0, r0, r1
 800cff0:	ee10 3a90 	vmov	r3, s1
 800cff4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cffc:	da2b      	bge.n	800d056 <__ieee754_pow+0x9ce>
 800cffe:	4650      	mov	r0, sl
 800d000:	f000 f96a 	bl	800d2d8 <scalbn>
 800d004:	ec51 0b10 	vmov	r0, r1, d0
 800d008:	ec53 2b18 	vmov	r2, r3, d8
 800d00c:	f7ff bbed 	b.w	800c7ea <__ieee754_pow+0x162>
 800d010:	4b30      	ldr	r3, [pc, #192]	; (800d0d4 <__ieee754_pow+0xa4c>)
 800d012:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d016:	429e      	cmp	r6, r3
 800d018:	f77f af0c 	ble.w	800ce34 <__ieee754_pow+0x7ac>
 800d01c:	4b2e      	ldr	r3, [pc, #184]	; (800d0d8 <__ieee754_pow+0xa50>)
 800d01e:	440b      	add	r3, r1
 800d020:	4303      	orrs	r3, r0
 800d022:	d009      	beq.n	800d038 <__ieee754_pow+0x9b0>
 800d024:	ec51 0b18 	vmov	r0, r1, d8
 800d028:	2200      	movs	r2, #0
 800d02a:	2300      	movs	r3, #0
 800d02c:	f7f3 fd76 	bl	8000b1c <__aeabi_dcmplt>
 800d030:	3800      	subs	r0, #0
 800d032:	bf18      	it	ne
 800d034:	2001      	movne	r0, #1
 800d036:	e447      	b.n	800c8c8 <__ieee754_pow+0x240>
 800d038:	4622      	mov	r2, r4
 800d03a:	462b      	mov	r3, r5
 800d03c:	f7f3 f944 	bl	80002c8 <__aeabi_dsub>
 800d040:	4642      	mov	r2, r8
 800d042:	464b      	mov	r3, r9
 800d044:	f7f3 fd7e 	bl	8000b44 <__aeabi_dcmpge>
 800d048:	2800      	cmp	r0, #0
 800d04a:	f43f aef3 	beq.w	800ce34 <__ieee754_pow+0x7ac>
 800d04e:	e7e9      	b.n	800d024 <__ieee754_pow+0x99c>
 800d050:	f04f 0a00 	mov.w	sl, #0
 800d054:	e71a      	b.n	800ce8c <__ieee754_pow+0x804>
 800d056:	ec51 0b10 	vmov	r0, r1, d0
 800d05a:	4619      	mov	r1, r3
 800d05c:	e7d4      	b.n	800d008 <__ieee754_pow+0x980>
 800d05e:	491c      	ldr	r1, [pc, #112]	; (800d0d0 <__ieee754_pow+0xa48>)
 800d060:	2000      	movs	r0, #0
 800d062:	f7ff bb30 	b.w	800c6c6 <__ieee754_pow+0x3e>
 800d066:	2000      	movs	r0, #0
 800d068:	2100      	movs	r1, #0
 800d06a:	f7ff bb2c 	b.w	800c6c6 <__ieee754_pow+0x3e>
 800d06e:	4630      	mov	r0, r6
 800d070:	4639      	mov	r1, r7
 800d072:	f7ff bb28 	b.w	800c6c6 <__ieee754_pow+0x3e>
 800d076:	9204      	str	r2, [sp, #16]
 800d078:	f7ff bb7a 	b.w	800c770 <__ieee754_pow+0xe8>
 800d07c:	2300      	movs	r3, #0
 800d07e:	f7ff bb64 	b.w	800c74a <__ieee754_pow+0xc2>
 800d082:	bf00      	nop
 800d084:	f3af 8000 	nop.w
 800d088:	00000000 	.word	0x00000000
 800d08c:	3fe62e43 	.word	0x3fe62e43
 800d090:	fefa39ef 	.word	0xfefa39ef
 800d094:	3fe62e42 	.word	0x3fe62e42
 800d098:	0ca86c39 	.word	0x0ca86c39
 800d09c:	be205c61 	.word	0xbe205c61
 800d0a0:	72bea4d0 	.word	0x72bea4d0
 800d0a4:	3e663769 	.word	0x3e663769
 800d0a8:	c5d26bf1 	.word	0xc5d26bf1
 800d0ac:	3ebbbd41 	.word	0x3ebbbd41
 800d0b0:	af25de2c 	.word	0xaf25de2c
 800d0b4:	3f11566a 	.word	0x3f11566a
 800d0b8:	16bebd93 	.word	0x16bebd93
 800d0bc:	3f66c16c 	.word	0x3f66c16c
 800d0c0:	5555553e 	.word	0x5555553e
 800d0c4:	3fc55555 	.word	0x3fc55555
 800d0c8:	3fe00000 	.word	0x3fe00000
 800d0cc:	000fffff 	.word	0x000fffff
 800d0d0:	3ff00000 	.word	0x3ff00000
 800d0d4:	4090cbff 	.word	0x4090cbff
 800d0d8:	3f6f3400 	.word	0x3f6f3400
 800d0dc:	652b82fe 	.word	0x652b82fe
 800d0e0:	3c971547 	.word	0x3c971547

0800d0e4 <__ieee754_sqrt>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	ec55 4b10 	vmov	r4, r5, d0
 800d0ec:	4e55      	ldr	r6, [pc, #340]	; (800d244 <__ieee754_sqrt+0x160>)
 800d0ee:	43ae      	bics	r6, r5
 800d0f0:	ee10 0a10 	vmov	r0, s0
 800d0f4:	ee10 3a10 	vmov	r3, s0
 800d0f8:	462a      	mov	r2, r5
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	d110      	bne.n	800d120 <__ieee754_sqrt+0x3c>
 800d0fe:	ee10 2a10 	vmov	r2, s0
 800d102:	462b      	mov	r3, r5
 800d104:	f7f3 fa98 	bl	8000638 <__aeabi_dmul>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	4620      	mov	r0, r4
 800d10e:	4629      	mov	r1, r5
 800d110:	f7f3 f8dc 	bl	80002cc <__adddf3>
 800d114:	4604      	mov	r4, r0
 800d116:	460d      	mov	r5, r1
 800d118:	ec45 4b10 	vmov	d0, r4, r5
 800d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d120:	2d00      	cmp	r5, #0
 800d122:	dc10      	bgt.n	800d146 <__ieee754_sqrt+0x62>
 800d124:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d128:	4330      	orrs	r0, r6
 800d12a:	d0f5      	beq.n	800d118 <__ieee754_sqrt+0x34>
 800d12c:	b15d      	cbz	r5, 800d146 <__ieee754_sqrt+0x62>
 800d12e:	ee10 2a10 	vmov	r2, s0
 800d132:	462b      	mov	r3, r5
 800d134:	ee10 0a10 	vmov	r0, s0
 800d138:	f7f3 f8c6 	bl	80002c8 <__aeabi_dsub>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	f7f3 fba4 	bl	800088c <__aeabi_ddiv>
 800d144:	e7e6      	b.n	800d114 <__ieee754_sqrt+0x30>
 800d146:	1512      	asrs	r2, r2, #20
 800d148:	d074      	beq.n	800d234 <__ieee754_sqrt+0x150>
 800d14a:	07d4      	lsls	r4, r2, #31
 800d14c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d150:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d158:	bf5e      	ittt	pl
 800d15a:	0fda      	lsrpl	r2, r3, #31
 800d15c:	005b      	lslpl	r3, r3, #1
 800d15e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d162:	2400      	movs	r4, #0
 800d164:	0fda      	lsrs	r2, r3, #31
 800d166:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d16a:	107f      	asrs	r7, r7, #1
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	2516      	movs	r5, #22
 800d170:	4620      	mov	r0, r4
 800d172:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d176:	1886      	adds	r6, r0, r2
 800d178:	428e      	cmp	r6, r1
 800d17a:	bfde      	ittt	le
 800d17c:	1b89      	suble	r1, r1, r6
 800d17e:	18b0      	addle	r0, r6, r2
 800d180:	18a4      	addle	r4, r4, r2
 800d182:	0049      	lsls	r1, r1, #1
 800d184:	3d01      	subs	r5, #1
 800d186:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d18a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d18e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d192:	d1f0      	bne.n	800d176 <__ieee754_sqrt+0x92>
 800d194:	462a      	mov	r2, r5
 800d196:	f04f 0e20 	mov.w	lr, #32
 800d19a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d19e:	4281      	cmp	r1, r0
 800d1a0:	eb06 0c05 	add.w	ip, r6, r5
 800d1a4:	dc02      	bgt.n	800d1ac <__ieee754_sqrt+0xc8>
 800d1a6:	d113      	bne.n	800d1d0 <__ieee754_sqrt+0xec>
 800d1a8:	459c      	cmp	ip, r3
 800d1aa:	d811      	bhi.n	800d1d0 <__ieee754_sqrt+0xec>
 800d1ac:	f1bc 0f00 	cmp.w	ip, #0
 800d1b0:	eb0c 0506 	add.w	r5, ip, r6
 800d1b4:	da43      	bge.n	800d23e <__ieee754_sqrt+0x15a>
 800d1b6:	2d00      	cmp	r5, #0
 800d1b8:	db41      	blt.n	800d23e <__ieee754_sqrt+0x15a>
 800d1ba:	f100 0801 	add.w	r8, r0, #1
 800d1be:	1a09      	subs	r1, r1, r0
 800d1c0:	459c      	cmp	ip, r3
 800d1c2:	bf88      	it	hi
 800d1c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d1c8:	eba3 030c 	sub.w	r3, r3, ip
 800d1cc:	4432      	add	r2, r6
 800d1ce:	4640      	mov	r0, r8
 800d1d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d1d4:	f1be 0e01 	subs.w	lr, lr, #1
 800d1d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d1dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d1e4:	d1db      	bne.n	800d19e <__ieee754_sqrt+0xba>
 800d1e6:	430b      	orrs	r3, r1
 800d1e8:	d006      	beq.n	800d1f8 <__ieee754_sqrt+0x114>
 800d1ea:	1c50      	adds	r0, r2, #1
 800d1ec:	bf13      	iteet	ne
 800d1ee:	3201      	addne	r2, #1
 800d1f0:	3401      	addeq	r4, #1
 800d1f2:	4672      	moveq	r2, lr
 800d1f4:	f022 0201 	bicne.w	r2, r2, #1
 800d1f8:	1063      	asrs	r3, r4, #1
 800d1fa:	0852      	lsrs	r2, r2, #1
 800d1fc:	07e1      	lsls	r1, r4, #31
 800d1fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d202:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d206:	bf48      	it	mi
 800d208:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d20c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d210:	4614      	mov	r4, r2
 800d212:	e781      	b.n	800d118 <__ieee754_sqrt+0x34>
 800d214:	0ad9      	lsrs	r1, r3, #11
 800d216:	3815      	subs	r0, #21
 800d218:	055b      	lsls	r3, r3, #21
 800d21a:	2900      	cmp	r1, #0
 800d21c:	d0fa      	beq.n	800d214 <__ieee754_sqrt+0x130>
 800d21e:	02cd      	lsls	r5, r1, #11
 800d220:	d50a      	bpl.n	800d238 <__ieee754_sqrt+0x154>
 800d222:	f1c2 0420 	rsb	r4, r2, #32
 800d226:	fa23 f404 	lsr.w	r4, r3, r4
 800d22a:	1e55      	subs	r5, r2, #1
 800d22c:	4093      	lsls	r3, r2
 800d22e:	4321      	orrs	r1, r4
 800d230:	1b42      	subs	r2, r0, r5
 800d232:	e78a      	b.n	800d14a <__ieee754_sqrt+0x66>
 800d234:	4610      	mov	r0, r2
 800d236:	e7f0      	b.n	800d21a <__ieee754_sqrt+0x136>
 800d238:	0049      	lsls	r1, r1, #1
 800d23a:	3201      	adds	r2, #1
 800d23c:	e7ef      	b.n	800d21e <__ieee754_sqrt+0x13a>
 800d23e:	4680      	mov	r8, r0
 800d240:	e7bd      	b.n	800d1be <__ieee754_sqrt+0xda>
 800d242:	bf00      	nop
 800d244:	7ff00000 	.word	0x7ff00000

0800d248 <__ieee754_sqrtf>:
 800d248:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d24c:	4770      	bx	lr

0800d24e <with_errno>:
 800d24e:	b570      	push	{r4, r5, r6, lr}
 800d250:	4604      	mov	r4, r0
 800d252:	460d      	mov	r5, r1
 800d254:	4616      	mov	r6, r2
 800d256:	f7fa fa75 	bl	8007744 <__errno>
 800d25a:	4629      	mov	r1, r5
 800d25c:	6006      	str	r6, [r0, #0]
 800d25e:	4620      	mov	r0, r4
 800d260:	bd70      	pop	{r4, r5, r6, pc}

0800d262 <xflow>:
 800d262:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d264:	4614      	mov	r4, r2
 800d266:	461d      	mov	r5, r3
 800d268:	b108      	cbz	r0, 800d26e <xflow+0xc>
 800d26a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d26e:	e9cd 2300 	strd	r2, r3, [sp]
 800d272:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d276:	4620      	mov	r0, r4
 800d278:	4629      	mov	r1, r5
 800d27a:	f7f3 f9dd 	bl	8000638 <__aeabi_dmul>
 800d27e:	2222      	movs	r2, #34	; 0x22
 800d280:	b003      	add	sp, #12
 800d282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d286:	f7ff bfe2 	b.w	800d24e <with_errno>

0800d28a <__math_uflow>:
 800d28a:	b508      	push	{r3, lr}
 800d28c:	2200      	movs	r2, #0
 800d28e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d292:	f7ff ffe6 	bl	800d262 <xflow>
 800d296:	ec41 0b10 	vmov	d0, r0, r1
 800d29a:	bd08      	pop	{r3, pc}

0800d29c <__math_oflow>:
 800d29c:	b508      	push	{r3, lr}
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d2a4:	f7ff ffdd 	bl	800d262 <xflow>
 800d2a8:	ec41 0b10 	vmov	d0, r0, r1
 800d2ac:	bd08      	pop	{r3, pc}

0800d2ae <fabs>:
 800d2ae:	ec51 0b10 	vmov	r0, r1, d0
 800d2b2:	ee10 2a10 	vmov	r2, s0
 800d2b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2ba:	ec43 2b10 	vmov	d0, r2, r3
 800d2be:	4770      	bx	lr

0800d2c0 <finite>:
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	ed8d 0b00 	vstr	d0, [sp]
 800d2c6:	9801      	ldr	r0, [sp, #4]
 800d2c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d2cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d2d0:	0fc0      	lsrs	r0, r0, #31
 800d2d2:	b002      	add	sp, #8
 800d2d4:	4770      	bx	lr
	...

0800d2d8 <scalbn>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	ec55 4b10 	vmov	r4, r5, d0
 800d2de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	b99a      	cbnz	r2, 800d310 <scalbn+0x38>
 800d2e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d2ec:	4323      	orrs	r3, r4
 800d2ee:	d036      	beq.n	800d35e <scalbn+0x86>
 800d2f0:	4b39      	ldr	r3, [pc, #228]	; (800d3d8 <scalbn+0x100>)
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	ee10 0a10 	vmov	r0, s0
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f7f3 f99d 	bl	8000638 <__aeabi_dmul>
 800d2fe:	4b37      	ldr	r3, [pc, #220]	; (800d3dc <scalbn+0x104>)
 800d300:	429e      	cmp	r6, r3
 800d302:	4604      	mov	r4, r0
 800d304:	460d      	mov	r5, r1
 800d306:	da10      	bge.n	800d32a <scalbn+0x52>
 800d308:	a32b      	add	r3, pc, #172	; (adr r3, 800d3b8 <scalbn+0xe0>)
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	e03a      	b.n	800d386 <scalbn+0xae>
 800d310:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d314:	428a      	cmp	r2, r1
 800d316:	d10c      	bne.n	800d332 <scalbn+0x5a>
 800d318:	ee10 2a10 	vmov	r2, s0
 800d31c:	4620      	mov	r0, r4
 800d31e:	4629      	mov	r1, r5
 800d320:	f7f2 ffd4 	bl	80002cc <__adddf3>
 800d324:	4604      	mov	r4, r0
 800d326:	460d      	mov	r5, r1
 800d328:	e019      	b.n	800d35e <scalbn+0x86>
 800d32a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d32e:	460b      	mov	r3, r1
 800d330:	3a36      	subs	r2, #54	; 0x36
 800d332:	4432      	add	r2, r6
 800d334:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d338:	428a      	cmp	r2, r1
 800d33a:	dd08      	ble.n	800d34e <scalbn+0x76>
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	a120      	add	r1, pc, #128	; (adr r1, 800d3c0 <scalbn+0xe8>)
 800d340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d344:	da1c      	bge.n	800d380 <scalbn+0xa8>
 800d346:	a120      	add	r1, pc, #128	; (adr r1, 800d3c8 <scalbn+0xf0>)
 800d348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d34c:	e018      	b.n	800d380 <scalbn+0xa8>
 800d34e:	2a00      	cmp	r2, #0
 800d350:	dd08      	ble.n	800d364 <scalbn+0x8c>
 800d352:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d356:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d35a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d35e:	ec45 4b10 	vmov	d0, r4, r5
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d368:	da19      	bge.n	800d39e <scalbn+0xc6>
 800d36a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d36e:	429e      	cmp	r6, r3
 800d370:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d374:	dd0a      	ble.n	800d38c <scalbn+0xb4>
 800d376:	a112      	add	r1, pc, #72	; (adr r1, 800d3c0 <scalbn+0xe8>)
 800d378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1e2      	bne.n	800d346 <scalbn+0x6e>
 800d380:	a30f      	add	r3, pc, #60	; (adr r3, 800d3c0 <scalbn+0xe8>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f3 f957 	bl	8000638 <__aeabi_dmul>
 800d38a:	e7cb      	b.n	800d324 <scalbn+0x4c>
 800d38c:	a10a      	add	r1, pc, #40	; (adr r1, 800d3b8 <scalbn+0xe0>)
 800d38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0b8      	beq.n	800d308 <scalbn+0x30>
 800d396:	a10e      	add	r1, pc, #56	; (adr r1, 800d3d0 <scalbn+0xf8>)
 800d398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d39c:	e7b4      	b.n	800d308 <scalbn+0x30>
 800d39e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3a2:	3236      	adds	r2, #54	; 0x36
 800d3a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d3a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <scalbn+0x108>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	e7e8      	b.n	800d386 <scalbn+0xae>
 800d3b4:	f3af 8000 	nop.w
 800d3b8:	c2f8f359 	.word	0xc2f8f359
 800d3bc:	01a56e1f 	.word	0x01a56e1f
 800d3c0:	8800759c 	.word	0x8800759c
 800d3c4:	7e37e43c 	.word	0x7e37e43c
 800d3c8:	8800759c 	.word	0x8800759c
 800d3cc:	fe37e43c 	.word	0xfe37e43c
 800d3d0:	c2f8f359 	.word	0xc2f8f359
 800d3d4:	81a56e1f 	.word	0x81a56e1f
 800d3d8:	43500000 	.word	0x43500000
 800d3dc:	ffff3cb0 	.word	0xffff3cb0
 800d3e0:	3c900000 	.word	0x3c900000

0800d3e4 <_init>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	bf00      	nop
 800d3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ea:	bc08      	pop	{r3}
 800d3ec:	469e      	mov	lr, r3
 800d3ee:	4770      	bx	lr

0800d3f0 <_fini>:
 800d3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3f2:	bf00      	nop
 800d3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3f6:	bc08      	pop	{r3}
 800d3f8:	469e      	mov	lr, r3
 800d3fa:	4770      	bx	lr
