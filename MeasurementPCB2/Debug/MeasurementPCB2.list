
MeasurementPCB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c12c  0800c1c0  0800c1c0  0001c1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080282ec  080282ec  000401e4  2**0
                  CONTENTS
  4 .ARM          00000008  080282ec  080282ec  000382ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080282f4  080282f4  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080282f4  080282f4  000382f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080282f8  080282f8  000382f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080282fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039b8  200001e4  080284e0  000401e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b9c  080284e0  00043b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb52  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bda  00000000  00000000  0005fd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00063940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  00065308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017600  00000000  00000000  00066b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008f6e  00000000  00000000  0007e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c0  00000000  00000000  000870c6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008304  00000000  00000000  00087188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000506  00000000  00000000  0008f48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c1a4 	.word	0x0800c1a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800c1a4 	.word	0x0800c1a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 800103e:	4bb6      	ldr	r3, [pc, #728]	; (8001318 <main+0x2e0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00e      	beq.n	8001064 <main+0x2c>
	  ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001046:	4bb5      	ldr	r3, [pc, #724]	; (800131c <main+0x2e4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4ab4      	ldr	r2, [pc, #720]	; (800131c <main+0x2e4>)
 800104c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001050:	6013      	str	r3, [r2, #0]
	  ARM_CM_DWT_CYCCNT  = 0;
 8001052:	4bb3      	ldr	r3, [pc, #716]	; (8001320 <main+0x2e8>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	  ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8001058:	4baf      	ldr	r3, [pc, #700]	; (8001318 <main+0x2e0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4aae      	ldr	r2, [pc, #696]	; (8001318 <main+0x2e0>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 fece 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 fa9c 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fb9a 	bl	80017a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001070:	f000 fb0a 	bl	8001688 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001074:	f000 fb36 	bl	80016e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001078:	f000 fb6a 	bl	8001750 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*initialize humidity module (I2C)*/
  //Check if device is connected
  if((ret = HAL_I2C_IsDeviceReady(&hi2c1, SHT31_ADDR, 1, HAL_MAX_DELAY)) != HAL_OK){
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2201      	movs	r2, #1
 8001082:	2188      	movs	r1, #136	; 0x88
 8001084:	48a7      	ldr	r0, [pc, #668]	; (8001324 <main+0x2ec>)
 8001086:	f001 fbdd 	bl	8002844 <HAL_I2C_IsDeviceReady>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4ba6      	ldr	r3, [pc, #664]	; (8001328 <main+0x2f0>)
 8001090:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Disable heater
  I2C_trans[0] = SHT31_HEATER_First;
 8001092:	4ba6      	ldr	r3, [pc, #664]	; (800132c <main+0x2f4>)
 8001094:	2230      	movs	r2, #48	; 0x30
 8001096:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = SHT31_HEATER_Second;
 8001098:	4ba4      	ldr	r3, [pc, #656]	; (800132c <main+0x2f4>)
 800109a:	2266      	movs	r2, #102	; 0x66
 800109c:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2302      	movs	r3, #2
 80010a6:	4aa1      	ldr	r2, [pc, #644]	; (800132c <main+0x2f4>)
 80010a8:	2188      	movs	r1, #136	; 0x88
 80010aa:	489e      	ldr	r0, [pc, #632]	; (8001324 <main+0x2ec>)
 80010ac:	f001 facc 	bl	8002648 <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b9c      	ldr	r3, [pc, #624]	; (8001328 <main+0x2f0>)
 80010b6:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  /*Initialize accelerometer module (I2C)*/
  //check if device is connected
  if((ret = HAL_I2C_IsDeviceReady(&hi2c1, LIS2_ADDR, 1, HAL_MAX_DELAY)) != HAL_OK){
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	2201      	movs	r2, #1
 80010be:	213a      	movs	r1, #58	; 0x3a
 80010c0:	4898      	ldr	r0, [pc, #608]	; (8001324 <main+0x2ec>)
 80010c2:	f001 fbbf 	bl	8002844 <HAL_I2C_IsDeviceReady>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b97      	ldr	r3, [pc, #604]	; (8001328 <main+0x2f0>)
 80010cc:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Write setting to control register 1
  I2C_trans[0] = LIS2_CTRL1_ADDR;
 80010ce:	4b97      	ldr	r3, [pc, #604]	; (800132c <main+0x2f4>)
 80010d0:	2220      	movs	r2, #32
 80010d2:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = LIS2_CTRL1_Write;
 80010d4:	4b95      	ldr	r3, [pc, #596]	; (800132c <main+0x2f4>)
 80010d6:	2278      	movs	r2, #120	; 0x78
 80010d8:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2302      	movs	r3, #2
 80010e2:	4a92      	ldr	r2, [pc, #584]	; (800132c <main+0x2f4>)
 80010e4:	213a      	movs	r1, #58	; 0x3a
 80010e6:	488f      	ldr	r0, [pc, #572]	; (8001324 <main+0x2ec>)
 80010e8:	f001 faae 	bl	8002648 <HAL_I2C_Master_Transmit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b8d      	ldr	r3, [pc, #564]	; (8001328 <main+0x2f0>)
 80010f2:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  //Write setting to FIFO register
  I2C_trans[0] = LIS2_FIFO_ADDR;
 80010f4:	4b8d      	ldr	r3, [pc, #564]	; (800132c <main+0x2f4>)
 80010f6:	2225      	movs	r2, #37	; 0x25
 80010f8:	701a      	strb	r2, [r3, #0]
  I2C_trans[1] = LIS2_FIFO_Write;
 80010fa:	4b8c      	ldr	r3, [pc, #560]	; (800132c <main+0x2f4>)
 80010fc:	22c0      	movs	r2, #192	; 0xc0
 80010fe:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_I2C_Master_Transmit(&hi2c1, LIS2_ADDR, I2C_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2302      	movs	r3, #2
 8001108:	4a88      	ldr	r2, [pc, #544]	; (800132c <main+0x2f4>)
 800110a:	213a      	movs	r1, #58	; 0x3a
 800110c:	4885      	ldr	r0, [pc, #532]	; (8001324 <main+0x2ec>)
 800110e:	f001 fa9b 	bl	8002648 <HAL_I2C_Master_Transmit>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b84      	ldr	r3, [pc, #528]	; (8001328 <main+0x2f0>)
 8001118:	701a      	strb	r2, [r3, #0]
	  //error handler
  }
  /*Initialize Temp module (SPI)*/
  //Reset command
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	4884      	ldr	r0, [pc, #528]	; (8001330 <main+0x2f8>)
 8001120:	f001 f934 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_CMD_RESET;
 8001124:	4b83      	ldr	r3, [pc, #524]	; (8001334 <main+0x2fc>)
 8001126:	227c      	movs	r2, #124	; 0x7c
 8001128:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	4980      	ldr	r1, [pc, #512]	; (8001334 <main+0x2fc>)
 8001132:	4881      	ldr	r0, [pc, #516]	; (8001338 <main+0x300>)
 8001134:	f002 fc45 	bl	80039c2 <HAL_SPI_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b7a      	ldr	r3, [pc, #488]	; (8001328 <main+0x2f0>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	4b79      	ldr	r3, [pc, #484]	; (8001328 <main+0x2f0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d000      	beq.n	800114a <main+0x112>
	  //error handler
	  while(1);
 8001148:	e7fe      	b.n	8001148 <main+0x110>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4878      	ldr	r0, [pc, #480]	; (8001330 <main+0x2f8>)
 8001150:	f001 f91c 	bl	800238c <HAL_GPIO_WritePin>
  //Setup MUX
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2110      	movs	r1, #16
 8001158:	4875      	ldr	r0, [pc, #468]	; (8001330 <main+0x2f8>)
 800115a:	f001 f917 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_MUX | MCP_WRITE;
 800115e:	4b75      	ldr	r3, [pc, #468]	; (8001334 <main+0x2fc>)
 8001160:	225a      	movs	r2, #90	; 0x5a
 8001162:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x01;
 8001164:	4b73      	ldr	r3, [pc, #460]	; (8001334 <main+0x2fc>)
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	2202      	movs	r2, #2
 8001170:	4970      	ldr	r1, [pc, #448]	; (8001334 <main+0x2fc>)
 8001172:	4871      	ldr	r0, [pc, #452]	; (8001338 <main+0x300>)
 8001174:	f002 fc25 	bl	80039c2 <HAL_SPI_Transmit>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b6a      	ldr	r3, [pc, #424]	; (8001328 <main+0x2f0>)
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <main+0x2f0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d000      	beq.n	800118a <main+0x152>
	  //error handler
	  while(1);
 8001188:	e7fe      	b.n	8001188 <main+0x150>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2110      	movs	r1, #16
 800118e:	4868      	ldr	r0, [pc, #416]	; (8001330 <main+0x2f8>)
 8001190:	f001 f8fc 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2110      	movs	r1, #16
 8001198:	4865      	ldr	r0, [pc, #404]	; (8001330 <main+0x2f8>)
 800119a:	f001 f8f7 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_MUX | MCP_STATICREAD;
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <main+0x2fc>)
 80011a0:	2259      	movs	r2, #89	; 0x59
 80011a2:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	2201      	movs	r2, #1
 80011aa:	4962      	ldr	r1, [pc, #392]	; (8001334 <main+0x2fc>)
 80011ac:	4862      	ldr	r0, [pc, #392]	; (8001338 <main+0x300>)
 80011ae:	f002 fc08 	bl	80039c2 <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <main+0x2f0>)
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <main+0x2f0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d000      	beq.n	80011c4 <main+0x18c>
	  //error handler
	  while(1);
 80011c2:	e7fe      	b.n	80011c2 <main+0x18a>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	495c      	ldr	r1, [pc, #368]	; (800133c <main+0x304>)
 80011cc:	485a      	ldr	r0, [pc, #360]	; (8001338 <main+0x300>)
 80011ce:	f002 fd34 	bl	8003c3a <HAL_SPI_Receive>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b54      	ldr	r3, [pc, #336]	; (8001328 <main+0x2f0>)
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <main+0x2f0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d000      	beq.n	80011e4 <main+0x1ac>
	  //error handler
	  while(1);
 80011e2:	e7fe      	b.n	80011e2 <main+0x1aa>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2110      	movs	r1, #16
 80011e8:	4851      	ldr	r0, [pc, #324]	; (8001330 <main+0x2f8>)
 80011ea:	f001 f8cf 	bl	800238c <HAL_GPIO_WritePin>
  //Write settings to config register 0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	484f      	ldr	r0, [pc, #316]	; (8001330 <main+0x2f8>)
 80011f4:	f001 f8ca 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF0 | MCP_WRITE;
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <main+0x2fc>)
 80011fa:	2246      	movs	r2, #70	; 0x46
 80011fc:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xC3;
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <main+0x2fc>)
 8001200:	22c3      	movs	r2, #195	; 0xc3
 8001202:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2202      	movs	r2, #2
 800120a:	494a      	ldr	r1, [pc, #296]	; (8001334 <main+0x2fc>)
 800120c:	484a      	ldr	r0, [pc, #296]	; (8001338 <main+0x300>)
 800120e:	f002 fbd8 	bl	80039c2 <HAL_SPI_Transmit>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <main+0x2f0>)
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	4b43      	ldr	r3, [pc, #268]	; (8001328 <main+0x2f0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d000      	beq.n	8001224 <main+0x1ec>
	  //error handler
	  while(1);
 8001222:	e7fe      	b.n	8001222 <main+0x1ea>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2110      	movs	r1, #16
 8001228:	4841      	ldr	r0, [pc, #260]	; (8001330 <main+0x2f8>)
 800122a:	f001 f8af 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2110      	movs	r1, #16
 8001232:	483f      	ldr	r0, [pc, #252]	; (8001330 <main+0x2f8>)
 8001234:	f001 f8aa 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF0 | MCP_STATICREAD;	//01000101
 8001238:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <main+0x2fc>)
 800123a:	2245      	movs	r2, #69	; 0x45
 800123c:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2201      	movs	r2, #1
 8001244:	493b      	ldr	r1, [pc, #236]	; (8001334 <main+0x2fc>)
 8001246:	483c      	ldr	r0, [pc, #240]	; (8001338 <main+0x300>)
 8001248:	f002 fbbb 	bl	80039c2 <HAL_SPI_Transmit>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <main+0x2f0>)
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <main+0x2f0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d000      	beq.n	800125e <main+0x226>
	  //error handler
	  while(1);
 800125c:	e7fe      	b.n	800125c <main+0x224>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2201      	movs	r2, #1
 8001264:	4935      	ldr	r1, [pc, #212]	; (800133c <main+0x304>)
 8001266:	4834      	ldr	r0, [pc, #208]	; (8001338 <main+0x300>)
 8001268:	f002 fce7 	bl	8003c3a <HAL_SPI_Receive>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <main+0x2f0>)
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <main+0x2f0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d000      	beq.n	800127e <main+0x246>
	  //error handler
	  while(1);
 800127c:	e7fe      	b.n	800127c <main+0x244>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	2110      	movs	r1, #16
 8001282:	482b      	ldr	r0, [pc, #172]	; (8001330 <main+0x2f8>)
 8001284:	f001 f882 	bl	800238c <HAL_GPIO_WritePin>
  //Write settings to config register 1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2110      	movs	r1, #16
 800128c:	4828      	ldr	r0, [pc, #160]	; (8001330 <main+0x2f8>)
 800128e:	f001 f87d 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF1 | MCP_WRITE;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <main+0x2fc>)
 8001294:	224a      	movs	r2, #74	; 0x4a
 8001296:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xCC; //F0 for diff CC for single
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <main+0x2fc>)
 800129a:	22cc      	movs	r2, #204	; 0xcc
 800129c:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2202      	movs	r2, #2
 80012a4:	4923      	ldr	r1, [pc, #140]	; (8001334 <main+0x2fc>)
 80012a6:	4824      	ldr	r0, [pc, #144]	; (8001338 <main+0x300>)
 80012a8:	f002 fb8b 	bl	80039c2 <HAL_SPI_Transmit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <main+0x2f0>)
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <main+0x2f0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d000      	beq.n	80012be <main+0x286>
	  //error handler
	  while(1);
 80012bc:	e7fe      	b.n	80012bc <main+0x284>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2110      	movs	r1, #16
 80012c2:	481b      	ldr	r0, [pc, #108]	; (8001330 <main+0x2f8>)
 80012c4:	f001 f862 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2110      	movs	r1, #16
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <main+0x2f8>)
 80012ce:	f001 f85d 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF1 | MCP_STATICREAD;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <main+0x2fc>)
 80012d4:	2249      	movs	r2, #73	; 0x49
 80012d6:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2201      	movs	r2, #1
 80012de:	4915      	ldr	r1, [pc, #84]	; (8001334 <main+0x2fc>)
 80012e0:	4815      	ldr	r0, [pc, #84]	; (8001338 <main+0x300>)
 80012e2:	f002 fb6e 	bl	80039c2 <HAL_SPI_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <main+0x2f0>)
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <main+0x2f0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d000      	beq.n	80012f8 <main+0x2c0>
	  //error handler
	  while(1);
 80012f6:	e7fe      	b.n	80012f6 <main+0x2be>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	2201      	movs	r2, #1
 80012fe:	490f      	ldr	r1, [pc, #60]	; (800133c <main+0x304>)
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <main+0x300>)
 8001302:	f002 fc9a 	bl	8003c3a <HAL_SPI_Receive>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <main+0x2f0>)
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <main+0x2f0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d014      	beq.n	8001340 <main+0x308>
	  //error handler
	  while(1);
 8001316:	e7fe      	b.n	8001316 <main+0x2de>
 8001318:	e0001000 	.word	0xe0001000
 800131c:	e000edfc 	.word	0xe000edfc
 8001320:	e0001004 	.word	0xe0001004
 8001324:	20000200 	.word	0x20000200
 8001328:	20000332 	.word	0x20000332
 800132c:	2000032c 	.word	0x2000032c
 8001330:	40020000 	.word	0x40020000
 8001334:	2000031c 	.word	0x2000031c
 8001338:	20000254 	.word	0x20000254
 800133c:	20000324 	.word	0x20000324
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2110      	movs	r1, #16
 8001344:	4890      	ldr	r0, [pc, #576]	; (8001588 <main+0x550>)
 8001346:	f001 f821 	bl	800238c <HAL_GPIO_WritePin>
  //Write settings to config register 2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	488e      	ldr	r0, [pc, #568]	; (8001588 <main+0x550>)
 8001350:	f001 f81c 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF2 | MCP_WRITE;
 8001354:	4b8d      	ldr	r3, [pc, #564]	; (800158c <main+0x554>)
 8001356:	224e      	movs	r2, #78	; 0x4e
 8001358:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x0B;
 800135a:	4b8c      	ldr	r3, [pc, #560]	; (800158c <main+0x554>)
 800135c:	220b      	movs	r2, #11
 800135e:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	2202      	movs	r2, #2
 8001366:	4989      	ldr	r1, [pc, #548]	; (800158c <main+0x554>)
 8001368:	4889      	ldr	r0, [pc, #548]	; (8001590 <main+0x558>)
 800136a:	f002 fb2a 	bl	80039c2 <HAL_SPI_Transmit>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <main+0x55c>)
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	4b87      	ldr	r3, [pc, #540]	; (8001594 <main+0x55c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d000      	beq.n	8001380 <main+0x348>
	  //error handler
	  while(1);
 800137e:	e7fe      	b.n	800137e <main+0x346>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2110      	movs	r1, #16
 8001384:	4880      	ldr	r0, [pc, #512]	; (8001588 <main+0x550>)
 8001386:	f001 f801 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2110      	movs	r1, #16
 800138e:	487e      	ldr	r0, [pc, #504]	; (8001588 <main+0x550>)
 8001390:	f000 fffc 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF2 | MCP_STATICREAD;
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <main+0x554>)
 8001396:	224d      	movs	r2, #77	; 0x4d
 8001398:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	2201      	movs	r2, #1
 80013a0:	497a      	ldr	r1, [pc, #488]	; (800158c <main+0x554>)
 80013a2:	487b      	ldr	r0, [pc, #492]	; (8001590 <main+0x558>)
 80013a4:	f002 fb0d 	bl	80039c2 <HAL_SPI_Transmit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <main+0x55c>)
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	4b78      	ldr	r3, [pc, #480]	; (8001594 <main+0x55c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d000      	beq.n	80013ba <main+0x382>
	  //error handler
	  while(1);
 80013b8:	e7fe      	b.n	80013b8 <main+0x380>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	2201      	movs	r2, #1
 80013c0:	4975      	ldr	r1, [pc, #468]	; (8001598 <main+0x560>)
 80013c2:	4873      	ldr	r0, [pc, #460]	; (8001590 <main+0x558>)
 80013c4:	f002 fc39 	bl	8003c3a <HAL_SPI_Receive>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b71      	ldr	r3, [pc, #452]	; (8001594 <main+0x55c>)
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	4b70      	ldr	r3, [pc, #448]	; (8001594 <main+0x55c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d000      	beq.n	80013da <main+0x3a2>
	  //error handler
	  while(1);
 80013d8:	e7fe      	b.n	80013d8 <main+0x3a0>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2110      	movs	r1, #16
 80013de:	486a      	ldr	r0, [pc, #424]	; (8001588 <main+0x550>)
 80013e0:	f000 ffd4 	bl	800238c <HAL_GPIO_WritePin>
  //Write settings to config register 3
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2110      	movs	r1, #16
 80013e8:	4867      	ldr	r0, [pc, #412]	; (8001588 <main+0x550>)
 80013ea:	f000 ffcf 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF3 | MCP_WRITE;
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <main+0x554>)
 80013f0:	2252      	movs	r2, #82	; 0x52
 80013f2:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0xC0;
 80013f4:	4b65      	ldr	r3, [pc, #404]	; (800158c <main+0x554>)
 80013f6:	22c0      	movs	r2, #192	; 0xc0
 80013f8:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2202      	movs	r2, #2
 8001400:	4962      	ldr	r1, [pc, #392]	; (800158c <main+0x554>)
 8001402:	4863      	ldr	r0, [pc, #396]	; (8001590 <main+0x558>)
 8001404:	f002 fadd 	bl	80039c2 <HAL_SPI_Transmit>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <main+0x55c>)
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	4b60      	ldr	r3, [pc, #384]	; (8001594 <main+0x55c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d000      	beq.n	800141a <main+0x3e2>
	  //error handler
	  while(1);
 8001418:	e7fe      	b.n	8001418 <main+0x3e0>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2110      	movs	r1, #16
 800141e:	485a      	ldr	r0, [pc, #360]	; (8001588 <main+0x550>)
 8001420:	f000 ffb4 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2110      	movs	r1, #16
 8001428:	4857      	ldr	r0, [pc, #348]	; (8001588 <main+0x550>)
 800142a:	f000 ffaf 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_CONF3 | MCP_STATICREAD;
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <main+0x554>)
 8001430:	2251      	movs	r2, #81	; 0x51
 8001432:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2201      	movs	r2, #1
 800143a:	4954      	ldr	r1, [pc, #336]	; (800158c <main+0x554>)
 800143c:	4854      	ldr	r0, [pc, #336]	; (8001590 <main+0x558>)
 800143e:	f002 fac0 	bl	80039c2 <HAL_SPI_Transmit>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <main+0x55c>)
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <main+0x55c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d000      	beq.n	8001454 <main+0x41c>
	  //error handler
	  while(1);
 8001452:	e7fe      	b.n	8001452 <main+0x41a>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	494f      	ldr	r1, [pc, #316]	; (8001598 <main+0x560>)
 800145c:	484c      	ldr	r0, [pc, #304]	; (8001590 <main+0x558>)
 800145e:	f002 fbec 	bl	8003c3a <HAL_SPI_Receive>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <main+0x55c>)
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <main+0x55c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d000      	beq.n	8001474 <main+0x43c>
	  //error handler
	  while(1);
 8001472:	e7fe      	b.n	8001472 <main+0x43a>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2110      	movs	r1, #16
 8001478:	4843      	ldr	r0, [pc, #268]	; (8001588 <main+0x550>)
 800147a:	f000 ff87 	bl	800238c <HAL_GPIO_WritePin>
  //Write settings to config IRQ
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2110      	movs	r1, #16
 8001482:	4841      	ldr	r0, [pc, #260]	; (8001588 <main+0x550>)
 8001484:	f000 ff82 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_IRQ | MCP_WRITE;
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <main+0x554>)
 800148a:	2256      	movs	r2, #86	; 0x56
 800148c:	701a      	strb	r2, [r3, #0]
  SPI_trans[1] = 0x77;
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <main+0x554>)
 8001490:	2277      	movs	r2, #119	; 0x77
 8001492:	705a      	strb	r2, [r3, #1]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 2, HAL_MAX_DELAY)) != HAL_OK){
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	2202      	movs	r2, #2
 800149a:	493c      	ldr	r1, [pc, #240]	; (800158c <main+0x554>)
 800149c:	483c      	ldr	r0, [pc, #240]	; (8001590 <main+0x558>)
 800149e:	f002 fa90 	bl	80039c2 <HAL_SPI_Transmit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <main+0x55c>)
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <main+0x55c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d000      	beq.n	80014b4 <main+0x47c>
	  while(1);
 80014b2:	e7fe      	b.n	80014b2 <main+0x47a>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	4833      	ldr	r0, [pc, #204]	; (8001588 <main+0x550>)
 80014ba:	f000 ff67 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	4831      	ldr	r0, [pc, #196]	; (8001588 <main+0x550>)
 80014c4:	f000 ff62 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_ADDR | MCP_IRQ | MCP_STATICREAD;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <main+0x554>)
 80014ca:	2255      	movs	r2, #85	; 0x55
 80014cc:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	2201      	movs	r2, #1
 80014d4:	492d      	ldr	r1, [pc, #180]	; (800158c <main+0x554>)
 80014d6:	482e      	ldr	r0, [pc, #184]	; (8001590 <main+0x558>)
 80014d8:	f002 fa73 	bl	80039c2 <HAL_SPI_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <main+0x55c>)
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <main+0x55c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d000      	beq.n	80014ee <main+0x4b6>
	  while(1);
 80014ec:	e7fe      	b.n	80014ec <main+0x4b4>
  }
  if((ret = HAL_SPI_Receive(&hspi1, SPI_recv, 1, HAL_MAX_DELAY)) != HAL_OK){
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	2201      	movs	r2, #1
 80014f4:	4928      	ldr	r1, [pc, #160]	; (8001598 <main+0x560>)
 80014f6:	4826      	ldr	r0, [pc, #152]	; (8001590 <main+0x558>)
 80014f8:	f002 fb9f 	bl	8003c3a <HAL_SPI_Receive>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <main+0x55c>)
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <main+0x55c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d000      	beq.n	800150e <main+0x4d6>
	  while(1);
 800150c:	e7fe      	b.n	800150c <main+0x4d4>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2110      	movs	r1, #16
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <main+0x550>)
 8001514:	f000 ff3a 	bl	800238c <HAL_GPIO_WritePin>

  //Conversion start thermistor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	481a      	ldr	r0, [pc, #104]	; (8001588 <main+0x550>)
 800151e:	f000 ff35 	bl	800238c <HAL_GPIO_WritePin>
  SPI_trans[0] = MCP_CMD_CONV;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <main+0x554>)
 8001524:	2268      	movs	r2, #104	; 0x68
 8001526:	701a      	strb	r2, [r3, #0]
  if((ret = HAL_SPI_Transmit(&hspi1, SPI_trans, 1, HAL_MAX_DELAY)) != HAL_OK){
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	2201      	movs	r2, #1
 800152e:	4917      	ldr	r1, [pc, #92]	; (800158c <main+0x554>)
 8001530:	4817      	ldr	r0, [pc, #92]	; (8001590 <main+0x558>)
 8001532:	f002 fa46 	bl	80039c2 <HAL_SPI_Transmit>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <main+0x55c>)
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <main+0x55c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d000      	beq.n	8001548 <main+0x510>
	  while(1);
 8001546:	e7fe      	b.n	8001546 <main+0x50e>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2110      	movs	r1, #16
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <main+0x550>)
 800154e:	f000 ff1d 	bl	800238c <HAL_GPIO_WritePin>
  //Initialize DSP functions
  arm_rfft_fast_init_f32(&S, FFT_SIZE);
 8001552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <main+0x564>)
 8001558:	f006 f82a 	bl	80075b0 <arm_rfft_fast_init_f32>
  /* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
  arm_cfft_radix4_init_f32(&L, FFT_SIZE, 0, 1);
 800155c:	2301      	movs	r3, #1
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <main+0x568>)
 8001566:	f006 f8a7 	bl	80076b8 <arm_cfft_radix4_init_f32>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2101      	movs	r1, #1
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <main+0x550>)
 8001570:	f000 ff0c 	bl	800238c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001578:	f000 fc86 	bl	8001e88 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800157c:	f003 fcf4 	bl	8004f68 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8001580:	f003 fd16 	bl	8004fb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001584:	e7fe      	b.n	8001584 <main+0x54c>
 8001586:	bf00      	nop
 8001588:	40020000 	.word	0x40020000
 800158c:	2000031c 	.word	0x2000031c
 8001590:	20000254 	.word	0x20000254
 8001594:	20000332 	.word	0x20000332
 8001598:	20000324 	.word	0x20000324
 800159c:	200002f0 	.word	0x200002f0
 80015a0:	20000308 	.word	0x20000308

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	2234      	movs	r2, #52	; 0x34
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 fa17 	bl	80079e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <SystemClock_Config+0xdc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <SystemClock_Config+0xdc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <SystemClock_Config+0xdc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <SystemClock_Config+0xe0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a25      	ldr	r2, [pc, #148]	; (8001684 <SystemClock_Config+0xe0>)
 80015ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <SystemClock_Config+0xe0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001614:	2310      	movs	r3, #16
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 256;
 8001618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800161e:	2304      	movs	r3, #4
 8001620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001622:	2302      	movs	r3, #2
 8001624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001626:	2302      	movs	r3, #2
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4618      	mov	r0, r3
 8001630:	f001 feba 	bl	80033a8 <HAL_RCC_OscConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800163a:	f000 f945 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163e:	230f      	movs	r3, #15
 8001640:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001642:	2302      	movs	r3, #2
 8001644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	2103      	movs	r1, #3
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fc2a 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001666:	f000 f92f 	bl	80018c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_5);
 800166a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800166e:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8001672:	2000      	movs	r0, #0
 8001674:	f001 fd04 	bl	8003080 <HAL_RCC_MCOConfig>
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	; 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_I2C1_Init+0x50>)
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <MX_I2C1_Init+0x54>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_I2C1_Init+0x50>)
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x58>)
 8001696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_I2C1_Init+0x50>)
 80016c6:	f000 fe7b 	bl	80023c0 <HAL_I2C_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d0:	f000 f8fa 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000200 	.word	0x20000200
 80016dc:	40005400 	.word	0x40005400
 80016e0:	00061a80 	.word	0x00061a80

080016e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_SPI1_Init+0x64>)
 80016ea:	4a18      	ldr	r2, [pc, #96]	; (800174c <MX_SPI1_Init+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_SPI1_Init+0x64>)
 80016f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI1_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_SPI1_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI1_Init+0x64>)
 8001704:	2202      	movs	r2, #2
 8001706:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI1_Init+0x64>)
 800170a:	2201      	movs	r2, #1
 800170c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI1_Init+0x64>)
 8001710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001714:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI1_Init+0x64>)
 8001718:	2210      	movs	r2, #16
 800171a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI1_Init+0x64>)
 8001730:	220a      	movs	r2, #10
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_SPI1_Init+0x64>)
 8001736:	f002 f8bb 	bl	80038b0 <HAL_SPI_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001740:	f000 f8c2 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000254 	.word	0x20000254
 800174c:	40013000 	.word	0x40013000

08001750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART1_UART_Init+0x4c>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_USART1_UART_Init+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_USART1_UART_Init+0x4c>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART1_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART1_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART1_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART1_UART_Init+0x4c>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART1_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART1_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART1_UART_Init+0x4c>)
 8001788:	f003 f8e8 	bl	800495c <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001792:	f000 f899 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002ac 	.word	0x200002ac
 80017a0:	40011000 	.word	0x40011000

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <MX_GPIO_Init+0xf8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a36      	ldr	r2, [pc, #216]	; (800189c <MX_GPIO_Init+0xf8>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <MX_GPIO_Init+0xf8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <MX_GPIO_Init+0xf8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a2f      	ldr	r2, [pc, #188]	; (800189c <MX_GPIO_Init+0xf8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_GPIO_Init+0xf8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <MX_GPIO_Init+0xf8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <MX_GPIO_Init+0xf8>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <MX_GPIO_Init+0xf8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thermistorSwitch_Pin|CS_Pin|RTS_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f640 0111 	movw	r1, #2065	; 0x811
 8001814:	4822      	ldr	r0, [pc, #136]	; (80018a0 <MX_GPIO_Init+0xfc>)
 8001816:	f000 fdb9 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : thermistorSwitch_Pin */
  GPIO_InitStruct.Pin = thermistorSwitch_Pin;
 800181a:	2301      	movs	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(thermistorSwitch_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	481b      	ldr	r0, [pc, #108]	; (80018a0 <MX_GPIO_Init+0xfc>)
 8001832:	f000 fc2f 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001836:	2310      	movs	r3, #16
 8001838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183e:	2301      	movs	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4814      	ldr	r0, [pc, #80]	; (80018a0 <MX_GPIO_Init+0xfc>)
 800184e:	f000 fc21 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	4619      	mov	r1, r3
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_GPIO_Init+0xfc>)
 8001870:	f000 fc10 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTS_Pin */
  GPIO_InitStruct.Pin = RTS_Pin;
 8001874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTS_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_GPIO_Init+0xfc>)
 800188e:	f000 fc01 	bl	8002094 <HAL_GPIO_Init>

}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018b6:	f000 fac7 	bl	8001e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_MspInit+0x54>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_MspInit+0x54>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x54>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_MspInit+0x54>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_MspInit+0x54>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_MspInit+0x54>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210f      	movs	r1, #15
 8001916:	f06f 0001 	mvn.w	r0, #1
 800191a:	f000 fb91 	bl	8002040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_I2C_MspInit+0x84>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12b      	bne.n	80019a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196e:	2312      	movs	r3, #18
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197a:	2304      	movs	r3, #4
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_I2C_MspInit+0x8c>)
 8001986:	f000 fb85 	bl	8002094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40005400 	.word	0x40005400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_SPI_MspInit+0x84>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12b      	bne.n	8001a36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 80019e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a16:	23e0      	movs	r3, #224	; 0xe0
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a26:	2305      	movs	r3, #5
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_SPI_MspInit+0x8c>)
 8001a32:	f000 fb2f 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40013000 	.word	0x40013000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_UART_MspInit+0x84>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d12c      	bne.n	8001ac8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_UART_MspInit+0x8c>)
 8001ac4:	f000 fae6 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000

08001adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_InitTick+0xd0>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_InitTick+0xd0>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6453      	str	r3, [r2, #68]	; 0x44
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_InitTick+0xd0>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b08:	f107 020c 	add.w	r2, r7, #12
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fc16 	bl	8003344 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b18:	f001 fc00 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 8001b1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <HAL_InitTick+0xd4>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <HAL_InitTick+0xdc>)
 8001b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b52:	4818      	ldr	r0, [pc, #96]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b54:	f002 fc54 	bl	8004400 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11b      	bne.n	8001b9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b66:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <HAL_InitTick+0xd8>)
 8001b68:	f002 fca4 	bl	80044b4 <HAL_TIM_Base_Start_IT>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d111      	bne.n	8001b9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b7a:	2019      	movs	r0, #25
 8001b7c:	f000 fa7c 	bl	8002078 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	d808      	bhi.n	8001b98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b86:	2200      	movs	r2, #0
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	2019      	movs	r0, #25
 8001b8c:	f000 fa58 	bl	8002040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_InitTick+0xe0>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e002      	b.n	8001b9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3730      	adds	r7, #48	; 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	20000334 	.word	0x20000334
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bf2:	f002 fccf 	bl	8004594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000334 	.word	0x20000334

08001c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
	return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_kill>:

int _kill(int pid, int sig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c1a:	f005 fdb3 	bl	8007784 <__errno>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2216      	movs	r2, #22
 8001c22:	601a      	str	r2, [r3, #0]
	return -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_exit>:

void _exit (int status)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffe7 	bl	8001c10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c42:	e7fe      	b.n	8001c42 <_exit+0x12>

08001c44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e00a      	b.n	8001c6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c56:	f3af 8000 	nop.w
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60ba      	str	r2, [r7, #8]
 8001c62:	b2ca      	uxtb	r2, r1
 8001c64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbf0      	blt.n	8001c56 <_read+0x12>
	}

return len;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e009      	b.n	8001ca4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	60ba      	str	r2, [r7, #8]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf1      	blt.n	8001c90 <_write+0x12>
	}
	return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_close>:

int _close(int file)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cde:	605a      	str	r2, [r3, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_isatty>:

int _isatty(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <_sbrk+0x5c>)
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <_sbrk+0x60>)
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <_sbrk+0x64>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <_sbrk+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d207      	bcs.n	8001d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d50:	f005 fd18 	bl	8007784 <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	220c      	movs	r2, #12
 8001d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	e009      	b.n	8001d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <_sbrk+0x64>)
 8001d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20040000 	.word	0x20040000
 8001d80:	00000400 	.word	0x00000400
 8001d84:	2000037c 	.word	0x2000037c
 8001d88:	20003ba0 	.word	0x20003ba0

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001db6:	490e      	ldr	r1, [pc, #56]	; (8001df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dcc:	4c0b      	ldr	r4, [pc, #44]	; (8001dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dda:	f7ff ffd7 	bl	8001d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f005 fdcd 	bl	800797c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7ff f929 	bl	8001038 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001de8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001df4:	080282fc 	.word	0x080282fc
  ldr r2, =_sbss
 8001df8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001dfc:	20003b9c 	.word	0x20003b9c

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f8fc 	bl	800202a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f7ff fe52 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fd4c 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000380 	.word	0x20000380

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000380 	.word	0x20000380

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff4c 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002052:	f7ff ff61 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002056:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	6978      	ldr	r0, [r7, #20]
 800205e:	f7ff ffb1 	bl	8001fc4 <NVIC_EncodePriority>
 8002062:	4602      	mov	r2, r0
 8002064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff80 	bl	8001f70 <__NVIC_SetPriority>
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff54 	bl	8001f34 <__NVIC_EnableIRQ>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e153      	b.n	8002358 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8142 	bne.w	8002352 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d005      	beq.n	80020e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d017      	beq.n	8002184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d123      	bne.n	80021d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 809c 	beq.w	8002352 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b54      	ldr	r3, [pc, #336]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a53      	ldr	r2, [pc, #332]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b51      	ldr	r3, [pc, #324]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002236:	4a4f      	ldr	r2, [pc, #316]	; (8002374 <HAL_GPIO_Init+0x2e0>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a46      	ldr	r2, [pc, #280]	; (8002378 <HAL_GPIO_Init+0x2e4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x1f6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a45      	ldr	r2, [pc, #276]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x1f2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a44      	ldr	r2, [pc, #272]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x1ee>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a43      	ldr	r2, [pc, #268]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x1ea>
 800227a:	2303      	movs	r3, #3
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 800227e:	2307      	movs	r3, #7
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 800228a:	2300      	movs	r3, #0
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229c:	4935      	ldr	r1, [pc, #212]	; (8002374 <HAL_GPIO_Init+0x2e0>)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ce:	4a2e      	ldr	r2, [pc, #184]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f8:	4a23      	ldr	r2, [pc, #140]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002322:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	f67f aea8 	bls.w	80020b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40013800 	.word	0x40013800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020800 	.word	0x40020800
 8002384:	40020c00 	.word	0x40020c00
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e12b      	b.n	800262a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff faa0 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002424:	f000 ff66 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8002428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a81      	ldr	r2, [pc, #516]	; (8002634 <HAL_I2C_Init+0x274>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d807      	bhi.n	8002444 <HAL_I2C_Init+0x84>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_I2C_Init+0x278>)
 8002438:	4293      	cmp	r3, r2
 800243a:	bf94      	ite	ls
 800243c:	2301      	movls	r3, #1
 800243e:	2300      	movhi	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e006      	b.n	8002452 <HAL_I2C_Init+0x92>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a7d      	ldr	r2, [pc, #500]	; (800263c <HAL_I2C_Init+0x27c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	bf94      	ite	ls
 800244c:	2301      	movls	r3, #1
 800244e:	2300      	movhi	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0e7      	b.n	800262a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a78      	ldr	r2, [pc, #480]	; (8002640 <HAL_I2C_Init+0x280>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0c9b      	lsrs	r3, r3, #18
 8002464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_I2C_Init+0x274>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d802      	bhi.n	8002494 <HAL_I2C_Init+0xd4>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3301      	adds	r3, #1
 8002492:	e009      	b.n	80024a8 <HAL_I2C_Init+0xe8>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	4a69      	ldr	r2, [pc, #420]	; (8002644 <HAL_I2C_Init+0x284>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	3301      	adds	r3, #1
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	495c      	ldr	r1, [pc, #368]	; (8002634 <HAL_I2C_Init+0x274>)
 80024c4:	428b      	cmp	r3, r1
 80024c6:	d819      	bhi.n	80024fc <HAL_I2C_Init+0x13c>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e59      	subs	r1, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024dc:	400b      	ands	r3, r1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_I2C_Init+0x138>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e59      	subs	r1, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f6:	e051      	b.n	800259c <HAL_I2C_Init+0x1dc>
 80024f8:	2304      	movs	r3, #4
 80024fa:	e04f      	b.n	800259c <HAL_I2C_Init+0x1dc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d111      	bne.n	8002528 <HAL_I2C_Init+0x168>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	440b      	add	r3, r1
 8002512:	fbb0 f3f3 	udiv	r3, r0, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e012      	b.n	800254e <HAL_I2C_Init+0x18e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e58      	subs	r0, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	0099      	lsls	r1, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Init+0x196>
 8002552:	2301      	movs	r3, #1
 8002554:	e022      	b.n	800259c <HAL_I2C_Init+0x1dc>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10e      	bne.n	800257c <HAL_I2C_Init+0x1bc>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e58      	subs	r0, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	440b      	add	r3, r1
 800256c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257a:	e00f      	b.n	800259c <HAL_I2C_Init+0x1dc>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e58      	subs	r0, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	0099      	lsls	r1, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	6809      	ldr	r1, [r1, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6911      	ldr	r1, [r2, #16]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68d2      	ldr	r2, [r2, #12]
 80025d6:	4311      	orrs	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	430b      	orrs	r3, r1
 80025de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	000186a0 	.word	0x000186a0
 8002638:	001e847f 	.word	0x001e847f
 800263c:	003d08ff 	.word	0x003d08ff
 8002640:	431bde83 	.word	0x431bde83
 8002644:	10624dd3 	.word	0x10624dd3

08002648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	461a      	mov	r2, r3
 8002654:	460b      	mov	r3, r1
 8002656:	817b      	strh	r3, [r7, #10]
 8002658:	4613      	mov	r3, r2
 800265a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff fc08 	bl	8001e70 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	f040 80e0 	bne.w	8002830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2319      	movs	r3, #25
 8002676:	2201      	movs	r2, #1
 8002678:	4970      	ldr	r1, [pc, #448]	; (800283c <HAL_I2C_Master_Transmit+0x1f4>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fa92 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	e0d3      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_I2C_Master_Transmit+0x50>
 8002694:	2302      	movs	r3, #2
 8002696:	e0cc      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d007      	beq.n	80026be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2221      	movs	r2, #33	; 0x21
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2210      	movs	r2, #16
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a50      	ldr	r2, [pc, #320]	; (8002840 <HAL_I2C_Master_Transmit+0x1f8>)
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002700:	8979      	ldrh	r1, [r7, #10]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9ca 	bl	8002aa0 <I2C_MasterRequestWrite>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e08d      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800272c:	e066      	b.n	80027fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	6a39      	ldr	r1, [r7, #32]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fb0c 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b04      	cmp	r3, #4
 8002744:	d107      	bne.n	8002756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d11b      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x188>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6a39      	ldr	r1, [r7, #32]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fafc 	bl	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e01a      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d194      	bne.n	800272e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e000      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002830:	2302      	movs	r3, #2
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	00100002 	.word	0x00100002
 8002840:	ffff0000 	.word	0xffff0000

08002844 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	460b      	mov	r3, r1
 8002852:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff fb0c 	bl	8001e70 <HAL_GetTick>
 8002858:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b20      	cmp	r3, #32
 8002868:	f040 8111 	bne.w	8002a8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2319      	movs	r3, #25
 8002872:	2201      	movs	r2, #1
 8002874:	4988      	ldr	r1, [pc, #544]	; (8002a98 <HAL_I2C_IsDeviceReady+0x254>)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f994 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	e104      	b.n	8002a90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_I2C_IsDeviceReady+0x50>
 8002890:	2302      	movs	r3, #2
 8002892:	e0fd      	b.n	8002a90 <HAL_I2C_IsDeviceReady+0x24c>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d007      	beq.n	80028ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2224      	movs	r2, #36	; 0x24
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <HAL_I2C_IsDeviceReady+0x258>)
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f952 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002914:	d103      	bne.n	800291e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0b6      	b.n	8002a90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002930:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002932:	f7ff fa9d 	bl	8001e70 <HAL_GetTick>
 8002936:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002966:	e025      	b.n	80029b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002968:	f7ff fa82 	bl	8001e70 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d302      	bcc.n	800297e <HAL_I2C_IsDeviceReady+0x13a>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	22a0      	movs	r2, #160	; 0xa0
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2ba0      	cmp	r3, #160	; 0xa0
 80029be:	d005      	beq.n	80029cc <HAL_I2C_IsDeviceReady+0x188>
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_I2C_IsDeviceReady+0x188>
 80029c6:	7dbb      	ldrb	r3, [r7, #22]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0cd      	beq.n	8002968 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d129      	bne.n	8002a36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2319      	movs	r3, #25
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4921      	ldr	r1, [pc, #132]	; (8002a98 <HAL_I2C_IsDeviceReady+0x254>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f8c6 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e036      	b.n	8002a90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e02c      	b.n	8002a90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	490f      	ldr	r1, [pc, #60]	; (8002a98 <HAL_I2C_IsDeviceReady+0x254>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f8a2 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e012      	b.n	8002a90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f4ff af32 	bcc.w	80028de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	00100002 	.word	0x00100002
 8002a9c:	ffff0000 	.word	0xffff0000

08002aa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	460b      	mov	r3, r1
 8002aae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d006      	beq.n	8002aca <I2C_MasterRequestWrite+0x2a>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d003      	beq.n	8002aca <I2C_MasterRequestWrite+0x2a>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ac8:	d108      	bne.n	8002adc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e00b      	b.n	8002af4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	2b12      	cmp	r3, #18
 8002ae2:	d107      	bne.n	8002af4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f84f 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1a:	d103      	bne.n	8002b24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e035      	b.n	8002b94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b30:	d108      	bne.n	8002b44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	e01b      	b.n	8002b7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	11db      	asrs	r3, r3, #7
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f003 0306 	and.w	r3, r3, #6
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f063 030f 	orn	r3, r3, #15
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <I2C_MasterRequestWrite+0xfc>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f875 	bl	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e010      	b.n	8002b94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <I2C_MasterRequestWrite+0x100>)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f865 	bl	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	00010008 	.word	0x00010008
 8002ba0:	00010002 	.word	0x00010002

08002ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb4:	e025      	b.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d021      	beq.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7ff f957 	bl	8001e70 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e023      	b.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10d      	bne.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	e00c      	b.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d0b6      	beq.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c60:	e051      	b.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d123      	bne.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0204 	orr.w	r2, r3, #4
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e046      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d021      	beq.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7ff f8d5 	bl	8001e70 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d116      	bne.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e020      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10c      	bne.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e00b      	b.n	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d18d      	bne.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d5c:	e02d      	b.n	8002dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f878 	bl	8002e54 <I2C_IsAcknowledgeFailed>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e02d      	b.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d021      	beq.n	8002dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff f87b 	bl	8001e70 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e007      	b.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d1ca      	bne.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dde:	e02d      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f837 	bl	8002e54 <I2C_IsAcknowledgeFailed>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e02d      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d021      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7ff f83a 	bl	8001e70 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d1ca      	bne.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d11b      	bne.n	8002ea4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cc      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e067      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4934      	ldr	r1, [pc, #208]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe ff64 	bl	8001e70 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe ff60 	bl	8001e70 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d20c      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f889 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fd3e 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00
 8003070:	40023800 	.word	0x40023800
 8003074:	0800c1d8 	.word	0x0800c1d8
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08c      	sub	sp, #48	; 0x30
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d129      	bne.n	80030e6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80030ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	4619      	mov	r1, r3
 80030ca:	481f      	ldr	r0, [pc, #124]	; (8003148 <HAL_RCC_MCOConfig+0xc8>)
 80030cc:	f7fe ffe2 	bl	8002094 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	430b      	orrs	r3, r1
 80030de:	4919      	ldr	r1, [pc, #100]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80030e4:	e029      	b.n	800313a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	4619      	mov	r1, r3
 800311e:	480b      	ldr	r0, [pc, #44]	; (800314c <HAL_RCC_MCOConfig+0xcc>)
 8003120:	f7fe ffb8 	bl	8002094 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	00d9      	lsls	r1, r3, #3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	430b      	orrs	r3, r1
 8003134:	4903      	ldr	r1, [pc, #12]	; (8003144 <HAL_RCC_MCOConfig+0xc4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
}
 800313a:	bf00      	nop
 800313c:	3730      	adds	r7, #48	; 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000
 800314c:	40020800 	.word	0x40020800

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003154:	b090      	sub	sp, #64	; 0x40
 8003156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
 800315c:	2300      	movs	r3, #0
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003160:	2300      	movs	r3, #0
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d00d      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x40>
 8003174:	2b08      	cmp	r3, #8
 8003176:	f200 80a1 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x34>
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x3a>
 8003182:	e09b      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003186:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003188:	e09b      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318a:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800318e:	e098      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	627a      	str	r2, [r7, #36]	; 0x24
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031b8:	2100      	movs	r1, #0
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031bc:	fb03 f201 	mul.w	r2, r3, r1
 80031c0:	2300      	movs	r3, #0
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	4a43      	ldr	r2, [pc, #268]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ca:	fba0 1202 	umull	r1, r2, r0, r2
 80031ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031d0:	460a      	mov	r2, r1
 80031d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80031d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d6:	4413      	add	r3, r2
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	2200      	movs	r2, #0
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031ea:	f7fd fd6d 	bl	8000cc8 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4613      	mov	r3, r2
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f6:	e053      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	2200      	movs	r2, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	617a      	str	r2, [r7, #20]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800320a:	f04f 0b00 	mov.w	fp, #0
 800320e:	4652      	mov	r2, sl
 8003210:	465b      	mov	r3, fp
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	ebb2 080a 	subs.w	r8, r2, sl
 800322a:	eb63 090b 	sbc.w	r9, r3, fp
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800323a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800323e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003242:	ebb2 0408 	subs.w	r4, r2, r8
 8003246:	eb63 0509 	sbc.w	r5, r3, r9
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	00eb      	lsls	r3, r5, #3
 8003254:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003258:	00e2      	lsls	r2, r4, #3
 800325a:	4614      	mov	r4, r2
 800325c:	461d      	mov	r5, r3
 800325e:	eb14 030a 	adds.w	r3, r4, sl
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	eb45 030b 	adc.w	r3, r5, fp
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003276:	4629      	mov	r1, r5
 8003278:	028b      	lsls	r3, r1, #10
 800327a:	4621      	mov	r1, r4
 800327c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003280:	4621      	mov	r1, r4
 8003282:	028a      	lsls	r2, r1, #10
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	2200      	movs	r2, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	60fa      	str	r2, [r7, #12]
 8003290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003294:	f7fd fd18 	bl	8000cc8 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3740      	adds	r7, #64	; 0x40
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	017d7840 	.word	0x017d7840

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f8:	f7ff fff0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	0800c1e8 	.word	0x0800c1e8

0800331c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003320:	f7ff ffdc 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0b5b      	lsrs	r3, r3, #13
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4903      	ldr	r1, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	0800c1e8 	.word	0x0800c1e8

08003344 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	220f      	movs	r2, #15
 8003352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCC_GetClockConfig+0x5c>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_GetClockConfig+0x5c>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCC_GetClockConfig+0x60>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0207 	and.w	r2, r3, #7
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	601a      	str	r2, [r3, #0]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40023c00 	.word	0x40023c00

080033a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e273      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b7e      	ldr	r3, [pc, #504]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e24e      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6c      	ldr	r2, [pc, #432]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a65      	ldr	r2, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fd06 	bl	8001e70 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fd02 	bl	8001e70 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e213      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fcf2 	bl	8001e70 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fcee 	bl	8001e70 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1ff      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1d3      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe fca7 	bl	8001e70 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7fe fca3 	bl	8001e70 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1b4      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4925      	ldr	r1, [pc, #148]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fc86 	bl	8001e70 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe fc82 	bl	8001e70 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e193      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fc66 	bl	8001e70 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fc62 	bl	8001e70 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e173      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fe fc4f 	bl	8001e70 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe fc4b 	bl	8001e70 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d907      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e15c      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470000 	.word	0x42470000
 80035f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b8a      	ldr	r3, [pc, #552]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ea      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8097 	beq.w	800373c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b83      	ldr	r3, [pc, #524]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b7f      	ldr	r3, [pc, #508]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a7e      	ldr	r2, [pc, #504]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b7c      	ldr	r3, [pc, #496]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b79      	ldr	r3, [pc, #484]	; (8003824 <HAL_RCC_OscConfig+0x47c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b76      	ldr	r3, [pc, #472]	; (8003824 <HAL_RCC_OscConfig+0x47c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a75      	ldr	r2, [pc, #468]	; (8003824 <HAL_RCC_OscConfig+0x47c>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fe fc0b 	bl	8001e70 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fe fc07 	bl	8001e70 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e118      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <HAL_RCC_OscConfig+0x47c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x2ea>
 8003684:	4b66      	ldr	r3, [pc, #408]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a65      	ldr	r2, [pc, #404]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x30c>
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a60      	ldr	r2, [pc, #384]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b5e      	ldr	r3, [pc, #376]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 80036b4:	4b5a      	ldr	r3, [pc, #360]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a59      	ldr	r2, [pc, #356]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b57      	ldr	r3, [pc, #348]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a56      	ldr	r2, [pc, #344]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe fbcc 	bl	8001e70 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe fbc8 	bl	8001e70 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0d7      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x334>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe fbb6 	bl	8001e70 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe fbb2 	bl	8001e70 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0c1      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	4b40      	ldr	r3, [pc, #256]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80ad 	beq.w	80038a0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d060      	beq.n	8003814 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d145      	bne.n	80037e6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b33      	ldr	r3, [pc, #204]	; (8003828 <HAL_RCC_OscConfig+0x480>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe fb86 	bl	8001e70 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe fb82 	bl	8001e70 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e093      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	071b      	lsls	r3, r3, #28
 80037b2:	491b      	ldr	r1, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x480>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe fb57 	bl	8001e70 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fb53 	bl	8001e70 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e064      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x41e>
 80037e4:	e05c      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_RCC_OscConfig+0x480>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fb40 	bl	8001e70 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fe fb3c 	bl	8001e70 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e04d      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x44c>
 8003812:	e045      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e040      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
 8003820:	40023800 	.word	0x40023800
 8003824:	40007000 	.word	0x40007000
 8003828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800382c:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <HAL_RCC_OscConfig+0x504>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d030      	beq.n	800389c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d129      	bne.n	800389c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d122      	bne.n	800389c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003864:	4293      	cmp	r3, r2
 8003866:	d119      	bne.n	800389c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	3b01      	subs	r3, #1
 8003876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d10f      	bne.n	800389c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d107      	bne.n	800389c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800

080038b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07b      	b.n	80039ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d2:	d009      	beq.n	80038e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	61da      	str	r2, [r3, #28]
 80038da:	e005      	b.n	80038e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fe f85a 	bl	80019bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	ea42 0103 	orr.w	r1, r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	f003 0104 	and.w	r1, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0210 	and.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_SPI_Transmit+0x22>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e126      	b.n	8003c32 <HAL_SPI_Transmit+0x270>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ec:	f7fe fa40 	bl	8001e70 <HAL_GetTick>
 80039f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
 8003a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a06:	e10b      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0x52>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a18:	e102      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a60:	d10f      	bne.n	8003a82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d007      	beq.n	8003aa0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d14b      	bne.n	8003b42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Transmit+0xf6>
 8003ab2:	8afb      	ldrh	r3, [r7, #22]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d13e      	bne.n	8003b36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003adc:	e02b      	b.n	8003b36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d112      	bne.n	8003b12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	881a      	ldrh	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	1c9a      	adds	r2, r3, #2
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b10:	e011      	b.n	8003b36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b12:	f7fe f9ad 	bl	8001e70 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d803      	bhi.n	8003b2a <HAL_SPI_Transmit+0x168>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_Transmit+0x16e>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b34:	e074      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ce      	bne.n	8003ade <HAL_SPI_Transmit+0x11c>
 8003b40:	e04c      	b.n	8003bdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_SPI_Transmit+0x18e>
 8003b4a:	8afb      	ldrh	r3, [r7, #22]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d140      	bne.n	8003bd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b76:	e02c      	b.n	8003bd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d113      	bne.n	8003bae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bac:	e011      	b.n	8003bd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bae:	f7fe f95f 	bl	8001e70 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_Transmit+0x204>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Transmit+0x20a>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bd0:	e026      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1cd      	bne.n	8003b78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fbcb 	bl	800437c <SPI_EndRxTxTransaction>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e000      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b088      	sub	sp, #32
 8003c3e:	af02      	add	r7, sp, #8
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c56:	d112      	bne.n	8003c7e <HAL_SPI_Receive+0x44>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2204      	movs	r2, #4
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f8f1 	bl	8003e5c <HAL_SPI_TransmitReceive>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	e0ea      	b.n	8003e54 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_SPI_Receive+0x52>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e0e3      	b.n	8003e54 <HAL_SPI_Receive+0x21a>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c94:	f7fe f8ec 	bl	8001e70 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003caa:	e0ca      	b.n	8003e42 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Receive+0x7e>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cbc:	e0c1      	b.n	8003e42 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	d10f      	bne.n	8003d26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d007      	beq.n	8003d44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d162      	bne.n	8003e12 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d4c:	e02e      	b.n	8003dac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d115      	bne.n	8003d88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f103 020c 	add.w	r2, r3, #12
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d86:	e011      	b.n	8003dac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d88:	f7fe f872 	bl	8001e70 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d803      	bhi.n	8003da0 <HAL_SPI_Receive+0x166>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d102      	bne.n	8003da6 <HAL_SPI_Receive+0x16c>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003daa:	e04a      	b.n	8003e42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1cb      	bne.n	8003d4e <HAL_SPI_Receive+0x114>
 8003db6:	e031      	b.n	8003e1c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d113      	bne.n	8003dee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dec:	e011      	b.n	8003e12 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fe f83f 	bl	8001e70 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d803      	bhi.n	8003e06 <HAL_SPI_Receive+0x1cc>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_Receive+0x1d2>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e10:	e017      	b.n	8003e42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1cd      	bne.n	8003db8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fa45 	bl	80042b0 <SPI_EndRxTransaction>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
 8003e3e:	e000      	b.n	8003e42 <HAL_SPI_Receive+0x208>
  }

error :
 8003e40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08c      	sub	sp, #48	; 0x30
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x26>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e18a      	b.n	8004198 <HAL_SPI_TransmitReceive+0x33c>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8a:	f7fd fff1 	bl	8001e70 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d00f      	beq.n	8003ecc <HAL_SPI_TransmitReceive+0x70>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb2:	d107      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x68>
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d003      	beq.n	8003ecc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eca:	e15b      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_SPI_TransmitReceive+0x82>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_TransmitReceive+0x82>
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ee4:	e14e      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d003      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2205      	movs	r2, #5
 8003ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	887a      	ldrh	r2, [r7, #2]
 8003f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	887a      	ldrh	r2, [r7, #2]
 8003f1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d007      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f56:	d178      	bne.n	800404a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x10a>
 8003f60:	8b7b      	ldrh	r3, [r7, #26]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d166      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	881a      	ldrh	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8a:	e053      	b.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d11b      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x176>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x176>
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d113      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d119      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1b8>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d014      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004010:	2301      	movs	r3, #1
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004014:	f7fd ff2c 	bl	8001e70 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004020:	429a      	cmp	r2, r3
 8004022:	d807      	bhi.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d003      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004032:	e0a7      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1a6      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x130>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1a1      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x130>
 8004048:	e07c      	b.n	8004144 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x1fc>
 8004052:	8b7b      	ldrh	r3, [r7, #26]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d16b      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	7812      	ldrb	r2, [r2, #0]
 8004064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407e:	e057      	b.n	8004130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d11c      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x26c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x26c>
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d114      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	7812      	ldrb	r2, [r2, #0]
 80040aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d119      	bne.n	800410a <HAL_SPI_TransmitReceive+0x2ae>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d014      	beq.n	800410a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004106:	2301      	movs	r3, #1
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800410a:	f7fd feb1 	bl	8001e70 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004116:	429a      	cmp	r2, r3
 8004118:	d803      	bhi.n	8004122 <HAL_SPI_TransmitReceive+0x2c6>
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d102      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x2cc>
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800412e:	e029      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1a2      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x224>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d19d      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f917 	bl	800437c <SPI_EndRxTxTransaction>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004160:	e010      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	e000      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004198:	4618      	mov	r0, r3
 800419a:	3730      	adds	r7, #48	; 0x30
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041b0:	f7fd fe5e 	bl	8001e70 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041c0:	f7fd fe56 	bl	8001e70 <HAL_GetTick>
 80041c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041c6:	4b39      	ldr	r3, [pc, #228]	; (80042ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	015b      	lsls	r3, r3, #5
 80041cc:	0d1b      	lsrs	r3, r3, #20
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d6:	e054      	b.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d050      	beq.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e0:	f7fd fe46 	bl	8001e70 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d902      	bls.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d13d      	bne.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420e:	d111      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004218:	d004      	beq.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d107      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423c:	d10f      	bne.n	800425e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800425c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e017      	b.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3b01      	subs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	429a      	cmp	r2, r3
 800429e:	d19b      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000

080042b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c4:	d111      	bne.n	80042ea <SPI_EndRxTransaction+0x3a>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ce:	d004      	beq.n	80042da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d107      	bne.n	80042ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f2:	d12a      	bne.n	800434a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fc:	d012      	beq.n	8004324 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff ff49 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02d      	beq.n	8004370 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e026      	b.n	8004372 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2200      	movs	r2, #0
 800432c:	2101      	movs	r1, #1
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff ff36 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01a      	beq.n	8004370 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e013      	b.n	8004372 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	2101      	movs	r1, #1
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff ff23 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e000      	b.n	8004372 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <SPI_EndRxTxTransaction+0x7c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <SPI_EndRxTxTransaction+0x80>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0d5b      	lsrs	r3, r3, #21
 8004394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d112      	bne.n	80043ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff fef4 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e00f      	b.n	80043ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d0f2      	beq.n	80043ce <SPI_EndRxTxTransaction+0x52>
 80043e8:	e000      	b.n	80043ec <SPI_EndRxTxTransaction+0x70>
        break;
 80043ea:	bf00      	nop
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000
 80043fc:	165e9f81 	.word	0x165e9f81

08004400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e041      	b.n	8004496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f839 	bl	800449e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 f9d8 	bl	80047f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d001      	beq.n	80044cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e04e      	b.n	800456a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <HAL_TIM_Base_Start_IT+0xc4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d022      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d01d      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1f      	ldr	r2, [pc, #124]	; (800457c <HAL_TIM_Base_Start_IT+0xc8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <HAL_TIM_Base_Start_IT+0xcc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <HAL_TIM_Base_Start_IT+0xd0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <HAL_TIM_Base_Start_IT+0xd4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <HAL_TIM_Base_Start_IT+0xd8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x80>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a18      	ldr	r2, [pc, #96]	; (8004590 <HAL_TIM_Base_Start_IT+0xdc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d111      	bne.n	8004558 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b06      	cmp	r3, #6
 8004544:	d010      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	e007      	b.n	8004568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40010400 	.word	0x40010400
 800458c:	40014000 	.word	0x40014000
 8004590:	40001800 	.word	0x40001800

08004594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d122      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d11b      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0202 	mvn.w	r2, #2
 80045c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8ee 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8e0 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8f1 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d122      	bne.n	8004644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b04      	cmp	r3, #4
 800460a:	d11b      	bne.n	8004644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0204 	mvn.w	r2, #4
 8004614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8c4 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f8b6 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8c7 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b08      	cmp	r3, #8
 8004650:	d122      	bne.n	8004698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b08      	cmp	r3, #8
 800465e:	d11b      	bne.n	8004698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0208 	mvn.w	r2, #8
 8004668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2204      	movs	r2, #4
 800466e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f89a 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 8004684:	e005      	b.n	8004692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f88c 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f89d 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d122      	bne.n	80046ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d11b      	bne.n	80046ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0210 	mvn.w	r2, #16
 80046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2208      	movs	r2, #8
 80046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f870 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f862 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f873 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0201 	mvn.w	r2, #1
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd f8c6 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b80      	cmp	r3, #128	; 0x80
 8004724:	d10e      	bne.n	8004744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	d107      	bne.n	8004744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800473c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f902 	bl	8004948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d107      	bne.n	8004770 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f838 	bl	80047e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b20      	cmp	r3, #32
 800477c:	d10e      	bne.n	800479c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b20      	cmp	r3, #32
 800478a:	d107      	bne.n	800479c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0220 	mvn.w	r2, #32
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8cc 	bl	8004934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a40      	ldr	r2, [pc, #256]	; (8004908 <TIM_Base_SetConfig+0x114>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004812:	d00f      	beq.n	8004834 <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a3d      	ldr	r2, [pc, #244]	; (800490c <TIM_Base_SetConfig+0x118>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a3c      	ldr	r2, [pc, #240]	; (8004910 <TIM_Base_SetConfig+0x11c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a3b      	ldr	r2, [pc, #236]	; (8004914 <TIM_Base_SetConfig+0x120>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3a      	ldr	r2, [pc, #232]	; (8004918 <TIM_Base_SetConfig+0x124>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d108      	bne.n	8004846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2f      	ldr	r2, [pc, #188]	; (8004908 <TIM_Base_SetConfig+0x114>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d02b      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d027      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2c      	ldr	r2, [pc, #176]	; (800490c <TIM_Base_SetConfig+0x118>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d023      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2b      	ldr	r2, [pc, #172]	; (8004910 <TIM_Base_SetConfig+0x11c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01f      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <TIM_Base_SetConfig+0x120>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01b      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a29      	ldr	r2, [pc, #164]	; (8004918 <TIM_Base_SetConfig+0x124>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d017      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a28      	ldr	r2, [pc, #160]	; (800491c <TIM_Base_SetConfig+0x128>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a27      	ldr	r2, [pc, #156]	; (8004920 <TIM_Base_SetConfig+0x12c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00f      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a26      	ldr	r2, [pc, #152]	; (8004924 <TIM_Base_SetConfig+0x130>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00b      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a25      	ldr	r2, [pc, #148]	; (8004928 <TIM_Base_SetConfig+0x134>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a24      	ldr	r2, [pc, #144]	; (800492c <TIM_Base_SetConfig+0x138>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d003      	beq.n	80048a6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a23      	ldr	r2, [pc, #140]	; (8004930 <TIM_Base_SetConfig+0x13c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d108      	bne.n	80048b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <TIM_Base_SetConfig+0x114>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_Base_SetConfig+0xf8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <TIM_Base_SetConfig+0x124>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d103      	bne.n	80048f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	615a      	str	r2, [r3, #20]
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40010400 	.word	0x40010400
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800
 8004928:	40001800 	.word	0x40001800
 800492c:	40001c00 	.word	0x40001c00
 8004930:	40002000 	.word	0x40002000

08004934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e03f      	b.n	80049ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd f862 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2224      	movs	r2, #36	; 0x24
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800499e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f829 	bl	80049f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b0c0      	sub	sp, #256	; 0x100
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	ea40 0301 	orr.w	r3, r0, r1
 8004a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a50:	f021 010c 	bic.w	r1, r1, #12
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	6999      	ldr	r1, [r3, #24]
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	ea40 0301 	orr.w	r3, r0, r1
 8004a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <UART_SetConfig+0x2cc>)
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d005      	beq.n	8004a98 <UART_SetConfig+0xa0>
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b8d      	ldr	r3, [pc, #564]	; (8004cc8 <UART_SetConfig+0x2d0>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d104      	bne.n	8004aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe fc40 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 8004a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004aa0:	e003      	b.n	8004aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fe fc27 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab4:	f040 810c 	bne.w	8004cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ada:	4621      	mov	r1, r4
 8004adc:	eb12 0801 	adds.w	r8, r2, r1
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	eb43 0901 	adc.w	r9, r3, r1
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afa:	4690      	mov	r8, r2
 8004afc:	4699      	mov	r9, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	eb18 0303 	adds.w	r3, r8, r3
 8004b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b08:	462b      	mov	r3, r5
 8004b0a:	eb49 0303 	adc.w	r3, r9, r3
 8004b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b26:	460b      	mov	r3, r1
 8004b28:	18db      	adds	r3, r3, r3
 8004b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	657b      	str	r3, [r7, #84]	; 0x54
 8004b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b3c:	f7fc f8c4 	bl	8000cc8 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004b46:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	011c      	lsls	r4, r3, #4
 8004b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b70:	4641      	mov	r1, r8
 8004b72:	eb12 0a01 	adds.w	sl, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb43 0b01 	adc.w	fp, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b90:	4692      	mov	sl, r2
 8004b92:	469b      	mov	fp, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	eb1a 0303 	adds.w	r3, sl, r3
 8004b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	18db      	adds	r3, r3, r3
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bd2:	f7fc f879 	bl	8000cc8 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004bde:	fba3 2301 	umull	r2, r3, r3, r1
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c00:	441c      	add	r4, r3
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c24:	4641      	mov	r1, r8
 8004c26:	1851      	adds	r1, r2, r1
 8004c28:	6339      	str	r1, [r7, #48]	; 0x30
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	414b      	adcs	r3, r1
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	00cb      	lsls	r3, r1, #3
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c46:	4651      	mov	r1, sl
 8004c48:	00ca      	lsls	r2, r1, #3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4642      	mov	r2, r8
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c58:	464b      	mov	r3, r9
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c78:	460b      	mov	r3, r1
 8004c7a:	18db      	adds	r3, r3, r3
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7e:	4613      	mov	r3, r2
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c8e:	f7fc f81b 	bl	8000cc8 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	; 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	3332      	adds	r3, #50	; 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 0207 	and.w	r2, r3, #7
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc0:	e105      	b.n	8004ece <UART_SetConfig+0x4d6>
 8004cc2:	bf00      	nop
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	40011400 	.word	0x40011400
 8004ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	6239      	str	r1, [r7, #32]
 8004cea:	415b      	adcs	r3, r3
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	1854      	adds	r4, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb43 0501 	adc.w	r5, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d18:	464b      	mov	r3, r9
 8004d1a:	eb45 0303 	adc.w	r3, r5, r3
 8004d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d3e:	4629      	mov	r1, r5
 8004d40:	008b      	lsls	r3, r1, #2
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d48:	4621      	mov	r1, r4
 8004d4a:	008a      	lsls	r2, r1, #2
 8004d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d50:	f7fb ffba 	bl	8000cc8 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4b60      	ldr	r3, [pc, #384]	; (8004edc <UART_SetConfig+0x4e4>)
 8004d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	011c      	lsls	r4, r3, #4
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	61b9      	str	r1, [r7, #24]
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6139      	str	r1, [r7, #16]
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ddc:	4649      	mov	r1, r9
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	4641      	mov	r1, r8
 8004de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de6:	4641      	mov	r1, r8
 8004de8:	008a      	lsls	r2, r1, #2
 8004dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dee:	f7fb ff6b 	bl	8000cc8 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b39      	ldr	r3, [pc, #228]	; (8004edc <UART_SetConfig+0x4e4>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	; 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	3332      	adds	r3, #50	; 0x32
 8004e0a:	4a34      	ldr	r2, [pc, #208]	; (8004edc <UART_SetConfig+0x4e4>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e16:	441c      	add	r4, r3
 8004e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e20:	677a      	str	r2, [r7, #116]	; 0x74
 8004e22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e26:	4642      	mov	r2, r8
 8004e28:	464b      	mov	r3, r9
 8004e2a:	1891      	adds	r1, r2, r2
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	415b      	adcs	r3, r3
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e36:	4641      	mov	r1, r8
 8004e38:	1851      	adds	r1, r2, r1
 8004e3a:	6039      	str	r1, [r7, #0]
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	414b      	adcs	r3, r1
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e4e:	4659      	mov	r1, fp
 8004e50:	00cb      	lsls	r3, r1, #3
 8004e52:	4651      	mov	r1, sl
 8004e54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e58:	4651      	mov	r1, sl
 8004e5a:	00ca      	lsls	r2, r1, #3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4603      	mov	r3, r0
 8004e62:	4642      	mov	r2, r8
 8004e64:	189b      	adds	r3, r3, r2
 8004e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e68:	464b      	mov	r3, r9
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e7c:	667a      	str	r2, [r7, #100]	; 0x64
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	008b      	lsls	r3, r1, #2
 8004e8e:	4641      	mov	r1, r8
 8004e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e94:	4641      	mov	r1, r8
 8004e96:	008a      	lsls	r2, r1, #2
 8004e98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e9c:	f7fb ff14 	bl	8000cc8 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <UART_SetConfig+0x4e4>)
 8004ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2164      	movs	r1, #100	; 0x64
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	3332      	adds	r3, #50	; 0x32
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <UART_SetConfig+0x4e4>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	f003 020f 	and.w	r2, r3, #15
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4422      	add	r2, r4
 8004ecc:	609a      	str	r2, [r3, #8]
}
 8004ece:	bf00      	nop
 8004ed0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eda:	bf00      	nop
 8004edc:	51eb851f 	.word	0x51eb851f

08004ee0 <__NVIC_SetPriority>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	db0a      	blt.n	8004f0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	490c      	ldr	r1, [pc, #48]	; (8004f2c <__NVIC_SetPriority+0x4c>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	440b      	add	r3, r1
 8004f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f08:	e00a      	b.n	8004f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4908      	ldr	r1, [pc, #32]	; (8004f30 <__NVIC_SetPriority+0x50>)
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	3b04      	subs	r3, #4
 8004f18:	0112      	lsls	r2, r2, #4
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	761a      	strb	r2, [r3, #24]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000e100 	.word	0xe000e100
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <SysTick_Handler+0x1c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f3c:	f001 fc02 	bl	8006744 <xTaskGetSchedulerState>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f46:	f002 f9e7 	bl	8007318 <xPortSysTickHandler>
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010

08004f54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f58:	2100      	movs	r1, #0
 8004f5a:	f06f 0004 	mvn.w	r0, #4
 8004f5e:	f7ff ffbf 	bl	8004ee0 <__NVIC_SetPriority>
#endif
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f6e:	f3ef 8305 	mrs	r3, IPSR
 8004f72:	603b      	str	r3, [r7, #0]
  return(result);
 8004f74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f7a:	f06f 0305 	mvn.w	r3, #5
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	e00c      	b.n	8004f9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <osKernelInitialize+0x44>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <osKernelInitialize+0x44>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	e002      	b.n	8004f9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f9c:	687b      	ldr	r3, [r7, #4]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000384 	.word	0x20000384

08004fb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb6:	f3ef 8305 	mrs	r3, IPSR
 8004fba:	603b      	str	r3, [r7, #0]
  return(result);
 8004fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <osKernelStart+0x1a>
    stat = osErrorISR;
 8004fc2:	f06f 0305 	mvn.w	r3, #5
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	e010      	b.n	8004fec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <osKernelStart+0x48>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d109      	bne.n	8004fe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fd2:	f7ff ffbf 	bl	8004f54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fd6:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <osKernelStart+0x48>)
 8004fd8:	2202      	movs	r2, #2
 8004fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fdc:	f000 ff56 	bl	8005e8c <vTaskStartScheduler>
      stat = osOK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e002      	b.n	8004fec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fec:	687b      	ldr	r3, [r7, #4]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000384 	.word	0x20000384

08004ffc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a07      	ldr	r2, [pc, #28]	; (8005028 <vApplicationGetIdleTaskMemory+0x2c>)
 800500c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4a06      	ldr	r2, [pc, #24]	; (800502c <vApplicationGetIdleTaskMemory+0x30>)
 8005012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800501a:	601a      	str	r2, [r3, #0]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20000388 	.word	0x20000388
 800502c:	20000444 	.word	0x20000444

08005030 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a07      	ldr	r2, [pc, #28]	; (800505c <vApplicationGetTimerTaskMemory+0x2c>)
 8005040:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4a06      	ldr	r2, [pc, #24]	; (8005060 <vApplicationGetTimerTaskMemory+0x30>)
 8005046:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800504e:	601a      	str	r2, [r3, #0]
}
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20001444 	.word	0x20001444
 8005060:	20001500 	.word	0x20001500

08005064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0208 	add.w	r2, r3, #8
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f103 0208 	add.w	r2, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f103 0208 	add.w	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d103      	bne.n	8005126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e00c      	b.n	8005140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3308      	adds	r3, #8
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e002      	b.n	8005134 <vListInsert+0x2e>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d2f6      	bcs.n	800512e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	601a      	str	r2, [r3, #0]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6892      	ldr	r2, [r2, #8]
 800518e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6852      	ldr	r2, [r2, #4]
 8005198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d103      	bne.n	80051ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	1e5a      	subs	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051f6:	f001 fffd 	bl	80071f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	441a      	add	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	3b01      	subs	r3, #1
 8005228:	68f9      	ldr	r1, [r7, #12]
 800522a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	22ff      	movs	r2, #255	; 0xff
 800523a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	22ff      	movs	r2, #255	; 0xff
 8005242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d114      	bne.n	8005276 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01a      	beq.n	800528a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3310      	adds	r3, #16
 8005258:	4618      	mov	r0, r3
 800525a:	f001 f8b1 	bl	80063c0 <xTaskRemoveFromEventList>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d012      	beq.n	800528a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005264:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <xQueueGenericReset+0xcc>)
 8005266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	e009      	b.n	800528a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3310      	adds	r3, #16
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fef2 	bl	8005064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff feed 	bl	8005064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800528a:	f001 ffe3 	bl	8007254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800528e:	2301      	movs	r3, #1
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <xQueueGenericCreateStatic+0x52>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <xQueueGenericCreateStatic+0x56>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <xQueueGenericCreateStatic+0x58>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	623b      	str	r3, [r7, #32]
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <xQueueGenericCreateStatic+0x7e>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <xQueueGenericCreateStatic+0x82>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <xQueueGenericCreateStatic+0x84>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	61fb      	str	r3, [r7, #28]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800533a:	2350      	movs	r3, #80	; 0x50
 800533c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b50      	cmp	r3, #80	; 0x50
 8005342:	d00a      	beq.n	800535a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	61bb      	str	r3, [r7, #24]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800535a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800536e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f805 	bl	800538c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	; 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e002      	b.n	80053ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053ba:	2101      	movs	r1, #1
 80053bc:	69b8      	ldr	r0, [r7, #24]
 80053be:	f7ff ff05 	bl	80051cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08e      	sub	sp, #56	; 0x38
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053e2:	2300      	movs	r3, #0
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <xQueueGenericSend+0x32>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <xQueueGenericSend+0x40>
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <xQueueGenericSend+0x44>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <xQueueGenericSend+0x46>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <xQueueGenericSend+0x60>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d103      	bne.n	8005442 <xQueueGenericSend+0x6e>
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <xQueueGenericSend+0x72>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <xQueueGenericSend+0x74>
 8005446:	2300      	movs	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <xQueueGenericSend+0x8e>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	623b      	str	r3, [r7, #32]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005462:	f001 f96f 	bl	8006744 <xTaskGetSchedulerState>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <xQueueGenericSend+0x9e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <xQueueGenericSend+0xa2>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <xQueueGenericSend+0xa4>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xQueueGenericSend+0xbe>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61fb      	str	r3, [r7, #28]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005492:	f001 feaf 	bl	80071f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	429a      	cmp	r2, r3
 80054a0:	d302      	bcc.n	80054a8 <xQueueGenericSend+0xd4>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d129      	bne.n	80054fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ae:	f000 fa0b 	bl	80058c8 <prvCopyDataToQueue>
 80054b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d010      	beq.n	80054de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	3324      	adds	r3, #36	; 0x24
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 ff7d 	bl	80063c0 <xTaskRemoveFromEventList>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d013      	beq.n	80054f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054cc:	4b3f      	ldr	r3, [pc, #252]	; (80055cc <xQueueGenericSend+0x1f8>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	e00a      	b.n	80054f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054e4:	4b39      	ldr	r3, [pc, #228]	; (80055cc <xQueueGenericSend+0x1f8>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054f4:	f001 feae 	bl	8007254 <vPortExitCritical>
				return pdPASS;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e063      	b.n	80055c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005502:	f001 fea7 	bl	8007254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005506:	2300      	movs	r3, #0
 8005508:	e05c      	b.n	80055c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	4618      	mov	r0, r3
 8005516:	f000 ffb7 	bl	8006488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800551a:	2301      	movs	r3, #1
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800551e:	f001 fe99 	bl	8007254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005522:	f000 fd23 	bl	8005f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005526:	f001 fe65 	bl	80071f4 <vPortEnterCritical>
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005530:	b25b      	sxtb	r3, r3
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d103      	bne.n	8005540 <xQueueGenericSend+0x16c>
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005546:	b25b      	sxtb	r3, r3
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d103      	bne.n	8005556 <xQueueGenericSend+0x182>
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005556:	f001 fe7d 	bl	8007254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800555a:	1d3a      	adds	r2, r7, #4
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	4611      	mov	r1, r2
 8005562:	4618      	mov	r0, r3
 8005564:	f000 ffa6 	bl	80064b4 <xTaskCheckForTimeOut>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d124      	bne.n	80055b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800556e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005570:	f000 faa2 	bl	8005ab8 <prvIsQueueFull>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d018      	beq.n	80055ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	3310      	adds	r3, #16
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fecc 	bl	8006320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800558a:	f000 fa2d 	bl	80059e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800558e:	f000 fcfb 	bl	8005f88 <xTaskResumeAll>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	f47f af7c 	bne.w	8005492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <xQueueGenericSend+0x1f8>)
 800559c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	e772      	b.n	8005492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ae:	f000 fa1b 	bl	80059e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b2:	f000 fce9 	bl	8005f88 <xTaskResumeAll>
 80055b6:	e76c      	b.n	8005492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ba:	f000 fa15 	bl	80059e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055be:	f000 fce3 	bl	8005f88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3738      	adds	r7, #56	; 0x38
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b090      	sub	sp, #64	; 0x40
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <xQueueGenericSendFromISR+0x3c>
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <xQueueGenericSendFromISR+0x40>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <xQueueGenericSendFromISR+0x42>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005628:	bf00      	nop
 800562a:	e7fe      	b.n	800562a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d103      	bne.n	800563a <xQueueGenericSendFromISR+0x6a>
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <xQueueGenericSendFromISR+0x6e>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <xQueueGenericSendFromISR+0x70>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	623b      	str	r3, [r7, #32]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800565a:	f001 fead 	bl	80073b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800565e:	f3ef 8211 	mrs	r2, BASEPRI
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	61fa      	str	r2, [r7, #28]
 8005674:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005676:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <xQueueGenericSendFromISR+0xbc>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d12f      	bne.n	80056ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056a2:	f000 f911 	bl	80058c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d112      	bne.n	80056d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	3324      	adds	r3, #36	; 0x24
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fe7f 	bl	80063c0 <xTaskRemoveFromEventList>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00e      	beq.n	80056e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00b      	beq.n	80056e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	e007      	b.n	80056e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056da:	3301      	adds	r3, #1
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	b25a      	sxtb	r2, r3
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056e6:	2301      	movs	r3, #1
 80056e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80056ea:	e001      	b.n	80056f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3740      	adds	r7, #64	; 0x40
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08c      	sub	sp, #48	; 0x30
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xQueueReceive+0x30>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	623b      	str	r3, [r7, #32]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <xQueueReceive+0x3e>
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <xQueueReceive+0x42>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueReceive+0x44>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xQueueReceive+0x5e>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	61fb      	str	r3, [r7, #28]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005766:	f000 ffed 	bl	8006744 <xTaskGetSchedulerState>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <xQueueReceive+0x6e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <xQueueReceive+0x72>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <xQueueReceive+0x74>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xQueueReceive+0x8e>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61bb      	str	r3, [r7, #24]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005796:	f001 fd2d 	bl	80071f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01f      	beq.n	80057e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057aa:	f000 f8f7 	bl	800599c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	1e5a      	subs	r2, r3, #1
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00f      	beq.n	80057de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	3310      	adds	r3, #16
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fdfc 	bl	80063c0 <xTaskRemoveFromEventList>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057ce:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <xQueueReceive+0x1bc>)
 80057d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057de:	f001 fd39 	bl	8007254 <vPortExitCritical>
				return pdPASS;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e069      	b.n	80058ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057ec:	f001 fd32 	bl	8007254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e062      	b.n	80058ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057fa:	f107 0310 	add.w	r3, r7, #16
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fe42 	bl	8006488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005808:	f001 fd24 	bl	8007254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800580c:	f000 fbae 	bl	8005f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005810:	f001 fcf0 	bl	80071f4 <vPortEnterCritical>
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800581a:	b25b      	sxtb	r3, r3
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d103      	bne.n	800582a <xQueueReceive+0x122>
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005830:	b25b      	sxtb	r3, r3
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d103      	bne.n	8005840 <xQueueReceive+0x138>
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005840:	f001 fd08 	bl	8007254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005844:	1d3a      	adds	r2, r7, #4
 8005846:	f107 0310 	add.w	r3, r7, #16
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fe31 	bl	80064b4 <xTaskCheckForTimeOut>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d123      	bne.n	80058a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585a:	f000 f917 	bl	8005a8c <prvIsQueueEmpty>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	3324      	adds	r3, #36	; 0x24
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fd57 	bl	8006320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005874:	f000 f8b8 	bl	80059e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005878:	f000 fb86 	bl	8005f88 <xTaskResumeAll>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d189      	bne.n	8005796 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <xQueueReceive+0x1bc>)
 8005884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	e780      	b.n	8005796 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005896:	f000 f8a7 	bl	80059e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800589a:	f000 fb75 	bl	8005f88 <xTaskResumeAll>
 800589e:	e77a      	b.n	8005796 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a2:	f000 f8a1 	bl	80059e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058a6:	f000 fb6f 	bl	8005f88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ac:	f000 f8ee 	bl	8005a8c <prvIsQueueEmpty>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f43f af6f 	beq.w	8005796 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3730      	adds	r7, #48	; 0x30
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	e000ed04 	.word	0xe000ed04

080058c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d14d      	bne.n	800598a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 ff44 	bl	8006780 <xTaskPriorityDisinherit>
 80058f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	e043      	b.n	800598a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d119      	bne.n	800593c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6858      	ldr	r0, [r3, #4]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	461a      	mov	r2, r3
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	f002 f859 	bl	80079ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	441a      	add	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d32b      	bcc.n	800598a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	e026      	b.n	800598a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68d8      	ldr	r0, [r3, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	461a      	mov	r2, r3
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	f002 f83f 	bl	80079ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	425b      	negs	r3, r3
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d207      	bcs.n	8005978 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	425b      	negs	r3, r3
 8005972:	441a      	add	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d105      	bne.n	800598a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	3b01      	subs	r3, #1
 8005988:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005992:	697b      	ldr	r3, [r7, #20]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d018      	beq.n	80059e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	441a      	add	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d303      	bcc.n	80059d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68d9      	ldr	r1, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	461a      	mov	r2, r3
 80059da:	6838      	ldr	r0, [r7, #0]
 80059dc:	f001 fff5 	bl	80079ca <memcpy>
	}
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059f0:	f001 fc00 	bl	80071f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059fc:	e011      	b.n	8005a22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d012      	beq.n	8005a2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3324      	adds	r3, #36	; 0x24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fcd8 	bl	80063c0 <xTaskRemoveFromEventList>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a16:	f000 fdaf 	bl	8006578 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dce9      	bgt.n	80059fe <prvUnlockQueue+0x16>
 8005a2a:	e000      	b.n	8005a2e <prvUnlockQueue+0x46>
					break;
 8005a2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	22ff      	movs	r2, #255	; 0xff
 8005a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a36:	f001 fc0d 	bl	8007254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a3a:	f001 fbdb 	bl	80071f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a46:	e011      	b.n	8005a6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d012      	beq.n	8005a76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3310      	adds	r3, #16
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fcb3 	bl	80063c0 <xTaskRemoveFromEventList>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a60:	f000 fd8a 	bl	8006578 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	dce9      	bgt.n	8005a48 <prvUnlockQueue+0x60>
 8005a74:	e000      	b.n	8005a78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	22ff      	movs	r2, #255	; 0xff
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a80:	f001 fbe8 	bl	8007254 <vPortExitCritical>
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a94:	f001 fbae 	bl	80071f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e001      	b.n	8005aaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005aaa:	f001 fbd3 	bl	8007254 <vPortExitCritical>

	return xReturn;
 8005aae:	68fb      	ldr	r3, [r7, #12]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ac0:	f001 fb98 	bl	80071f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d102      	bne.n	8005ad6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e001      	b.n	8005ada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ada:	f001 fbbb 	bl	8007254 <vPortExitCritical>

	return xReturn;
 8005ade:	68fb      	ldr	r3, [r7, #12]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e014      	b.n	8005b22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005af8:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <vQueueAddToRegistry+0x50>)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b04:	490c      	ldr	r1, [pc, #48]	; (8005b38 <vQueueAddToRegistry+0x50>)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <vQueueAddToRegistry+0x50>)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4413      	add	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b1a:	e006      	b.n	8005b2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b07      	cmp	r3, #7
 8005b26:	d9e7      	bls.n	8005af8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20003500 	.word	0x20003500

08005b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b4c:	f001 fb52 	bl	80071f4 <vPortEnterCritical>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b56:	b25b      	sxtb	r3, r3
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d103      	bne.n	8005b66 <vQueueWaitForMessageRestricted+0x2a>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d103      	bne.n	8005b7c <vQueueWaitForMessageRestricted+0x40>
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b7c:	f001 fb6a 	bl	8007254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	3324      	adds	r3, #36	; 0x24
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fbe9 	bl	8006368 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b96:	6978      	ldr	r0, [r7, #20]
 8005b98:	f7ff ff26 	bl	80059e8 <prvUnlockQueue>
	}
 8005b9c:	bf00      	nop
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af04      	add	r7, sp, #16
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <xTaskCreateStatic+0x2a>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	623b      	str	r3, [r7, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <xTaskCreateStatic+0x46>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	61fb      	str	r3, [r7, #28]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bea:	23bc      	movs	r3, #188	; 0xbc
 8005bec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2bbc      	cmp	r3, #188	; 0xbc
 8005bf2:	d00a      	beq.n	8005c0a <xTaskCreateStatic+0x66>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	61bb      	str	r3, [r7, #24]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01e      	beq.n	8005c50 <xTaskCreateStatic+0xac>
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01b      	beq.n	8005c50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9303      	str	r3, [sp, #12]
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	9302      	str	r3, [sp, #8]
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f80c 	bl	8005c60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c4a:	f000 f8af 	bl	8005dac <prvAddNewTaskToReadyList>
 8005c4e:	e001      	b.n	8005c54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c54:	697b      	ldr	r3, [r7, #20]
	}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3728      	adds	r7, #40	; 0x28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	461a      	mov	r2, r3
 8005c78:	21a5      	movs	r1, #165	; 0xa5
 8005c7a:	f001 feb4 	bl	80079e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f023 0307 	bic.w	r3, r3, #7
 8005c96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	617b      	str	r3, [r7, #20]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01f      	beq.n	8005cfe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	e012      	b.n	8005cea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	7819      	ldrb	r1, [r3, #0]
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3334      	adds	r3, #52	; 0x34
 8005cd4:	460a      	mov	r2, r1
 8005cd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d006      	beq.n	8005cf2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d9e9      	bls.n	8005cc4 <prvInitialiseNewTask+0x64>
 8005cf0:	e000      	b.n	8005cf4 <prvInitialiseNewTask+0x94>
			{
				break;
 8005cf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cfc:	e003      	b.n	8005d06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	2b37      	cmp	r3, #55	; 0x37
 8005d0a:	d901      	bls.n	8005d10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d0c:	2337      	movs	r3, #55	; 0x37
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	2200      	movs	r2, #0
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	3304      	adds	r3, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff f9bc 	bl	80050a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	3318      	adds	r3, #24
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff f9b7 	bl	80050a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	3354      	adds	r3, #84	; 0x54
 8005d60:	2260      	movs	r2, #96	; 0x60
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fe3e 	bl	80079e6 <memset>
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	4a0c      	ldr	r2, [pc, #48]	; (8005da0 <prvInitialiseNewTask+0x140>)
 8005d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <prvInitialiseNewTask+0x144>)
 8005d74:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <prvInitialiseNewTask+0x148>)
 8005d7a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	69b8      	ldr	r0, [r7, #24]
 8005d82:	f001 f90d 	bl	8006fa0 <pxPortInitialiseStack>
 8005d86:	4602      	mov	r2, r0
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d98:	bf00      	nop
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	08027e68 	.word	0x08027e68
 8005da4:	08027e88 	.word	0x08027e88
 8005da8:	08027e48 	.word	0x08027e48

08005dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005db4:	f001 fa1e 	bl	80071f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005db8:	4b2d      	ldr	r3, [pc, #180]	; (8005e70 <prvAddNewTaskToReadyList+0xc4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	4a2c      	ldr	r2, [pc, #176]	; (8005e70 <prvAddNewTaskToReadyList+0xc4>)
 8005dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dc2:	4b2c      	ldr	r3, [pc, #176]	; (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dca:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <prvAddNewTaskToReadyList+0xc4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d110      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dd8:	f000 fbf2 	bl	80065c0 <prvInitialiseTaskLists>
 8005ddc:	e00d      	b.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dde:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <prvAddNewTaskToReadyList+0xcc>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005de6:	4b23      	ldr	r3, [pc, #140]	; (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d802      	bhi.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005df4:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dfa:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <prvAddNewTaskToReadyList+0xd0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <prvAddNewTaskToReadyList+0xd0>)
 8005e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e04:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <prvAddNewTaskToReadyList+0xd0>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e10:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <prvAddNewTaskToReadyList+0xd4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d903      	bls.n	8005e20 <prvAddNewTaskToReadyList+0x74>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <prvAddNewTaskToReadyList+0xd4>)
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <prvAddNewTaskToReadyList+0xd8>)
 8005e2e:	441a      	add	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f7ff f941 	bl	80050be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e3c:	f001 fa0a 	bl	8007254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e40:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <prvAddNewTaskToReadyList+0xcc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00e      	beq.n	8005e66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d207      	bcs.n	8005e66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvAddNewTaskToReadyList+0xdc>)
 8005e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20003a14 	.word	0x20003a14
 8005e74:	20003540 	.word	0x20003540
 8005e78:	20003a20 	.word	0x20003a20
 8005e7c:	20003a30 	.word	0x20003a30
 8005e80:	20003a1c 	.word	0x20003a1c
 8005e84:	20003544 	.word	0x20003544
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	1d39      	adds	r1, r7, #4
 8005e9e:	f107 0308 	add.w	r3, r7, #8
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff f8aa 	bl	8004ffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	9202      	str	r2, [sp, #8]
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	460a      	mov	r2, r1
 8005eba:	4924      	ldr	r1, [pc, #144]	; (8005f4c <vTaskStartScheduler+0xc0>)
 8005ebc:	4824      	ldr	r0, [pc, #144]	; (8005f50 <vTaskStartScheduler+0xc4>)
 8005ebe:	f7ff fe71 	bl	8005ba4 <xTaskCreateStatic>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4a23      	ldr	r2, [pc, #140]	; (8005f54 <vTaskStartScheduler+0xc8>)
 8005ec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ec8:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <vTaskStartScheduler+0xc8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e001      	b.n	8005eda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d102      	bne.n	8005ee6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ee0:	f000 fd10 	bl	8006904 <xTimerCreateTimerTask>
 8005ee4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d11b      	bne.n	8005f24 <vTaskStartScheduler+0x98>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	613b      	str	r3, [r7, #16]
}
 8005efe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f00:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <vTaskStartScheduler+0xcc>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3354      	adds	r3, #84	; 0x54
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <vTaskStartScheduler+0xd0>)
 8005f08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f0a:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <vTaskStartScheduler+0xd4>)
 8005f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <vTaskStartScheduler+0xd8>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f18:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <vTaskStartScheduler+0xdc>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f1e:	f001 f8c7 	bl	80070b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f22:	e00e      	b.n	8005f42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d10a      	bne.n	8005f42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	60fb      	str	r3, [r7, #12]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <vTaskStartScheduler+0xb4>
}
 8005f42:	bf00      	nop
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	0800c1c0 	.word	0x0800c1c0
 8005f50:	08006591 	.word	0x08006591
 8005f54:	20003a38 	.word	0x20003a38
 8005f58:	20003540 	.word	0x20003540
 8005f5c:	20000010 	.word	0x20000010
 8005f60:	20003a34 	.word	0x20003a34
 8005f64:	20003a20 	.word	0x20003a20
 8005f68:	20003a18 	.word	0x20003a18

08005f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <vTaskSuspendAll+0x18>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a03      	ldr	r2, [pc, #12]	; (8005f84 <vTaskSuspendAll+0x18>)
 8005f78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f7a:	bf00      	nop
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	20003a3c 	.word	0x20003a3c

08005f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f96:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <xTaskResumeAll+0x118>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	603b      	str	r3, [r7, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fb4:	f001 f91e 	bl	80071f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fb8:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <xTaskResumeAll+0x118>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	4a38      	ldr	r2, [pc, #224]	; (80060a0 <xTaskResumeAll+0x118>)
 8005fc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc2:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <xTaskResumeAll+0x118>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d162      	bne.n	8006090 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fca:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <xTaskResumeAll+0x11c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d05e      	beq.n	8006090 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd2:	e02f      	b.n	8006034 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd4:	4b34      	ldr	r3, [pc, #208]	; (80060a8 <xTaskResumeAll+0x120>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3318      	adds	r3, #24
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff f8c9 	bl	8005178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff f8c4 	bl	8005178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4b2d      	ldr	r3, [pc, #180]	; (80060ac <xTaskResumeAll+0x124>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d903      	bls.n	8006004 <xTaskResumeAll+0x7c>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <xTaskResumeAll+0x124>)
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a27      	ldr	r2, [pc, #156]	; (80060b0 <xTaskResumeAll+0x128>)
 8006012:	441a      	add	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7ff f84f 	bl	80050be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <xTaskResumeAll+0x12c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800602e:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <xTaskResumeAll+0x130>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006034:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <xTaskResumeAll+0x120>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1cb      	bne.n	8005fd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006042:	f000 fb5f 	bl	8006704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006046:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <xTaskResumeAll+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006052:	f000 f847 	bl	80060e4 <xTaskIncrementTick>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800605c:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <xTaskResumeAll+0x130>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3b01      	subs	r3, #1
 8006066:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f1      	bne.n	8006052 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <xTaskResumeAll+0x134>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006074:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <xTaskResumeAll+0x130>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800607c:	2301      	movs	r3, #1
 800607e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <xTaskResumeAll+0x138>)
 8006082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006090:	f001 f8e0 	bl	8007254 <vPortExitCritical>

	return xAlreadyYielded;
 8006094:	68bb      	ldr	r3, [r7, #8]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20003a3c 	.word	0x20003a3c
 80060a4:	20003a14 	.word	0x20003a14
 80060a8:	200039d4 	.word	0x200039d4
 80060ac:	20003a1c 	.word	0x20003a1c
 80060b0:	20003544 	.word	0x20003544
 80060b4:	20003540 	.word	0x20003540
 80060b8:	20003a28 	.word	0x20003a28
 80060bc:	20003a24 	.word	0x20003a24
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <xTaskGetTickCount+0x1c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060d0:	687b      	ldr	r3, [r7, #4]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20003a18 	.word	0x20003a18

080060e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ee:	4b4f      	ldr	r3, [pc, #316]	; (800622c <xTaskIncrementTick+0x148>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 808f 	bne.w	8006216 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060f8:	4b4d      	ldr	r3, [pc, #308]	; (8006230 <xTaskIncrementTick+0x14c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006100:	4a4b      	ldr	r2, [pc, #300]	; (8006230 <xTaskIncrementTick+0x14c>)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d120      	bne.n	800614e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800610c:	4b49      	ldr	r3, [pc, #292]	; (8006234 <xTaskIncrementTick+0x150>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <xTaskIncrementTick+0x48>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	603b      	str	r3, [r7, #0]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xTaskIncrementTick+0x46>
 800612c:	4b41      	ldr	r3, [pc, #260]	; (8006234 <xTaskIncrementTick+0x150>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	4b41      	ldr	r3, [pc, #260]	; (8006238 <xTaskIncrementTick+0x154>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a3f      	ldr	r2, [pc, #252]	; (8006234 <xTaskIncrementTick+0x150>)
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	4a3f      	ldr	r2, [pc, #252]	; (8006238 <xTaskIncrementTick+0x154>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b3e      	ldr	r3, [pc, #248]	; (800623c <xTaskIncrementTick+0x158>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	4a3d      	ldr	r2, [pc, #244]	; (800623c <xTaskIncrementTick+0x158>)
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	f000 fadb 	bl	8006704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800614e:	4b3c      	ldr	r3, [pc, #240]	; (8006240 <xTaskIncrementTick+0x15c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	429a      	cmp	r2, r3
 8006156:	d349      	bcc.n	80061ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006158:	4b36      	ldr	r3, [pc, #216]	; (8006234 <xTaskIncrementTick+0x150>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006162:	4b37      	ldr	r3, [pc, #220]	; (8006240 <xTaskIncrementTick+0x15c>)
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	601a      	str	r2, [r3, #0]
					break;
 800616a:	e03f      	b.n	80061ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616c:	4b31      	ldr	r3, [pc, #196]	; (8006234 <xTaskIncrementTick+0x150>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d203      	bcs.n	800618c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006184:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <xTaskIncrementTick+0x15c>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800618a:	e02f      	b.n	80061ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3304      	adds	r3, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe fff1 	bl	8005178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	3318      	adds	r3, #24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe ffe8 	bl	8005178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ac:	4b25      	ldr	r3, [pc, #148]	; (8006244 <xTaskIncrementTick+0x160>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d903      	bls.n	80061bc <xTaskIncrementTick+0xd8>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	4a22      	ldr	r2, [pc, #136]	; (8006244 <xTaskIncrementTick+0x160>)
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4a1f      	ldr	r2, [pc, #124]	; (8006248 <xTaskIncrementTick+0x164>)
 80061ca:	441a      	add	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f7fe ff73 	bl	80050be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <xTaskIncrementTick+0x168>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d3b8      	bcc.n	8006158 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ea:	e7b5      	b.n	8006158 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061ec:	4b17      	ldr	r3, [pc, #92]	; (800624c <xTaskIncrementTick+0x168>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	4915      	ldr	r1, [pc, #84]	; (8006248 <xTaskIncrementTick+0x164>)
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d901      	bls.n	8006208 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <xTaskIncrementTick+0x16c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	e004      	b.n	8006220 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <xTaskIncrementTick+0x170>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	4a0d      	ldr	r2, [pc, #52]	; (8006254 <xTaskIncrementTick+0x170>)
 800621e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006220:	697b      	ldr	r3, [r7, #20]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20003a3c 	.word	0x20003a3c
 8006230:	20003a18 	.word	0x20003a18
 8006234:	200039cc 	.word	0x200039cc
 8006238:	200039d0 	.word	0x200039d0
 800623c:	20003a2c 	.word	0x20003a2c
 8006240:	20003a34 	.word	0x20003a34
 8006244:	20003a1c 	.word	0x20003a1c
 8006248:	20003544 	.word	0x20003544
 800624c:	20003540 	.word	0x20003540
 8006250:	20003a28 	.word	0x20003a28
 8006254:	20003a24 	.word	0x20003a24

08006258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800625e:	4b2a      	ldr	r3, [pc, #168]	; (8006308 <vTaskSwitchContext+0xb0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006266:	4b29      	ldr	r3, [pc, #164]	; (800630c <vTaskSwitchContext+0xb4>)
 8006268:	2201      	movs	r2, #1
 800626a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800626c:	e046      	b.n	80062fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800626e:	4b27      	ldr	r3, [pc, #156]	; (800630c <vTaskSwitchContext+0xb4>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006274:	4b26      	ldr	r3, [pc, #152]	; (8006310 <vTaskSwitchContext+0xb8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	e010      	b.n	800629e <vTaskSwitchContext+0x46>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <vTaskSwitchContext+0x40>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	607b      	str	r3, [r7, #4]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vTaskSwitchContext+0x3e>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3b01      	subs	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	491d      	ldr	r1, [pc, #116]	; (8006314 <vTaskSwitchContext+0xbc>)
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0e4      	beq.n	800627c <vTaskSwitchContext+0x24>
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4a15      	ldr	r2, [pc, #84]	; (8006314 <vTaskSwitchContext+0xbc>)
 80062be:	4413      	add	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	605a      	str	r2, [r3, #4]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3308      	adds	r3, #8
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d104      	bne.n	80062e2 <vTaskSwitchContext+0x8a>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a0b      	ldr	r2, [pc, #44]	; (8006318 <vTaskSwitchContext+0xc0>)
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <vTaskSwitchContext+0xb8>)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <vTaskSwitchContext+0xc0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3354      	adds	r3, #84	; 0x54
 80062f8:	4a08      	ldr	r2, [pc, #32]	; (800631c <vTaskSwitchContext+0xc4>)
 80062fa:	6013      	str	r3, [r2, #0]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	20003a3c 	.word	0x20003a3c
 800630c:	20003a28 	.word	0x20003a28
 8006310:	20003a1c 	.word	0x20003a1c
 8006314:	20003544 	.word	0x20003544
 8006318:	20003540 	.word	0x20003540
 800631c:	20000010 	.word	0x20000010

08006320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <vTaskPlaceOnEventList+0x44>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3318      	adds	r3, #24
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fe fed9 	bl	8005106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006354:	2101      	movs	r1, #1
 8006356:	6838      	ldr	r0, [r7, #0]
 8006358:	f000 fa80 	bl	800685c <prvAddCurrentTaskToDelayedList>
}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20003540 	.word	0x20003540

08006368 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	617b      	str	r3, [r7, #20]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vTaskPlaceOnEventListRestricted+0x54>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3318      	adds	r3, #24
 8006396:	4619      	mov	r1, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7fe fe90 	bl	80050be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	68b8      	ldr	r0, [r7, #8]
 80063ae:	f000 fa55 	bl	800685c <prvAddCurrentTaskToDelayedList>
	}
 80063b2:	bf00      	nop
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20003540 	.word	0x20003540

080063c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60fb      	str	r3, [r7, #12]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	3318      	adds	r3, #24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fec1 	bl	8005178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <xTaskRemoveFromEventList+0xb0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11d      	bne.n	800643a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3304      	adds	r3, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe feb8 	bl	8005178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <xTaskRemoveFromEventList+0xb4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d903      	bls.n	800641c <xTaskRemoveFromEventList+0x5c>
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a16      	ldr	r2, [pc, #88]	; (8006474 <xTaskRemoveFromEventList+0xb4>)
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4a13      	ldr	r2, [pc, #76]	; (8006478 <xTaskRemoveFromEventList+0xb8>)
 800642a:	441a      	add	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe fe43 	bl	80050be <vListInsertEnd>
 8006438:	e005      	b.n	8006446 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3318      	adds	r3, #24
 800643e:	4619      	mov	r1, r3
 8006440:	480e      	ldr	r0, [pc, #56]	; (800647c <xTaskRemoveFromEventList+0xbc>)
 8006442:	f7fe fe3c 	bl	80050be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <xTaskRemoveFromEventList+0xc0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	429a      	cmp	r2, r3
 8006452:	d905      	bls.n	8006460 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <xTaskRemoveFromEventList+0xc4>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e001      	b.n	8006464 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006464:	697b      	ldr	r3, [r7, #20]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20003a3c 	.word	0x20003a3c
 8006474:	20003a1c 	.word	0x20003a1c
 8006478:	20003544 	.word	0x20003544
 800647c:	200039d4 	.word	0x200039d4
 8006480:	20003540 	.word	0x20003540
 8006484:	20003a28 	.word	0x20003a28

08006488 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <vTaskInternalSetTimeOutState+0x24>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <vTaskInternalSetTimeOutState+0x28>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	605a      	str	r2, [r3, #4]
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20003a2c 	.word	0x20003a2c
 80064b0:	20003a18 	.word	0x20003a18

080064b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	613b      	str	r3, [r7, #16]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064f6:	f000 fe7d 	bl	80071f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064fa:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <xTaskCheckForTimeOut+0xbc>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d102      	bne.n	800651a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e023      	b.n	8006562 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <xTaskCheckForTimeOut+0xc0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d007      	beq.n	8006536 <xTaskCheckForTimeOut+0x82>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	e015      	b.n	8006562 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	429a      	cmp	r2, r3
 800653e:	d20b      	bcs.n	8006558 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ff9b 	bl	8006488 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e004      	b.n	8006562 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006562:	f000 fe77 	bl	8007254 <vPortExitCritical>

	return xReturn;
 8006566:	69fb      	ldr	r3, [r7, #28]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20003a18 	.word	0x20003a18
 8006574:	20003a2c 	.word	0x20003a2c

08006578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <vTaskMissedYield+0x14>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20003a28 	.word	0x20003a28

08006590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006598:	f000 f852 	bl	8006640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <prvIdleTask+0x28>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d9f9      	bls.n	8006598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <prvIdleTask+0x2c>)
 80065a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065b4:	e7f0      	b.n	8006598 <prvIdleTask+0x8>
 80065b6:	bf00      	nop
 80065b8:	20003544 	.word	0x20003544
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	e00c      	b.n	80065e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a12      	ldr	r2, [pc, #72]	; (8006620 <prvInitialiseTaskLists+0x60>)
 80065d8:	4413      	add	r3, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fd42 	bl	8005064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b37      	cmp	r3, #55	; 0x37
 80065ea:	d9ef      	bls.n	80065cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065ec:	480d      	ldr	r0, [pc, #52]	; (8006624 <prvInitialiseTaskLists+0x64>)
 80065ee:	f7fe fd39 	bl	8005064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065f2:	480d      	ldr	r0, [pc, #52]	; (8006628 <prvInitialiseTaskLists+0x68>)
 80065f4:	f7fe fd36 	bl	8005064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065f8:	480c      	ldr	r0, [pc, #48]	; (800662c <prvInitialiseTaskLists+0x6c>)
 80065fa:	f7fe fd33 	bl	8005064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065fe:	480c      	ldr	r0, [pc, #48]	; (8006630 <prvInitialiseTaskLists+0x70>)
 8006600:	f7fe fd30 	bl	8005064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <prvInitialiseTaskLists+0x74>)
 8006606:	f7fe fd2d 	bl	8005064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <prvInitialiseTaskLists+0x78>)
 800660c:	4a05      	ldr	r2, [pc, #20]	; (8006624 <prvInitialiseTaskLists+0x64>)
 800660e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <prvInitialiseTaskLists+0x7c>)
 8006612:	4a05      	ldr	r2, [pc, #20]	; (8006628 <prvInitialiseTaskLists+0x68>)
 8006614:	601a      	str	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20003544 	.word	0x20003544
 8006624:	200039a4 	.word	0x200039a4
 8006628:	200039b8 	.word	0x200039b8
 800662c:	200039d4 	.word	0x200039d4
 8006630:	200039e8 	.word	0x200039e8
 8006634:	20003a00 	.word	0x20003a00
 8006638:	200039cc 	.word	0x200039cc
 800663c:	200039d0 	.word	0x200039d0

08006640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006646:	e019      	b.n	800667c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006648:	f000 fdd4 	bl	80071f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <prvCheckTasksWaitingTermination+0x50>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fd8d 	bl	8005178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <prvCheckTasksWaitingTermination+0x54>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3b01      	subs	r3, #1
 8006664:	4a0b      	ldr	r2, [pc, #44]	; (8006694 <prvCheckTasksWaitingTermination+0x54>)
 8006666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <prvCheckTasksWaitingTermination+0x58>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <prvCheckTasksWaitingTermination+0x58>)
 8006670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006672:	f000 fdef 	bl	8007254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f810 	bl	800669c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <prvCheckTasksWaitingTermination+0x58>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e1      	bne.n	8006648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	200039e8 	.word	0x200039e8
 8006694:	20003a14 	.word	0x20003a14
 8006698:	200039fc 	.word	0x200039fc

0800669c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3354      	adds	r3, #84	; 0x54
 80066a8:	4618      	mov	r0, r3
 80066aa:	f002 f8c1 	bl	8008830 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d108      	bne.n	80066ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 febb 	bl	8007438 <vPortFree>
				vPortFree( pxTCB );
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 feb8 	bl	8007438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066c8:	e018      	b.n	80066fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d103      	bne.n	80066dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 feaf 	bl	8007438 <vPortFree>
	}
 80066da:	e00f      	b.n	80066fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d00a      	beq.n	80066fc <prvDeleteTCB+0x60>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60fb      	str	r3, [r7, #12]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <prvDeleteTCB+0x5e>
	}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <prvResetNextTaskUnblockTime+0x38>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvResetNextTaskUnblockTime+0x3c>)
 8006716:	f04f 32ff 	mov.w	r2, #4294967295
 800671a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800671c:	e008      	b.n	8006730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvResetNextTaskUnblockTime+0x38>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <prvResetNextTaskUnblockTime+0x3c>)
 800672e:	6013      	str	r3, [r2, #0]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	200039cc 	.word	0x200039cc
 8006740:	20003a34 	.word	0x20003a34

08006744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <xTaskGetSchedulerState+0x34>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006752:	2301      	movs	r3, #1
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	e008      	b.n	800676a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006758:	4b08      	ldr	r3, [pc, #32]	; (800677c <xTaskGetSchedulerState+0x38>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d102      	bne.n	8006766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006760:	2302      	movs	r3, #2
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	e001      	b.n	800676a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800676a:	687b      	ldr	r3, [r7, #4]
	}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20003a20 	.word	0x20003a20
 800677c:	20003a3c 	.word	0x20003a3c

08006780 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d056      	beq.n	8006844 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <xTaskPriorityDisinherit+0xd0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	429a      	cmp	r2, r3
 800679e:	d00a      	beq.n	80067b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	60bb      	str	r3, [r7, #8]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d8:	1e5a      	subs	r2, r3, #1
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d02c      	beq.n	8006844 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d128      	bne.n	8006844 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fcbe 	bl	8005178 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <xTaskPriorityDisinherit+0xd4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d903      	bls.n	8006824 <xTaskPriorityDisinherit+0xa4>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4a0c      	ldr	r2, [pc, #48]	; (8006854 <xTaskPriorityDisinherit+0xd4>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4a09      	ldr	r2, [pc, #36]	; (8006858 <xTaskPriorityDisinherit+0xd8>)
 8006832:	441a      	add	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7fe fc3f 	bl	80050be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006844:	697b      	ldr	r3, [r7, #20]
	}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20003540 	.word	0x20003540
 8006854:	20003a1c 	.word	0x20003a1c
 8006858:	20003544 	.word	0x20003544

0800685c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006866:	4b21      	ldr	r3, [pc, #132]	; (80068ec <prvAddCurrentTaskToDelayedList+0x90>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686c:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3304      	adds	r3, #4
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe fc80 	bl	8005178 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d10a      	bne.n	8006896 <prvAddCurrentTaskToDelayedList+0x3a>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006886:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3304      	adds	r3, #4
 800688c:	4619      	mov	r1, r3
 800688e:	4819      	ldr	r0, [pc, #100]	; (80068f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006890:	f7fe fc15 	bl	80050be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006894:	e026      	b.n	80068e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4413      	add	r3, r2
 800689c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d209      	bcs.n	80068c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ae:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f7fe fc23 	bl	8005106 <vListInsert>
}
 80068c0:	e010      	b.n	80068e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068c2:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7fe fc19 	bl	8005106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068d4:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d202      	bcs.n	80068e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068de:	4a08      	ldr	r2, [pc, #32]	; (8006900 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6013      	str	r3, [r2, #0]
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20003a18 	.word	0x20003a18
 80068f0:	20003540 	.word	0x20003540
 80068f4:	20003a00 	.word	0x20003a00
 80068f8:	200039d0 	.word	0x200039d0
 80068fc:	200039cc 	.word	0x200039cc
 8006900:	20003a34 	.word	0x20003a34

08006904 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800690e:	f000 fb07 	bl	8006f20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <xTimerCreateTimerTask+0x80>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d021      	beq.n	800695e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006922:	1d3a      	adds	r2, r7, #4
 8006924:	f107 0108 	add.w	r1, r7, #8
 8006928:	f107 030c 	add.w	r3, r7, #12
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fb7f 	bl	8005030 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	9202      	str	r2, [sp, #8]
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	2302      	movs	r3, #2
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	2300      	movs	r3, #0
 8006942:	460a      	mov	r2, r1
 8006944:	4910      	ldr	r1, [pc, #64]	; (8006988 <xTimerCreateTimerTask+0x84>)
 8006946:	4811      	ldr	r0, [pc, #68]	; (800698c <xTimerCreateTimerTask+0x88>)
 8006948:	f7ff f92c 	bl	8005ba4 <xTaskCreateStatic>
 800694c:	4603      	mov	r3, r0
 800694e:	4a10      	ldr	r2, [pc, #64]	; (8006990 <xTimerCreateTimerTask+0x8c>)
 8006950:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006952:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <xTimerCreateTimerTask+0x8c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800695a:	2301      	movs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	613b      	str	r3, [r7, #16]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800697a:	697b      	ldr	r3, [r7, #20]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20003a70 	.word	0x20003a70
 8006988:	0800c1c8 	.word	0x0800c1c8
 800698c:	08006ac9 	.word	0x08006ac9
 8006990:	20003a74 	.word	0x20003a74

08006994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069c2:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <xTimerGenericCommand+0x98>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d02a      	beq.n	8006a20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b05      	cmp	r3, #5
 80069da:	dc18      	bgt.n	8006a0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069dc:	f7ff feb2 	bl	8006744 <xTaskGetSchedulerState>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d109      	bne.n	80069fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <xTimerGenericCommand+0x98>)
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	f107 0110 	add.w	r1, r7, #16
 80069ee:	2300      	movs	r3, #0
 80069f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f2:	f7fe fcef 	bl	80053d4 <xQueueGenericSend>
 80069f6:	6278      	str	r0, [r7, #36]	; 0x24
 80069f8:	e012      	b.n	8006a20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <xTimerGenericCommand+0x98>)
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	f107 0110 	add.w	r1, r7, #16
 8006a02:	2300      	movs	r3, #0
 8006a04:	2200      	movs	r2, #0
 8006a06:	f7fe fce5 	bl	80053d4 <xQueueGenericSend>
 8006a0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a0c:	e008      	b.n	8006a20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a0e:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <xTimerGenericCommand+0x98>)
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	f107 0110 	add.w	r1, r7, #16
 8006a16:	2300      	movs	r3, #0
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	f7fe fdd9 	bl	80055d0 <xQueueGenericSendFromISR>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3728      	adds	r7, #40	; 0x28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20003a70 	.word	0x20003a70

08006a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3a:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <prvProcessExpiredTimer+0x94>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fb95 	bl	8005178 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d022      	beq.n	8006aa2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	18d1      	adds	r1, r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f000 f8d1 	bl	8006c10 <prvInsertTimerInActiveList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01f      	beq.n	8006ab4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6978      	ldr	r0, [r7, #20]
 8006a80:	f7ff ff88 	bl	8006994 <xTimerGenericCommand>
 8006a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d113      	bne.n	8006ab4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	60fb      	str	r3, [r7, #12]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	6978      	ldr	r0, [r7, #20]
 8006aba:	4798      	blx	r3
}
 8006abc:	bf00      	nop
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20003a68 	.word	0x20003a68

08006ac8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ad0:	f107 0308 	add.w	r3, r7, #8
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 f857 	bl	8006b88 <prvGetNextExpireTime>
 8006ada:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f803 	bl	8006aec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ae6:	f000 f8d5 	bl	8006c94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006aea:	e7f1      	b.n	8006ad0 <prvTimerTask+0x8>

08006aec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006af6:	f7ff fa39 	bl	8005f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f866 	bl	8006bd0 <prvSampleTimeNow>
 8006b04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d130      	bne.n	8006b6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <prvProcessTimerOrBlockTask+0x3c>
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d806      	bhi.n	8006b28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b1a:	f7ff fa35 	bl	8005f88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ff85 	bl	8006a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b26:	e024      	b.n	8006b72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b2e:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <prvProcessTimerOrBlockTask+0x90>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <prvProcessTimerOrBlockTask+0x50>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <prvProcessTimerOrBlockTask+0x52>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b40:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <prvProcessTimerOrBlockTask+0x94>)
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f7fe fff5 	bl	8005b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b52:	f7ff fa19 	bl	8005f88 <xTaskResumeAll>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b5c:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <prvProcessTimerOrBlockTask+0x98>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
}
 8006b6c:	e001      	b.n	8006b72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b6e:	f7ff fa0b 	bl	8005f88 <xTaskResumeAll>
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20003a6c 	.word	0x20003a6c
 8006b80:	20003a70 	.word	0x20003a70
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b90:	4b0e      	ldr	r3, [pc, #56]	; (8006bcc <prvGetNextExpireTime+0x44>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <prvGetNextExpireTime+0x16>
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	e000      	b.n	8006ba0 <prvGetNextExpireTime+0x18>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <prvGetNextExpireTime+0x44>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e001      	b.n	8006bbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20003a68 	.word	0x20003a68

08006bd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bd8:	f7ff fa74 	bl	80060c4 <xTaskGetTickCount>
 8006bdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <prvSampleTimeNow+0x3c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d205      	bcs.n	8006bf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006be8:	f000 f936 	bl	8006e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e002      	b.n	8006bfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bfa:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <prvSampleTimeNow+0x3c>)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20003a78 	.word	0x20003a78

08006c10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d812      	bhi.n	8006c5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d302      	bcc.n	8006c4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c44:	2301      	movs	r3, #1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e01b      	b.n	8006c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <prvInsertTimerInActiveList+0x7c>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f7fe fa56 	bl	8005106 <vListInsert>
 8006c5a:	e012      	b.n	8006c82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d206      	bcs.n	8006c72 <prvInsertTimerInActiveList+0x62>
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e007      	b.n	8006c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <prvInsertTimerInActiveList+0x80>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f7fe fa42 	bl	8005106 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c82:	697b      	ldr	r3, [r7, #20]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20003a6c 	.word	0x20003a6c
 8006c90:	20003a68 	.word	0x20003a68

08006c94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08e      	sub	sp, #56	; 0x38
 8006c98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c9a:	e0ca      	b.n	8006e32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	da18      	bge.n	8006cd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ca2:	1d3b      	adds	r3, r7, #4
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	61fb      	str	r3, [r7, #28]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cca:	6850      	ldr	r0, [r2, #4]
 8006ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cce:	6892      	ldr	r2, [r2, #8]
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f2c0 80aa 	blt.w	8006e30 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	3304      	adds	r3, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe fa43 	bl	8005178 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff ff6b 	bl	8006bd0 <prvSampleTimeNow>
 8006cfa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b09      	cmp	r3, #9
 8006d00:	f200 8097 	bhi.w	8006e32 <prvProcessReceivedCommands+0x19e>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <prvProcessReceivedCommands+0x78>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d35 	.word	0x08006d35
 8006d18:	08006da9 	.word	0x08006da9
 8006d1c:	08006dbd 	.word	0x08006dbd
 8006d20:	08006e07 	.word	0x08006e07
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d35 	.word	0x08006d35
 8006d2c:	08006da9 	.word	0x08006da9
 8006d30:	08006dbd 	.word	0x08006dbd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	18d1      	adds	r1, r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d54:	f7ff ff5c 	bl	8006c10 <prvInsertTimerInActiveList>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d069      	beq.n	8006e32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d05e      	beq.n	8006e32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	441a      	add	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	2300      	movs	r3, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d86:	f7ff fe05 	bl	8006994 <xTimerGenericCommand>
 8006d8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d14f      	bne.n	8006e32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	61bb      	str	r3, [r7, #24]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006dba:	e03a      	b.n	8006e32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	617b      	str	r3, [r7, #20]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	18d1      	adds	r1, r2, r3
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e00:	f7ff ff06 	bl	8006c10 <prvInsertTimerInActiveList>
					break;
 8006e04:	e015      	b.n	8006e32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e16:	f000 fb0f 	bl	8007438 <vPortFree>
 8006e1a:	e00a      	b.n	8006e32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e2e:	e000      	b.n	8006e32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <prvProcessReceivedCommands+0x1c0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1d39      	adds	r1, r7, #4
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fc64 	bl	8005708 <xQueueReceive>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f47f af2a 	bne.w	8006c9c <prvProcessReceivedCommands+0x8>
	}
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	3730      	adds	r7, #48	; 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20003a70 	.word	0x20003a70

08006e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e5e:	e048      	b.n	8006ef2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e60:	4b2d      	ldr	r3, [pc, #180]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6a:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe f97d 	bl	8005178 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02e      	beq.n	8006ef2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d90e      	bls.n	8006ec4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eb2:	4b19      	ldr	r3, [pc, #100]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f7fe f922 	bl	8005106 <vListInsert>
 8006ec2:	e016      	b.n	8006ef2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff fd60 	bl	8006994 <xTimerGenericCommand>
 8006ed4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	603b      	str	r3, [r7, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1b1      	bne.n	8006e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <prvSwitchTimerLists+0xc4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006f08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f0a:	4a04      	ldr	r2, [pc, #16]	; (8006f1c <prvSwitchTimerLists+0xc4>)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	6013      	str	r3, [r2, #0]
}
 8006f10:	bf00      	nop
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20003a68 	.word	0x20003a68
 8006f1c:	20003a6c 	.word	0x20003a6c

08006f20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f26:	f000 f965 	bl	80071f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <prvCheckForValidListAndQueue+0x60>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d120      	bne.n	8006f74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f32:	4814      	ldr	r0, [pc, #80]	; (8006f84 <prvCheckForValidListAndQueue+0x64>)
 8006f34:	f7fe f896 	bl	8005064 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f38:	4813      	ldr	r0, [pc, #76]	; (8006f88 <prvCheckForValidListAndQueue+0x68>)
 8006f3a:	f7fe f893 	bl	8005064 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <prvCheckForValidListAndQueue+0x6c>)
 8006f40:	4a10      	ldr	r2, [pc, #64]	; (8006f84 <prvCheckForValidListAndQueue+0x64>)
 8006f42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f44:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <prvCheckForValidListAndQueue+0x70>)
 8006f46:	4a10      	ldr	r2, [pc, #64]	; (8006f88 <prvCheckForValidListAndQueue+0x68>)
 8006f48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <prvCheckForValidListAndQueue+0x74>)
 8006f50:	4a11      	ldr	r2, [pc, #68]	; (8006f98 <prvCheckForValidListAndQueue+0x78>)
 8006f52:	2110      	movs	r1, #16
 8006f54:	200a      	movs	r0, #10
 8006f56:	f7fe f9a1 	bl	800529c <xQueueGenericCreateStatic>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4a08      	ldr	r2, [pc, #32]	; (8006f80 <prvCheckForValidListAndQueue+0x60>)
 8006f5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <prvCheckForValidListAndQueue+0x60>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <prvCheckForValidListAndQueue+0x60>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	490b      	ldr	r1, [pc, #44]	; (8006f9c <prvCheckForValidListAndQueue+0x7c>)
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe fdba 	bl	8005ae8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f74:	f000 f96e 	bl	8007254 <vPortExitCritical>
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20003a70 	.word	0x20003a70
 8006f84:	20003a40 	.word	0x20003a40
 8006f88:	20003a54 	.word	0x20003a54
 8006f8c:	20003a68 	.word	0x20003a68
 8006f90:	20003a6c 	.word	0x20003a6c
 8006f94:	20003b1c 	.word	0x20003b1c
 8006f98:	20003a7c 	.word	0x20003a7c
 8006f9c:	0800c1d0 	.word	0x0800c1d0

08006fa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3b04      	subs	r3, #4
 8006fb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f023 0201 	bic.w	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b04      	subs	r3, #4
 8006fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fd0:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <pxPortInitialiseStack+0x64>)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b14      	subs	r3, #20
 8006fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b04      	subs	r3, #4
 8006fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f06f 0202 	mvn.w	r2, #2
 8006fee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3b20      	subs	r3, #32
 8006ff4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	08007009 	.word	0x08007009

08007008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <prvTaskExitError+0x54>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d00a      	beq.n	8007032 <prvTaskExitError+0x2a>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	60fb      	str	r3, [r7, #12]
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <prvTaskExitError+0x28>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	60bb      	str	r3, [r7, #8]
}
 8007044:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007046:	bf00      	nop
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0fc      	beq.n	8007048 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	2000000c 	.word	0x2000000c

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	4770      	bx	lr
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst2>:
 8007080:	20003540 	.word	0x20003540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <prvPortStartFirstTask+0x24>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8814 	msr	CONTROL, r0
 800709a:	b662      	cpsie	i
 800709c:	b661      	cpsie	f
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	df00      	svc	0
 80070a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070aa:	bf00      	nop
 80070ac:	e000ed08 	.word	0xe000ed08

080070b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070b6:	4b46      	ldr	r3, [pc, #280]	; (80071d0 <xPortStartScheduler+0x120>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a46      	ldr	r2, [pc, #280]	; (80071d4 <xPortStartScheduler+0x124>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d10a      	bne.n	80070d6 <xPortStartScheduler+0x26>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070d6:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <xPortStartScheduler+0x120>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <xPortStartScheduler+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10a      	bne.n	80070f6 <xPortStartScheduler+0x46>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60fb      	str	r3, [r7, #12]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <xPortStartScheduler+0x12c>)
 80070f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <xPortStartScheduler+0x130>)
 800711c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800711e:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <xPortStartScheduler+0x134>)
 8007120:	2207      	movs	r2, #7
 8007122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007124:	e009      	b.n	800713a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007126:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <xPortStartScheduler+0x134>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3b01      	subs	r3, #1
 800712c:	4a2d      	ldr	r2, [pc, #180]	; (80071e4 <xPortStartScheduler+0x134>)
 800712e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d0ef      	beq.n	8007126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007146:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <xPortStartScheduler+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1c3 0307 	rsb	r3, r3, #7
 800714e:	2b04      	cmp	r3, #4
 8007150:	d00a      	beq.n	8007168 <xPortStartScheduler+0xb8>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60bb      	str	r3, [r7, #8]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <xPortStartScheduler+0x134>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <xPortStartScheduler+0x134>)
 8007170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007172:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <xPortStartScheduler+0x134>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800717a:	4a1a      	ldr	r2, [pc, #104]	; (80071e4 <xPortStartScheduler+0x134>)
 800717c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007186:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <xPortStartScheduler+0x138>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <xPortStartScheduler+0x138>)
 800718c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <xPortStartScheduler+0x138>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <xPortStartScheduler+0x138>)
 8007198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800719c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800719e:	f000 f8dd 	bl	800735c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <xPortStartScheduler+0x13c>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071a8:	f000 f8fc 	bl	80073a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <xPortStartScheduler+0x140>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <xPortStartScheduler+0x140>)
 80071b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071b8:	f7ff ff66 	bl	8007088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071bc:	f7ff f84c 	bl	8006258 <vTaskSwitchContext>
	prvTaskExitError();
 80071c0:	f7ff ff22 	bl	8007008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000ed00 	.word	0xe000ed00
 80071d4:	410fc271 	.word	0x410fc271
 80071d8:	410fc270 	.word	0x410fc270
 80071dc:	e000e400 	.word	0xe000e400
 80071e0:	20003b6c 	.word	0x20003b6c
 80071e4:	20003b70 	.word	0x20003b70
 80071e8:	e000ed20 	.word	0xe000ed20
 80071ec:	2000000c 	.word	0x2000000c
 80071f0:	e000ef34 	.word	0xe000ef34

080071f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	607b      	str	r3, [r7, #4]
}
 800720c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <vPortEnterCritical+0x58>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	4a0d      	ldr	r2, [pc, #52]	; (800724c <vPortEnterCritical+0x58>)
 8007216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <vPortEnterCritical+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d10f      	bne.n	8007240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <vPortEnterCritical+0x5c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <vPortEnterCritical+0x4c>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	603b      	str	r3, [r7, #0]
}
 800723c:	bf00      	nop
 800723e:	e7fe      	b.n	800723e <vPortEnterCritical+0x4a>
	}
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2000000c 	.word	0x2000000c
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <vPortExitCritical+0x50>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <vPortExitCritical+0x24>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	607b      	str	r3, [r7, #4]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <vPortExitCritical+0x50>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <vPortExitCritical+0x50>)
 8007280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <vPortExitCritical+0x50>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <vPortExitCritical+0x42>
 800728a:	2300      	movs	r3, #0
 800728c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f383 8811 	msr	BASEPRI, r3
}
 8007294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	2000000c 	.word	0x2000000c
	...

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	f01e 0f10 	tst.w	lr, #16
 80072c0:	bf08      	it	eq
 80072c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7fe ffba 	bl	8006258 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f6:	f01e 0f10 	tst.w	lr, #16
 80072fa:	bf08      	it	eq
 80072fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007300:	f380 8809 	msr	PSP, r0
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst>:
 8007310:	20003540 	.word	0x20003540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007332:	f7fe fed7 	bl	80060e4 <xTaskIncrementTick>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <xPortSysTickHandler+0x40>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f383 8811 	msr	BASEPRI, r3
}
 800734e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <vPortSetupTimerInterrupt+0x38>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <vPortSetupTimerInterrupt+0x3c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <vPortSetupTimerInterrupt+0x40>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <vPortSetupTimerInterrupt+0x44>)
 800737a:	3b01      	subs	r3, #1
 800737c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007380:	2207      	movs	r2, #7
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	e000e010 	.word	0xe000e010
 8007394:	e000e018 	.word	0xe000e018
 8007398:	20000000 	.word	0x20000000
 800739c:	10624dd3 	.word	0x10624dd3
 80073a0:	e000e014 	.word	0xe000e014

080073a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073b4 <vPortEnableVFP+0x10>
 80073a8:	6801      	ldr	r1, [r0, #0]
 80073aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ae:	6001      	str	r1, [r0, #0]
 80073b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073b2:	bf00      	nop
 80073b4:	e000ed88 	.word	0xe000ed88

080073b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073be:	f3ef 8305 	mrs	r3, IPSR
 80073c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b0f      	cmp	r3, #15
 80073c8:	d914      	bls.n	80073f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073ca:	4a17      	ldr	r2, [pc, #92]	; (8007428 <vPortValidateInterruptPriority+0x70>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073d4:	4b15      	ldr	r3, [pc, #84]	; (800742c <vPortValidateInterruptPriority+0x74>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	7afa      	ldrb	r2, [r7, #11]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d20a      	bcs.n	80073f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	607b      	str	r3, [r7, #4]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073f4:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <vPortValidateInterruptPriority+0x78>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073fc:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <vPortValidateInterruptPriority+0x7c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d90a      	bls.n	800741a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	603b      	str	r3, [r7, #0]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <vPortValidateInterruptPriority+0x60>
	}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	e000e3f0 	.word	0xe000e3f0
 800742c:	20003b6c 	.word	0x20003b6c
 8007430:	e000ed0c 	.word	0xe000ed0c
 8007434:	20003b70 	.word	0x20003b70

08007438 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d04d      	beq.n	80074e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800744a:	2308      	movs	r3, #8
 800744c:	425b      	negs	r3, r3
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4413      	add	r3, r2
 8007452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <vPortFree+0xb8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4013      	ands	r3, r2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <vPortFree+0x44>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60fb      	str	r3, [r7, #12]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <vPortFree+0x62>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60bb      	str	r3, [r7, #8]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <vPortFree+0xb8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4013      	ands	r3, r2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d01e      	beq.n	80074e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11a      	bne.n	80074e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <vPortFree+0xb8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	401a      	ands	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074c0:	f7fe fd54 	bl	8005f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <vPortFree+0xbc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4413      	add	r3, r2
 80074ce:	4a09      	ldr	r2, [pc, #36]	; (80074f4 <vPortFree+0xbc>)
 80074d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074d2:	6938      	ldr	r0, [r7, #16]
 80074d4:	f000 f812 	bl	80074fc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074d8:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <vPortFree+0xc0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	4a06      	ldr	r2, [pc, #24]	; (80074f8 <vPortFree+0xc0>)
 80074e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074e2:	f7fe fd51 	bl	8005f88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074e6:	bf00      	nop
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20003b88 	.word	0x20003b88
 80074f4:	20003b80 	.word	0x20003b80
 80074f8:	20003b84 	.word	0x20003b84

080074fc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007504:	4b28      	ldr	r3, [pc, #160]	; (80075a8 <prvInsertBlockIntoFreeList+0xac>)
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e002      	b.n	8007510 <prvInsertBlockIntoFreeList+0x14>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d8f7      	bhi.n	800750a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	4413      	add	r3, r2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d108      	bne.n	800753e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	441a      	add	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	441a      	add	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d118      	bne.n	8007584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <prvInsertBlockIntoFreeList+0xb0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d00d      	beq.n	800757a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	441a      	add	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	e008      	b.n	800758c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800757a:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <prvInsertBlockIntoFreeList+0xb0>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e003      	b.n	800758c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d002      	beq.n	800759a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800759a:	bf00      	nop
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20003b74 	.word	0x20003b74
 80075ac:	20003b7c 	.word	0x20003b7c

080075b0 <arm_rfft_fast_init_f32>:
 80075b0:	084b      	lsrs	r3, r1, #1
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	b410      	push	{r4}
 80075b6:	8201      	strh	r1, [r0, #16]
 80075b8:	8003      	strh	r3, [r0, #0]
 80075ba:	d047      	beq.n	800764c <arm_rfft_fast_init_f32+0x9c>
 80075bc:	d917      	bls.n	80075ee <arm_rfft_fast_init_f32+0x3e>
 80075be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c2:	d03d      	beq.n	8007640 <arm_rfft_fast_init_f32+0x90>
 80075c4:	d929      	bls.n	800761a <arm_rfft_fast_init_f32+0x6a>
 80075c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ca:	d020      	beq.n	800760e <arm_rfft_fast_init_f32+0x5e>
 80075cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d0:	d113      	bne.n	80075fa <arm_rfft_fast_init_f32+0x4a>
 80075d2:	4921      	ldr	r1, [pc, #132]	; (8007658 <arm_rfft_fast_init_f32+0xa8>)
 80075d4:	4a21      	ldr	r2, [pc, #132]	; (800765c <arm_rfft_fast_init_f32+0xac>)
 80075d6:	4b22      	ldr	r3, [pc, #136]	; (8007660 <arm_rfft_fast_init_f32+0xb0>)
 80075d8:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80075dc:	8184      	strh	r4, [r0, #12]
 80075de:	6081      	str	r1, [r0, #8]
 80075e0:	6042      	str	r2, [r0, #4]
 80075e2:	6143      	str	r3, [r0, #20]
 80075e4:	2000      	movs	r0, #0
 80075e6:	b240      	sxtb	r0, r0
 80075e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d01c      	beq.n	800762c <arm_rfft_fast_init_f32+0x7c>
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d006      	beq.n	8007604 <arm_rfft_fast_init_f32+0x54>
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d01d      	beq.n	8007636 <arm_rfft_fast_init_f32+0x86>
 80075fa:	20ff      	movs	r0, #255	; 0xff
 80075fc:	b240      	sxtb	r0, r0
 80075fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	2438      	movs	r4, #56	; 0x38
 8007606:	4917      	ldr	r1, [pc, #92]	; (8007664 <arm_rfft_fast_init_f32+0xb4>)
 8007608:	4a17      	ldr	r2, [pc, #92]	; (8007668 <arm_rfft_fast_init_f32+0xb8>)
 800760a:	4b18      	ldr	r3, [pc, #96]	; (800766c <arm_rfft_fast_init_f32+0xbc>)
 800760c:	e7e6      	b.n	80075dc <arm_rfft_fast_init_f32+0x2c>
 800760e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8007612:	4917      	ldr	r1, [pc, #92]	; (8007670 <arm_rfft_fast_init_f32+0xc0>)
 8007614:	4a17      	ldr	r2, [pc, #92]	; (8007674 <arm_rfft_fast_init_f32+0xc4>)
 8007616:	4b18      	ldr	r3, [pc, #96]	; (8007678 <arm_rfft_fast_init_f32+0xc8>)
 8007618:	e7e0      	b.n	80075dc <arm_rfft_fast_init_f32+0x2c>
 800761a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761e:	d1ec      	bne.n	80075fa <arm_rfft_fast_init_f32+0x4a>
 8007620:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8007624:	4915      	ldr	r1, [pc, #84]	; (800767c <arm_rfft_fast_init_f32+0xcc>)
 8007626:	4a16      	ldr	r2, [pc, #88]	; (8007680 <arm_rfft_fast_init_f32+0xd0>)
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <arm_rfft_fast_init_f32+0xd4>)
 800762a:	e7d7      	b.n	80075dc <arm_rfft_fast_init_f32+0x2c>
 800762c:	2430      	movs	r4, #48	; 0x30
 800762e:	4916      	ldr	r1, [pc, #88]	; (8007688 <arm_rfft_fast_init_f32+0xd8>)
 8007630:	4a16      	ldr	r2, [pc, #88]	; (800768c <arm_rfft_fast_init_f32+0xdc>)
 8007632:	4b17      	ldr	r3, [pc, #92]	; (8007690 <arm_rfft_fast_init_f32+0xe0>)
 8007634:	e7d2      	b.n	80075dc <arm_rfft_fast_init_f32+0x2c>
 8007636:	2414      	movs	r4, #20
 8007638:	4916      	ldr	r1, [pc, #88]	; (8007694 <arm_rfft_fast_init_f32+0xe4>)
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <arm_rfft_fast_init_f32+0xe8>)
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <arm_rfft_fast_init_f32+0xec>)
 800763e:	e7cd      	b.n	80075dc <arm_rfft_fast_init_f32+0x2c>
 8007640:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8007644:	4916      	ldr	r1, [pc, #88]	; (80076a0 <arm_rfft_fast_init_f32+0xf0>)
 8007646:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <arm_rfft_fast_init_f32+0xf4>)
 8007648:	4b17      	ldr	r3, [pc, #92]	; (80076a8 <arm_rfft_fast_init_f32+0xf8>)
 800764a:	e7c7      	b.n	80075dc <arm_rfft_fast_init_f32+0x2c>
 800764c:	24d0      	movs	r4, #208	; 0xd0
 800764e:	4917      	ldr	r1, [pc, #92]	; (80076ac <arm_rfft_fast_init_f32+0xfc>)
 8007650:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <arm_rfft_fast_init_f32+0x100>)
 8007652:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <arm_rfft_fast_init_f32+0x104>)
 8007654:	e7c2      	b.n	80075dc <arm_rfft_fast_init_f32+0x2c>
 8007656:	bf00      	nop
 8007658:	0801b7f8 	.word	0x0801b7f8
 800765c:	0800c1f0 	.word	0x0800c1f0
 8007660:	08012360 	.word	0x08012360
 8007664:	080102f0 	.word	0x080102f0
 8007668:	0801d5b8 	.word	0x0801d5b8
 800766c:	0801faa8 	.word	0x0801faa8
 8007670:	08018ce0 	.word	0x08018ce0
 8007674:	08016be0 	.word	0x08016be0
 8007678:	08010360 	.word	0x08010360
 800767c:	0801f738 	.word	0x0801f738
 8007680:	08016360 	.word	0x08016360
 8007684:	0801d7b8 	.word	0x0801d7b8
 8007688:	08019b98 	.word	0x08019b98
 800768c:	08018be0 	.word	0x08018be0
 8007690:	080101f0 	.word	0x080101f0
 8007694:	08019af0 	.word	0x08019af0
 8007698:	08016b60 	.word	0x08016b60
 800769c:	08019b18 	.word	0x08019b18
 80076a0:	0801dfb8 	.word	0x0801dfb8
 80076a4:	0801a7f8 	.word	0x0801a7f8
 80076a8:	0801e338 	.word	0x0801e338
 80076ac:	0801fca8 	.word	0x0801fca8
 80076b0:	0801a3f8 	.word	0x0801a3f8
 80076b4:	0801f338 	.word	0x0801f338

080076b8 <arm_cfft_radix4_init_f32>:
 80076b8:	b410      	push	{r4}
 80076ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80076be:	4c2b      	ldr	r4, [pc, #172]	; (800776c <arm_cfft_radix4_init_f32+0xb4>)
 80076c0:	7082      	strb	r2, [r0, #2]
 80076c2:	70c3      	strb	r3, [r0, #3]
 80076c4:	8001      	strh	r1, [r0, #0]
 80076c6:	6044      	str	r4, [r0, #4]
 80076c8:	d043      	beq.n	8007752 <arm_cfft_radix4_init_f32+0x9a>
 80076ca:	d80f      	bhi.n	80076ec <arm_cfft_radix4_init_f32+0x34>
 80076cc:	2910      	cmp	r1, #16
 80076ce:	d032      	beq.n	8007736 <arm_cfft_radix4_init_f32+0x7e>
 80076d0:	2940      	cmp	r1, #64	; 0x40
 80076d2:	d11e      	bne.n	8007712 <arm_cfft_radix4_init_f32+0x5a>
 80076d4:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 80076d8:	4b25      	ldr	r3, [pc, #148]	; (8007770 <arm_cfft_radix4_init_f32+0xb8>)
 80076da:	8181      	strh	r1, [r0, #12]
 80076dc:	81c1      	strh	r1, [r0, #14]
 80076de:	6102      	str	r2, [r0, #16]
 80076e0:	6083      	str	r3, [r0, #8]
 80076e2:	2000      	movs	r0, #0
 80076e4:	b240      	sxtb	r0, r0
 80076e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076f0:	d014      	beq.n	800771c <arm_cfft_radix4_init_f32+0x64>
 80076f2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80076f6:	d10c      	bne.n	8007712 <arm_cfft_radix4_init_f32+0x5a>
 80076f8:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80076fc:	6103      	str	r3, [r0, #16]
 80076fe:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <arm_cfft_radix4_init_f32+0xbc>)
 8007700:	6082      	str	r2, [r0, #8]
 8007702:	2301      	movs	r3, #1
 8007704:	8183      	strh	r3, [r0, #12]
 8007706:	81c3      	strh	r3, [r0, #14]
 8007708:	2000      	movs	r0, #0
 800770a:	b240      	sxtb	r0, r0
 800770c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	20ff      	movs	r0, #255	; 0xff
 8007714:	b240      	sxtb	r0, r0
 8007716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8007720:	6103      	str	r3, [r0, #16]
 8007722:	4a15      	ldr	r2, [pc, #84]	; (8007778 <arm_cfft_radix4_init_f32+0xc0>)
 8007724:	6082      	str	r2, [r0, #8]
 8007726:	2304      	movs	r3, #4
 8007728:	8183      	strh	r3, [r0, #12]
 800772a:	81c3      	strh	r3, [r0, #14]
 800772c:	2000      	movs	r0, #0
 800772e:	b240      	sxtb	r0, r0
 8007730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 800773a:	6103      	str	r3, [r0, #16]
 800773c:	4a0f      	ldr	r2, [pc, #60]	; (800777c <arm_cfft_radix4_init_f32+0xc4>)
 800773e:	6082      	str	r2, [r0, #8]
 8007740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007744:	8183      	strh	r3, [r0, #12]
 8007746:	81c3      	strh	r3, [r0, #14]
 8007748:	2000      	movs	r0, #0
 800774a:	b240      	sxtb	r0, r0
 800774c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8007756:	6103      	str	r3, [r0, #16]
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <arm_cfft_radix4_init_f32+0xc8>)
 800775a:	6082      	str	r2, [r0, #8]
 800775c:	2310      	movs	r3, #16
 800775e:	8183      	strh	r3, [r0, #12]
 8007760:	81c3      	strh	r3, [r0, #14]
 8007762:	2000      	movs	r0, #0
 8007764:	b240      	sxtb	r0, r0
 8007766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	0801fe48 	.word	0x0801fe48
 8007770:	08019c76 	.word	0x08019c76
 8007774:	08019bf8 	.word	0x08019bf8
 8007778:	08019bfe 	.word	0x08019bfe
 800777c:	08019df6 	.word	0x08019df6
 8007780:	08019c16 	.word	0x08019c16

08007784 <__errno>:
 8007784:	4b01      	ldr	r3, [pc, #4]	; (800778c <__errno+0x8>)
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20000010 	.word	0x20000010

08007790 <std>:
 8007790:	2300      	movs	r3, #0
 8007792:	b510      	push	{r4, lr}
 8007794:	4604      	mov	r4, r0
 8007796:	e9c0 3300 	strd	r3, r3, [r0]
 800779a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800779e:	6083      	str	r3, [r0, #8]
 80077a0:	8181      	strh	r1, [r0, #12]
 80077a2:	6643      	str	r3, [r0, #100]	; 0x64
 80077a4:	81c2      	strh	r2, [r0, #14]
 80077a6:	6183      	str	r3, [r0, #24]
 80077a8:	4619      	mov	r1, r3
 80077aa:	2208      	movs	r2, #8
 80077ac:	305c      	adds	r0, #92	; 0x5c
 80077ae:	f000 f91a 	bl	80079e6 <memset>
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <std+0x38>)
 80077b4:	6263      	str	r3, [r4, #36]	; 0x24
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <std+0x3c>)
 80077b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ba:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <std+0x40>)
 80077bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <std+0x44>)
 80077c0:	6224      	str	r4, [r4, #32]
 80077c2:	6323      	str	r3, [r4, #48]	; 0x30
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	bf00      	nop
 80077c8:	08008955 	.word	0x08008955
 80077cc:	08008977 	.word	0x08008977
 80077d0:	080089af 	.word	0x080089af
 80077d4:	080089d3 	.word	0x080089d3

080077d8 <_cleanup_r>:
 80077d8:	4901      	ldr	r1, [pc, #4]	; (80077e0 <_cleanup_r+0x8>)
 80077da:	f000 b8af 	b.w	800793c <_fwalk_reent>
 80077de:	bf00      	nop
 80077e0:	0800a581 	.word	0x0800a581

080077e4 <__sfmoreglue>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	2268      	movs	r2, #104	; 0x68
 80077e8:	1e4d      	subs	r5, r1, #1
 80077ea:	4355      	muls	r5, r2
 80077ec:	460e      	mov	r6, r1
 80077ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077f2:	f000 f921 	bl	8007a38 <_malloc_r>
 80077f6:	4604      	mov	r4, r0
 80077f8:	b140      	cbz	r0, 800780c <__sfmoreglue+0x28>
 80077fa:	2100      	movs	r1, #0
 80077fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007800:	300c      	adds	r0, #12
 8007802:	60a0      	str	r0, [r4, #8]
 8007804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007808:	f000 f8ed 	bl	80079e6 <memset>
 800780c:	4620      	mov	r0, r4
 800780e:	bd70      	pop	{r4, r5, r6, pc}

08007810 <__sfp_lock_acquire>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__sfp_lock_acquire+0x8>)
 8007812:	f000 b8d8 	b.w	80079c6 <__retarget_lock_acquire_recursive>
 8007816:	bf00      	nop
 8007818:	20003b8d 	.word	0x20003b8d

0800781c <__sfp_lock_release>:
 800781c:	4801      	ldr	r0, [pc, #4]	; (8007824 <__sfp_lock_release+0x8>)
 800781e:	f000 b8d3 	b.w	80079c8 <__retarget_lock_release_recursive>
 8007822:	bf00      	nop
 8007824:	20003b8d 	.word	0x20003b8d

08007828 <__sinit_lock_acquire>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__sinit_lock_acquire+0x8>)
 800782a:	f000 b8cc 	b.w	80079c6 <__retarget_lock_acquire_recursive>
 800782e:	bf00      	nop
 8007830:	20003b8e 	.word	0x20003b8e

08007834 <__sinit_lock_release>:
 8007834:	4801      	ldr	r0, [pc, #4]	; (800783c <__sinit_lock_release+0x8>)
 8007836:	f000 b8c7 	b.w	80079c8 <__retarget_lock_release_recursive>
 800783a:	bf00      	nop
 800783c:	20003b8e 	.word	0x20003b8e

08007840 <__sinit>:
 8007840:	b510      	push	{r4, lr}
 8007842:	4604      	mov	r4, r0
 8007844:	f7ff fff0 	bl	8007828 <__sinit_lock_acquire>
 8007848:	69a3      	ldr	r3, [r4, #24]
 800784a:	b11b      	cbz	r3, 8007854 <__sinit+0x14>
 800784c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007850:	f7ff bff0 	b.w	8007834 <__sinit_lock_release>
 8007854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007858:	6523      	str	r3, [r4, #80]	; 0x50
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <__sinit+0x68>)
 800785c:	4a13      	ldr	r2, [pc, #76]	; (80078ac <__sinit+0x6c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	62a2      	str	r2, [r4, #40]	; 0x28
 8007862:	42a3      	cmp	r3, r4
 8007864:	bf04      	itt	eq
 8007866:	2301      	moveq	r3, #1
 8007868:	61a3      	streq	r3, [r4, #24]
 800786a:	4620      	mov	r0, r4
 800786c:	f000 f820 	bl	80078b0 <__sfp>
 8007870:	6060      	str	r0, [r4, #4]
 8007872:	4620      	mov	r0, r4
 8007874:	f000 f81c 	bl	80078b0 <__sfp>
 8007878:	60a0      	str	r0, [r4, #8]
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f818 	bl	80078b0 <__sfp>
 8007880:	2200      	movs	r2, #0
 8007882:	60e0      	str	r0, [r4, #12]
 8007884:	2104      	movs	r1, #4
 8007886:	6860      	ldr	r0, [r4, #4]
 8007888:	f7ff ff82 	bl	8007790 <std>
 800788c:	68a0      	ldr	r0, [r4, #8]
 800788e:	2201      	movs	r2, #1
 8007890:	2109      	movs	r1, #9
 8007892:	f7ff ff7d 	bl	8007790 <std>
 8007896:	68e0      	ldr	r0, [r4, #12]
 8007898:	2202      	movs	r2, #2
 800789a:	2112      	movs	r1, #18
 800789c:	f7ff ff78 	bl	8007790 <std>
 80078a0:	2301      	movs	r3, #1
 80078a2:	61a3      	str	r3, [r4, #24]
 80078a4:	e7d2      	b.n	800784c <__sinit+0xc>
 80078a6:	bf00      	nop
 80078a8:	08027ea8 	.word	0x08027ea8
 80078ac:	080077d9 	.word	0x080077d9

080078b0 <__sfp>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	4607      	mov	r7, r0
 80078b4:	f7ff ffac 	bl	8007810 <__sfp_lock_acquire>
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <__sfp+0x84>)
 80078ba:	681e      	ldr	r6, [r3, #0]
 80078bc:	69b3      	ldr	r3, [r6, #24]
 80078be:	b913      	cbnz	r3, 80078c6 <__sfp+0x16>
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff ffbd 	bl	8007840 <__sinit>
 80078c6:	3648      	adds	r6, #72	; 0x48
 80078c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	d503      	bpl.n	80078d8 <__sfp+0x28>
 80078d0:	6833      	ldr	r3, [r6, #0]
 80078d2:	b30b      	cbz	r3, 8007918 <__sfp+0x68>
 80078d4:	6836      	ldr	r6, [r6, #0]
 80078d6:	e7f7      	b.n	80078c8 <__sfp+0x18>
 80078d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078dc:	b9d5      	cbnz	r5, 8007914 <__sfp+0x64>
 80078de:	4b16      	ldr	r3, [pc, #88]	; (8007938 <__sfp+0x88>)
 80078e0:	60e3      	str	r3, [r4, #12]
 80078e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078e6:	6665      	str	r5, [r4, #100]	; 0x64
 80078e8:	f000 f86c 	bl	80079c4 <__retarget_lock_init_recursive>
 80078ec:	f7ff ff96 	bl	800781c <__sfp_lock_release>
 80078f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078f8:	6025      	str	r5, [r4, #0]
 80078fa:	61a5      	str	r5, [r4, #24]
 80078fc:	2208      	movs	r2, #8
 80078fe:	4629      	mov	r1, r5
 8007900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007904:	f000 f86f 	bl	80079e6 <memset>
 8007908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800790c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007910:	4620      	mov	r0, r4
 8007912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007914:	3468      	adds	r4, #104	; 0x68
 8007916:	e7d9      	b.n	80078cc <__sfp+0x1c>
 8007918:	2104      	movs	r1, #4
 800791a:	4638      	mov	r0, r7
 800791c:	f7ff ff62 	bl	80077e4 <__sfmoreglue>
 8007920:	4604      	mov	r4, r0
 8007922:	6030      	str	r0, [r6, #0]
 8007924:	2800      	cmp	r0, #0
 8007926:	d1d5      	bne.n	80078d4 <__sfp+0x24>
 8007928:	f7ff ff78 	bl	800781c <__sfp_lock_release>
 800792c:	230c      	movs	r3, #12
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	e7ee      	b.n	8007910 <__sfp+0x60>
 8007932:	bf00      	nop
 8007934:	08027ea8 	.word	0x08027ea8
 8007938:	ffff0001 	.word	0xffff0001

0800793c <_fwalk_reent>:
 800793c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007940:	4606      	mov	r6, r0
 8007942:	4688      	mov	r8, r1
 8007944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007948:	2700      	movs	r7, #0
 800794a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800794e:	f1b9 0901 	subs.w	r9, r9, #1
 8007952:	d505      	bpl.n	8007960 <_fwalk_reent+0x24>
 8007954:	6824      	ldr	r4, [r4, #0]
 8007956:	2c00      	cmp	r4, #0
 8007958:	d1f7      	bne.n	800794a <_fwalk_reent+0xe>
 800795a:	4638      	mov	r0, r7
 800795c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007960:	89ab      	ldrh	r3, [r5, #12]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d907      	bls.n	8007976 <_fwalk_reent+0x3a>
 8007966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800796a:	3301      	adds	r3, #1
 800796c:	d003      	beq.n	8007976 <_fwalk_reent+0x3a>
 800796e:	4629      	mov	r1, r5
 8007970:	4630      	mov	r0, r6
 8007972:	47c0      	blx	r8
 8007974:	4307      	orrs	r7, r0
 8007976:	3568      	adds	r5, #104	; 0x68
 8007978:	e7e9      	b.n	800794e <_fwalk_reent+0x12>
	...

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4d0d      	ldr	r5, [pc, #52]	; (80079b4 <__libc_init_array+0x38>)
 8007980:	4c0d      	ldr	r4, [pc, #52]	; (80079b8 <__libc_init_array+0x3c>)
 8007982:	1b64      	subs	r4, r4, r5
 8007984:	10a4      	asrs	r4, r4, #2
 8007986:	2600      	movs	r6, #0
 8007988:	42a6      	cmp	r6, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	4d0b      	ldr	r5, [pc, #44]	; (80079bc <__libc_init_array+0x40>)
 800798e:	4c0c      	ldr	r4, [pc, #48]	; (80079c0 <__libc_init_array+0x44>)
 8007990:	f004 fc08 	bl	800c1a4 <_init>
 8007994:	1b64      	subs	r4, r4, r5
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	2600      	movs	r6, #0
 800799a:	42a6      	cmp	r6, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a4:	4798      	blx	r3
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ae:	4798      	blx	r3
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	080282f4 	.word	0x080282f4
 80079b8:	080282f4 	.word	0x080282f4
 80079bc:	080282f4 	.word	0x080282f4
 80079c0:	080282f8 	.word	0x080282f8

080079c4 <__retarget_lock_init_recursive>:
 80079c4:	4770      	bx	lr

080079c6 <__retarget_lock_acquire_recursive>:
 80079c6:	4770      	bx	lr

080079c8 <__retarget_lock_release_recursive>:
 80079c8:	4770      	bx	lr

080079ca <memcpy>:
 80079ca:	440a      	add	r2, r1
 80079cc:	4291      	cmp	r1, r2
 80079ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80079d2:	d100      	bne.n	80079d6 <memcpy+0xc>
 80079d4:	4770      	bx	lr
 80079d6:	b510      	push	{r4, lr}
 80079d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079e0:	4291      	cmp	r1, r2
 80079e2:	d1f9      	bne.n	80079d8 <memcpy+0xe>
 80079e4:	bd10      	pop	{r4, pc}

080079e6 <memset>:
 80079e6:	4402      	add	r2, r0
 80079e8:	4603      	mov	r3, r0
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d100      	bne.n	80079f0 <memset+0xa>
 80079ee:	4770      	bx	lr
 80079f0:	f803 1b01 	strb.w	r1, [r3], #1
 80079f4:	e7f9      	b.n	80079ea <memset+0x4>
	...

080079f8 <sbrk_aligned>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	4e0e      	ldr	r6, [pc, #56]	; (8007a34 <sbrk_aligned+0x3c>)
 80079fc:	460c      	mov	r4, r1
 80079fe:	6831      	ldr	r1, [r6, #0]
 8007a00:	4605      	mov	r5, r0
 8007a02:	b911      	cbnz	r1, 8007a0a <sbrk_aligned+0x12>
 8007a04:	f000 ff70 	bl	80088e8 <_sbrk_r>
 8007a08:	6030      	str	r0, [r6, #0]
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 ff6b 	bl	80088e8 <_sbrk_r>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d00a      	beq.n	8007a2c <sbrk_aligned+0x34>
 8007a16:	1cc4      	adds	r4, r0, #3
 8007a18:	f024 0403 	bic.w	r4, r4, #3
 8007a1c:	42a0      	cmp	r0, r4
 8007a1e:	d007      	beq.n	8007a30 <sbrk_aligned+0x38>
 8007a20:	1a21      	subs	r1, r4, r0
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 ff60 	bl	80088e8 <_sbrk_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d101      	bne.n	8007a30 <sbrk_aligned+0x38>
 8007a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a30:	4620      	mov	r0, r4
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	20003b94 	.word	0x20003b94

08007a38 <_malloc_r>:
 8007a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3c:	1ccd      	adds	r5, r1, #3
 8007a3e:	f025 0503 	bic.w	r5, r5, #3
 8007a42:	3508      	adds	r5, #8
 8007a44:	2d0c      	cmp	r5, #12
 8007a46:	bf38      	it	cc
 8007a48:	250c      	movcc	r5, #12
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	db01      	blt.n	8007a54 <_malloc_r+0x1c>
 8007a50:	42a9      	cmp	r1, r5
 8007a52:	d905      	bls.n	8007a60 <_malloc_r+0x28>
 8007a54:	230c      	movs	r3, #12
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	2600      	movs	r6, #0
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a60:	4e2e      	ldr	r6, [pc, #184]	; (8007b1c <_malloc_r+0xe4>)
 8007a62:	f003 f969 	bl	800ad38 <__malloc_lock>
 8007a66:	6833      	ldr	r3, [r6, #0]
 8007a68:	461c      	mov	r4, r3
 8007a6a:	bb34      	cbnz	r4, 8007aba <_malloc_r+0x82>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f7ff ffc2 	bl	80079f8 <sbrk_aligned>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	4604      	mov	r4, r0
 8007a78:	d14d      	bne.n	8007b16 <_malloc_r+0xde>
 8007a7a:	6834      	ldr	r4, [r6, #0]
 8007a7c:	4626      	mov	r6, r4
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	d140      	bne.n	8007b04 <_malloc_r+0xcc>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	4631      	mov	r1, r6
 8007a86:	4638      	mov	r0, r7
 8007a88:	eb04 0803 	add.w	r8, r4, r3
 8007a8c:	f000 ff2c 	bl	80088e8 <_sbrk_r>
 8007a90:	4580      	cmp	r8, r0
 8007a92:	d13a      	bne.n	8007b0a <_malloc_r+0xd2>
 8007a94:	6821      	ldr	r1, [r4, #0]
 8007a96:	3503      	adds	r5, #3
 8007a98:	1a6d      	subs	r5, r5, r1
 8007a9a:	f025 0503 	bic.w	r5, r5, #3
 8007a9e:	3508      	adds	r5, #8
 8007aa0:	2d0c      	cmp	r5, #12
 8007aa2:	bf38      	it	cc
 8007aa4:	250c      	movcc	r5, #12
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ffa5 	bl	80079f8 <sbrk_aligned>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d02b      	beq.n	8007b0a <_malloc_r+0xd2>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	442b      	add	r3, r5
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	e00e      	b.n	8007ad8 <_malloc_r+0xa0>
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	1b52      	subs	r2, r2, r5
 8007abe:	d41e      	bmi.n	8007afe <_malloc_r+0xc6>
 8007ac0:	2a0b      	cmp	r2, #11
 8007ac2:	d916      	bls.n	8007af2 <_malloc_r+0xba>
 8007ac4:	1961      	adds	r1, r4, r5
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	6025      	str	r5, [r4, #0]
 8007aca:	bf18      	it	ne
 8007acc:	6059      	strne	r1, [r3, #4]
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	bf08      	it	eq
 8007ad2:	6031      	streq	r1, [r6, #0]
 8007ad4:	5162      	str	r2, [r4, r5]
 8007ad6:	604b      	str	r3, [r1, #4]
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f104 060b 	add.w	r6, r4, #11
 8007ade:	f003 f931 	bl	800ad44 <__malloc_unlock>
 8007ae2:	f026 0607 	bic.w	r6, r6, #7
 8007ae6:	1d23      	adds	r3, r4, #4
 8007ae8:	1af2      	subs	r2, r6, r3
 8007aea:	d0b6      	beq.n	8007a5a <_malloc_r+0x22>
 8007aec:	1b9b      	subs	r3, r3, r6
 8007aee:	50a3      	str	r3, [r4, r2]
 8007af0:	e7b3      	b.n	8007a5a <_malloc_r+0x22>
 8007af2:	6862      	ldr	r2, [r4, #4]
 8007af4:	42a3      	cmp	r3, r4
 8007af6:	bf0c      	ite	eq
 8007af8:	6032      	streq	r2, [r6, #0]
 8007afa:	605a      	strne	r2, [r3, #4]
 8007afc:	e7ec      	b.n	8007ad8 <_malloc_r+0xa0>
 8007afe:	4623      	mov	r3, r4
 8007b00:	6864      	ldr	r4, [r4, #4]
 8007b02:	e7b2      	b.n	8007a6a <_malloc_r+0x32>
 8007b04:	4634      	mov	r4, r6
 8007b06:	6876      	ldr	r6, [r6, #4]
 8007b08:	e7b9      	b.n	8007a7e <_malloc_r+0x46>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f003 f918 	bl	800ad44 <__malloc_unlock>
 8007b14:	e7a1      	b.n	8007a5a <_malloc_r+0x22>
 8007b16:	6025      	str	r5, [r4, #0]
 8007b18:	e7de      	b.n	8007ad8 <_malloc_r+0xa0>
 8007b1a:	bf00      	nop
 8007b1c:	20003b90 	.word	0x20003b90

08007b20 <__cvt>:
 8007b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	ec55 4b10 	vmov	r4, r5, d0
 8007b28:	2d00      	cmp	r5, #0
 8007b2a:	460e      	mov	r6, r1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	462b      	mov	r3, r5
 8007b30:	bfbb      	ittet	lt
 8007b32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b36:	461d      	movlt	r5, r3
 8007b38:	2300      	movge	r3, #0
 8007b3a:	232d      	movlt	r3, #45	; 0x2d
 8007b3c:	700b      	strb	r3, [r1, #0]
 8007b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b44:	4691      	mov	r9, r2
 8007b46:	f023 0820 	bic.w	r8, r3, #32
 8007b4a:	bfbc      	itt	lt
 8007b4c:	4622      	movlt	r2, r4
 8007b4e:	4614      	movlt	r4, r2
 8007b50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b54:	d005      	beq.n	8007b62 <__cvt+0x42>
 8007b56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b5a:	d100      	bne.n	8007b5e <__cvt+0x3e>
 8007b5c:	3601      	adds	r6, #1
 8007b5e:	2102      	movs	r1, #2
 8007b60:	e000      	b.n	8007b64 <__cvt+0x44>
 8007b62:	2103      	movs	r1, #3
 8007b64:	ab03      	add	r3, sp, #12
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	ab02      	add	r3, sp, #8
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	ec45 4b10 	vmov	d0, r4, r5
 8007b70:	4653      	mov	r3, sl
 8007b72:	4632      	mov	r2, r6
 8007b74:	f001 fe90 	bl	8009898 <_dtoa_r>
 8007b78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	d102      	bne.n	8007b86 <__cvt+0x66>
 8007b80:	f019 0f01 	tst.w	r9, #1
 8007b84:	d022      	beq.n	8007bcc <__cvt+0xac>
 8007b86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b8a:	eb07 0906 	add.w	r9, r7, r6
 8007b8e:	d110      	bne.n	8007bb2 <__cvt+0x92>
 8007b90:	783b      	ldrb	r3, [r7, #0]
 8007b92:	2b30      	cmp	r3, #48	; 0x30
 8007b94:	d10a      	bne.n	8007bac <__cvt+0x8c>
 8007b96:	2200      	movs	r2, #0
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7f8 ffb3 	bl	8000b08 <__aeabi_dcmpeq>
 8007ba2:	b918      	cbnz	r0, 8007bac <__cvt+0x8c>
 8007ba4:	f1c6 0601 	rsb	r6, r6, #1
 8007ba8:	f8ca 6000 	str.w	r6, [sl]
 8007bac:	f8da 3000 	ldr.w	r3, [sl]
 8007bb0:	4499      	add	r9, r3
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 ffa5 	bl	8000b08 <__aeabi_dcmpeq>
 8007bbe:	b108      	cbz	r0, 8007bc4 <__cvt+0xa4>
 8007bc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bc4:	2230      	movs	r2, #48	; 0x30
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	454b      	cmp	r3, r9
 8007bca:	d307      	bcc.n	8007bdc <__cvt+0xbc>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bd0:	1bdb      	subs	r3, r3, r7
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	b004      	add	sp, #16
 8007bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bdc:	1c59      	adds	r1, r3, #1
 8007bde:	9103      	str	r1, [sp, #12]
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e7f0      	b.n	8007bc6 <__cvt+0xa6>

08007be4 <__exponent>:
 8007be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be6:	4603      	mov	r3, r0
 8007be8:	2900      	cmp	r1, #0
 8007bea:	bfb8      	it	lt
 8007bec:	4249      	neglt	r1, r1
 8007bee:	f803 2b02 	strb.w	r2, [r3], #2
 8007bf2:	bfb4      	ite	lt
 8007bf4:	222d      	movlt	r2, #45	; 0x2d
 8007bf6:	222b      	movge	r2, #43	; 0x2b
 8007bf8:	2909      	cmp	r1, #9
 8007bfa:	7042      	strb	r2, [r0, #1]
 8007bfc:	dd2a      	ble.n	8007c54 <__exponent+0x70>
 8007bfe:	f10d 0407 	add.w	r4, sp, #7
 8007c02:	46a4      	mov	ip, r4
 8007c04:	270a      	movs	r7, #10
 8007c06:	46a6      	mov	lr, r4
 8007c08:	460a      	mov	r2, r1
 8007c0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c0e:	fb07 1516 	mls	r5, r7, r6, r1
 8007c12:	3530      	adds	r5, #48	; 0x30
 8007c14:	2a63      	cmp	r2, #99	; 0x63
 8007c16:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c1e:	4631      	mov	r1, r6
 8007c20:	dcf1      	bgt.n	8007c06 <__exponent+0x22>
 8007c22:	3130      	adds	r1, #48	; 0x30
 8007c24:	f1ae 0502 	sub.w	r5, lr, #2
 8007c28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c2c:	1c44      	adds	r4, r0, #1
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4561      	cmp	r1, ip
 8007c32:	d30a      	bcc.n	8007c4a <__exponent+0x66>
 8007c34:	f10d 0209 	add.w	r2, sp, #9
 8007c38:	eba2 020e 	sub.w	r2, r2, lr
 8007c3c:	4565      	cmp	r5, ip
 8007c3e:	bf88      	it	hi
 8007c40:	2200      	movhi	r2, #0
 8007c42:	4413      	add	r3, r2
 8007c44:	1a18      	subs	r0, r3, r0
 8007c46:	b003      	add	sp, #12
 8007c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c52:	e7ed      	b.n	8007c30 <__exponent+0x4c>
 8007c54:	2330      	movs	r3, #48	; 0x30
 8007c56:	3130      	adds	r1, #48	; 0x30
 8007c58:	7083      	strb	r3, [r0, #2]
 8007c5a:	70c1      	strb	r1, [r0, #3]
 8007c5c:	1d03      	adds	r3, r0, #4
 8007c5e:	e7f1      	b.n	8007c44 <__exponent+0x60>

08007c60 <_printf_float>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	ed2d 8b02 	vpush	{d8}
 8007c68:	b08d      	sub	sp, #52	; 0x34
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c70:	4616      	mov	r6, r2
 8007c72:	461f      	mov	r7, r3
 8007c74:	4605      	mov	r5, r0
 8007c76:	f003 f82f 	bl	800acd8 <_localeconv_r>
 8007c7a:	f8d0 a000 	ldr.w	sl, [r0]
 8007c7e:	4650      	mov	r0, sl
 8007c80:	f7f8 fac6 	bl	8000210 <strlen>
 8007c84:	2300      	movs	r3, #0
 8007c86:	930a      	str	r3, [sp, #40]	; 0x28
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c94:	3307      	adds	r3, #7
 8007c96:	f023 0307 	bic.w	r3, r3, #7
 8007c9a:	f103 0208 	add.w	r2, r3, #8
 8007c9e:	f8c8 2000 	str.w	r2, [r8]
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007caa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cb8:	ee08 0a10 	vmov	s16, r0
 8007cbc:	4b9f      	ldr	r3, [pc, #636]	; (8007f3c <_printf_float+0x2dc>)
 8007cbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc6:	f7f8 ff51 	bl	8000b6c <__aeabi_dcmpun>
 8007cca:	bb88      	cbnz	r0, 8007d30 <_printf_float+0xd0>
 8007ccc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cd0:	4b9a      	ldr	r3, [pc, #616]	; (8007f3c <_printf_float+0x2dc>)
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd6:	f7f8 ff2b 	bl	8000b30 <__aeabi_dcmple>
 8007cda:	bb48      	cbnz	r0, 8007d30 <_printf_float+0xd0>
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	f7f8 ff1a 	bl	8000b1c <__aeabi_dcmplt>
 8007ce8:	b110      	cbz	r0, 8007cf0 <_printf_float+0x90>
 8007cea:	232d      	movs	r3, #45	; 0x2d
 8007cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf0:	4b93      	ldr	r3, [pc, #588]	; (8007f40 <_printf_float+0x2e0>)
 8007cf2:	4894      	ldr	r0, [pc, #592]	; (8007f44 <_printf_float+0x2e4>)
 8007cf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cf8:	bf94      	ite	ls
 8007cfa:	4698      	movls	r8, r3
 8007cfc:	4680      	movhi	r8, r0
 8007cfe:	2303      	movs	r3, #3
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	9b05      	ldr	r3, [sp, #20]
 8007d04:	f023 0204 	bic.w	r2, r3, #4
 8007d08:	6022      	str	r2, [r4, #0]
 8007d0a:	f04f 0900 	mov.w	r9, #0
 8007d0e:	9700      	str	r7, [sp, #0]
 8007d10:	4633      	mov	r3, r6
 8007d12:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f9d8 	bl	80080cc <_printf_common>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f040 8090 	bne.w	8007e42 <_printf_float+0x1e2>
 8007d22:	f04f 30ff 	mov.w	r0, #4294967295
 8007d26:	b00d      	add	sp, #52	; 0x34
 8007d28:	ecbd 8b02 	vpop	{d8}
 8007d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	4640      	mov	r0, r8
 8007d36:	4649      	mov	r1, r9
 8007d38:	f7f8 ff18 	bl	8000b6c <__aeabi_dcmpun>
 8007d3c:	b140      	cbz	r0, 8007d50 <_printf_float+0xf0>
 8007d3e:	464b      	mov	r3, r9
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfbc      	itt	lt
 8007d44:	232d      	movlt	r3, #45	; 0x2d
 8007d46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d4a:	487f      	ldr	r0, [pc, #508]	; (8007f48 <_printf_float+0x2e8>)
 8007d4c:	4b7f      	ldr	r3, [pc, #508]	; (8007f4c <_printf_float+0x2ec>)
 8007d4e:	e7d1      	b.n	8007cf4 <_printf_float+0x94>
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d56:	9206      	str	r2, [sp, #24]
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	d13f      	bne.n	8007ddc <_printf_float+0x17c>
 8007d5c:	2306      	movs	r3, #6
 8007d5e:	6063      	str	r3, [r4, #4]
 8007d60:	9b05      	ldr	r3, [sp, #20]
 8007d62:	6861      	ldr	r1, [r4, #4]
 8007d64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9303      	str	r3, [sp, #12]
 8007d6c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d72:	ab09      	add	r3, sp, #36	; 0x24
 8007d74:	ec49 8b10 	vmov	d0, r8, r9
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d80:	4628      	mov	r0, r5
 8007d82:	f7ff fecd 	bl	8007b20 <__cvt>
 8007d86:	9b06      	ldr	r3, [sp, #24]
 8007d88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d8a:	2b47      	cmp	r3, #71	; 0x47
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	d108      	bne.n	8007da2 <_printf_float+0x142>
 8007d90:	1cc8      	adds	r0, r1, #3
 8007d92:	db02      	blt.n	8007d9a <_printf_float+0x13a>
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	4299      	cmp	r1, r3
 8007d98:	dd41      	ble.n	8007e1e <_printf_float+0x1be>
 8007d9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d9e:	fa5f fb8b 	uxtb.w	fp, fp
 8007da2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007da6:	d820      	bhi.n	8007dea <_printf_float+0x18a>
 8007da8:	3901      	subs	r1, #1
 8007daa:	465a      	mov	r2, fp
 8007dac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007db0:	9109      	str	r1, [sp, #36]	; 0x24
 8007db2:	f7ff ff17 	bl	8007be4 <__exponent>
 8007db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db8:	1813      	adds	r3, r2, r0
 8007dba:	2a01      	cmp	r2, #1
 8007dbc:	4681      	mov	r9, r0
 8007dbe:	6123      	str	r3, [r4, #16]
 8007dc0:	dc02      	bgt.n	8007dc8 <_printf_float+0x168>
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	07d2      	lsls	r2, r2, #31
 8007dc6:	d501      	bpl.n	8007dcc <_printf_float+0x16c>
 8007dc8:	3301      	adds	r3, #1
 8007dca:	6123      	str	r3, [r4, #16]
 8007dcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d09c      	beq.n	8007d0e <_printf_float+0xae>
 8007dd4:	232d      	movs	r3, #45	; 0x2d
 8007dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dda:	e798      	b.n	8007d0e <_printf_float+0xae>
 8007ddc:	9a06      	ldr	r2, [sp, #24]
 8007dde:	2a47      	cmp	r2, #71	; 0x47
 8007de0:	d1be      	bne.n	8007d60 <_printf_float+0x100>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1bc      	bne.n	8007d60 <_printf_float+0x100>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e7b9      	b.n	8007d5e <_printf_float+0xfe>
 8007dea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007dee:	d118      	bne.n	8007e22 <_printf_float+0x1c2>
 8007df0:	2900      	cmp	r1, #0
 8007df2:	6863      	ldr	r3, [r4, #4]
 8007df4:	dd0b      	ble.n	8007e0e <_printf_float+0x1ae>
 8007df6:	6121      	str	r1, [r4, #16]
 8007df8:	b913      	cbnz	r3, 8007e00 <_printf_float+0x1a0>
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	07d0      	lsls	r0, r2, #31
 8007dfe:	d502      	bpl.n	8007e06 <_printf_float+0x1a6>
 8007e00:	3301      	adds	r3, #1
 8007e02:	440b      	add	r3, r1
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e08:	f04f 0900 	mov.w	r9, #0
 8007e0c:	e7de      	b.n	8007dcc <_printf_float+0x16c>
 8007e0e:	b913      	cbnz	r3, 8007e16 <_printf_float+0x1b6>
 8007e10:	6822      	ldr	r2, [r4, #0]
 8007e12:	07d2      	lsls	r2, r2, #31
 8007e14:	d501      	bpl.n	8007e1a <_printf_float+0x1ba>
 8007e16:	3302      	adds	r3, #2
 8007e18:	e7f4      	b.n	8007e04 <_printf_float+0x1a4>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e7f2      	b.n	8007e04 <_printf_float+0x1a4>
 8007e1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e24:	4299      	cmp	r1, r3
 8007e26:	db05      	blt.n	8007e34 <_printf_float+0x1d4>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	6121      	str	r1, [r4, #16]
 8007e2c:	07d8      	lsls	r0, r3, #31
 8007e2e:	d5ea      	bpl.n	8007e06 <_printf_float+0x1a6>
 8007e30:	1c4b      	adds	r3, r1, #1
 8007e32:	e7e7      	b.n	8007e04 <_printf_float+0x1a4>
 8007e34:	2900      	cmp	r1, #0
 8007e36:	bfd4      	ite	le
 8007e38:	f1c1 0202 	rsble	r2, r1, #2
 8007e3c:	2201      	movgt	r2, #1
 8007e3e:	4413      	add	r3, r2
 8007e40:	e7e0      	b.n	8007e04 <_printf_float+0x1a4>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	055a      	lsls	r2, r3, #21
 8007e46:	d407      	bmi.n	8007e58 <_printf_float+0x1f8>
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	d12c      	bne.n	8007eb0 <_printf_float+0x250>
 8007e56:	e764      	b.n	8007d22 <_printf_float+0xc2>
 8007e58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e5c:	f240 80e0 	bls.w	8008020 <_printf_float+0x3c0>
 8007e60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e64:	2200      	movs	r2, #0
 8007e66:	2300      	movs	r3, #0
 8007e68:	f7f8 fe4e 	bl	8000b08 <__aeabi_dcmpeq>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d034      	beq.n	8007eda <_printf_float+0x27a>
 8007e70:	4a37      	ldr	r2, [pc, #220]	; (8007f50 <_printf_float+0x2f0>)
 8007e72:	2301      	movs	r3, #1
 8007e74:	4631      	mov	r1, r6
 8007e76:	4628      	mov	r0, r5
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f af51 	beq.w	8007d22 <_printf_float+0xc2>
 8007e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e84:	429a      	cmp	r2, r3
 8007e86:	db02      	blt.n	8007e8e <_printf_float+0x22e>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07d8      	lsls	r0, r3, #31
 8007e8c:	d510      	bpl.n	8007eb0 <_printf_float+0x250>
 8007e8e:	ee18 3a10 	vmov	r3, s16
 8007e92:	4652      	mov	r2, sl
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f af41 	beq.w	8007d22 <_printf_float+0xc2>
 8007ea0:	f04f 0800 	mov.w	r8, #0
 8007ea4:	f104 091a 	add.w	r9, r4, #26
 8007ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	4543      	cmp	r3, r8
 8007eae:	dc09      	bgt.n	8007ec4 <_printf_float+0x264>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	079b      	lsls	r3, r3, #30
 8007eb4:	f100 8105 	bmi.w	80080c2 <_printf_float+0x462>
 8007eb8:	68e0      	ldr	r0, [r4, #12]
 8007eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ebc:	4298      	cmp	r0, r3
 8007ebe:	bfb8      	it	lt
 8007ec0:	4618      	movlt	r0, r3
 8007ec2:	e730      	b.n	8007d26 <_printf_float+0xc6>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	464a      	mov	r2, r9
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f af27 	beq.w	8007d22 <_printf_float+0xc2>
 8007ed4:	f108 0801 	add.w	r8, r8, #1
 8007ed8:	e7e6      	b.n	8007ea8 <_printf_float+0x248>
 8007eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dc39      	bgt.n	8007f54 <_printf_float+0x2f4>
 8007ee0:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <_printf_float+0x2f0>)
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b8      	blx	r7
 8007eea:	3001      	adds	r0, #1
 8007eec:	f43f af19 	beq.w	8007d22 <_printf_float+0xc2>
 8007ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d102      	bne.n	8007efe <_printf_float+0x29e>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	07d9      	lsls	r1, r3, #31
 8007efc:	d5d8      	bpl.n	8007eb0 <_printf_float+0x250>
 8007efe:	ee18 3a10 	vmov	r3, s16
 8007f02:	4652      	mov	r2, sl
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f af09 	beq.w	8007d22 <_printf_float+0xc2>
 8007f10:	f04f 0900 	mov.w	r9, #0
 8007f14:	f104 0a1a 	add.w	sl, r4, #26
 8007f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1a:	425b      	negs	r3, r3
 8007f1c:	454b      	cmp	r3, r9
 8007f1e:	dc01      	bgt.n	8007f24 <_printf_float+0x2c4>
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	e792      	b.n	8007e4a <_printf_float+0x1ea>
 8007f24:	2301      	movs	r3, #1
 8007f26:	4652      	mov	r2, sl
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	f43f aef7 	beq.w	8007d22 <_printf_float+0xc2>
 8007f34:	f109 0901 	add.w	r9, r9, #1
 8007f38:	e7ee      	b.n	8007f18 <_printf_float+0x2b8>
 8007f3a:	bf00      	nop
 8007f3c:	7fefffff 	.word	0x7fefffff
 8007f40:	08027eac 	.word	0x08027eac
 8007f44:	08027eb0 	.word	0x08027eb0
 8007f48:	08027eb8 	.word	0x08027eb8
 8007f4c:	08027eb4 	.word	0x08027eb4
 8007f50:	08027ebc 	.word	0x08027ebc
 8007f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	bfa8      	it	ge
 8007f5c:	461a      	movge	r2, r3
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	4691      	mov	r9, r2
 8007f62:	dc37      	bgt.n	8007fd4 <_printf_float+0x374>
 8007f64:	f04f 0b00 	mov.w	fp, #0
 8007f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6c:	f104 021a 	add.w	r2, r4, #26
 8007f70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f72:	9305      	str	r3, [sp, #20]
 8007f74:	eba3 0309 	sub.w	r3, r3, r9
 8007f78:	455b      	cmp	r3, fp
 8007f7a:	dc33      	bgt.n	8007fe4 <_printf_float+0x384>
 8007f7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f80:	429a      	cmp	r2, r3
 8007f82:	db3b      	blt.n	8007ffc <_printf_float+0x39c>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	07da      	lsls	r2, r3, #31
 8007f88:	d438      	bmi.n	8007ffc <_printf_float+0x39c>
 8007f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8c:	9a05      	ldr	r2, [sp, #20]
 8007f8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f90:	1a9a      	subs	r2, r3, r2
 8007f92:	eba3 0901 	sub.w	r9, r3, r1
 8007f96:	4591      	cmp	r9, r2
 8007f98:	bfa8      	it	ge
 8007f9a:	4691      	movge	r9, r2
 8007f9c:	f1b9 0f00 	cmp.w	r9, #0
 8007fa0:	dc35      	bgt.n	800800e <_printf_float+0x3ae>
 8007fa2:	f04f 0800 	mov.w	r8, #0
 8007fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007faa:	f104 0a1a 	add.w	sl, r4, #26
 8007fae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	eba3 0309 	sub.w	r3, r3, r9
 8007fb8:	4543      	cmp	r3, r8
 8007fba:	f77f af79 	ble.w	8007eb0 <_printf_float+0x250>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f43f aeaa 	beq.w	8007d22 <_printf_float+0xc2>
 8007fce:	f108 0801 	add.w	r8, r8, #1
 8007fd2:	e7ec      	b.n	8007fae <_printf_float+0x34e>
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4642      	mov	r2, r8
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d1c0      	bne.n	8007f64 <_printf_float+0x304>
 8007fe2:	e69e      	b.n	8007d22 <_printf_float+0xc2>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	9205      	str	r2, [sp, #20]
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f43f ae97 	beq.w	8007d22 <_printf_float+0xc2>
 8007ff4:	9a05      	ldr	r2, [sp, #20]
 8007ff6:	f10b 0b01 	add.w	fp, fp, #1
 8007ffa:	e7b9      	b.n	8007f70 <_printf_float+0x310>
 8007ffc:	ee18 3a10 	vmov	r3, s16
 8008000:	4652      	mov	r2, sl
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	d1be      	bne.n	8007f8a <_printf_float+0x32a>
 800800c:	e689      	b.n	8007d22 <_printf_float+0xc2>
 800800e:	9a05      	ldr	r2, [sp, #20]
 8008010:	464b      	mov	r3, r9
 8008012:	4442      	add	r2, r8
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	d1c1      	bne.n	8007fa2 <_printf_float+0x342>
 800801e:	e680      	b.n	8007d22 <_printf_float+0xc2>
 8008020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008022:	2a01      	cmp	r2, #1
 8008024:	dc01      	bgt.n	800802a <_printf_float+0x3ca>
 8008026:	07db      	lsls	r3, r3, #31
 8008028:	d538      	bpl.n	800809c <_printf_float+0x43c>
 800802a:	2301      	movs	r3, #1
 800802c:	4642      	mov	r2, r8
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	f43f ae74 	beq.w	8007d22 <_printf_float+0xc2>
 800803a:	ee18 3a10 	vmov	r3, s16
 800803e:	4652      	mov	r2, sl
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f ae6b 	beq.w	8007d22 <_printf_float+0xc2>
 800804c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008050:	2200      	movs	r2, #0
 8008052:	2300      	movs	r3, #0
 8008054:	f7f8 fd58 	bl	8000b08 <__aeabi_dcmpeq>
 8008058:	b9d8      	cbnz	r0, 8008092 <_printf_float+0x432>
 800805a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805c:	f108 0201 	add.w	r2, r8, #1
 8008060:	3b01      	subs	r3, #1
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	47b8      	blx	r7
 8008068:	3001      	adds	r0, #1
 800806a:	d10e      	bne.n	800808a <_printf_float+0x42a>
 800806c:	e659      	b.n	8007d22 <_printf_float+0xc2>
 800806e:	2301      	movs	r3, #1
 8008070:	4652      	mov	r2, sl
 8008072:	4631      	mov	r1, r6
 8008074:	4628      	mov	r0, r5
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	f43f ae52 	beq.w	8007d22 <_printf_float+0xc2>
 800807e:	f108 0801 	add.w	r8, r8, #1
 8008082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008084:	3b01      	subs	r3, #1
 8008086:	4543      	cmp	r3, r8
 8008088:	dcf1      	bgt.n	800806e <_printf_float+0x40e>
 800808a:	464b      	mov	r3, r9
 800808c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008090:	e6dc      	b.n	8007e4c <_printf_float+0x1ec>
 8008092:	f04f 0800 	mov.w	r8, #0
 8008096:	f104 0a1a 	add.w	sl, r4, #26
 800809a:	e7f2      	b.n	8008082 <_printf_float+0x422>
 800809c:	2301      	movs	r3, #1
 800809e:	4642      	mov	r2, r8
 80080a0:	e7df      	b.n	8008062 <_printf_float+0x402>
 80080a2:	2301      	movs	r3, #1
 80080a4:	464a      	mov	r2, r9
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	47b8      	blx	r7
 80080ac:	3001      	adds	r0, #1
 80080ae:	f43f ae38 	beq.w	8007d22 <_printf_float+0xc2>
 80080b2:	f108 0801 	add.w	r8, r8, #1
 80080b6:	68e3      	ldr	r3, [r4, #12]
 80080b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ba:	1a5b      	subs	r3, r3, r1
 80080bc:	4543      	cmp	r3, r8
 80080be:	dcf0      	bgt.n	80080a2 <_printf_float+0x442>
 80080c0:	e6fa      	b.n	8007eb8 <_printf_float+0x258>
 80080c2:	f04f 0800 	mov.w	r8, #0
 80080c6:	f104 0919 	add.w	r9, r4, #25
 80080ca:	e7f4      	b.n	80080b6 <_printf_float+0x456>

080080cc <_printf_common>:
 80080cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	4616      	mov	r6, r2
 80080d2:	4699      	mov	r9, r3
 80080d4:	688a      	ldr	r2, [r1, #8]
 80080d6:	690b      	ldr	r3, [r1, #16]
 80080d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080dc:	4293      	cmp	r3, r2
 80080de:	bfb8      	it	lt
 80080e0:	4613      	movlt	r3, r2
 80080e2:	6033      	str	r3, [r6, #0]
 80080e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080e8:	4607      	mov	r7, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	b10a      	cbz	r2, 80080f2 <_printf_common+0x26>
 80080ee:	3301      	adds	r3, #1
 80080f0:	6033      	str	r3, [r6, #0]
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	0699      	lsls	r1, r3, #26
 80080f6:	bf42      	ittt	mi
 80080f8:	6833      	ldrmi	r3, [r6, #0]
 80080fa:	3302      	addmi	r3, #2
 80080fc:	6033      	strmi	r3, [r6, #0]
 80080fe:	6825      	ldr	r5, [r4, #0]
 8008100:	f015 0506 	ands.w	r5, r5, #6
 8008104:	d106      	bne.n	8008114 <_printf_common+0x48>
 8008106:	f104 0a19 	add.w	sl, r4, #25
 800810a:	68e3      	ldr	r3, [r4, #12]
 800810c:	6832      	ldr	r2, [r6, #0]
 800810e:	1a9b      	subs	r3, r3, r2
 8008110:	42ab      	cmp	r3, r5
 8008112:	dc26      	bgt.n	8008162 <_printf_common+0x96>
 8008114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008118:	1e13      	subs	r3, r2, #0
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	bf18      	it	ne
 800811e:	2301      	movne	r3, #1
 8008120:	0692      	lsls	r2, r2, #26
 8008122:	d42b      	bmi.n	800817c <_printf_common+0xb0>
 8008124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008128:	4649      	mov	r1, r9
 800812a:	4638      	mov	r0, r7
 800812c:	47c0      	blx	r8
 800812e:	3001      	adds	r0, #1
 8008130:	d01e      	beq.n	8008170 <_printf_common+0xa4>
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	68e5      	ldr	r5, [r4, #12]
 8008136:	6832      	ldr	r2, [r6, #0]
 8008138:	f003 0306 	and.w	r3, r3, #6
 800813c:	2b04      	cmp	r3, #4
 800813e:	bf08      	it	eq
 8008140:	1aad      	subeq	r5, r5, r2
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	6922      	ldr	r2, [r4, #16]
 8008146:	bf0c      	ite	eq
 8008148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800814c:	2500      	movne	r5, #0
 800814e:	4293      	cmp	r3, r2
 8008150:	bfc4      	itt	gt
 8008152:	1a9b      	subgt	r3, r3, r2
 8008154:	18ed      	addgt	r5, r5, r3
 8008156:	2600      	movs	r6, #0
 8008158:	341a      	adds	r4, #26
 800815a:	42b5      	cmp	r5, r6
 800815c:	d11a      	bne.n	8008194 <_printf_common+0xc8>
 800815e:	2000      	movs	r0, #0
 8008160:	e008      	b.n	8008174 <_printf_common+0xa8>
 8008162:	2301      	movs	r3, #1
 8008164:	4652      	mov	r2, sl
 8008166:	4649      	mov	r1, r9
 8008168:	4638      	mov	r0, r7
 800816a:	47c0      	blx	r8
 800816c:	3001      	adds	r0, #1
 800816e:	d103      	bne.n	8008178 <_printf_common+0xac>
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008178:	3501      	adds	r5, #1
 800817a:	e7c6      	b.n	800810a <_printf_common+0x3e>
 800817c:	18e1      	adds	r1, r4, r3
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	2030      	movs	r0, #48	; 0x30
 8008182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008186:	4422      	add	r2, r4
 8008188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800818c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008190:	3302      	adds	r3, #2
 8008192:	e7c7      	b.n	8008124 <_printf_common+0x58>
 8008194:	2301      	movs	r3, #1
 8008196:	4622      	mov	r2, r4
 8008198:	4649      	mov	r1, r9
 800819a:	4638      	mov	r0, r7
 800819c:	47c0      	blx	r8
 800819e:	3001      	adds	r0, #1
 80081a0:	d0e6      	beq.n	8008170 <_printf_common+0xa4>
 80081a2:	3601      	adds	r6, #1
 80081a4:	e7d9      	b.n	800815a <_printf_common+0x8e>
	...

080081a8 <_printf_i>:
 80081a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ac:	7e0f      	ldrb	r7, [r1, #24]
 80081ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081b0:	2f78      	cmp	r7, #120	; 0x78
 80081b2:	4691      	mov	r9, r2
 80081b4:	4680      	mov	r8, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	469a      	mov	sl, r3
 80081ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081be:	d807      	bhi.n	80081d0 <_printf_i+0x28>
 80081c0:	2f62      	cmp	r7, #98	; 0x62
 80081c2:	d80a      	bhi.n	80081da <_printf_i+0x32>
 80081c4:	2f00      	cmp	r7, #0
 80081c6:	f000 80d8 	beq.w	800837a <_printf_i+0x1d2>
 80081ca:	2f58      	cmp	r7, #88	; 0x58
 80081cc:	f000 80a3 	beq.w	8008316 <_printf_i+0x16e>
 80081d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081d8:	e03a      	b.n	8008250 <_printf_i+0xa8>
 80081da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081de:	2b15      	cmp	r3, #21
 80081e0:	d8f6      	bhi.n	80081d0 <_printf_i+0x28>
 80081e2:	a101      	add	r1, pc, #4	; (adr r1, 80081e8 <_printf_i+0x40>)
 80081e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081e8:	08008241 	.word	0x08008241
 80081ec:	08008255 	.word	0x08008255
 80081f0:	080081d1 	.word	0x080081d1
 80081f4:	080081d1 	.word	0x080081d1
 80081f8:	080081d1 	.word	0x080081d1
 80081fc:	080081d1 	.word	0x080081d1
 8008200:	08008255 	.word	0x08008255
 8008204:	080081d1 	.word	0x080081d1
 8008208:	080081d1 	.word	0x080081d1
 800820c:	080081d1 	.word	0x080081d1
 8008210:	080081d1 	.word	0x080081d1
 8008214:	08008361 	.word	0x08008361
 8008218:	08008285 	.word	0x08008285
 800821c:	08008343 	.word	0x08008343
 8008220:	080081d1 	.word	0x080081d1
 8008224:	080081d1 	.word	0x080081d1
 8008228:	08008383 	.word	0x08008383
 800822c:	080081d1 	.word	0x080081d1
 8008230:	08008285 	.word	0x08008285
 8008234:	080081d1 	.word	0x080081d1
 8008238:	080081d1 	.word	0x080081d1
 800823c:	0800834b 	.word	0x0800834b
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	1d1a      	adds	r2, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	602a      	str	r2, [r5, #0]
 8008248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800824c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008250:	2301      	movs	r3, #1
 8008252:	e0a3      	b.n	800839c <_printf_i+0x1f4>
 8008254:	6820      	ldr	r0, [r4, #0]
 8008256:	6829      	ldr	r1, [r5, #0]
 8008258:	0606      	lsls	r6, r0, #24
 800825a:	f101 0304 	add.w	r3, r1, #4
 800825e:	d50a      	bpl.n	8008276 <_printf_i+0xce>
 8008260:	680e      	ldr	r6, [r1, #0]
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	2e00      	cmp	r6, #0
 8008266:	da03      	bge.n	8008270 <_printf_i+0xc8>
 8008268:	232d      	movs	r3, #45	; 0x2d
 800826a:	4276      	negs	r6, r6
 800826c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008270:	485e      	ldr	r0, [pc, #376]	; (80083ec <_printf_i+0x244>)
 8008272:	230a      	movs	r3, #10
 8008274:	e019      	b.n	80082aa <_printf_i+0x102>
 8008276:	680e      	ldr	r6, [r1, #0]
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800827e:	bf18      	it	ne
 8008280:	b236      	sxthne	r6, r6
 8008282:	e7ef      	b.n	8008264 <_printf_i+0xbc>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	6820      	ldr	r0, [r4, #0]
 8008288:	1d19      	adds	r1, r3, #4
 800828a:	6029      	str	r1, [r5, #0]
 800828c:	0601      	lsls	r1, r0, #24
 800828e:	d501      	bpl.n	8008294 <_printf_i+0xec>
 8008290:	681e      	ldr	r6, [r3, #0]
 8008292:	e002      	b.n	800829a <_printf_i+0xf2>
 8008294:	0646      	lsls	r6, r0, #25
 8008296:	d5fb      	bpl.n	8008290 <_printf_i+0xe8>
 8008298:	881e      	ldrh	r6, [r3, #0]
 800829a:	4854      	ldr	r0, [pc, #336]	; (80083ec <_printf_i+0x244>)
 800829c:	2f6f      	cmp	r7, #111	; 0x6f
 800829e:	bf0c      	ite	eq
 80082a0:	2308      	moveq	r3, #8
 80082a2:	230a      	movne	r3, #10
 80082a4:	2100      	movs	r1, #0
 80082a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082aa:	6865      	ldr	r5, [r4, #4]
 80082ac:	60a5      	str	r5, [r4, #8]
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	bfa2      	ittt	ge
 80082b2:	6821      	ldrge	r1, [r4, #0]
 80082b4:	f021 0104 	bicge.w	r1, r1, #4
 80082b8:	6021      	strge	r1, [r4, #0]
 80082ba:	b90e      	cbnz	r6, 80082c0 <_printf_i+0x118>
 80082bc:	2d00      	cmp	r5, #0
 80082be:	d04d      	beq.n	800835c <_printf_i+0x1b4>
 80082c0:	4615      	mov	r5, r2
 80082c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80082c6:	fb03 6711 	mls	r7, r3, r1, r6
 80082ca:	5dc7      	ldrb	r7, [r0, r7]
 80082cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082d0:	4637      	mov	r7, r6
 80082d2:	42bb      	cmp	r3, r7
 80082d4:	460e      	mov	r6, r1
 80082d6:	d9f4      	bls.n	80082c2 <_printf_i+0x11a>
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d10b      	bne.n	80082f4 <_printf_i+0x14c>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	07de      	lsls	r6, r3, #31
 80082e0:	d508      	bpl.n	80082f4 <_printf_i+0x14c>
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	6861      	ldr	r1, [r4, #4]
 80082e6:	4299      	cmp	r1, r3
 80082e8:	bfde      	ittt	le
 80082ea:	2330      	movle	r3, #48	; 0x30
 80082ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082f4:	1b52      	subs	r2, r2, r5
 80082f6:	6122      	str	r2, [r4, #16]
 80082f8:	f8cd a000 	str.w	sl, [sp]
 80082fc:	464b      	mov	r3, r9
 80082fe:	aa03      	add	r2, sp, #12
 8008300:	4621      	mov	r1, r4
 8008302:	4640      	mov	r0, r8
 8008304:	f7ff fee2 	bl	80080cc <_printf_common>
 8008308:	3001      	adds	r0, #1
 800830a:	d14c      	bne.n	80083a6 <_printf_i+0x1fe>
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	b004      	add	sp, #16
 8008312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008316:	4835      	ldr	r0, [pc, #212]	; (80083ec <_printf_i+0x244>)
 8008318:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800831c:	6829      	ldr	r1, [r5, #0]
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	f851 6b04 	ldr.w	r6, [r1], #4
 8008324:	6029      	str	r1, [r5, #0]
 8008326:	061d      	lsls	r5, r3, #24
 8008328:	d514      	bpl.n	8008354 <_printf_i+0x1ac>
 800832a:	07df      	lsls	r7, r3, #31
 800832c:	bf44      	itt	mi
 800832e:	f043 0320 	orrmi.w	r3, r3, #32
 8008332:	6023      	strmi	r3, [r4, #0]
 8008334:	b91e      	cbnz	r6, 800833e <_printf_i+0x196>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f023 0320 	bic.w	r3, r3, #32
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	2310      	movs	r3, #16
 8008340:	e7b0      	b.n	80082a4 <_printf_i+0xfc>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	f043 0320 	orr.w	r3, r3, #32
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	2378      	movs	r3, #120	; 0x78
 800834c:	4828      	ldr	r0, [pc, #160]	; (80083f0 <_printf_i+0x248>)
 800834e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008352:	e7e3      	b.n	800831c <_printf_i+0x174>
 8008354:	0659      	lsls	r1, r3, #25
 8008356:	bf48      	it	mi
 8008358:	b2b6      	uxthmi	r6, r6
 800835a:	e7e6      	b.n	800832a <_printf_i+0x182>
 800835c:	4615      	mov	r5, r2
 800835e:	e7bb      	b.n	80082d8 <_printf_i+0x130>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	6826      	ldr	r6, [r4, #0]
 8008364:	6961      	ldr	r1, [r4, #20]
 8008366:	1d18      	adds	r0, r3, #4
 8008368:	6028      	str	r0, [r5, #0]
 800836a:	0635      	lsls	r5, r6, #24
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	d501      	bpl.n	8008374 <_printf_i+0x1cc>
 8008370:	6019      	str	r1, [r3, #0]
 8008372:	e002      	b.n	800837a <_printf_i+0x1d2>
 8008374:	0670      	lsls	r0, r6, #25
 8008376:	d5fb      	bpl.n	8008370 <_printf_i+0x1c8>
 8008378:	8019      	strh	r1, [r3, #0]
 800837a:	2300      	movs	r3, #0
 800837c:	6123      	str	r3, [r4, #16]
 800837e:	4615      	mov	r5, r2
 8008380:	e7ba      	b.n	80082f8 <_printf_i+0x150>
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	1d1a      	adds	r2, r3, #4
 8008386:	602a      	str	r2, [r5, #0]
 8008388:	681d      	ldr	r5, [r3, #0]
 800838a:	6862      	ldr	r2, [r4, #4]
 800838c:	2100      	movs	r1, #0
 800838e:	4628      	mov	r0, r5
 8008390:	f7f7 ff46 	bl	8000220 <memchr>
 8008394:	b108      	cbz	r0, 800839a <_printf_i+0x1f2>
 8008396:	1b40      	subs	r0, r0, r5
 8008398:	6060      	str	r0, [r4, #4]
 800839a:	6863      	ldr	r3, [r4, #4]
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	2300      	movs	r3, #0
 80083a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a4:	e7a8      	b.n	80082f8 <_printf_i+0x150>
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	462a      	mov	r2, r5
 80083aa:	4649      	mov	r1, r9
 80083ac:	4640      	mov	r0, r8
 80083ae:	47d0      	blx	sl
 80083b0:	3001      	adds	r0, #1
 80083b2:	d0ab      	beq.n	800830c <_printf_i+0x164>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	079b      	lsls	r3, r3, #30
 80083b8:	d413      	bmi.n	80083e2 <_printf_i+0x23a>
 80083ba:	68e0      	ldr	r0, [r4, #12]
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	4298      	cmp	r0, r3
 80083c0:	bfb8      	it	lt
 80083c2:	4618      	movlt	r0, r3
 80083c4:	e7a4      	b.n	8008310 <_printf_i+0x168>
 80083c6:	2301      	movs	r3, #1
 80083c8:	4632      	mov	r2, r6
 80083ca:	4649      	mov	r1, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	47d0      	blx	sl
 80083d0:	3001      	adds	r0, #1
 80083d2:	d09b      	beq.n	800830c <_printf_i+0x164>
 80083d4:	3501      	adds	r5, #1
 80083d6:	68e3      	ldr	r3, [r4, #12]
 80083d8:	9903      	ldr	r1, [sp, #12]
 80083da:	1a5b      	subs	r3, r3, r1
 80083dc:	42ab      	cmp	r3, r5
 80083de:	dcf2      	bgt.n	80083c6 <_printf_i+0x21e>
 80083e0:	e7eb      	b.n	80083ba <_printf_i+0x212>
 80083e2:	2500      	movs	r5, #0
 80083e4:	f104 0619 	add.w	r6, r4, #25
 80083e8:	e7f5      	b.n	80083d6 <_printf_i+0x22e>
 80083ea:	bf00      	nop
 80083ec:	08027ebe 	.word	0x08027ebe
 80083f0:	08027ecf 	.word	0x08027ecf

080083f4 <_scanf_float>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	b087      	sub	sp, #28
 80083fa:	4617      	mov	r7, r2
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	688b      	ldr	r3, [r1, #8]
 8008400:	1e5a      	subs	r2, r3, #1
 8008402:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008406:	bf83      	ittte	hi
 8008408:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800840c:	195b      	addhi	r3, r3, r5
 800840e:	9302      	strhi	r3, [sp, #8]
 8008410:	2300      	movls	r3, #0
 8008412:	bf86      	itte	hi
 8008414:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008418:	608b      	strhi	r3, [r1, #8]
 800841a:	9302      	strls	r3, [sp, #8]
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	468b      	mov	fp, r1
 8008420:	2500      	movs	r5, #0
 8008422:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008426:	f84b 3b1c 	str.w	r3, [fp], #28
 800842a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800842e:	4680      	mov	r8, r0
 8008430:	460c      	mov	r4, r1
 8008432:	465e      	mov	r6, fp
 8008434:	46aa      	mov	sl, r5
 8008436:	46a9      	mov	r9, r5
 8008438:	9501      	str	r5, [sp, #4]
 800843a:	68a2      	ldr	r2, [r4, #8]
 800843c:	b152      	cbz	r2, 8008454 <_scanf_float+0x60>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b4e      	cmp	r3, #78	; 0x4e
 8008444:	d864      	bhi.n	8008510 <_scanf_float+0x11c>
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d83c      	bhi.n	80084c4 <_scanf_float+0xd0>
 800844a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800844e:	b2c8      	uxtb	r0, r1
 8008450:	280e      	cmp	r0, #14
 8008452:	d93a      	bls.n	80084ca <_scanf_float+0xd6>
 8008454:	f1b9 0f00 	cmp.w	r9, #0
 8008458:	d003      	beq.n	8008462 <_scanf_float+0x6e>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008466:	f1ba 0f01 	cmp.w	sl, #1
 800846a:	f200 8113 	bhi.w	8008694 <_scanf_float+0x2a0>
 800846e:	455e      	cmp	r6, fp
 8008470:	f200 8105 	bhi.w	800867e <_scanf_float+0x28a>
 8008474:	2501      	movs	r5, #1
 8008476:	4628      	mov	r0, r5
 8008478:	b007      	add	sp, #28
 800847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008482:	2a0d      	cmp	r2, #13
 8008484:	d8e6      	bhi.n	8008454 <_scanf_float+0x60>
 8008486:	a101      	add	r1, pc, #4	; (adr r1, 800848c <_scanf_float+0x98>)
 8008488:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800848c:	080085cb 	.word	0x080085cb
 8008490:	08008455 	.word	0x08008455
 8008494:	08008455 	.word	0x08008455
 8008498:	08008455 	.word	0x08008455
 800849c:	0800862b 	.word	0x0800862b
 80084a0:	08008603 	.word	0x08008603
 80084a4:	08008455 	.word	0x08008455
 80084a8:	08008455 	.word	0x08008455
 80084ac:	080085d9 	.word	0x080085d9
 80084b0:	08008455 	.word	0x08008455
 80084b4:	08008455 	.word	0x08008455
 80084b8:	08008455 	.word	0x08008455
 80084bc:	08008455 	.word	0x08008455
 80084c0:	08008591 	.word	0x08008591
 80084c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084c8:	e7db      	b.n	8008482 <_scanf_float+0x8e>
 80084ca:	290e      	cmp	r1, #14
 80084cc:	d8c2      	bhi.n	8008454 <_scanf_float+0x60>
 80084ce:	a001      	add	r0, pc, #4	; (adr r0, 80084d4 <_scanf_float+0xe0>)
 80084d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084d4:	08008583 	.word	0x08008583
 80084d8:	08008455 	.word	0x08008455
 80084dc:	08008583 	.word	0x08008583
 80084e0:	08008617 	.word	0x08008617
 80084e4:	08008455 	.word	0x08008455
 80084e8:	08008531 	.word	0x08008531
 80084ec:	0800856d 	.word	0x0800856d
 80084f0:	0800856d 	.word	0x0800856d
 80084f4:	0800856d 	.word	0x0800856d
 80084f8:	0800856d 	.word	0x0800856d
 80084fc:	0800856d 	.word	0x0800856d
 8008500:	0800856d 	.word	0x0800856d
 8008504:	0800856d 	.word	0x0800856d
 8008508:	0800856d 	.word	0x0800856d
 800850c:	0800856d 	.word	0x0800856d
 8008510:	2b6e      	cmp	r3, #110	; 0x6e
 8008512:	d809      	bhi.n	8008528 <_scanf_float+0x134>
 8008514:	2b60      	cmp	r3, #96	; 0x60
 8008516:	d8b2      	bhi.n	800847e <_scanf_float+0x8a>
 8008518:	2b54      	cmp	r3, #84	; 0x54
 800851a:	d077      	beq.n	800860c <_scanf_float+0x218>
 800851c:	2b59      	cmp	r3, #89	; 0x59
 800851e:	d199      	bne.n	8008454 <_scanf_float+0x60>
 8008520:	2d07      	cmp	r5, #7
 8008522:	d197      	bne.n	8008454 <_scanf_float+0x60>
 8008524:	2508      	movs	r5, #8
 8008526:	e029      	b.n	800857c <_scanf_float+0x188>
 8008528:	2b74      	cmp	r3, #116	; 0x74
 800852a:	d06f      	beq.n	800860c <_scanf_float+0x218>
 800852c:	2b79      	cmp	r3, #121	; 0x79
 800852e:	e7f6      	b.n	800851e <_scanf_float+0x12a>
 8008530:	6821      	ldr	r1, [r4, #0]
 8008532:	05c8      	lsls	r0, r1, #23
 8008534:	d51a      	bpl.n	800856c <_scanf_float+0x178>
 8008536:	9b02      	ldr	r3, [sp, #8]
 8008538:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800853c:	6021      	str	r1, [r4, #0]
 800853e:	f109 0901 	add.w	r9, r9, #1
 8008542:	b11b      	cbz	r3, 800854c <_scanf_float+0x158>
 8008544:	3b01      	subs	r3, #1
 8008546:	3201      	adds	r2, #1
 8008548:	9302      	str	r3, [sp, #8]
 800854a:	60a2      	str	r2, [r4, #8]
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	3b01      	subs	r3, #1
 8008550:	60a3      	str	r3, [r4, #8]
 8008552:	6923      	ldr	r3, [r4, #16]
 8008554:	3301      	adds	r3, #1
 8008556:	6123      	str	r3, [r4, #16]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3b01      	subs	r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	f340 8084 	ble.w	800866c <_scanf_float+0x278>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	3301      	adds	r3, #1
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	e766      	b.n	800843a <_scanf_float+0x46>
 800856c:	eb1a 0f05 	cmn.w	sl, r5
 8008570:	f47f af70 	bne.w	8008454 <_scanf_float+0x60>
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	f806 3b01 	strb.w	r3, [r6], #1
 8008580:	e7e4      	b.n	800854c <_scanf_float+0x158>
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	0610      	lsls	r0, r2, #24
 8008586:	f57f af65 	bpl.w	8008454 <_scanf_float+0x60>
 800858a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800858e:	e7f4      	b.n	800857a <_scanf_float+0x186>
 8008590:	f1ba 0f00 	cmp.w	sl, #0
 8008594:	d10e      	bne.n	80085b4 <_scanf_float+0x1c0>
 8008596:	f1b9 0f00 	cmp.w	r9, #0
 800859a:	d10e      	bne.n	80085ba <_scanf_float+0x1c6>
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085a6:	d108      	bne.n	80085ba <_scanf_float+0x1c6>
 80085a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085ac:	6022      	str	r2, [r4, #0]
 80085ae:	f04f 0a01 	mov.w	sl, #1
 80085b2:	e7e3      	b.n	800857c <_scanf_float+0x188>
 80085b4:	f1ba 0f02 	cmp.w	sl, #2
 80085b8:	d055      	beq.n	8008666 <_scanf_float+0x272>
 80085ba:	2d01      	cmp	r5, #1
 80085bc:	d002      	beq.n	80085c4 <_scanf_float+0x1d0>
 80085be:	2d04      	cmp	r5, #4
 80085c0:	f47f af48 	bne.w	8008454 <_scanf_float+0x60>
 80085c4:	3501      	adds	r5, #1
 80085c6:	b2ed      	uxtb	r5, r5
 80085c8:	e7d8      	b.n	800857c <_scanf_float+0x188>
 80085ca:	f1ba 0f01 	cmp.w	sl, #1
 80085ce:	f47f af41 	bne.w	8008454 <_scanf_float+0x60>
 80085d2:	f04f 0a02 	mov.w	sl, #2
 80085d6:	e7d1      	b.n	800857c <_scanf_float+0x188>
 80085d8:	b97d      	cbnz	r5, 80085fa <_scanf_float+0x206>
 80085da:	f1b9 0f00 	cmp.w	r9, #0
 80085de:	f47f af3c 	bne.w	800845a <_scanf_float+0x66>
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085ec:	f47f af39 	bne.w	8008462 <_scanf_float+0x6e>
 80085f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085f4:	6022      	str	r2, [r4, #0]
 80085f6:	2501      	movs	r5, #1
 80085f8:	e7c0      	b.n	800857c <_scanf_float+0x188>
 80085fa:	2d03      	cmp	r5, #3
 80085fc:	d0e2      	beq.n	80085c4 <_scanf_float+0x1d0>
 80085fe:	2d05      	cmp	r5, #5
 8008600:	e7de      	b.n	80085c0 <_scanf_float+0x1cc>
 8008602:	2d02      	cmp	r5, #2
 8008604:	f47f af26 	bne.w	8008454 <_scanf_float+0x60>
 8008608:	2503      	movs	r5, #3
 800860a:	e7b7      	b.n	800857c <_scanf_float+0x188>
 800860c:	2d06      	cmp	r5, #6
 800860e:	f47f af21 	bne.w	8008454 <_scanf_float+0x60>
 8008612:	2507      	movs	r5, #7
 8008614:	e7b2      	b.n	800857c <_scanf_float+0x188>
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	0591      	lsls	r1, r2, #22
 800861a:	f57f af1b 	bpl.w	8008454 <_scanf_float+0x60>
 800861e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	f8cd 9004 	str.w	r9, [sp, #4]
 8008628:	e7a8      	b.n	800857c <_scanf_float+0x188>
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008630:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008634:	d006      	beq.n	8008644 <_scanf_float+0x250>
 8008636:	0550      	lsls	r0, r2, #21
 8008638:	f57f af0c 	bpl.w	8008454 <_scanf_float+0x60>
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	f43f af0f 	beq.w	8008462 <_scanf_float+0x6e>
 8008644:	0591      	lsls	r1, r2, #22
 8008646:	bf58      	it	pl
 8008648:	9901      	ldrpl	r1, [sp, #4]
 800864a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800864e:	bf58      	it	pl
 8008650:	eba9 0101 	subpl.w	r1, r9, r1
 8008654:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008658:	bf58      	it	pl
 800865a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	f04f 0900 	mov.w	r9, #0
 8008664:	e78a      	b.n	800857c <_scanf_float+0x188>
 8008666:	f04f 0a03 	mov.w	sl, #3
 800866a:	e787      	b.n	800857c <_scanf_float+0x188>
 800866c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008670:	4639      	mov	r1, r7
 8008672:	4640      	mov	r0, r8
 8008674:	4798      	blx	r3
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aedf 	beq.w	800843a <_scanf_float+0x46>
 800867c:	e6ea      	b.n	8008454 <_scanf_float+0x60>
 800867e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008682:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008686:	463a      	mov	r2, r7
 8008688:	4640      	mov	r0, r8
 800868a:	4798      	blx	r3
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	3b01      	subs	r3, #1
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	e6ec      	b.n	800846e <_scanf_float+0x7a>
 8008694:	1e6b      	subs	r3, r5, #1
 8008696:	2b06      	cmp	r3, #6
 8008698:	d825      	bhi.n	80086e6 <_scanf_float+0x2f2>
 800869a:	2d02      	cmp	r5, #2
 800869c:	d836      	bhi.n	800870c <_scanf_float+0x318>
 800869e:	455e      	cmp	r6, fp
 80086a0:	f67f aee8 	bls.w	8008474 <_scanf_float+0x80>
 80086a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086ac:	463a      	mov	r2, r7
 80086ae:	4640      	mov	r0, r8
 80086b0:	4798      	blx	r3
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	e7f1      	b.n	800869e <_scanf_float+0x2aa>
 80086ba:	9802      	ldr	r0, [sp, #8]
 80086bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086c4:	9002      	str	r0, [sp, #8]
 80086c6:	463a      	mov	r2, r7
 80086c8:	4640      	mov	r0, r8
 80086ca:	4798      	blx	r3
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086d6:	fa5f fa8a 	uxtb.w	sl, sl
 80086da:	f1ba 0f02 	cmp.w	sl, #2
 80086de:	d1ec      	bne.n	80086ba <_scanf_float+0x2c6>
 80086e0:	3d03      	subs	r5, #3
 80086e2:	b2ed      	uxtb	r5, r5
 80086e4:	1b76      	subs	r6, r6, r5
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	05da      	lsls	r2, r3, #23
 80086ea:	d52f      	bpl.n	800874c <_scanf_float+0x358>
 80086ec:	055b      	lsls	r3, r3, #21
 80086ee:	d510      	bpl.n	8008712 <_scanf_float+0x31e>
 80086f0:	455e      	cmp	r6, fp
 80086f2:	f67f aebf 	bls.w	8008474 <_scanf_float+0x80>
 80086f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086fe:	463a      	mov	r2, r7
 8008700:	4640      	mov	r0, r8
 8008702:	4798      	blx	r3
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	3b01      	subs	r3, #1
 8008708:	6123      	str	r3, [r4, #16]
 800870a:	e7f1      	b.n	80086f0 <_scanf_float+0x2fc>
 800870c:	46aa      	mov	sl, r5
 800870e:	9602      	str	r6, [sp, #8]
 8008710:	e7df      	b.n	80086d2 <_scanf_float+0x2de>
 8008712:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	2965      	cmp	r1, #101	; 0x65
 800871a:	f103 33ff 	add.w	r3, r3, #4294967295
 800871e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008722:	6123      	str	r3, [r4, #16]
 8008724:	d00c      	beq.n	8008740 <_scanf_float+0x34c>
 8008726:	2945      	cmp	r1, #69	; 0x45
 8008728:	d00a      	beq.n	8008740 <_scanf_float+0x34c>
 800872a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800872e:	463a      	mov	r2, r7
 8008730:	4640      	mov	r0, r8
 8008732:	4798      	blx	r3
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800873a:	3b01      	subs	r3, #1
 800873c:	1eb5      	subs	r5, r6, #2
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008744:	463a      	mov	r2, r7
 8008746:	4640      	mov	r0, r8
 8008748:	4798      	blx	r3
 800874a:	462e      	mov	r6, r5
 800874c:	6825      	ldr	r5, [r4, #0]
 800874e:	f015 0510 	ands.w	r5, r5, #16
 8008752:	d159      	bne.n	8008808 <_scanf_float+0x414>
 8008754:	7035      	strb	r5, [r6, #0]
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800875c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008760:	d11b      	bne.n	800879a <_scanf_float+0x3a6>
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	454b      	cmp	r3, r9
 8008766:	eba3 0209 	sub.w	r2, r3, r9
 800876a:	d123      	bne.n	80087b4 <_scanf_float+0x3c0>
 800876c:	2200      	movs	r2, #0
 800876e:	4659      	mov	r1, fp
 8008770:	4640      	mov	r0, r8
 8008772:	f000 ff57 	bl	8009624 <_strtod_r>
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	f012 0f02 	tst.w	r2, #2
 800877e:	ec57 6b10 	vmov	r6, r7, d0
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	d021      	beq.n	80087ca <_scanf_float+0x3d6>
 8008786:	9903      	ldr	r1, [sp, #12]
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	600a      	str	r2, [r1, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	e9c3 6700 	strd	r6, r7, [r3]
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60e3      	str	r3, [r4, #12]
 8008798:	e66d      	b.n	8008476 <_scanf_float+0x82>
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0e5      	beq.n	800876c <_scanf_float+0x378>
 80087a0:	9905      	ldr	r1, [sp, #20]
 80087a2:	230a      	movs	r3, #10
 80087a4:	462a      	mov	r2, r5
 80087a6:	3101      	adds	r1, #1
 80087a8:	4640      	mov	r0, r8
 80087aa:	f000 ffc3 	bl	8009734 <_strtol_r>
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	9e05      	ldr	r6, [sp, #20]
 80087b2:	1ac2      	subs	r2, r0, r3
 80087b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087b8:	429e      	cmp	r6, r3
 80087ba:	bf28      	it	cs
 80087bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087c0:	4912      	ldr	r1, [pc, #72]	; (800880c <_scanf_float+0x418>)
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f8a6 	bl	8008914 <siprintf>
 80087c8:	e7d0      	b.n	800876c <_scanf_float+0x378>
 80087ca:	9903      	ldr	r1, [sp, #12]
 80087cc:	f012 0f04 	tst.w	r2, #4
 80087d0:	f103 0204 	add.w	r2, r3, #4
 80087d4:	600a      	str	r2, [r1, #0]
 80087d6:	d1d9      	bne.n	800878c <_scanf_float+0x398>
 80087d8:	f8d3 8000 	ldr.w	r8, [r3]
 80087dc:	ee10 2a10 	vmov	r2, s0
 80087e0:	ee10 0a10 	vmov	r0, s0
 80087e4:	463b      	mov	r3, r7
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f8 f9c0 	bl	8000b6c <__aeabi_dcmpun>
 80087ec:	b128      	cbz	r0, 80087fa <_scanf_float+0x406>
 80087ee:	4808      	ldr	r0, [pc, #32]	; (8008810 <_scanf_float+0x41c>)
 80087f0:	f000 f88a 	bl	8008908 <nanf>
 80087f4:	ed88 0a00 	vstr	s0, [r8]
 80087f8:	e7cb      	b.n	8008792 <_scanf_float+0x39e>
 80087fa:	4630      	mov	r0, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	f7f8 fa13 	bl	8000c28 <__aeabi_d2f>
 8008802:	f8c8 0000 	str.w	r0, [r8]
 8008806:	e7c4      	b.n	8008792 <_scanf_float+0x39e>
 8008808:	2500      	movs	r5, #0
 800880a:	e634      	b.n	8008476 <_scanf_float+0x82>
 800880c:	08027ee0 	.word	0x08027ee0
 8008810:	080282e8 	.word	0x080282e8

08008814 <cleanup_glue>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	460c      	mov	r4, r1
 8008818:	6809      	ldr	r1, [r1, #0]
 800881a:	4605      	mov	r5, r0
 800881c:	b109      	cbz	r1, 8008822 <cleanup_glue+0xe>
 800881e:	f7ff fff9 	bl	8008814 <cleanup_glue>
 8008822:	4621      	mov	r1, r4
 8008824:	4628      	mov	r0, r5
 8008826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800882a:	f002 bf69 	b.w	800b700 <_free_r>
	...

08008830 <_reclaim_reent>:
 8008830:	4b2c      	ldr	r3, [pc, #176]	; (80088e4 <_reclaim_reent+0xb4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4283      	cmp	r3, r0
 8008836:	b570      	push	{r4, r5, r6, lr}
 8008838:	4604      	mov	r4, r0
 800883a:	d051      	beq.n	80088e0 <_reclaim_reent+0xb0>
 800883c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800883e:	b143      	cbz	r3, 8008852 <_reclaim_reent+0x22>
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d14a      	bne.n	80088dc <_reclaim_reent+0xac>
 8008846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008848:	6819      	ldr	r1, [r3, #0]
 800884a:	b111      	cbz	r1, 8008852 <_reclaim_reent+0x22>
 800884c:	4620      	mov	r0, r4
 800884e:	f002 ff57 	bl	800b700 <_free_r>
 8008852:	6961      	ldr	r1, [r4, #20]
 8008854:	b111      	cbz	r1, 800885c <_reclaim_reent+0x2c>
 8008856:	4620      	mov	r0, r4
 8008858:	f002 ff52 	bl	800b700 <_free_r>
 800885c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800885e:	b111      	cbz	r1, 8008866 <_reclaim_reent+0x36>
 8008860:	4620      	mov	r0, r4
 8008862:	f002 ff4d 	bl	800b700 <_free_r>
 8008866:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008868:	b111      	cbz	r1, 8008870 <_reclaim_reent+0x40>
 800886a:	4620      	mov	r0, r4
 800886c:	f002 ff48 	bl	800b700 <_free_r>
 8008870:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008872:	b111      	cbz	r1, 800887a <_reclaim_reent+0x4a>
 8008874:	4620      	mov	r0, r4
 8008876:	f002 ff43 	bl	800b700 <_free_r>
 800887a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800887c:	b111      	cbz	r1, 8008884 <_reclaim_reent+0x54>
 800887e:	4620      	mov	r0, r4
 8008880:	f002 ff3e 	bl	800b700 <_free_r>
 8008884:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008886:	b111      	cbz	r1, 800888e <_reclaim_reent+0x5e>
 8008888:	4620      	mov	r0, r4
 800888a:	f002 ff39 	bl	800b700 <_free_r>
 800888e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008890:	b111      	cbz	r1, 8008898 <_reclaim_reent+0x68>
 8008892:	4620      	mov	r0, r4
 8008894:	f002 ff34 	bl	800b700 <_free_r>
 8008898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800889a:	b111      	cbz	r1, 80088a2 <_reclaim_reent+0x72>
 800889c:	4620      	mov	r0, r4
 800889e:	f002 ff2f 	bl	800b700 <_free_r>
 80088a2:	69a3      	ldr	r3, [r4, #24]
 80088a4:	b1e3      	cbz	r3, 80088e0 <_reclaim_reent+0xb0>
 80088a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088a8:	4620      	mov	r0, r4
 80088aa:	4798      	blx	r3
 80088ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80088ae:	b1b9      	cbz	r1, 80088e0 <_reclaim_reent+0xb0>
 80088b0:	4620      	mov	r0, r4
 80088b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088b6:	f7ff bfad 	b.w	8008814 <cleanup_glue>
 80088ba:	5949      	ldr	r1, [r1, r5]
 80088bc:	b941      	cbnz	r1, 80088d0 <_reclaim_reent+0xa0>
 80088be:	3504      	adds	r5, #4
 80088c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088c2:	2d80      	cmp	r5, #128	; 0x80
 80088c4:	68d9      	ldr	r1, [r3, #12]
 80088c6:	d1f8      	bne.n	80088ba <_reclaim_reent+0x8a>
 80088c8:	4620      	mov	r0, r4
 80088ca:	f002 ff19 	bl	800b700 <_free_r>
 80088ce:	e7ba      	b.n	8008846 <_reclaim_reent+0x16>
 80088d0:	680e      	ldr	r6, [r1, #0]
 80088d2:	4620      	mov	r0, r4
 80088d4:	f002 ff14 	bl	800b700 <_free_r>
 80088d8:	4631      	mov	r1, r6
 80088da:	e7ef      	b.n	80088bc <_reclaim_reent+0x8c>
 80088dc:	2500      	movs	r5, #0
 80088de:	e7ef      	b.n	80088c0 <_reclaim_reent+0x90>
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	bf00      	nop
 80088e4:	20000010 	.word	0x20000010

080088e8 <_sbrk_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d06      	ldr	r5, [pc, #24]	; (8008904 <_sbrk_r+0x1c>)
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	f7f9 fa14 	bl	8001d20 <_sbrk>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_sbrk_r+0x1a>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_sbrk_r+0x1a>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	20003b98 	.word	0x20003b98

08008908 <nanf>:
 8008908:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008910 <nanf+0x8>
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	7fc00000 	.word	0x7fc00000

08008914 <siprintf>:
 8008914:	b40e      	push	{r1, r2, r3}
 8008916:	b500      	push	{lr}
 8008918:	b09c      	sub	sp, #112	; 0x70
 800891a:	ab1d      	add	r3, sp, #116	; 0x74
 800891c:	9002      	str	r0, [sp, #8]
 800891e:	9006      	str	r0, [sp, #24]
 8008920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008924:	4809      	ldr	r0, [pc, #36]	; (800894c <siprintf+0x38>)
 8008926:	9107      	str	r1, [sp, #28]
 8008928:	9104      	str	r1, [sp, #16]
 800892a:	4909      	ldr	r1, [pc, #36]	; (8008950 <siprintf+0x3c>)
 800892c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008930:	9105      	str	r1, [sp, #20]
 8008932:	6800      	ldr	r0, [r0, #0]
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	a902      	add	r1, sp, #8
 8008938:	f002 ff8a 	bl	800b850 <_svfiprintf_r>
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	b01c      	add	sp, #112	; 0x70
 8008944:	f85d eb04 	ldr.w	lr, [sp], #4
 8008948:	b003      	add	sp, #12
 800894a:	4770      	bx	lr
 800894c:	20000010 	.word	0x20000010
 8008950:	ffff0208 	.word	0xffff0208

08008954 <__sread>:
 8008954:	b510      	push	{r4, lr}
 8008956:	460c      	mov	r4, r1
 8008958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895c:	f003 f878 	bl	800ba50 <_read_r>
 8008960:	2800      	cmp	r0, #0
 8008962:	bfab      	itete	ge
 8008964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008966:	89a3      	ldrhlt	r3, [r4, #12]
 8008968:	181b      	addge	r3, r3, r0
 800896a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800896e:	bfac      	ite	ge
 8008970:	6563      	strge	r3, [r4, #84]	; 0x54
 8008972:	81a3      	strhlt	r3, [r4, #12]
 8008974:	bd10      	pop	{r4, pc}

08008976 <__swrite>:
 8008976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897a:	461f      	mov	r7, r3
 800897c:	898b      	ldrh	r3, [r1, #12]
 800897e:	05db      	lsls	r3, r3, #23
 8008980:	4605      	mov	r5, r0
 8008982:	460c      	mov	r4, r1
 8008984:	4616      	mov	r6, r2
 8008986:	d505      	bpl.n	8008994 <__swrite+0x1e>
 8008988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898c:	2302      	movs	r3, #2
 800898e:	2200      	movs	r2, #0
 8008990:	f002 f9a6 	bl	800ace0 <_lseek_r>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800899a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	4632      	mov	r2, r6
 80089a2:	463b      	mov	r3, r7
 80089a4:	4628      	mov	r0, r5
 80089a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089aa:	f000 bec5 	b.w	8009738 <_write_r>

080089ae <__sseek>:
 80089ae:	b510      	push	{r4, lr}
 80089b0:	460c      	mov	r4, r1
 80089b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b6:	f002 f993 	bl	800ace0 <_lseek_r>
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	bf15      	itete	ne
 80089c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089ca:	81a3      	strheq	r3, [r4, #12]
 80089cc:	bf18      	it	ne
 80089ce:	81a3      	strhne	r3, [r4, #12]
 80089d0:	bd10      	pop	{r4, pc}

080089d2 <__sclose>:
 80089d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d6:	f000 bec1 	b.w	800975c <_close_r>

080089da <sulp>:
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	4604      	mov	r4, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	ec45 4b10 	vmov	d0, r4, r5
 80089e4:	4616      	mov	r6, r2
 80089e6:	f002 fd25 	bl	800b434 <__ulp>
 80089ea:	ec51 0b10 	vmov	r0, r1, d0
 80089ee:	b17e      	cbz	r6, 8008a10 <sulp+0x36>
 80089f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dd09      	ble.n	8008a10 <sulp+0x36>
 80089fc:	051b      	lsls	r3, r3, #20
 80089fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a02:	2400      	movs	r4, #0
 8008a04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a08:	4622      	mov	r2, r4
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	f7f7 fe14 	bl	8000638 <__aeabi_dmul>
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	0000      	movs	r0, r0
 8008a14:	0000      	movs	r0, r0
	...

08008a18 <_strtod_l>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	ed2d 8b02 	vpush	{d8}
 8008a20:	b09d      	sub	sp, #116	; 0x74
 8008a22:	461f      	mov	r7, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	9318      	str	r3, [sp, #96]	; 0x60
 8008a28:	4ba2      	ldr	r3, [pc, #648]	; (8008cb4 <_strtod_l+0x29c>)
 8008a2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	9305      	str	r3, [sp, #20]
 8008a30:	4604      	mov	r4, r0
 8008a32:	4618      	mov	r0, r3
 8008a34:	4688      	mov	r8, r1
 8008a36:	f7f7 fbeb 	bl	8000210 <strlen>
 8008a3a:	f04f 0a00 	mov.w	sl, #0
 8008a3e:	4605      	mov	r5, r0
 8008a40:	f04f 0b00 	mov.w	fp, #0
 8008a44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a4e:	d04e      	beq.n	8008aee <_strtod_l+0xd6>
 8008a50:	d83b      	bhi.n	8008aca <_strtod_l+0xb2>
 8008a52:	2a0d      	cmp	r2, #13
 8008a54:	d834      	bhi.n	8008ac0 <_strtod_l+0xa8>
 8008a56:	2a08      	cmp	r2, #8
 8008a58:	d834      	bhi.n	8008ac4 <_strtod_l+0xac>
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	d03e      	beq.n	8008adc <_strtod_l+0xc4>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	930a      	str	r3, [sp, #40]	; 0x28
 8008a62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a64:	7833      	ldrb	r3, [r6, #0]
 8008a66:	2b30      	cmp	r3, #48	; 0x30
 8008a68:	f040 80b0 	bne.w	8008bcc <_strtod_l+0x1b4>
 8008a6c:	7873      	ldrb	r3, [r6, #1]
 8008a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a72:	2b58      	cmp	r3, #88	; 0x58
 8008a74:	d168      	bne.n	8008b48 <_strtod_l+0x130>
 8008a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	ab18      	add	r3, sp, #96	; 0x60
 8008a7c:	9702      	str	r7, [sp, #8]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	4a8d      	ldr	r2, [pc, #564]	; (8008cb8 <_strtod_l+0x2a0>)
 8008a82:	ab19      	add	r3, sp, #100	; 0x64
 8008a84:	a917      	add	r1, sp, #92	; 0x5c
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 fe1e 	bl	800a6c8 <__gethex>
 8008a8c:	f010 0707 	ands.w	r7, r0, #7
 8008a90:	4605      	mov	r5, r0
 8008a92:	d005      	beq.n	8008aa0 <_strtod_l+0x88>
 8008a94:	2f06      	cmp	r7, #6
 8008a96:	d12c      	bne.n	8008af2 <_strtod_l+0xda>
 8008a98:	3601      	adds	r6, #1
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 8590 	bne.w	80095c8 <_strtod_l+0xbb0>
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aaa:	b1eb      	cbz	r3, 8008ae8 <_strtod_l+0xd0>
 8008aac:	4652      	mov	r2, sl
 8008aae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ab2:	ec43 2b10 	vmov	d0, r2, r3
 8008ab6:	b01d      	add	sp, #116	; 0x74
 8008ab8:	ecbd 8b02 	vpop	{d8}
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	2a20      	cmp	r2, #32
 8008ac2:	d1cc      	bne.n	8008a5e <_strtod_l+0x46>
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ac8:	e7be      	b.n	8008a48 <_strtod_l+0x30>
 8008aca:	2a2d      	cmp	r2, #45	; 0x2d
 8008acc:	d1c7      	bne.n	8008a5e <_strtod_l+0x46>
 8008ace:	2201      	movs	r2, #1
 8008ad0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1c2      	bne.n	8008a62 <_strtod_l+0x4a>
 8008adc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ade:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f040 856e 	bne.w	80095c4 <_strtod_l+0xbac>
 8008ae8:	4652      	mov	r2, sl
 8008aea:	465b      	mov	r3, fp
 8008aec:	e7e1      	b.n	8008ab2 <_strtod_l+0x9a>
 8008aee:	2200      	movs	r2, #0
 8008af0:	e7ee      	b.n	8008ad0 <_strtod_l+0xb8>
 8008af2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008af4:	b13a      	cbz	r2, 8008b06 <_strtod_l+0xee>
 8008af6:	2135      	movs	r1, #53	; 0x35
 8008af8:	a81a      	add	r0, sp, #104	; 0x68
 8008afa:	f002 fda6 	bl	800b64a <__copybits>
 8008afe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b00:	4620      	mov	r0, r4
 8008b02:	f002 f965 	bl	800add0 <_Bfree>
 8008b06:	3f01      	subs	r7, #1
 8008b08:	2f04      	cmp	r7, #4
 8008b0a:	d806      	bhi.n	8008b1a <_strtod_l+0x102>
 8008b0c:	e8df f007 	tbb	[pc, r7]
 8008b10:	1714030a 	.word	0x1714030a
 8008b14:	0a          	.byte	0x0a
 8008b15:	00          	.byte	0x00
 8008b16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008b1a:	0728      	lsls	r0, r5, #28
 8008b1c:	d5c0      	bpl.n	8008aa0 <_strtod_l+0x88>
 8008b1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b22:	e7bd      	b.n	8008aa0 <_strtod_l+0x88>
 8008b24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008b28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b36:	e7f0      	b.n	8008b1a <_strtod_l+0x102>
 8008b38:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008cbc <_strtod_l+0x2a4>
 8008b3c:	e7ed      	b.n	8008b1a <_strtod_l+0x102>
 8008b3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b42:	f04f 3aff 	mov.w	sl, #4294967295
 8008b46:	e7e8      	b.n	8008b1a <_strtod_l+0x102>
 8008b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	2b30      	cmp	r3, #48	; 0x30
 8008b52:	d0f9      	beq.n	8008b48 <_strtod_l+0x130>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0a3      	beq.n	8008aa0 <_strtod_l+0x88>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f04f 0900 	mov.w	r9, #0
 8008b5e:	9304      	str	r3, [sp, #16]
 8008b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b62:	9308      	str	r3, [sp, #32]
 8008b64:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b68:	464f      	mov	r7, r9
 8008b6a:	220a      	movs	r2, #10
 8008b6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b6e:	7806      	ldrb	r6, [r0, #0]
 8008b70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b74:	b2d9      	uxtb	r1, r3
 8008b76:	2909      	cmp	r1, #9
 8008b78:	d92a      	bls.n	8008bd0 <_strtod_l+0x1b8>
 8008b7a:	9905      	ldr	r1, [sp, #20]
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	f002 ff83 	bl	800ba88 <strncmp>
 8008b82:	b398      	cbz	r0, 8008bec <_strtod_l+0x1d4>
 8008b84:	2000      	movs	r0, #0
 8008b86:	4632      	mov	r2, r6
 8008b88:	463d      	mov	r5, r7
 8008b8a:	9005      	str	r0, [sp, #20]
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2a65      	cmp	r2, #101	; 0x65
 8008b90:	d001      	beq.n	8008b96 <_strtod_l+0x17e>
 8008b92:	2a45      	cmp	r2, #69	; 0x45
 8008b94:	d118      	bne.n	8008bc8 <_strtod_l+0x1b0>
 8008b96:	b91d      	cbnz	r5, 8008ba0 <_strtod_l+0x188>
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	4302      	orrs	r2, r0
 8008b9c:	d09e      	beq.n	8008adc <_strtod_l+0xc4>
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008ba4:	f108 0201 	add.w	r2, r8, #1
 8008ba8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008baa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008bae:	2a2b      	cmp	r2, #43	; 0x2b
 8008bb0:	d075      	beq.n	8008c9e <_strtod_l+0x286>
 8008bb2:	2a2d      	cmp	r2, #45	; 0x2d
 8008bb4:	d07b      	beq.n	8008cae <_strtod_l+0x296>
 8008bb6:	f04f 0c00 	mov.w	ip, #0
 8008bba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008bbe:	2909      	cmp	r1, #9
 8008bc0:	f240 8082 	bls.w	8008cc8 <_strtod_l+0x2b0>
 8008bc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008bc8:	2600      	movs	r6, #0
 8008bca:	e09d      	b.n	8008d08 <_strtod_l+0x2f0>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e7c4      	b.n	8008b5a <_strtod_l+0x142>
 8008bd0:	2f08      	cmp	r7, #8
 8008bd2:	bfd8      	it	le
 8008bd4:	9907      	ldrle	r1, [sp, #28]
 8008bd6:	f100 0001 	add.w	r0, r0, #1
 8008bda:	bfda      	itte	le
 8008bdc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008be0:	9307      	strle	r3, [sp, #28]
 8008be2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008be6:	3701      	adds	r7, #1
 8008be8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008bea:	e7bf      	b.n	8008b6c <_strtod_l+0x154>
 8008bec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bee:	195a      	adds	r2, r3, r5
 8008bf0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bf2:	5d5a      	ldrb	r2, [r3, r5]
 8008bf4:	2f00      	cmp	r7, #0
 8008bf6:	d037      	beq.n	8008c68 <_strtod_l+0x250>
 8008bf8:	9005      	str	r0, [sp, #20]
 8008bfa:	463d      	mov	r5, r7
 8008bfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c00:	2b09      	cmp	r3, #9
 8008c02:	d912      	bls.n	8008c2a <_strtod_l+0x212>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e7c2      	b.n	8008b8e <_strtod_l+0x176>
 8008c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c0e:	785a      	ldrb	r2, [r3, #1]
 8008c10:	3001      	adds	r0, #1
 8008c12:	2a30      	cmp	r2, #48	; 0x30
 8008c14:	d0f8      	beq.n	8008c08 <_strtod_l+0x1f0>
 8008c16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	f200 84d9 	bhi.w	80095d2 <_strtod_l+0xbba>
 8008c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c22:	9005      	str	r0, [sp, #20]
 8008c24:	2000      	movs	r0, #0
 8008c26:	9308      	str	r3, [sp, #32]
 8008c28:	4605      	mov	r5, r0
 8008c2a:	3a30      	subs	r2, #48	; 0x30
 8008c2c:	f100 0301 	add.w	r3, r0, #1
 8008c30:	d014      	beq.n	8008c5c <_strtod_l+0x244>
 8008c32:	9905      	ldr	r1, [sp, #20]
 8008c34:	4419      	add	r1, r3
 8008c36:	9105      	str	r1, [sp, #20]
 8008c38:	462b      	mov	r3, r5
 8008c3a:	eb00 0e05 	add.w	lr, r0, r5
 8008c3e:	210a      	movs	r1, #10
 8008c40:	4573      	cmp	r3, lr
 8008c42:	d113      	bne.n	8008c6c <_strtod_l+0x254>
 8008c44:	182b      	adds	r3, r5, r0
 8008c46:	2b08      	cmp	r3, #8
 8008c48:	f105 0501 	add.w	r5, r5, #1
 8008c4c:	4405      	add	r5, r0
 8008c4e:	dc1c      	bgt.n	8008c8a <_strtod_l+0x272>
 8008c50:	9907      	ldr	r1, [sp, #28]
 8008c52:	230a      	movs	r3, #10
 8008c54:	fb03 2301 	mla	r3, r3, r1, r2
 8008c58:	9307      	str	r3, [sp, #28]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c5e:	1c51      	adds	r1, r2, #1
 8008c60:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c62:	7852      	ldrb	r2, [r2, #1]
 8008c64:	4618      	mov	r0, r3
 8008c66:	e7c9      	b.n	8008bfc <_strtod_l+0x1e4>
 8008c68:	4638      	mov	r0, r7
 8008c6a:	e7d2      	b.n	8008c12 <_strtod_l+0x1fa>
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	dc04      	bgt.n	8008c7a <_strtod_l+0x262>
 8008c70:	9e07      	ldr	r6, [sp, #28]
 8008c72:	434e      	muls	r6, r1
 8008c74:	9607      	str	r6, [sp, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	e7e2      	b.n	8008c40 <_strtod_l+0x228>
 8008c7a:	f103 0c01 	add.w	ip, r3, #1
 8008c7e:	f1bc 0f10 	cmp.w	ip, #16
 8008c82:	bfd8      	it	le
 8008c84:	fb01 f909 	mulle.w	r9, r1, r9
 8008c88:	e7f5      	b.n	8008c76 <_strtod_l+0x25e>
 8008c8a:	2d10      	cmp	r5, #16
 8008c8c:	bfdc      	itt	le
 8008c8e:	230a      	movle	r3, #10
 8008c90:	fb03 2909 	mlale	r9, r3, r9, r2
 8008c94:	e7e1      	b.n	8008c5a <_strtod_l+0x242>
 8008c96:	2300      	movs	r3, #0
 8008c98:	9305      	str	r3, [sp, #20]
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e77c      	b.n	8008b98 <_strtod_l+0x180>
 8008c9e:	f04f 0c00 	mov.w	ip, #0
 8008ca2:	f108 0202 	add.w	r2, r8, #2
 8008ca6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ca8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008cac:	e785      	b.n	8008bba <_strtod_l+0x1a2>
 8008cae:	f04f 0c01 	mov.w	ip, #1
 8008cb2:	e7f6      	b.n	8008ca2 <_strtod_l+0x28a>
 8008cb4:	08028130 	.word	0x08028130
 8008cb8:	08027ee8 	.word	0x08027ee8
 8008cbc:	7ff00000 	.word	0x7ff00000
 8008cc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cc2:	1c51      	adds	r1, r2, #1
 8008cc4:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cc6:	7852      	ldrb	r2, [r2, #1]
 8008cc8:	2a30      	cmp	r2, #48	; 0x30
 8008cca:	d0f9      	beq.n	8008cc0 <_strtod_l+0x2a8>
 8008ccc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008cd0:	2908      	cmp	r1, #8
 8008cd2:	f63f af79 	bhi.w	8008bc8 <_strtod_l+0x1b0>
 8008cd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008cda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cdc:	9206      	str	r2, [sp, #24]
 8008cde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ce0:	1c51      	adds	r1, r2, #1
 8008ce2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ce4:	7852      	ldrb	r2, [r2, #1]
 8008ce6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008cea:	2e09      	cmp	r6, #9
 8008cec:	d937      	bls.n	8008d5e <_strtod_l+0x346>
 8008cee:	9e06      	ldr	r6, [sp, #24]
 8008cf0:	1b89      	subs	r1, r1, r6
 8008cf2:	2908      	cmp	r1, #8
 8008cf4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008cf8:	dc02      	bgt.n	8008d00 <_strtod_l+0x2e8>
 8008cfa:	4576      	cmp	r6, lr
 8008cfc:	bfa8      	it	ge
 8008cfe:	4676      	movge	r6, lr
 8008d00:	f1bc 0f00 	cmp.w	ip, #0
 8008d04:	d000      	beq.n	8008d08 <_strtod_l+0x2f0>
 8008d06:	4276      	negs	r6, r6
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	d14d      	bne.n	8008da8 <_strtod_l+0x390>
 8008d0c:	9904      	ldr	r1, [sp, #16]
 8008d0e:	4301      	orrs	r1, r0
 8008d10:	f47f aec6 	bne.w	8008aa0 <_strtod_l+0x88>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f aee1 	bne.w	8008adc <_strtod_l+0xc4>
 8008d1a:	2a69      	cmp	r2, #105	; 0x69
 8008d1c:	d027      	beq.n	8008d6e <_strtod_l+0x356>
 8008d1e:	dc24      	bgt.n	8008d6a <_strtod_l+0x352>
 8008d20:	2a49      	cmp	r2, #73	; 0x49
 8008d22:	d024      	beq.n	8008d6e <_strtod_l+0x356>
 8008d24:	2a4e      	cmp	r2, #78	; 0x4e
 8008d26:	f47f aed9 	bne.w	8008adc <_strtod_l+0xc4>
 8008d2a:	499f      	ldr	r1, [pc, #636]	; (8008fa8 <_strtod_l+0x590>)
 8008d2c:	a817      	add	r0, sp, #92	; 0x5c
 8008d2e:	f001 ff23 	bl	800ab78 <__match>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	f43f aed2 	beq.w	8008adc <_strtod_l+0xc4>
 8008d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b28      	cmp	r3, #40	; 0x28
 8008d3e:	d12d      	bne.n	8008d9c <_strtod_l+0x384>
 8008d40:	499a      	ldr	r1, [pc, #616]	; (8008fac <_strtod_l+0x594>)
 8008d42:	aa1a      	add	r2, sp, #104	; 0x68
 8008d44:	a817      	add	r0, sp, #92	; 0x5c
 8008d46:	f001 ff2b 	bl	800aba0 <__hexnan>
 8008d4a:	2805      	cmp	r0, #5
 8008d4c:	d126      	bne.n	8008d9c <_strtod_l+0x384>
 8008d4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d5c:	e6a0      	b.n	8008aa0 <_strtod_l+0x88>
 8008d5e:	210a      	movs	r1, #10
 8008d60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008d64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d68:	e7b9      	b.n	8008cde <_strtod_l+0x2c6>
 8008d6a:	2a6e      	cmp	r2, #110	; 0x6e
 8008d6c:	e7db      	b.n	8008d26 <_strtod_l+0x30e>
 8008d6e:	4990      	ldr	r1, [pc, #576]	; (8008fb0 <_strtod_l+0x598>)
 8008d70:	a817      	add	r0, sp, #92	; 0x5c
 8008d72:	f001 ff01 	bl	800ab78 <__match>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f43f aeb0 	beq.w	8008adc <_strtod_l+0xc4>
 8008d7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d7e:	498d      	ldr	r1, [pc, #564]	; (8008fb4 <_strtod_l+0x59c>)
 8008d80:	3b01      	subs	r3, #1
 8008d82:	a817      	add	r0, sp, #92	; 0x5c
 8008d84:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d86:	f001 fef7 	bl	800ab78 <__match>
 8008d8a:	b910      	cbnz	r0, 8008d92 <_strtod_l+0x37a>
 8008d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d8e:	3301      	adds	r3, #1
 8008d90:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d92:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008fc4 <_strtod_l+0x5ac>
 8008d96:	f04f 0a00 	mov.w	sl, #0
 8008d9a:	e681      	b.n	8008aa0 <_strtod_l+0x88>
 8008d9c:	4886      	ldr	r0, [pc, #536]	; (8008fb8 <_strtod_l+0x5a0>)
 8008d9e:	f002 fe6b 	bl	800ba78 <nan>
 8008da2:	ec5b ab10 	vmov	sl, fp, d0
 8008da6:	e67b      	b.n	8008aa0 <_strtod_l+0x88>
 8008da8:	9b05      	ldr	r3, [sp, #20]
 8008daa:	9807      	ldr	r0, [sp, #28]
 8008dac:	1af3      	subs	r3, r6, r3
 8008dae:	2f00      	cmp	r7, #0
 8008db0:	bf08      	it	eq
 8008db2:	462f      	moveq	r7, r5
 8008db4:	2d10      	cmp	r5, #16
 8008db6:	9306      	str	r3, [sp, #24]
 8008db8:	46a8      	mov	r8, r5
 8008dba:	bfa8      	it	ge
 8008dbc:	f04f 0810 	movge.w	r8, #16
 8008dc0:	f7f7 fbc0 	bl	8000544 <__aeabi_ui2d>
 8008dc4:	2d09      	cmp	r5, #9
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	468b      	mov	fp, r1
 8008dca:	dd13      	ble.n	8008df4 <_strtod_l+0x3dc>
 8008dcc:	4b7b      	ldr	r3, [pc, #492]	; (8008fbc <_strtod_l+0x5a4>)
 8008dce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008dd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008dd6:	f7f7 fc2f 	bl	8000638 <__aeabi_dmul>
 8008dda:	4682      	mov	sl, r0
 8008ddc:	4648      	mov	r0, r9
 8008dde:	468b      	mov	fp, r1
 8008de0:	f7f7 fbb0 	bl	8000544 <__aeabi_ui2d>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4650      	mov	r0, sl
 8008dea:	4659      	mov	r1, fp
 8008dec:	f7f7 fa6e 	bl	80002cc <__adddf3>
 8008df0:	4682      	mov	sl, r0
 8008df2:	468b      	mov	fp, r1
 8008df4:	2d0f      	cmp	r5, #15
 8008df6:	dc38      	bgt.n	8008e6a <_strtod_l+0x452>
 8008df8:	9b06      	ldr	r3, [sp, #24]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f43f ae50 	beq.w	8008aa0 <_strtod_l+0x88>
 8008e00:	dd24      	ble.n	8008e4c <_strtod_l+0x434>
 8008e02:	2b16      	cmp	r3, #22
 8008e04:	dc0b      	bgt.n	8008e1e <_strtod_l+0x406>
 8008e06:	496d      	ldr	r1, [pc, #436]	; (8008fbc <_strtod_l+0x5a4>)
 8008e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e10:	4652      	mov	r2, sl
 8008e12:	465b      	mov	r3, fp
 8008e14:	f7f7 fc10 	bl	8000638 <__aeabi_dmul>
 8008e18:	4682      	mov	sl, r0
 8008e1a:	468b      	mov	fp, r1
 8008e1c:	e640      	b.n	8008aa0 <_strtod_l+0x88>
 8008e1e:	9a06      	ldr	r2, [sp, #24]
 8008e20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e24:	4293      	cmp	r3, r2
 8008e26:	db20      	blt.n	8008e6a <_strtod_l+0x452>
 8008e28:	4c64      	ldr	r4, [pc, #400]	; (8008fbc <_strtod_l+0x5a4>)
 8008e2a:	f1c5 050f 	rsb	r5, r5, #15
 8008e2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e32:	4652      	mov	r2, sl
 8008e34:	465b      	mov	r3, fp
 8008e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e3a:	f7f7 fbfd 	bl	8000638 <__aeabi_dmul>
 8008e3e:	9b06      	ldr	r3, [sp, #24]
 8008e40:	1b5d      	subs	r5, r3, r5
 8008e42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e4a:	e7e3      	b.n	8008e14 <_strtod_l+0x3fc>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	3316      	adds	r3, #22
 8008e50:	db0b      	blt.n	8008e6a <_strtod_l+0x452>
 8008e52:	9b05      	ldr	r3, [sp, #20]
 8008e54:	1b9e      	subs	r6, r3, r6
 8008e56:	4b59      	ldr	r3, [pc, #356]	; (8008fbc <_strtod_l+0x5a4>)
 8008e58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	f7f7 fd12 	bl	800088c <__aeabi_ddiv>
 8008e68:	e7d6      	b.n	8008e18 <_strtod_l+0x400>
 8008e6a:	9b06      	ldr	r3, [sp, #24]
 8008e6c:	eba5 0808 	sub.w	r8, r5, r8
 8008e70:	4498      	add	r8, r3
 8008e72:	f1b8 0f00 	cmp.w	r8, #0
 8008e76:	dd74      	ble.n	8008f62 <_strtod_l+0x54a>
 8008e78:	f018 030f 	ands.w	r3, r8, #15
 8008e7c:	d00a      	beq.n	8008e94 <_strtod_l+0x47c>
 8008e7e:	494f      	ldr	r1, [pc, #316]	; (8008fbc <_strtod_l+0x5a4>)
 8008e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e84:	4652      	mov	r2, sl
 8008e86:	465b      	mov	r3, fp
 8008e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e8c:	f7f7 fbd4 	bl	8000638 <__aeabi_dmul>
 8008e90:	4682      	mov	sl, r0
 8008e92:	468b      	mov	fp, r1
 8008e94:	f038 080f 	bics.w	r8, r8, #15
 8008e98:	d04f      	beq.n	8008f3a <_strtod_l+0x522>
 8008e9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e9e:	dd22      	ble.n	8008ee6 <_strtod_l+0x4ce>
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	462e      	mov	r6, r5
 8008ea4:	9507      	str	r5, [sp, #28]
 8008ea6:	9505      	str	r5, [sp, #20]
 8008ea8:	2322      	movs	r3, #34	; 0x22
 8008eaa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008fc4 <_strtod_l+0x5ac>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	9b07      	ldr	r3, [sp, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f43f adf2 	beq.w	8008aa0 <_strtod_l+0x88>
 8008ebc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 ff86 	bl	800add0 <_Bfree>
 8008ec4:	9905      	ldr	r1, [sp, #20]
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f001 ff82 	bl	800add0 <_Bfree>
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f001 ff7e 	bl	800add0 <_Bfree>
 8008ed4:	9907      	ldr	r1, [sp, #28]
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f001 ff7a 	bl	800add0 <_Bfree>
 8008edc:	4629      	mov	r1, r5
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f001 ff76 	bl	800add0 <_Bfree>
 8008ee4:	e5dc      	b.n	8008aa0 <_strtod_l+0x88>
 8008ee6:	4b36      	ldr	r3, [pc, #216]	; (8008fc0 <_strtod_l+0x5a8>)
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	2300      	movs	r3, #0
 8008eec:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	4699      	mov	r9, r3
 8008ef6:	f1b8 0f01 	cmp.w	r8, #1
 8008efa:	dc21      	bgt.n	8008f40 <_strtod_l+0x528>
 8008efc:	b10b      	cbz	r3, 8008f02 <_strtod_l+0x4ea>
 8008efe:	4682      	mov	sl, r0
 8008f00:	468b      	mov	fp, r1
 8008f02:	4b2f      	ldr	r3, [pc, #188]	; (8008fc0 <_strtod_l+0x5a8>)
 8008f04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f0c:	4652      	mov	r2, sl
 8008f0e:	465b      	mov	r3, fp
 8008f10:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f14:	f7f7 fb90 	bl	8000638 <__aeabi_dmul>
 8008f18:	4b2a      	ldr	r3, [pc, #168]	; (8008fc4 <_strtod_l+0x5ac>)
 8008f1a:	460a      	mov	r2, r1
 8008f1c:	400b      	ands	r3, r1
 8008f1e:	492a      	ldr	r1, [pc, #168]	; (8008fc8 <_strtod_l+0x5b0>)
 8008f20:	428b      	cmp	r3, r1
 8008f22:	4682      	mov	sl, r0
 8008f24:	d8bc      	bhi.n	8008ea0 <_strtod_l+0x488>
 8008f26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f2a:	428b      	cmp	r3, r1
 8008f2c:	bf86      	itte	hi
 8008f2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008fcc <_strtod_l+0x5b4>
 8008f32:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	e084      	b.n	800904a <_strtod_l+0x632>
 8008f40:	f018 0f01 	tst.w	r8, #1
 8008f44:	d005      	beq.n	8008f52 <_strtod_l+0x53a>
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 fb74 	bl	8000638 <__aeabi_dmul>
 8008f50:	2301      	movs	r3, #1
 8008f52:	9a04      	ldr	r2, [sp, #16]
 8008f54:	3208      	adds	r2, #8
 8008f56:	f109 0901 	add.w	r9, r9, #1
 8008f5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f5e:	9204      	str	r2, [sp, #16]
 8008f60:	e7c9      	b.n	8008ef6 <_strtod_l+0x4de>
 8008f62:	d0ea      	beq.n	8008f3a <_strtod_l+0x522>
 8008f64:	f1c8 0800 	rsb	r8, r8, #0
 8008f68:	f018 020f 	ands.w	r2, r8, #15
 8008f6c:	d00a      	beq.n	8008f84 <_strtod_l+0x56c>
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <_strtod_l+0x5a4>)
 8008f70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f74:	4650      	mov	r0, sl
 8008f76:	4659      	mov	r1, fp
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7f7 fc86 	bl	800088c <__aeabi_ddiv>
 8008f80:	4682      	mov	sl, r0
 8008f82:	468b      	mov	fp, r1
 8008f84:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f88:	d0d7      	beq.n	8008f3a <_strtod_l+0x522>
 8008f8a:	f1b8 0f1f 	cmp.w	r8, #31
 8008f8e:	dd1f      	ble.n	8008fd0 <_strtod_l+0x5b8>
 8008f90:	2500      	movs	r5, #0
 8008f92:	462e      	mov	r6, r5
 8008f94:	9507      	str	r5, [sp, #28]
 8008f96:	9505      	str	r5, [sp, #20]
 8008f98:	2322      	movs	r3, #34	; 0x22
 8008f9a:	f04f 0a00 	mov.w	sl, #0
 8008f9e:	f04f 0b00 	mov.w	fp, #0
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	e786      	b.n	8008eb4 <_strtod_l+0x49c>
 8008fa6:	bf00      	nop
 8008fa8:	08027eb9 	.word	0x08027eb9
 8008fac:	08027efc 	.word	0x08027efc
 8008fb0:	08027eb1 	.word	0x08027eb1
 8008fb4:	0802803c 	.word	0x0802803c
 8008fb8:	080282e8 	.word	0x080282e8
 8008fbc:	080281c8 	.word	0x080281c8
 8008fc0:	080281a0 	.word	0x080281a0
 8008fc4:	7ff00000 	.word	0x7ff00000
 8008fc8:	7ca00000 	.word	0x7ca00000
 8008fcc:	7fefffff 	.word	0x7fefffff
 8008fd0:	f018 0310 	ands.w	r3, r8, #16
 8008fd4:	bf18      	it	ne
 8008fd6:	236a      	movne	r3, #106	; 0x6a
 8008fd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009388 <_strtod_l+0x970>
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	4650      	mov	r0, sl
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f018 0f01 	tst.w	r8, #1
 8008fe8:	d004      	beq.n	8008ff4 <_strtod_l+0x5dc>
 8008fea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fee:	f7f7 fb23 	bl	8000638 <__aeabi_dmul>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008ff8:	f109 0908 	add.w	r9, r9, #8
 8008ffc:	d1f2      	bne.n	8008fe4 <_strtod_l+0x5cc>
 8008ffe:	b10b      	cbz	r3, 8009004 <_strtod_l+0x5ec>
 8009000:	4682      	mov	sl, r0
 8009002:	468b      	mov	fp, r1
 8009004:	9b04      	ldr	r3, [sp, #16]
 8009006:	b1c3      	cbz	r3, 800903a <_strtod_l+0x622>
 8009008:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800900c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009010:	2b00      	cmp	r3, #0
 8009012:	4659      	mov	r1, fp
 8009014:	dd11      	ble.n	800903a <_strtod_l+0x622>
 8009016:	2b1f      	cmp	r3, #31
 8009018:	f340 8124 	ble.w	8009264 <_strtod_l+0x84c>
 800901c:	2b34      	cmp	r3, #52	; 0x34
 800901e:	bfde      	ittt	le
 8009020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009024:	f04f 33ff 	movle.w	r3, #4294967295
 8009028:	fa03 f202 	lslle.w	r2, r3, r2
 800902c:	f04f 0a00 	mov.w	sl, #0
 8009030:	bfcc      	ite	gt
 8009032:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009036:	ea02 0b01 	andle.w	fp, r2, r1
 800903a:	2200      	movs	r2, #0
 800903c:	2300      	movs	r3, #0
 800903e:	4650      	mov	r0, sl
 8009040:	4659      	mov	r1, fp
 8009042:	f7f7 fd61 	bl	8000b08 <__aeabi_dcmpeq>
 8009046:	2800      	cmp	r0, #0
 8009048:	d1a2      	bne.n	8008f90 <_strtod_l+0x578>
 800904a:	9b07      	ldr	r3, [sp, #28]
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	9908      	ldr	r1, [sp, #32]
 8009050:	462b      	mov	r3, r5
 8009052:	463a      	mov	r2, r7
 8009054:	4620      	mov	r0, r4
 8009056:	f001 ff23 	bl	800aea0 <__s2b>
 800905a:	9007      	str	r0, [sp, #28]
 800905c:	2800      	cmp	r0, #0
 800905e:	f43f af1f 	beq.w	8008ea0 <_strtod_l+0x488>
 8009062:	9b05      	ldr	r3, [sp, #20]
 8009064:	1b9e      	subs	r6, r3, r6
 8009066:	9b06      	ldr	r3, [sp, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfb4      	ite	lt
 800906c:	4633      	movlt	r3, r6
 800906e:	2300      	movge	r3, #0
 8009070:	930c      	str	r3, [sp, #48]	; 0x30
 8009072:	9b06      	ldr	r3, [sp, #24]
 8009074:	2500      	movs	r5, #0
 8009076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800907a:	9312      	str	r3, [sp, #72]	; 0x48
 800907c:	462e      	mov	r6, r5
 800907e:	9b07      	ldr	r3, [sp, #28]
 8009080:	4620      	mov	r0, r4
 8009082:	6859      	ldr	r1, [r3, #4]
 8009084:	f001 fe64 	bl	800ad50 <_Balloc>
 8009088:	9005      	str	r0, [sp, #20]
 800908a:	2800      	cmp	r0, #0
 800908c:	f43f af0c 	beq.w	8008ea8 <_strtod_l+0x490>
 8009090:	9b07      	ldr	r3, [sp, #28]
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	3202      	adds	r2, #2
 8009096:	f103 010c 	add.w	r1, r3, #12
 800909a:	0092      	lsls	r2, r2, #2
 800909c:	300c      	adds	r0, #12
 800909e:	f7fe fc94 	bl	80079ca <memcpy>
 80090a2:	ec4b ab10 	vmov	d0, sl, fp
 80090a6:	aa1a      	add	r2, sp, #104	; 0x68
 80090a8:	a919      	add	r1, sp, #100	; 0x64
 80090aa:	4620      	mov	r0, r4
 80090ac:	f002 fa3e 	bl	800b52c <__d2b>
 80090b0:	ec4b ab18 	vmov	d8, sl, fp
 80090b4:	9018      	str	r0, [sp, #96]	; 0x60
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f aef6 	beq.w	8008ea8 <_strtod_l+0x490>
 80090bc:	2101      	movs	r1, #1
 80090be:	4620      	mov	r0, r4
 80090c0:	f001 ff88 	bl	800afd4 <__i2b>
 80090c4:	4606      	mov	r6, r0
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f aeee 	beq.w	8008ea8 <_strtod_l+0x490>
 80090cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ce:	9904      	ldr	r1, [sp, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bfab      	itete	ge
 80090d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80090d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80090d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80090da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80090de:	bfac      	ite	ge
 80090e0:	eb03 0902 	addge.w	r9, r3, r2
 80090e4:	1ad7      	sublt	r7, r2, r3
 80090e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090e8:	eba3 0801 	sub.w	r8, r3, r1
 80090ec:	4490      	add	r8, r2
 80090ee:	4ba1      	ldr	r3, [pc, #644]	; (8009374 <_strtod_l+0x95c>)
 80090f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80090f4:	4598      	cmp	r8, r3
 80090f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090fa:	f280 80c7 	bge.w	800928c <_strtod_l+0x874>
 80090fe:	eba3 0308 	sub.w	r3, r3, r8
 8009102:	2b1f      	cmp	r3, #31
 8009104:	eba2 0203 	sub.w	r2, r2, r3
 8009108:	f04f 0101 	mov.w	r1, #1
 800910c:	f300 80b1 	bgt.w	8009272 <_strtod_l+0x85a>
 8009110:	fa01 f303 	lsl.w	r3, r1, r3
 8009114:	930d      	str	r3, [sp, #52]	; 0x34
 8009116:	2300      	movs	r3, #0
 8009118:	9308      	str	r3, [sp, #32]
 800911a:	eb09 0802 	add.w	r8, r9, r2
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	45c1      	cmp	r9, r8
 8009122:	4417      	add	r7, r2
 8009124:	441f      	add	r7, r3
 8009126:	464b      	mov	r3, r9
 8009128:	bfa8      	it	ge
 800912a:	4643      	movge	r3, r8
 800912c:	42bb      	cmp	r3, r7
 800912e:	bfa8      	it	ge
 8009130:	463b      	movge	r3, r7
 8009132:	2b00      	cmp	r3, #0
 8009134:	bfc2      	ittt	gt
 8009136:	eba8 0803 	subgt.w	r8, r8, r3
 800913a:	1aff      	subgt	r7, r7, r3
 800913c:	eba9 0903 	subgt.w	r9, r9, r3
 8009140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd17      	ble.n	8009176 <_strtod_l+0x75e>
 8009146:	4631      	mov	r1, r6
 8009148:	461a      	mov	r2, r3
 800914a:	4620      	mov	r0, r4
 800914c:	f002 f802 	bl	800b154 <__pow5mult>
 8009150:	4606      	mov	r6, r0
 8009152:	2800      	cmp	r0, #0
 8009154:	f43f aea8 	beq.w	8008ea8 <_strtod_l+0x490>
 8009158:	4601      	mov	r1, r0
 800915a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800915c:	4620      	mov	r0, r4
 800915e:	f001 ff4f 	bl	800b000 <__multiply>
 8009162:	900b      	str	r0, [sp, #44]	; 0x2c
 8009164:	2800      	cmp	r0, #0
 8009166:	f43f ae9f 	beq.w	8008ea8 <_strtod_l+0x490>
 800916a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800916c:	4620      	mov	r0, r4
 800916e:	f001 fe2f 	bl	800add0 <_Bfree>
 8009172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009174:	9318      	str	r3, [sp, #96]	; 0x60
 8009176:	f1b8 0f00 	cmp.w	r8, #0
 800917a:	f300 808c 	bgt.w	8009296 <_strtod_l+0x87e>
 800917e:	9b06      	ldr	r3, [sp, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	dd08      	ble.n	8009196 <_strtod_l+0x77e>
 8009184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009186:	9905      	ldr	r1, [sp, #20]
 8009188:	4620      	mov	r0, r4
 800918a:	f001 ffe3 	bl	800b154 <__pow5mult>
 800918e:	9005      	str	r0, [sp, #20]
 8009190:	2800      	cmp	r0, #0
 8009192:	f43f ae89 	beq.w	8008ea8 <_strtod_l+0x490>
 8009196:	2f00      	cmp	r7, #0
 8009198:	dd08      	ble.n	80091ac <_strtod_l+0x794>
 800919a:	9905      	ldr	r1, [sp, #20]
 800919c:	463a      	mov	r2, r7
 800919e:	4620      	mov	r0, r4
 80091a0:	f002 f832 	bl	800b208 <__lshift>
 80091a4:	9005      	str	r0, [sp, #20]
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f43f ae7e 	beq.w	8008ea8 <_strtod_l+0x490>
 80091ac:	f1b9 0f00 	cmp.w	r9, #0
 80091b0:	dd08      	ble.n	80091c4 <_strtod_l+0x7ac>
 80091b2:	4631      	mov	r1, r6
 80091b4:	464a      	mov	r2, r9
 80091b6:	4620      	mov	r0, r4
 80091b8:	f002 f826 	bl	800b208 <__lshift>
 80091bc:	4606      	mov	r6, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f ae72 	beq.w	8008ea8 <_strtod_l+0x490>
 80091c4:	9a05      	ldr	r2, [sp, #20]
 80091c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091c8:	4620      	mov	r0, r4
 80091ca:	f002 f8a9 	bl	800b320 <__mdiff>
 80091ce:	4605      	mov	r5, r0
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f43f ae69 	beq.w	8008ea8 <_strtod_l+0x490>
 80091d6:	68c3      	ldr	r3, [r0, #12]
 80091d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80091da:	2300      	movs	r3, #0
 80091dc:	60c3      	str	r3, [r0, #12]
 80091de:	4631      	mov	r1, r6
 80091e0:	f002 f882 	bl	800b2e8 <__mcmp>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	da60      	bge.n	80092aa <_strtod_l+0x892>
 80091e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ea:	ea53 030a 	orrs.w	r3, r3, sl
 80091ee:	f040 8082 	bne.w	80092f6 <_strtod_l+0x8de>
 80091f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d17d      	bne.n	80092f6 <_strtod_l+0x8de>
 80091fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091fe:	0d1b      	lsrs	r3, r3, #20
 8009200:	051b      	lsls	r3, r3, #20
 8009202:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009206:	d976      	bls.n	80092f6 <_strtod_l+0x8de>
 8009208:	696b      	ldr	r3, [r5, #20]
 800920a:	b913      	cbnz	r3, 8009212 <_strtod_l+0x7fa>
 800920c:	692b      	ldr	r3, [r5, #16]
 800920e:	2b01      	cmp	r3, #1
 8009210:	dd71      	ble.n	80092f6 <_strtod_l+0x8de>
 8009212:	4629      	mov	r1, r5
 8009214:	2201      	movs	r2, #1
 8009216:	4620      	mov	r0, r4
 8009218:	f001 fff6 	bl	800b208 <__lshift>
 800921c:	4631      	mov	r1, r6
 800921e:	4605      	mov	r5, r0
 8009220:	f002 f862 	bl	800b2e8 <__mcmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	dd66      	ble.n	80092f6 <_strtod_l+0x8de>
 8009228:	9904      	ldr	r1, [sp, #16]
 800922a:	4a53      	ldr	r2, [pc, #332]	; (8009378 <_strtod_l+0x960>)
 800922c:	465b      	mov	r3, fp
 800922e:	2900      	cmp	r1, #0
 8009230:	f000 8081 	beq.w	8009336 <_strtod_l+0x91e>
 8009234:	ea02 010b 	and.w	r1, r2, fp
 8009238:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800923c:	dc7b      	bgt.n	8009336 <_strtod_l+0x91e>
 800923e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009242:	f77f aea9 	ble.w	8008f98 <_strtod_l+0x580>
 8009246:	4b4d      	ldr	r3, [pc, #308]	; (800937c <_strtod_l+0x964>)
 8009248:	4650      	mov	r0, sl
 800924a:	4659      	mov	r1, fp
 800924c:	2200      	movs	r2, #0
 800924e:	f7f7 f9f3 	bl	8000638 <__aeabi_dmul>
 8009252:	460b      	mov	r3, r1
 8009254:	4303      	orrs	r3, r0
 8009256:	bf08      	it	eq
 8009258:	2322      	moveq	r3, #34	; 0x22
 800925a:	4682      	mov	sl, r0
 800925c:	468b      	mov	fp, r1
 800925e:	bf08      	it	eq
 8009260:	6023      	streq	r3, [r4, #0]
 8009262:	e62b      	b.n	8008ebc <_strtod_l+0x4a4>
 8009264:	f04f 32ff 	mov.w	r2, #4294967295
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	ea03 0a0a 	and.w	sl, r3, sl
 8009270:	e6e3      	b.n	800903a <_strtod_l+0x622>
 8009272:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009276:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800927a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800927e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009282:	fa01 f308 	lsl.w	r3, r1, r8
 8009286:	9308      	str	r3, [sp, #32]
 8009288:	910d      	str	r1, [sp, #52]	; 0x34
 800928a:	e746      	b.n	800911a <_strtod_l+0x702>
 800928c:	2300      	movs	r3, #0
 800928e:	9308      	str	r3, [sp, #32]
 8009290:	2301      	movs	r3, #1
 8009292:	930d      	str	r3, [sp, #52]	; 0x34
 8009294:	e741      	b.n	800911a <_strtod_l+0x702>
 8009296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009298:	4642      	mov	r2, r8
 800929a:	4620      	mov	r0, r4
 800929c:	f001 ffb4 	bl	800b208 <__lshift>
 80092a0:	9018      	str	r0, [sp, #96]	; 0x60
 80092a2:	2800      	cmp	r0, #0
 80092a4:	f47f af6b 	bne.w	800917e <_strtod_l+0x766>
 80092a8:	e5fe      	b.n	8008ea8 <_strtod_l+0x490>
 80092aa:	465f      	mov	r7, fp
 80092ac:	d16e      	bne.n	800938c <_strtod_l+0x974>
 80092ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092b4:	b342      	cbz	r2, 8009308 <_strtod_l+0x8f0>
 80092b6:	4a32      	ldr	r2, [pc, #200]	; (8009380 <_strtod_l+0x968>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d128      	bne.n	800930e <_strtod_l+0x8f6>
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	4651      	mov	r1, sl
 80092c0:	b1eb      	cbz	r3, 80092fe <_strtod_l+0x8e6>
 80092c2:	4b2d      	ldr	r3, [pc, #180]	; (8009378 <_strtod_l+0x960>)
 80092c4:	403b      	ands	r3, r7
 80092c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092ca:	f04f 32ff 	mov.w	r2, #4294967295
 80092ce:	d819      	bhi.n	8009304 <_strtod_l+0x8ec>
 80092d0:	0d1b      	lsrs	r3, r3, #20
 80092d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092d6:	fa02 f303 	lsl.w	r3, r2, r3
 80092da:	4299      	cmp	r1, r3
 80092dc:	d117      	bne.n	800930e <_strtod_l+0x8f6>
 80092de:	4b29      	ldr	r3, [pc, #164]	; (8009384 <_strtod_l+0x96c>)
 80092e0:	429f      	cmp	r7, r3
 80092e2:	d102      	bne.n	80092ea <_strtod_l+0x8d2>
 80092e4:	3101      	adds	r1, #1
 80092e6:	f43f addf 	beq.w	8008ea8 <_strtod_l+0x490>
 80092ea:	4b23      	ldr	r3, [pc, #140]	; (8009378 <_strtod_l+0x960>)
 80092ec:	403b      	ands	r3, r7
 80092ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092f2:	f04f 0a00 	mov.w	sl, #0
 80092f6:	9b04      	ldr	r3, [sp, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1a4      	bne.n	8009246 <_strtod_l+0x82e>
 80092fc:	e5de      	b.n	8008ebc <_strtod_l+0x4a4>
 80092fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009302:	e7ea      	b.n	80092da <_strtod_l+0x8c2>
 8009304:	4613      	mov	r3, r2
 8009306:	e7e8      	b.n	80092da <_strtod_l+0x8c2>
 8009308:	ea53 030a 	orrs.w	r3, r3, sl
 800930c:	d08c      	beq.n	8009228 <_strtod_l+0x810>
 800930e:	9b08      	ldr	r3, [sp, #32]
 8009310:	b1db      	cbz	r3, 800934a <_strtod_l+0x932>
 8009312:	423b      	tst	r3, r7
 8009314:	d0ef      	beq.n	80092f6 <_strtod_l+0x8de>
 8009316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009318:	9a04      	ldr	r2, [sp, #16]
 800931a:	4650      	mov	r0, sl
 800931c:	4659      	mov	r1, fp
 800931e:	b1c3      	cbz	r3, 8009352 <_strtod_l+0x93a>
 8009320:	f7ff fb5b 	bl	80089da <sulp>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	ec51 0b18 	vmov	r0, r1, d8
 800932c:	f7f6 ffce 	bl	80002cc <__adddf3>
 8009330:	4682      	mov	sl, r0
 8009332:	468b      	mov	fp, r1
 8009334:	e7df      	b.n	80092f6 <_strtod_l+0x8de>
 8009336:	4013      	ands	r3, r2
 8009338:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800933c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009340:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009344:	f04f 3aff 	mov.w	sl, #4294967295
 8009348:	e7d5      	b.n	80092f6 <_strtod_l+0x8de>
 800934a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800934c:	ea13 0f0a 	tst.w	r3, sl
 8009350:	e7e0      	b.n	8009314 <_strtod_l+0x8fc>
 8009352:	f7ff fb42 	bl	80089da <sulp>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	ec51 0b18 	vmov	r0, r1, d8
 800935e:	f7f6 ffb3 	bl	80002c8 <__aeabi_dsub>
 8009362:	2200      	movs	r2, #0
 8009364:	2300      	movs	r3, #0
 8009366:	4682      	mov	sl, r0
 8009368:	468b      	mov	fp, r1
 800936a:	f7f7 fbcd 	bl	8000b08 <__aeabi_dcmpeq>
 800936e:	2800      	cmp	r0, #0
 8009370:	d0c1      	beq.n	80092f6 <_strtod_l+0x8de>
 8009372:	e611      	b.n	8008f98 <_strtod_l+0x580>
 8009374:	fffffc02 	.word	0xfffffc02
 8009378:	7ff00000 	.word	0x7ff00000
 800937c:	39500000 	.word	0x39500000
 8009380:	000fffff 	.word	0x000fffff
 8009384:	7fefffff 	.word	0x7fefffff
 8009388:	08027f10 	.word	0x08027f10
 800938c:	4631      	mov	r1, r6
 800938e:	4628      	mov	r0, r5
 8009390:	f002 f928 	bl	800b5e4 <__ratio>
 8009394:	ec59 8b10 	vmov	r8, r9, d0
 8009398:	ee10 0a10 	vmov	r0, s0
 800939c:	2200      	movs	r2, #0
 800939e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f7 fbc4 	bl	8000b30 <__aeabi_dcmple>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d07a      	beq.n	80094a2 <_strtod_l+0xa8a>
 80093ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d04a      	beq.n	8009448 <_strtod_l+0xa30>
 80093b2:	4b95      	ldr	r3, [pc, #596]	; (8009608 <_strtod_l+0xbf0>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009608 <_strtod_l+0xbf0>
 80093be:	f04f 0800 	mov.w	r8, #0
 80093c2:	4b92      	ldr	r3, [pc, #584]	; (800960c <_strtod_l+0xbf4>)
 80093c4:	403b      	ands	r3, r7
 80093c6:	930d      	str	r3, [sp, #52]	; 0x34
 80093c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093ca:	4b91      	ldr	r3, [pc, #580]	; (8009610 <_strtod_l+0xbf8>)
 80093cc:	429a      	cmp	r2, r3
 80093ce:	f040 80b0 	bne.w	8009532 <_strtod_l+0xb1a>
 80093d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80093da:	ec4b ab10 	vmov	d0, sl, fp
 80093de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093e2:	f002 f827 	bl	800b434 <__ulp>
 80093e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093ea:	ec53 2b10 	vmov	r2, r3, d0
 80093ee:	f7f7 f923 	bl	8000638 <__aeabi_dmul>
 80093f2:	4652      	mov	r2, sl
 80093f4:	465b      	mov	r3, fp
 80093f6:	f7f6 ff69 	bl	80002cc <__adddf3>
 80093fa:	460b      	mov	r3, r1
 80093fc:	4983      	ldr	r1, [pc, #524]	; (800960c <_strtod_l+0xbf4>)
 80093fe:	4a85      	ldr	r2, [pc, #532]	; (8009614 <_strtod_l+0xbfc>)
 8009400:	4019      	ands	r1, r3
 8009402:	4291      	cmp	r1, r2
 8009404:	4682      	mov	sl, r0
 8009406:	d960      	bls.n	80094ca <_strtod_l+0xab2>
 8009408:	ee18 3a90 	vmov	r3, s17
 800940c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009410:	4293      	cmp	r3, r2
 8009412:	d104      	bne.n	800941e <_strtod_l+0xa06>
 8009414:	ee18 3a10 	vmov	r3, s16
 8009418:	3301      	adds	r3, #1
 800941a:	f43f ad45 	beq.w	8008ea8 <_strtod_l+0x490>
 800941e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009620 <_strtod_l+0xc08>
 8009422:	f04f 3aff 	mov.w	sl, #4294967295
 8009426:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009428:	4620      	mov	r0, r4
 800942a:	f001 fcd1 	bl	800add0 <_Bfree>
 800942e:	9905      	ldr	r1, [sp, #20]
 8009430:	4620      	mov	r0, r4
 8009432:	f001 fccd 	bl	800add0 <_Bfree>
 8009436:	4631      	mov	r1, r6
 8009438:	4620      	mov	r0, r4
 800943a:	f001 fcc9 	bl	800add0 <_Bfree>
 800943e:	4629      	mov	r1, r5
 8009440:	4620      	mov	r0, r4
 8009442:	f001 fcc5 	bl	800add0 <_Bfree>
 8009446:	e61a      	b.n	800907e <_strtod_l+0x666>
 8009448:	f1ba 0f00 	cmp.w	sl, #0
 800944c:	d11b      	bne.n	8009486 <_strtod_l+0xa6e>
 800944e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009452:	b9f3      	cbnz	r3, 8009492 <_strtod_l+0xa7a>
 8009454:	4b6c      	ldr	r3, [pc, #432]	; (8009608 <_strtod_l+0xbf0>)
 8009456:	2200      	movs	r2, #0
 8009458:	4640      	mov	r0, r8
 800945a:	4649      	mov	r1, r9
 800945c:	f7f7 fb5e 	bl	8000b1c <__aeabi_dcmplt>
 8009460:	b9d0      	cbnz	r0, 8009498 <_strtod_l+0xa80>
 8009462:	4640      	mov	r0, r8
 8009464:	4649      	mov	r1, r9
 8009466:	4b6c      	ldr	r3, [pc, #432]	; (8009618 <_strtod_l+0xc00>)
 8009468:	2200      	movs	r2, #0
 800946a:	f7f7 f8e5 	bl	8000638 <__aeabi_dmul>
 800946e:	4680      	mov	r8, r0
 8009470:	4689      	mov	r9, r1
 8009472:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009476:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800947a:	9315      	str	r3, [sp, #84]	; 0x54
 800947c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009480:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009484:	e79d      	b.n	80093c2 <_strtod_l+0x9aa>
 8009486:	f1ba 0f01 	cmp.w	sl, #1
 800948a:	d102      	bne.n	8009492 <_strtod_l+0xa7a>
 800948c:	2f00      	cmp	r7, #0
 800948e:	f43f ad83 	beq.w	8008f98 <_strtod_l+0x580>
 8009492:	4b62      	ldr	r3, [pc, #392]	; (800961c <_strtod_l+0xc04>)
 8009494:	2200      	movs	r2, #0
 8009496:	e78e      	b.n	80093b6 <_strtod_l+0x99e>
 8009498:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009618 <_strtod_l+0xc00>
 800949c:	f04f 0800 	mov.w	r8, #0
 80094a0:	e7e7      	b.n	8009472 <_strtod_l+0xa5a>
 80094a2:	4b5d      	ldr	r3, [pc, #372]	; (8009618 <_strtod_l+0xc00>)
 80094a4:	4640      	mov	r0, r8
 80094a6:	4649      	mov	r1, r9
 80094a8:	2200      	movs	r2, #0
 80094aa:	f7f7 f8c5 	bl	8000638 <__aeabi_dmul>
 80094ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b0:	4680      	mov	r8, r0
 80094b2:	4689      	mov	r9, r1
 80094b4:	b933      	cbnz	r3, 80094c4 <_strtod_l+0xaac>
 80094b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ba:	900e      	str	r0, [sp, #56]	; 0x38
 80094bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80094be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80094c2:	e7dd      	b.n	8009480 <_strtod_l+0xa68>
 80094c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80094c8:	e7f9      	b.n	80094be <_strtod_l+0xaa6>
 80094ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1a8      	bne.n	8009426 <_strtod_l+0xa0e>
 80094d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094da:	0d1b      	lsrs	r3, r3, #20
 80094dc:	051b      	lsls	r3, r3, #20
 80094de:	429a      	cmp	r2, r3
 80094e0:	d1a1      	bne.n	8009426 <_strtod_l+0xa0e>
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f7 fc07 	bl	8000cf8 <__aeabi_d2lz>
 80094ea:	f7f7 f877 	bl	80005dc <__aeabi_l2d>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f6 fee7 	bl	80002c8 <__aeabi_dsub>
 80094fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009500:	ea43 030a 	orr.w	r3, r3, sl
 8009504:	4313      	orrs	r3, r2
 8009506:	4680      	mov	r8, r0
 8009508:	4689      	mov	r9, r1
 800950a:	d055      	beq.n	80095b8 <_strtod_l+0xba0>
 800950c:	a336      	add	r3, pc, #216	; (adr r3, 80095e8 <_strtod_l+0xbd0>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f7 fb03 	bl	8000b1c <__aeabi_dcmplt>
 8009516:	2800      	cmp	r0, #0
 8009518:	f47f acd0 	bne.w	8008ebc <_strtod_l+0x4a4>
 800951c:	a334      	add	r3, pc, #208	; (adr r3, 80095f0 <_strtod_l+0xbd8>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	4640      	mov	r0, r8
 8009524:	4649      	mov	r1, r9
 8009526:	f7f7 fb17 	bl	8000b58 <__aeabi_dcmpgt>
 800952a:	2800      	cmp	r0, #0
 800952c:	f43f af7b 	beq.w	8009426 <_strtod_l+0xa0e>
 8009530:	e4c4      	b.n	8008ebc <_strtod_l+0x4a4>
 8009532:	9b04      	ldr	r3, [sp, #16]
 8009534:	b333      	cbz	r3, 8009584 <_strtod_l+0xb6c>
 8009536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009538:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800953c:	d822      	bhi.n	8009584 <_strtod_l+0xb6c>
 800953e:	a32e      	add	r3, pc, #184	; (adr r3, 80095f8 <_strtod_l+0xbe0>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	4640      	mov	r0, r8
 8009546:	4649      	mov	r1, r9
 8009548:	f7f7 faf2 	bl	8000b30 <__aeabi_dcmple>
 800954c:	b1a0      	cbz	r0, 8009578 <_strtod_l+0xb60>
 800954e:	4649      	mov	r1, r9
 8009550:	4640      	mov	r0, r8
 8009552:	f7f7 fb49 	bl	8000be8 <__aeabi_d2uiz>
 8009556:	2801      	cmp	r0, #1
 8009558:	bf38      	it	cc
 800955a:	2001      	movcc	r0, #1
 800955c:	f7f6 fff2 	bl	8000544 <__aeabi_ui2d>
 8009560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009562:	4680      	mov	r8, r0
 8009564:	4689      	mov	r9, r1
 8009566:	bb23      	cbnz	r3, 80095b2 <_strtod_l+0xb9a>
 8009568:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800956c:	9010      	str	r0, [sp, #64]	; 0x40
 800956e:	9311      	str	r3, [sp, #68]	; 0x44
 8009570:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009574:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800957c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	9309      	str	r3, [sp, #36]	; 0x24
 8009584:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009588:	eeb0 0a48 	vmov.f32	s0, s16
 800958c:	eef0 0a68 	vmov.f32	s1, s17
 8009590:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009594:	f001 ff4e 	bl	800b434 <__ulp>
 8009598:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800959c:	ec53 2b10 	vmov	r2, r3, d0
 80095a0:	f7f7 f84a 	bl	8000638 <__aeabi_dmul>
 80095a4:	ec53 2b18 	vmov	r2, r3, d8
 80095a8:	f7f6 fe90 	bl	80002cc <__adddf3>
 80095ac:	4682      	mov	sl, r0
 80095ae:	468b      	mov	fp, r1
 80095b0:	e78d      	b.n	80094ce <_strtod_l+0xab6>
 80095b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80095b6:	e7db      	b.n	8009570 <_strtod_l+0xb58>
 80095b8:	a311      	add	r3, pc, #68	; (adr r3, 8009600 <_strtod_l+0xbe8>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f7 faad 	bl	8000b1c <__aeabi_dcmplt>
 80095c2:	e7b2      	b.n	800952a <_strtod_l+0xb12>
 80095c4:	2300      	movs	r3, #0
 80095c6:	930a      	str	r3, [sp, #40]	; 0x28
 80095c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	f7ff ba6b 	b.w	8008aa8 <_strtod_l+0x90>
 80095d2:	2a65      	cmp	r2, #101	; 0x65
 80095d4:	f43f ab5f 	beq.w	8008c96 <_strtod_l+0x27e>
 80095d8:	2a45      	cmp	r2, #69	; 0x45
 80095da:	f43f ab5c 	beq.w	8008c96 <_strtod_l+0x27e>
 80095de:	2301      	movs	r3, #1
 80095e0:	f7ff bb94 	b.w	8008d0c <_strtod_l+0x2f4>
 80095e4:	f3af 8000 	nop.w
 80095e8:	94a03595 	.word	0x94a03595
 80095ec:	3fdfffff 	.word	0x3fdfffff
 80095f0:	35afe535 	.word	0x35afe535
 80095f4:	3fe00000 	.word	0x3fe00000
 80095f8:	ffc00000 	.word	0xffc00000
 80095fc:	41dfffff 	.word	0x41dfffff
 8009600:	94a03595 	.word	0x94a03595
 8009604:	3fcfffff 	.word	0x3fcfffff
 8009608:	3ff00000 	.word	0x3ff00000
 800960c:	7ff00000 	.word	0x7ff00000
 8009610:	7fe00000 	.word	0x7fe00000
 8009614:	7c9fffff 	.word	0x7c9fffff
 8009618:	3fe00000 	.word	0x3fe00000
 800961c:	bff00000 	.word	0xbff00000
 8009620:	7fefffff 	.word	0x7fefffff

08009624 <_strtod_r>:
 8009624:	4b01      	ldr	r3, [pc, #4]	; (800962c <_strtod_r+0x8>)
 8009626:	f7ff b9f7 	b.w	8008a18 <_strtod_l>
 800962a:	bf00      	nop
 800962c:	20000078 	.word	0x20000078

08009630 <_strtol_l.constprop.0>:
 8009630:	2b01      	cmp	r3, #1
 8009632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009636:	d001      	beq.n	800963c <_strtol_l.constprop.0+0xc>
 8009638:	2b24      	cmp	r3, #36	; 0x24
 800963a:	d906      	bls.n	800964a <_strtol_l.constprop.0+0x1a>
 800963c:	f7fe f8a2 	bl	8007784 <__errno>
 8009640:	2316      	movs	r3, #22
 8009642:	6003      	str	r3, [r0, #0]
 8009644:	2000      	movs	r0, #0
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009730 <_strtol_l.constprop.0+0x100>
 800964e:	460d      	mov	r5, r1
 8009650:	462e      	mov	r6, r5
 8009652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009656:	f814 700c 	ldrb.w	r7, [r4, ip]
 800965a:	f017 0708 	ands.w	r7, r7, #8
 800965e:	d1f7      	bne.n	8009650 <_strtol_l.constprop.0+0x20>
 8009660:	2c2d      	cmp	r4, #45	; 0x2d
 8009662:	d132      	bne.n	80096ca <_strtol_l.constprop.0+0x9a>
 8009664:	782c      	ldrb	r4, [r5, #0]
 8009666:	2701      	movs	r7, #1
 8009668:	1cb5      	adds	r5, r6, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d05b      	beq.n	8009726 <_strtol_l.constprop.0+0xf6>
 800966e:	2b10      	cmp	r3, #16
 8009670:	d109      	bne.n	8009686 <_strtol_l.constprop.0+0x56>
 8009672:	2c30      	cmp	r4, #48	; 0x30
 8009674:	d107      	bne.n	8009686 <_strtol_l.constprop.0+0x56>
 8009676:	782c      	ldrb	r4, [r5, #0]
 8009678:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800967c:	2c58      	cmp	r4, #88	; 0x58
 800967e:	d14d      	bne.n	800971c <_strtol_l.constprop.0+0xec>
 8009680:	786c      	ldrb	r4, [r5, #1]
 8009682:	2310      	movs	r3, #16
 8009684:	3502      	adds	r5, #2
 8009686:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800968a:	f108 38ff 	add.w	r8, r8, #4294967295
 800968e:	f04f 0c00 	mov.w	ip, #0
 8009692:	fbb8 f9f3 	udiv	r9, r8, r3
 8009696:	4666      	mov	r6, ip
 8009698:	fb03 8a19 	mls	sl, r3, r9, r8
 800969c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80096a0:	f1be 0f09 	cmp.w	lr, #9
 80096a4:	d816      	bhi.n	80096d4 <_strtol_l.constprop.0+0xa4>
 80096a6:	4674      	mov	r4, lr
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	dd24      	ble.n	80096f6 <_strtol_l.constprop.0+0xc6>
 80096ac:	f1bc 0f00 	cmp.w	ip, #0
 80096b0:	db1e      	blt.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096b2:	45b1      	cmp	r9, r6
 80096b4:	d31c      	bcc.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096b6:	d101      	bne.n	80096bc <_strtol_l.constprop.0+0x8c>
 80096b8:	45a2      	cmp	sl, r4
 80096ba:	db19      	blt.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096bc:	fb06 4603 	mla	r6, r6, r3, r4
 80096c0:	f04f 0c01 	mov.w	ip, #1
 80096c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c8:	e7e8      	b.n	800969c <_strtol_l.constprop.0+0x6c>
 80096ca:	2c2b      	cmp	r4, #43	; 0x2b
 80096cc:	bf04      	itt	eq
 80096ce:	782c      	ldrbeq	r4, [r5, #0]
 80096d0:	1cb5      	addeq	r5, r6, #2
 80096d2:	e7ca      	b.n	800966a <_strtol_l.constprop.0+0x3a>
 80096d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80096d8:	f1be 0f19 	cmp.w	lr, #25
 80096dc:	d801      	bhi.n	80096e2 <_strtol_l.constprop.0+0xb2>
 80096de:	3c37      	subs	r4, #55	; 0x37
 80096e0:	e7e2      	b.n	80096a8 <_strtol_l.constprop.0+0x78>
 80096e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096e6:	f1be 0f19 	cmp.w	lr, #25
 80096ea:	d804      	bhi.n	80096f6 <_strtol_l.constprop.0+0xc6>
 80096ec:	3c57      	subs	r4, #87	; 0x57
 80096ee:	e7db      	b.n	80096a8 <_strtol_l.constprop.0+0x78>
 80096f0:	f04f 3cff 	mov.w	ip, #4294967295
 80096f4:	e7e6      	b.n	80096c4 <_strtol_l.constprop.0+0x94>
 80096f6:	f1bc 0f00 	cmp.w	ip, #0
 80096fa:	da05      	bge.n	8009708 <_strtol_l.constprop.0+0xd8>
 80096fc:	2322      	movs	r3, #34	; 0x22
 80096fe:	6003      	str	r3, [r0, #0]
 8009700:	4646      	mov	r6, r8
 8009702:	b942      	cbnz	r2, 8009716 <_strtol_l.constprop.0+0xe6>
 8009704:	4630      	mov	r0, r6
 8009706:	e79e      	b.n	8009646 <_strtol_l.constprop.0+0x16>
 8009708:	b107      	cbz	r7, 800970c <_strtol_l.constprop.0+0xdc>
 800970a:	4276      	negs	r6, r6
 800970c:	2a00      	cmp	r2, #0
 800970e:	d0f9      	beq.n	8009704 <_strtol_l.constprop.0+0xd4>
 8009710:	f1bc 0f00 	cmp.w	ip, #0
 8009714:	d000      	beq.n	8009718 <_strtol_l.constprop.0+0xe8>
 8009716:	1e69      	subs	r1, r5, #1
 8009718:	6011      	str	r1, [r2, #0]
 800971a:	e7f3      	b.n	8009704 <_strtol_l.constprop.0+0xd4>
 800971c:	2430      	movs	r4, #48	; 0x30
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1b1      	bne.n	8009686 <_strtol_l.constprop.0+0x56>
 8009722:	2308      	movs	r3, #8
 8009724:	e7af      	b.n	8009686 <_strtol_l.constprop.0+0x56>
 8009726:	2c30      	cmp	r4, #48	; 0x30
 8009728:	d0a5      	beq.n	8009676 <_strtol_l.constprop.0+0x46>
 800972a:	230a      	movs	r3, #10
 800972c:	e7ab      	b.n	8009686 <_strtol_l.constprop.0+0x56>
 800972e:	bf00      	nop
 8009730:	08027f39 	.word	0x08027f39

08009734 <_strtol_r>:
 8009734:	f7ff bf7c 	b.w	8009630 <_strtol_l.constprop.0>

08009738 <_write_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	; (8009758 <_write_r+0x20>)
 800973c:	4604      	mov	r4, r0
 800973e:	4608      	mov	r0, r1
 8009740:	4611      	mov	r1, r2
 8009742:	2200      	movs	r2, #0
 8009744:	602a      	str	r2, [r5, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f7f8 fa99 	bl	8001c7e <_write>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_write_r+0x1e>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	b103      	cbz	r3, 8009756 <_write_r+0x1e>
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	20003b98 	.word	0x20003b98

0800975c <_close_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	; (8009778 <_close_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f8 faa5 	bl	8001cb6 <_close>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_close_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_close_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20003b98 	.word	0x20003b98

0800977c <quorem>:
 800977c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	6903      	ldr	r3, [r0, #16]
 8009782:	690c      	ldr	r4, [r1, #16]
 8009784:	42a3      	cmp	r3, r4
 8009786:	4607      	mov	r7, r0
 8009788:	f2c0 8081 	blt.w	800988e <quorem+0x112>
 800978c:	3c01      	subs	r4, #1
 800978e:	f101 0814 	add.w	r8, r1, #20
 8009792:	f100 0514 	add.w	r5, r0, #20
 8009796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097a4:	3301      	adds	r3, #1
 80097a6:	429a      	cmp	r2, r3
 80097a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80097b4:	d331      	bcc.n	800981a <quorem+0x9e>
 80097b6:	f04f 0e00 	mov.w	lr, #0
 80097ba:	4640      	mov	r0, r8
 80097bc:	46ac      	mov	ip, r5
 80097be:	46f2      	mov	sl, lr
 80097c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80097c4:	b293      	uxth	r3, r2
 80097c6:	fb06 e303 	mla	r3, r6, r3, lr
 80097ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	ebaa 0303 	sub.w	r3, sl, r3
 80097d4:	f8dc a000 	ldr.w	sl, [ip]
 80097d8:	0c12      	lsrs	r2, r2, #16
 80097da:	fa13 f38a 	uxtah	r3, r3, sl
 80097de:	fb06 e202 	mla	r2, r6, r2, lr
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097ea:	b292      	uxth	r2, r2
 80097ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80097f8:	4581      	cmp	r9, r0
 80097fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097fe:	f84c 3b04 	str.w	r3, [ip], #4
 8009802:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009806:	d2db      	bcs.n	80097c0 <quorem+0x44>
 8009808:	f855 300b 	ldr.w	r3, [r5, fp]
 800980c:	b92b      	cbnz	r3, 800981a <quorem+0x9e>
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	3b04      	subs	r3, #4
 8009812:	429d      	cmp	r5, r3
 8009814:	461a      	mov	r2, r3
 8009816:	d32e      	bcc.n	8009876 <quorem+0xfa>
 8009818:	613c      	str	r4, [r7, #16]
 800981a:	4638      	mov	r0, r7
 800981c:	f001 fd64 	bl	800b2e8 <__mcmp>
 8009820:	2800      	cmp	r0, #0
 8009822:	db24      	blt.n	800986e <quorem+0xf2>
 8009824:	3601      	adds	r6, #1
 8009826:	4628      	mov	r0, r5
 8009828:	f04f 0c00 	mov.w	ip, #0
 800982c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009830:	f8d0 e000 	ldr.w	lr, [r0]
 8009834:	b293      	uxth	r3, r2
 8009836:	ebac 0303 	sub.w	r3, ip, r3
 800983a:	0c12      	lsrs	r2, r2, #16
 800983c:	fa13 f38e 	uxtah	r3, r3, lr
 8009840:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009844:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009848:	b29b      	uxth	r3, r3
 800984a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800984e:	45c1      	cmp	r9, r8
 8009850:	f840 3b04 	str.w	r3, [r0], #4
 8009854:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009858:	d2e8      	bcs.n	800982c <quorem+0xb0>
 800985a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800985e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009862:	b922      	cbnz	r2, 800986e <quorem+0xf2>
 8009864:	3b04      	subs	r3, #4
 8009866:	429d      	cmp	r5, r3
 8009868:	461a      	mov	r2, r3
 800986a:	d30a      	bcc.n	8009882 <quorem+0x106>
 800986c:	613c      	str	r4, [r7, #16]
 800986e:	4630      	mov	r0, r6
 8009870:	b003      	add	sp, #12
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	6812      	ldr	r2, [r2, #0]
 8009878:	3b04      	subs	r3, #4
 800987a:	2a00      	cmp	r2, #0
 800987c:	d1cc      	bne.n	8009818 <quorem+0x9c>
 800987e:	3c01      	subs	r4, #1
 8009880:	e7c7      	b.n	8009812 <quorem+0x96>
 8009882:	6812      	ldr	r2, [r2, #0]
 8009884:	3b04      	subs	r3, #4
 8009886:	2a00      	cmp	r2, #0
 8009888:	d1f0      	bne.n	800986c <quorem+0xf0>
 800988a:	3c01      	subs	r4, #1
 800988c:	e7eb      	b.n	8009866 <quorem+0xea>
 800988e:	2000      	movs	r0, #0
 8009890:	e7ee      	b.n	8009870 <quorem+0xf4>
 8009892:	0000      	movs	r0, r0
 8009894:	0000      	movs	r0, r0
	...

08009898 <_dtoa_r>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	ed2d 8b04 	vpush	{d8-d9}
 80098a0:	ec57 6b10 	vmov	r6, r7, d0
 80098a4:	b093      	sub	sp, #76	; 0x4c
 80098a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80098ac:	9106      	str	r1, [sp, #24]
 80098ae:	ee10 aa10 	vmov	sl, s0
 80098b2:	4604      	mov	r4, r0
 80098b4:	9209      	str	r2, [sp, #36]	; 0x24
 80098b6:	930c      	str	r3, [sp, #48]	; 0x30
 80098b8:	46bb      	mov	fp, r7
 80098ba:	b975      	cbnz	r5, 80098da <_dtoa_r+0x42>
 80098bc:	2010      	movs	r0, #16
 80098be:	f001 fa21 	bl	800ad04 <malloc>
 80098c2:	4602      	mov	r2, r0
 80098c4:	6260      	str	r0, [r4, #36]	; 0x24
 80098c6:	b920      	cbnz	r0, 80098d2 <_dtoa_r+0x3a>
 80098c8:	4ba7      	ldr	r3, [pc, #668]	; (8009b68 <_dtoa_r+0x2d0>)
 80098ca:	21ea      	movs	r1, #234	; 0xea
 80098cc:	48a7      	ldr	r0, [pc, #668]	; (8009b6c <_dtoa_r+0x2d4>)
 80098ce:	f002 f8fd 	bl	800bacc <__assert_func>
 80098d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098d6:	6005      	str	r5, [r0, #0]
 80098d8:	60c5      	str	r5, [r0, #12]
 80098da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098dc:	6819      	ldr	r1, [r3, #0]
 80098de:	b151      	cbz	r1, 80098f6 <_dtoa_r+0x5e>
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	604a      	str	r2, [r1, #4]
 80098e4:	2301      	movs	r3, #1
 80098e6:	4093      	lsls	r3, r2
 80098e8:	608b      	str	r3, [r1, #8]
 80098ea:	4620      	mov	r0, r4
 80098ec:	f001 fa70 	bl	800add0 <_Bfree>
 80098f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	1e3b      	subs	r3, r7, #0
 80098f8:	bfaa      	itet	ge
 80098fa:	2300      	movge	r3, #0
 80098fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009900:	f8c8 3000 	strge.w	r3, [r8]
 8009904:	4b9a      	ldr	r3, [pc, #616]	; (8009b70 <_dtoa_r+0x2d8>)
 8009906:	bfbc      	itt	lt
 8009908:	2201      	movlt	r2, #1
 800990a:	f8c8 2000 	strlt.w	r2, [r8]
 800990e:	ea33 030b 	bics.w	r3, r3, fp
 8009912:	d11b      	bne.n	800994c <_dtoa_r+0xb4>
 8009914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009916:	f242 730f 	movw	r3, #9999	; 0x270f
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009920:	4333      	orrs	r3, r6
 8009922:	f000 8592 	beq.w	800a44a <_dtoa_r+0xbb2>
 8009926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009928:	b963      	cbnz	r3, 8009944 <_dtoa_r+0xac>
 800992a:	4b92      	ldr	r3, [pc, #584]	; (8009b74 <_dtoa_r+0x2dc>)
 800992c:	e022      	b.n	8009974 <_dtoa_r+0xdc>
 800992e:	4b92      	ldr	r3, [pc, #584]	; (8009b78 <_dtoa_r+0x2e0>)
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	3308      	adds	r3, #8
 8009934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	9801      	ldr	r0, [sp, #4]
 800993a:	b013      	add	sp, #76	; 0x4c
 800993c:	ecbd 8b04 	vpop	{d8-d9}
 8009940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009944:	4b8b      	ldr	r3, [pc, #556]	; (8009b74 <_dtoa_r+0x2dc>)
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	3303      	adds	r3, #3
 800994a:	e7f3      	b.n	8009934 <_dtoa_r+0x9c>
 800994c:	2200      	movs	r2, #0
 800994e:	2300      	movs	r3, #0
 8009950:	4650      	mov	r0, sl
 8009952:	4659      	mov	r1, fp
 8009954:	f7f7 f8d8 	bl	8000b08 <__aeabi_dcmpeq>
 8009958:	ec4b ab19 	vmov	d9, sl, fp
 800995c:	4680      	mov	r8, r0
 800995e:	b158      	cbz	r0, 8009978 <_dtoa_r+0xe0>
 8009960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009962:	2301      	movs	r3, #1
 8009964:	6013      	str	r3, [r2, #0]
 8009966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 856b 	beq.w	800a444 <_dtoa_r+0xbac>
 800996e:	4883      	ldr	r0, [pc, #524]	; (8009b7c <_dtoa_r+0x2e4>)
 8009970:	6018      	str	r0, [r3, #0]
 8009972:	1e43      	subs	r3, r0, #1
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	e7df      	b.n	8009938 <_dtoa_r+0xa0>
 8009978:	ec4b ab10 	vmov	d0, sl, fp
 800997c:	aa10      	add	r2, sp, #64	; 0x40
 800997e:	a911      	add	r1, sp, #68	; 0x44
 8009980:	4620      	mov	r0, r4
 8009982:	f001 fdd3 	bl	800b52c <__d2b>
 8009986:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800998a:	ee08 0a10 	vmov	s16, r0
 800998e:	2d00      	cmp	r5, #0
 8009990:	f000 8084 	beq.w	8009a9c <_dtoa_r+0x204>
 8009994:	ee19 3a90 	vmov	r3, s19
 8009998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800999c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80099a0:	4656      	mov	r6, sl
 80099a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80099a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80099ae:	4b74      	ldr	r3, [pc, #464]	; (8009b80 <_dtoa_r+0x2e8>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	4630      	mov	r0, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	f7f6 fc87 	bl	80002c8 <__aeabi_dsub>
 80099ba:	a365      	add	r3, pc, #404	; (adr r3, 8009b50 <_dtoa_r+0x2b8>)
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f7f6 fe3a 	bl	8000638 <__aeabi_dmul>
 80099c4:	a364      	add	r3, pc, #400	; (adr r3, 8009b58 <_dtoa_r+0x2c0>)
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	f7f6 fc7f 	bl	80002cc <__adddf3>
 80099ce:	4606      	mov	r6, r0
 80099d0:	4628      	mov	r0, r5
 80099d2:	460f      	mov	r7, r1
 80099d4:	f7f6 fdc6 	bl	8000564 <__aeabi_i2d>
 80099d8:	a361      	add	r3, pc, #388	; (adr r3, 8009b60 <_dtoa_r+0x2c8>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fe2b 	bl	8000638 <__aeabi_dmul>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f6 fc6f 	bl	80002cc <__adddf3>
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	f7f7 f8d1 	bl	8000b98 <__aeabi_d2iz>
 80099f6:	2200      	movs	r2, #0
 80099f8:	9000      	str	r0, [sp, #0]
 80099fa:	2300      	movs	r3, #0
 80099fc:	4630      	mov	r0, r6
 80099fe:	4639      	mov	r1, r7
 8009a00:	f7f7 f88c 	bl	8000b1c <__aeabi_dcmplt>
 8009a04:	b150      	cbz	r0, 8009a1c <_dtoa_r+0x184>
 8009a06:	9800      	ldr	r0, [sp, #0]
 8009a08:	f7f6 fdac 	bl	8000564 <__aeabi_i2d>
 8009a0c:	4632      	mov	r2, r6
 8009a0e:	463b      	mov	r3, r7
 8009a10:	f7f7 f87a 	bl	8000b08 <__aeabi_dcmpeq>
 8009a14:	b910      	cbnz	r0, 8009a1c <_dtoa_r+0x184>
 8009a16:	9b00      	ldr	r3, [sp, #0]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	9b00      	ldr	r3, [sp, #0]
 8009a1e:	2b16      	cmp	r3, #22
 8009a20:	d85a      	bhi.n	8009ad8 <_dtoa_r+0x240>
 8009a22:	9a00      	ldr	r2, [sp, #0]
 8009a24:	4b57      	ldr	r3, [pc, #348]	; (8009b84 <_dtoa_r+0x2ec>)
 8009a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	ec51 0b19 	vmov	r0, r1, d9
 8009a32:	f7f7 f873 	bl	8000b1c <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d050      	beq.n	8009adc <_dtoa_r+0x244>
 8009a3a:	9b00      	ldr	r3, [sp, #0]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	2300      	movs	r3, #0
 8009a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a46:	1b5d      	subs	r5, r3, r5
 8009a48:	1e6b      	subs	r3, r5, #1
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	bf45      	ittet	mi
 8009a4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a52:	9304      	strmi	r3, [sp, #16]
 8009a54:	2300      	movpl	r3, #0
 8009a56:	2300      	movmi	r3, #0
 8009a58:	bf4c      	ite	mi
 8009a5a:	9305      	strmi	r3, [sp, #20]
 8009a5c:	9304      	strpl	r3, [sp, #16]
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	db3d      	blt.n	8009ae0 <_dtoa_r+0x248>
 8009a64:	9b05      	ldr	r3, [sp, #20]
 8009a66:	9a00      	ldr	r2, [sp, #0]
 8009a68:	920a      	str	r2, [sp, #40]	; 0x28
 8009a6a:	4413      	add	r3, r2
 8009a6c:	9305      	str	r3, [sp, #20]
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9307      	str	r3, [sp, #28]
 8009a72:	9b06      	ldr	r3, [sp, #24]
 8009a74:	2b09      	cmp	r3, #9
 8009a76:	f200 8089 	bhi.w	8009b8c <_dtoa_r+0x2f4>
 8009a7a:	2b05      	cmp	r3, #5
 8009a7c:	bfc4      	itt	gt
 8009a7e:	3b04      	subgt	r3, #4
 8009a80:	9306      	strgt	r3, [sp, #24]
 8009a82:	9b06      	ldr	r3, [sp, #24]
 8009a84:	f1a3 0302 	sub.w	r3, r3, #2
 8009a88:	bfcc      	ite	gt
 8009a8a:	2500      	movgt	r5, #0
 8009a8c:	2501      	movle	r5, #1
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	f200 8087 	bhi.w	8009ba2 <_dtoa_r+0x30a>
 8009a94:	e8df f003 	tbb	[pc, r3]
 8009a98:	59383a2d 	.word	0x59383a2d
 8009a9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009aa0:	441d      	add	r5, r3
 8009aa2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009aa6:	2b20      	cmp	r3, #32
 8009aa8:	bfc1      	itttt	gt
 8009aaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009aae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009ab2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009ab6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009aba:	bfda      	itte	le
 8009abc:	f1c3 0320 	rsble	r3, r3, #32
 8009ac0:	fa06 f003 	lslle.w	r0, r6, r3
 8009ac4:	4318      	orrgt	r0, r3
 8009ac6:	f7f6 fd3d 	bl	8000544 <__aeabi_ui2d>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4606      	mov	r6, r0
 8009ace:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009ad2:	3d01      	subs	r5, #1
 8009ad4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ad6:	e76a      	b.n	80099ae <_dtoa_r+0x116>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e7b2      	b.n	8009a42 <_dtoa_r+0x1aa>
 8009adc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ade:	e7b1      	b.n	8009a44 <_dtoa_r+0x1ac>
 8009ae0:	9b04      	ldr	r3, [sp, #16]
 8009ae2:	9a00      	ldr	r2, [sp, #0]
 8009ae4:	1a9b      	subs	r3, r3, r2
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	4253      	negs	r3, r2
 8009aea:	9307      	str	r3, [sp, #28]
 8009aec:	2300      	movs	r3, #0
 8009aee:	930a      	str	r3, [sp, #40]	; 0x28
 8009af0:	e7bf      	b.n	8009a72 <_dtoa_r+0x1da>
 8009af2:	2300      	movs	r3, #0
 8009af4:	9308      	str	r3, [sp, #32]
 8009af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	dc55      	bgt.n	8009ba8 <_dtoa_r+0x310>
 8009afc:	2301      	movs	r3, #1
 8009afe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b02:	461a      	mov	r2, r3
 8009b04:	9209      	str	r2, [sp, #36]	; 0x24
 8009b06:	e00c      	b.n	8009b22 <_dtoa_r+0x28a>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e7f3      	b.n	8009af4 <_dtoa_r+0x25c>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b10:	9308      	str	r3, [sp, #32]
 8009b12:	9b00      	ldr	r3, [sp, #0]
 8009b14:	4413      	add	r3, r2
 8009b16:	9302      	str	r3, [sp, #8]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	9303      	str	r3, [sp, #12]
 8009b1e:	bfb8      	it	lt
 8009b20:	2301      	movlt	r3, #1
 8009b22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b24:	2200      	movs	r2, #0
 8009b26:	6042      	str	r2, [r0, #4]
 8009b28:	2204      	movs	r2, #4
 8009b2a:	f102 0614 	add.w	r6, r2, #20
 8009b2e:	429e      	cmp	r6, r3
 8009b30:	6841      	ldr	r1, [r0, #4]
 8009b32:	d93d      	bls.n	8009bb0 <_dtoa_r+0x318>
 8009b34:	4620      	mov	r0, r4
 8009b36:	f001 f90b 	bl	800ad50 <_Balloc>
 8009b3a:	9001      	str	r0, [sp, #4]
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d13b      	bne.n	8009bb8 <_dtoa_r+0x320>
 8009b40:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <_dtoa_r+0x2f0>)
 8009b42:	4602      	mov	r2, r0
 8009b44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b48:	e6c0      	b.n	80098cc <_dtoa_r+0x34>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e7df      	b.n	8009b0e <_dtoa_r+0x276>
 8009b4e:	bf00      	nop
 8009b50:	636f4361 	.word	0x636f4361
 8009b54:	3fd287a7 	.word	0x3fd287a7
 8009b58:	8b60c8b3 	.word	0x8b60c8b3
 8009b5c:	3fc68a28 	.word	0x3fc68a28
 8009b60:	509f79fb 	.word	0x509f79fb
 8009b64:	3fd34413 	.word	0x3fd34413
 8009b68:	08028046 	.word	0x08028046
 8009b6c:	0802805d 	.word	0x0802805d
 8009b70:	7ff00000 	.word	0x7ff00000
 8009b74:	08028042 	.word	0x08028042
 8009b78:	08028039 	.word	0x08028039
 8009b7c:	08027ebd 	.word	0x08027ebd
 8009b80:	3ff80000 	.word	0x3ff80000
 8009b84:	080281c8 	.word	0x080281c8
 8009b88:	080280b8 	.word	0x080280b8
 8009b8c:	2501      	movs	r5, #1
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9306      	str	r3, [sp, #24]
 8009b92:	9508      	str	r5, [sp, #32]
 8009b94:	f04f 33ff 	mov.w	r3, #4294967295
 8009b98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2312      	movs	r3, #18
 8009ba0:	e7b0      	b.n	8009b04 <_dtoa_r+0x26c>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	9308      	str	r3, [sp, #32]
 8009ba6:	e7f5      	b.n	8009b94 <_dtoa_r+0x2fc>
 8009ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009baa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bae:	e7b8      	b.n	8009b22 <_dtoa_r+0x28a>
 8009bb0:	3101      	adds	r1, #1
 8009bb2:	6041      	str	r1, [r0, #4]
 8009bb4:	0052      	lsls	r2, r2, #1
 8009bb6:	e7b8      	b.n	8009b2a <_dtoa_r+0x292>
 8009bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bba:	9a01      	ldr	r2, [sp, #4]
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	2b0e      	cmp	r3, #14
 8009bc2:	f200 809d 	bhi.w	8009d00 <_dtoa_r+0x468>
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	f000 809a 	beq.w	8009d00 <_dtoa_r+0x468>
 8009bcc:	9b00      	ldr	r3, [sp, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dd32      	ble.n	8009c38 <_dtoa_r+0x3a0>
 8009bd2:	4ab7      	ldr	r2, [pc, #732]	; (8009eb0 <_dtoa_r+0x618>)
 8009bd4:	f003 030f 	and.w	r3, r3, #15
 8009bd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	05d8      	lsls	r0, r3, #23
 8009be4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009be8:	d516      	bpl.n	8009c18 <_dtoa_r+0x380>
 8009bea:	4bb2      	ldr	r3, [pc, #712]	; (8009eb4 <_dtoa_r+0x61c>)
 8009bec:	ec51 0b19 	vmov	r0, r1, d9
 8009bf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bf4:	f7f6 fe4a 	bl	800088c <__aeabi_ddiv>
 8009bf8:	f007 070f 	and.w	r7, r7, #15
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	468b      	mov	fp, r1
 8009c00:	2503      	movs	r5, #3
 8009c02:	4eac      	ldr	r6, [pc, #688]	; (8009eb4 <_dtoa_r+0x61c>)
 8009c04:	b957      	cbnz	r7, 8009c1c <_dtoa_r+0x384>
 8009c06:	4642      	mov	r2, r8
 8009c08:	464b      	mov	r3, r9
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	4659      	mov	r1, fp
 8009c0e:	f7f6 fe3d 	bl	800088c <__aeabi_ddiv>
 8009c12:	4682      	mov	sl, r0
 8009c14:	468b      	mov	fp, r1
 8009c16:	e028      	b.n	8009c6a <_dtoa_r+0x3d2>
 8009c18:	2502      	movs	r5, #2
 8009c1a:	e7f2      	b.n	8009c02 <_dtoa_r+0x36a>
 8009c1c:	07f9      	lsls	r1, r7, #31
 8009c1e:	d508      	bpl.n	8009c32 <_dtoa_r+0x39a>
 8009c20:	4640      	mov	r0, r8
 8009c22:	4649      	mov	r1, r9
 8009c24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c28:	f7f6 fd06 	bl	8000638 <__aeabi_dmul>
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4689      	mov	r9, r1
 8009c32:	107f      	asrs	r7, r7, #1
 8009c34:	3608      	adds	r6, #8
 8009c36:	e7e5      	b.n	8009c04 <_dtoa_r+0x36c>
 8009c38:	f000 809b 	beq.w	8009d72 <_dtoa_r+0x4da>
 8009c3c:	9b00      	ldr	r3, [sp, #0]
 8009c3e:	4f9d      	ldr	r7, [pc, #628]	; (8009eb4 <_dtoa_r+0x61c>)
 8009c40:	425e      	negs	r6, r3
 8009c42:	4b9b      	ldr	r3, [pc, #620]	; (8009eb0 <_dtoa_r+0x618>)
 8009c44:	f006 020f 	and.w	r2, r6, #15
 8009c48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	ec51 0b19 	vmov	r0, r1, d9
 8009c54:	f7f6 fcf0 	bl	8000638 <__aeabi_dmul>
 8009c58:	1136      	asrs	r6, r6, #4
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	468b      	mov	fp, r1
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2502      	movs	r5, #2
 8009c62:	2e00      	cmp	r6, #0
 8009c64:	d17a      	bne.n	8009d5c <_dtoa_r+0x4c4>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1d3      	bne.n	8009c12 <_dtoa_r+0x37a>
 8009c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 8082 	beq.w	8009d76 <_dtoa_r+0x4de>
 8009c72:	4b91      	ldr	r3, [pc, #580]	; (8009eb8 <_dtoa_r+0x620>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	4650      	mov	r0, sl
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7f6 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d079      	beq.n	8009d76 <_dtoa_r+0x4de>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d076      	beq.n	8009d76 <_dtoa_r+0x4de>
 8009c88:	9b02      	ldr	r3, [sp, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	dd36      	ble.n	8009cfc <_dtoa_r+0x464>
 8009c8e:	9b00      	ldr	r3, [sp, #0]
 8009c90:	4650      	mov	r0, sl
 8009c92:	4659      	mov	r1, fp
 8009c94:	1e5f      	subs	r7, r3, #1
 8009c96:	2200      	movs	r2, #0
 8009c98:	4b88      	ldr	r3, [pc, #544]	; (8009ebc <_dtoa_r+0x624>)
 8009c9a:	f7f6 fccd 	bl	8000638 <__aeabi_dmul>
 8009c9e:	9e02      	ldr	r6, [sp, #8]
 8009ca0:	4682      	mov	sl, r0
 8009ca2:	468b      	mov	fp, r1
 8009ca4:	3501      	adds	r5, #1
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f7f6 fc5c 	bl	8000564 <__aeabi_i2d>
 8009cac:	4652      	mov	r2, sl
 8009cae:	465b      	mov	r3, fp
 8009cb0:	f7f6 fcc2 	bl	8000638 <__aeabi_dmul>
 8009cb4:	4b82      	ldr	r3, [pc, #520]	; (8009ec0 <_dtoa_r+0x628>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f7f6 fb08 	bl	80002cc <__adddf3>
 8009cbc:	46d0      	mov	r8, sl
 8009cbe:	46d9      	mov	r9, fp
 8009cc0:	4682      	mov	sl, r0
 8009cc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	d158      	bne.n	8009d7c <_dtoa_r+0x4e4>
 8009cca:	4b7e      	ldr	r3, [pc, #504]	; (8009ec4 <_dtoa_r+0x62c>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4640      	mov	r0, r8
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	f7f6 faf9 	bl	80002c8 <__aeabi_dsub>
 8009cd6:	4652      	mov	r2, sl
 8009cd8:	465b      	mov	r3, fp
 8009cda:	4680      	mov	r8, r0
 8009cdc:	4689      	mov	r9, r1
 8009cde:	f7f6 ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f040 8295 	bne.w	800a212 <_dtoa_r+0x97a>
 8009ce8:	4652      	mov	r2, sl
 8009cea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	f7f6 ff13 	bl	8000b1c <__aeabi_dcmplt>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f040 8289 	bne.w	800a20e <_dtoa_r+0x976>
 8009cfc:	ec5b ab19 	vmov	sl, fp, d9
 8009d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f2c0 8148 	blt.w	8009f98 <_dtoa_r+0x700>
 8009d08:	9a00      	ldr	r2, [sp, #0]
 8009d0a:	2a0e      	cmp	r2, #14
 8009d0c:	f300 8144 	bgt.w	8009f98 <_dtoa_r+0x700>
 8009d10:	4b67      	ldr	r3, [pc, #412]	; (8009eb0 <_dtoa_r+0x618>)
 8009d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f280 80d5 	bge.w	8009ecc <_dtoa_r+0x634>
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f300 80d1 	bgt.w	8009ecc <_dtoa_r+0x634>
 8009d2a:	f040 826f 	bne.w	800a20c <_dtoa_r+0x974>
 8009d2e:	4b65      	ldr	r3, [pc, #404]	; (8009ec4 <_dtoa_r+0x62c>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	4640      	mov	r0, r8
 8009d34:	4649      	mov	r1, r9
 8009d36:	f7f6 fc7f 	bl	8000638 <__aeabi_dmul>
 8009d3a:	4652      	mov	r2, sl
 8009d3c:	465b      	mov	r3, fp
 8009d3e:	f7f6 ff01 	bl	8000b44 <__aeabi_dcmpge>
 8009d42:	9e03      	ldr	r6, [sp, #12]
 8009d44:	4637      	mov	r7, r6
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f040 8245 	bne.w	800a1d6 <_dtoa_r+0x93e>
 8009d4c:	9d01      	ldr	r5, [sp, #4]
 8009d4e:	2331      	movs	r3, #49	; 0x31
 8009d50:	f805 3b01 	strb.w	r3, [r5], #1
 8009d54:	9b00      	ldr	r3, [sp, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	e240      	b.n	800a1de <_dtoa_r+0x946>
 8009d5c:	07f2      	lsls	r2, r6, #31
 8009d5e:	d505      	bpl.n	8009d6c <_dtoa_r+0x4d4>
 8009d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d64:	f7f6 fc68 	bl	8000638 <__aeabi_dmul>
 8009d68:	3501      	adds	r5, #1
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	1076      	asrs	r6, r6, #1
 8009d6e:	3708      	adds	r7, #8
 8009d70:	e777      	b.n	8009c62 <_dtoa_r+0x3ca>
 8009d72:	2502      	movs	r5, #2
 8009d74:	e779      	b.n	8009c6a <_dtoa_r+0x3d2>
 8009d76:	9f00      	ldr	r7, [sp, #0]
 8009d78:	9e03      	ldr	r6, [sp, #12]
 8009d7a:	e794      	b.n	8009ca6 <_dtoa_r+0x40e>
 8009d7c:	9901      	ldr	r1, [sp, #4]
 8009d7e:	4b4c      	ldr	r3, [pc, #304]	; (8009eb0 <_dtoa_r+0x618>)
 8009d80:	4431      	add	r1, r6
 8009d82:	910d      	str	r1, [sp, #52]	; 0x34
 8009d84:	9908      	ldr	r1, [sp, #32]
 8009d86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	d043      	beq.n	8009e1a <_dtoa_r+0x582>
 8009d92:	494d      	ldr	r1, [pc, #308]	; (8009ec8 <_dtoa_r+0x630>)
 8009d94:	2000      	movs	r0, #0
 8009d96:	f7f6 fd79 	bl	800088c <__aeabi_ddiv>
 8009d9a:	4652      	mov	r2, sl
 8009d9c:	465b      	mov	r3, fp
 8009d9e:	f7f6 fa93 	bl	80002c8 <__aeabi_dsub>
 8009da2:	9d01      	ldr	r5, [sp, #4]
 8009da4:	4682      	mov	sl, r0
 8009da6:	468b      	mov	fp, r1
 8009da8:	4649      	mov	r1, r9
 8009daa:	4640      	mov	r0, r8
 8009dac:	f7f6 fef4 	bl	8000b98 <__aeabi_d2iz>
 8009db0:	4606      	mov	r6, r0
 8009db2:	f7f6 fbd7 	bl	8000564 <__aeabi_i2d>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4640      	mov	r0, r8
 8009dbc:	4649      	mov	r1, r9
 8009dbe:	f7f6 fa83 	bl	80002c8 <__aeabi_dsub>
 8009dc2:	3630      	adds	r6, #48	; 0x30
 8009dc4:	f805 6b01 	strb.w	r6, [r5], #1
 8009dc8:	4652      	mov	r2, sl
 8009dca:	465b      	mov	r3, fp
 8009dcc:	4680      	mov	r8, r0
 8009dce:	4689      	mov	r9, r1
 8009dd0:	f7f6 fea4 	bl	8000b1c <__aeabi_dcmplt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d163      	bne.n	8009ea0 <_dtoa_r+0x608>
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	4936      	ldr	r1, [pc, #216]	; (8009eb8 <_dtoa_r+0x620>)
 8009dde:	2000      	movs	r0, #0
 8009de0:	f7f6 fa72 	bl	80002c8 <__aeabi_dsub>
 8009de4:	4652      	mov	r2, sl
 8009de6:	465b      	mov	r3, fp
 8009de8:	f7f6 fe98 	bl	8000b1c <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f040 80b5 	bne.w	8009f5c <_dtoa_r+0x6c4>
 8009df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df4:	429d      	cmp	r5, r3
 8009df6:	d081      	beq.n	8009cfc <_dtoa_r+0x464>
 8009df8:	4b30      	ldr	r3, [pc, #192]	; (8009ebc <_dtoa_r+0x624>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4650      	mov	r0, sl
 8009dfe:	4659      	mov	r1, fp
 8009e00:	f7f6 fc1a 	bl	8000638 <__aeabi_dmul>
 8009e04:	4b2d      	ldr	r3, [pc, #180]	; (8009ebc <_dtoa_r+0x624>)
 8009e06:	4682      	mov	sl, r0
 8009e08:	468b      	mov	fp, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f7f6 fc12 	bl	8000638 <__aeabi_dmul>
 8009e14:	4680      	mov	r8, r0
 8009e16:	4689      	mov	r9, r1
 8009e18:	e7c6      	b.n	8009da8 <_dtoa_r+0x510>
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	4659      	mov	r1, fp
 8009e1e:	f7f6 fc0b 	bl	8000638 <__aeabi_dmul>
 8009e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e24:	9d01      	ldr	r5, [sp, #4]
 8009e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e28:	4682      	mov	sl, r0
 8009e2a:	468b      	mov	fp, r1
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	4640      	mov	r0, r8
 8009e30:	f7f6 feb2 	bl	8000b98 <__aeabi_d2iz>
 8009e34:	4606      	mov	r6, r0
 8009e36:	f7f6 fb95 	bl	8000564 <__aeabi_i2d>
 8009e3a:	3630      	adds	r6, #48	; 0x30
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fa40 	bl	80002c8 <__aeabi_dsub>
 8009e48:	f805 6b01 	strb.w	r6, [r5], #1
 8009e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e4e:	429d      	cmp	r5, r3
 8009e50:	4680      	mov	r8, r0
 8009e52:	4689      	mov	r9, r1
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	d124      	bne.n	8009ea4 <_dtoa_r+0x60c>
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <_dtoa_r+0x630>)
 8009e5c:	4650      	mov	r0, sl
 8009e5e:	4659      	mov	r1, fp
 8009e60:	f7f6 fa34 	bl	80002cc <__adddf3>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fe74 	bl	8000b58 <__aeabi_dcmpgt>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d173      	bne.n	8009f5c <_dtoa_r+0x6c4>
 8009e74:	4652      	mov	r2, sl
 8009e76:	465b      	mov	r3, fp
 8009e78:	4913      	ldr	r1, [pc, #76]	; (8009ec8 <_dtoa_r+0x630>)
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f7f6 fa24 	bl	80002c8 <__aeabi_dsub>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4640      	mov	r0, r8
 8009e86:	4649      	mov	r1, r9
 8009e88:	f7f6 fe48 	bl	8000b1c <__aeabi_dcmplt>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f43f af35 	beq.w	8009cfc <_dtoa_r+0x464>
 8009e92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e94:	1e6b      	subs	r3, r5, #1
 8009e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e9c:	2b30      	cmp	r3, #48	; 0x30
 8009e9e:	d0f8      	beq.n	8009e92 <_dtoa_r+0x5fa>
 8009ea0:	9700      	str	r7, [sp, #0]
 8009ea2:	e049      	b.n	8009f38 <_dtoa_r+0x6a0>
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <_dtoa_r+0x624>)
 8009ea6:	f7f6 fbc7 	bl	8000638 <__aeabi_dmul>
 8009eaa:	4680      	mov	r8, r0
 8009eac:	4689      	mov	r9, r1
 8009eae:	e7bd      	b.n	8009e2c <_dtoa_r+0x594>
 8009eb0:	080281c8 	.word	0x080281c8
 8009eb4:	080281a0 	.word	0x080281a0
 8009eb8:	3ff00000 	.word	0x3ff00000
 8009ebc:	40240000 	.word	0x40240000
 8009ec0:	401c0000 	.word	0x401c0000
 8009ec4:	40140000 	.word	0x40140000
 8009ec8:	3fe00000 	.word	0x3fe00000
 8009ecc:	9d01      	ldr	r5, [sp, #4]
 8009ece:	4656      	mov	r6, sl
 8009ed0:	465f      	mov	r7, fp
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 fcd7 	bl	800088c <__aeabi_ddiv>
 8009ede:	f7f6 fe5b 	bl	8000b98 <__aeabi_d2iz>
 8009ee2:	4682      	mov	sl, r0
 8009ee4:	f7f6 fb3e 	bl	8000564 <__aeabi_i2d>
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	f7f6 fba4 	bl	8000638 <__aeabi_dmul>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009efc:	f7f6 f9e4 	bl	80002c8 <__aeabi_dsub>
 8009f00:	f805 6b01 	strb.w	r6, [r5], #1
 8009f04:	9e01      	ldr	r6, [sp, #4]
 8009f06:	9f03      	ldr	r7, [sp, #12]
 8009f08:	1bae      	subs	r6, r5, r6
 8009f0a:	42b7      	cmp	r7, r6
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	d135      	bne.n	8009f7e <_dtoa_r+0x6e6>
 8009f12:	f7f6 f9db 	bl	80002cc <__adddf3>
 8009f16:	4642      	mov	r2, r8
 8009f18:	464b      	mov	r3, r9
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	f7f6 fe1b 	bl	8000b58 <__aeabi_dcmpgt>
 8009f22:	b9d0      	cbnz	r0, 8009f5a <_dtoa_r+0x6c2>
 8009f24:	4642      	mov	r2, r8
 8009f26:	464b      	mov	r3, r9
 8009f28:	4630      	mov	r0, r6
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	f7f6 fdec 	bl	8000b08 <__aeabi_dcmpeq>
 8009f30:	b110      	cbz	r0, 8009f38 <_dtoa_r+0x6a0>
 8009f32:	f01a 0f01 	tst.w	sl, #1
 8009f36:	d110      	bne.n	8009f5a <_dtoa_r+0x6c2>
 8009f38:	4620      	mov	r0, r4
 8009f3a:	ee18 1a10 	vmov	r1, s16
 8009f3e:	f000 ff47 	bl	800add0 <_Bfree>
 8009f42:	2300      	movs	r3, #0
 8009f44:	9800      	ldr	r0, [sp, #0]
 8009f46:	702b      	strb	r3, [r5, #0]
 8009f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	6018      	str	r0, [r3, #0]
 8009f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f43f acf1 	beq.w	8009938 <_dtoa_r+0xa0>
 8009f56:	601d      	str	r5, [r3, #0]
 8009f58:	e4ee      	b.n	8009938 <_dtoa_r+0xa0>
 8009f5a:	9f00      	ldr	r7, [sp, #0]
 8009f5c:	462b      	mov	r3, r5
 8009f5e:	461d      	mov	r5, r3
 8009f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f64:	2a39      	cmp	r2, #57	; 0x39
 8009f66:	d106      	bne.n	8009f76 <_dtoa_r+0x6de>
 8009f68:	9a01      	ldr	r2, [sp, #4]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d1f7      	bne.n	8009f5e <_dtoa_r+0x6c6>
 8009f6e:	9901      	ldr	r1, [sp, #4]
 8009f70:	2230      	movs	r2, #48	; 0x30
 8009f72:	3701      	adds	r7, #1
 8009f74:	700a      	strb	r2, [r1, #0]
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	3201      	adds	r2, #1
 8009f7a:	701a      	strb	r2, [r3, #0]
 8009f7c:	e790      	b.n	8009ea0 <_dtoa_r+0x608>
 8009f7e:	4ba6      	ldr	r3, [pc, #664]	; (800a218 <_dtoa_r+0x980>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	f7f6 fb59 	bl	8000638 <__aeabi_dmul>
 8009f86:	2200      	movs	r2, #0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460f      	mov	r7, r1
 8009f8e:	f7f6 fdbb 	bl	8000b08 <__aeabi_dcmpeq>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d09d      	beq.n	8009ed2 <_dtoa_r+0x63a>
 8009f96:	e7cf      	b.n	8009f38 <_dtoa_r+0x6a0>
 8009f98:	9a08      	ldr	r2, [sp, #32]
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	f000 80d7 	beq.w	800a14e <_dtoa_r+0x8b6>
 8009fa0:	9a06      	ldr	r2, [sp, #24]
 8009fa2:	2a01      	cmp	r2, #1
 8009fa4:	f300 80ba 	bgt.w	800a11c <_dtoa_r+0x884>
 8009fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	f000 80b2 	beq.w	800a114 <_dtoa_r+0x87c>
 8009fb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fb4:	9e07      	ldr	r6, [sp, #28]
 8009fb6:	9d04      	ldr	r5, [sp, #16]
 8009fb8:	9a04      	ldr	r2, [sp, #16]
 8009fba:	441a      	add	r2, r3
 8009fbc:	9204      	str	r2, [sp, #16]
 8009fbe:	9a05      	ldr	r2, [sp, #20]
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	441a      	add	r2, r3
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	9205      	str	r2, [sp, #20]
 8009fc8:	f001 f804 	bl	800afd4 <__i2b>
 8009fcc:	4607      	mov	r7, r0
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	dd0c      	ble.n	8009fec <_dtoa_r+0x754>
 8009fd2:	9b05      	ldr	r3, [sp, #20]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dd09      	ble.n	8009fec <_dtoa_r+0x754>
 8009fd8:	42ab      	cmp	r3, r5
 8009fda:	9a04      	ldr	r2, [sp, #16]
 8009fdc:	bfa8      	it	ge
 8009fde:	462b      	movge	r3, r5
 8009fe0:	1ad2      	subs	r2, r2, r3
 8009fe2:	9204      	str	r2, [sp, #16]
 8009fe4:	9a05      	ldr	r2, [sp, #20]
 8009fe6:	1aed      	subs	r5, r5, r3
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	9305      	str	r3, [sp, #20]
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	b31b      	cbz	r3, 800a038 <_dtoa_r+0x7a0>
 8009ff0:	9b08      	ldr	r3, [sp, #32]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 80af 	beq.w	800a156 <_dtoa_r+0x8be>
 8009ff8:	2e00      	cmp	r6, #0
 8009ffa:	dd13      	ble.n	800a024 <_dtoa_r+0x78c>
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	4632      	mov	r2, r6
 800a000:	4620      	mov	r0, r4
 800a002:	f001 f8a7 	bl	800b154 <__pow5mult>
 800a006:	ee18 2a10 	vmov	r2, s16
 800a00a:	4601      	mov	r1, r0
 800a00c:	4607      	mov	r7, r0
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 fff6 	bl	800b000 <__multiply>
 800a014:	ee18 1a10 	vmov	r1, s16
 800a018:	4680      	mov	r8, r0
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 fed8 	bl	800add0 <_Bfree>
 800a020:	ee08 8a10 	vmov	s16, r8
 800a024:	9b07      	ldr	r3, [sp, #28]
 800a026:	1b9a      	subs	r2, r3, r6
 800a028:	d006      	beq.n	800a038 <_dtoa_r+0x7a0>
 800a02a:	ee18 1a10 	vmov	r1, s16
 800a02e:	4620      	mov	r0, r4
 800a030:	f001 f890 	bl	800b154 <__pow5mult>
 800a034:	ee08 0a10 	vmov	s16, r0
 800a038:	2101      	movs	r1, #1
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 ffca 	bl	800afd4 <__i2b>
 800a040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a042:	2b00      	cmp	r3, #0
 800a044:	4606      	mov	r6, r0
 800a046:	f340 8088 	ble.w	800a15a <_dtoa_r+0x8c2>
 800a04a:	461a      	mov	r2, r3
 800a04c:	4601      	mov	r1, r0
 800a04e:	4620      	mov	r0, r4
 800a050:	f001 f880 	bl	800b154 <__pow5mult>
 800a054:	9b06      	ldr	r3, [sp, #24]
 800a056:	2b01      	cmp	r3, #1
 800a058:	4606      	mov	r6, r0
 800a05a:	f340 8081 	ble.w	800a160 <_dtoa_r+0x8c8>
 800a05e:	f04f 0800 	mov.w	r8, #0
 800a062:	6933      	ldr	r3, [r6, #16]
 800a064:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a068:	6918      	ldr	r0, [r3, #16]
 800a06a:	f000 ff63 	bl	800af34 <__hi0bits>
 800a06e:	f1c0 0020 	rsb	r0, r0, #32
 800a072:	9b05      	ldr	r3, [sp, #20]
 800a074:	4418      	add	r0, r3
 800a076:	f010 001f 	ands.w	r0, r0, #31
 800a07a:	f000 8092 	beq.w	800a1a2 <_dtoa_r+0x90a>
 800a07e:	f1c0 0320 	rsb	r3, r0, #32
 800a082:	2b04      	cmp	r3, #4
 800a084:	f340 808a 	ble.w	800a19c <_dtoa_r+0x904>
 800a088:	f1c0 001c 	rsb	r0, r0, #28
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	4403      	add	r3, r0
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	9b05      	ldr	r3, [sp, #20]
 800a094:	4403      	add	r3, r0
 800a096:	4405      	add	r5, r0
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	9b04      	ldr	r3, [sp, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dd07      	ble.n	800a0b0 <_dtoa_r+0x818>
 800a0a0:	ee18 1a10 	vmov	r1, s16
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f001 f8ae 	bl	800b208 <__lshift>
 800a0ac:	ee08 0a10 	vmov	s16, r0
 800a0b0:	9b05      	ldr	r3, [sp, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd05      	ble.n	800a0c2 <_dtoa_r+0x82a>
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f001 f8a4 	bl	800b208 <__lshift>
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d06e      	beq.n	800a1a6 <_dtoa_r+0x90e>
 800a0c8:	ee18 0a10 	vmov	r0, s16
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	f001 f90b 	bl	800b2e8 <__mcmp>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	da67      	bge.n	800a1a6 <_dtoa_r+0x90e>
 800a0d6:	9b00      	ldr	r3, [sp, #0]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	ee18 1a10 	vmov	r1, s16
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	220a      	movs	r2, #10
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f000 fe95 	bl	800ae14 <__multadd>
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	ee08 0a10 	vmov	s16, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 81b1 	beq.w	800a458 <_dtoa_r+0xbc0>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	220a      	movs	r2, #10
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f000 fe89 	bl	800ae14 <__multadd>
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	4607      	mov	r7, r0
 800a108:	f300 808e 	bgt.w	800a228 <_dtoa_r+0x990>
 800a10c:	9b06      	ldr	r3, [sp, #24]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	dc51      	bgt.n	800a1b6 <_dtoa_r+0x91e>
 800a112:	e089      	b.n	800a228 <_dtoa_r+0x990>
 800a114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a11a:	e74b      	b.n	8009fb4 <_dtoa_r+0x71c>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	1e5e      	subs	r6, r3, #1
 800a120:	9b07      	ldr	r3, [sp, #28]
 800a122:	42b3      	cmp	r3, r6
 800a124:	bfbf      	itttt	lt
 800a126:	9b07      	ldrlt	r3, [sp, #28]
 800a128:	9607      	strlt	r6, [sp, #28]
 800a12a:	1af2      	sublt	r2, r6, r3
 800a12c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a12e:	bfb6      	itet	lt
 800a130:	189b      	addlt	r3, r3, r2
 800a132:	1b9e      	subge	r6, r3, r6
 800a134:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a136:	9b03      	ldr	r3, [sp, #12]
 800a138:	bfb8      	it	lt
 800a13a:	2600      	movlt	r6, #0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	bfb7      	itett	lt
 800a140:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a144:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a148:	1a9d      	sublt	r5, r3, r2
 800a14a:	2300      	movlt	r3, #0
 800a14c:	e734      	b.n	8009fb8 <_dtoa_r+0x720>
 800a14e:	9e07      	ldr	r6, [sp, #28]
 800a150:	9d04      	ldr	r5, [sp, #16]
 800a152:	9f08      	ldr	r7, [sp, #32]
 800a154:	e73b      	b.n	8009fce <_dtoa_r+0x736>
 800a156:	9a07      	ldr	r2, [sp, #28]
 800a158:	e767      	b.n	800a02a <_dtoa_r+0x792>
 800a15a:	9b06      	ldr	r3, [sp, #24]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	dc18      	bgt.n	800a192 <_dtoa_r+0x8fa>
 800a160:	f1ba 0f00 	cmp.w	sl, #0
 800a164:	d115      	bne.n	800a192 <_dtoa_r+0x8fa>
 800a166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a16a:	b993      	cbnz	r3, 800a192 <_dtoa_r+0x8fa>
 800a16c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a170:	0d1b      	lsrs	r3, r3, #20
 800a172:	051b      	lsls	r3, r3, #20
 800a174:	b183      	cbz	r3, 800a198 <_dtoa_r+0x900>
 800a176:	9b04      	ldr	r3, [sp, #16]
 800a178:	3301      	adds	r3, #1
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	9b05      	ldr	r3, [sp, #20]
 800a17e:	3301      	adds	r3, #1
 800a180:	9305      	str	r3, [sp, #20]
 800a182:	f04f 0801 	mov.w	r8, #1
 800a186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f47f af6a 	bne.w	800a062 <_dtoa_r+0x7ca>
 800a18e:	2001      	movs	r0, #1
 800a190:	e76f      	b.n	800a072 <_dtoa_r+0x7da>
 800a192:	f04f 0800 	mov.w	r8, #0
 800a196:	e7f6      	b.n	800a186 <_dtoa_r+0x8ee>
 800a198:	4698      	mov	r8, r3
 800a19a:	e7f4      	b.n	800a186 <_dtoa_r+0x8ee>
 800a19c:	f43f af7d 	beq.w	800a09a <_dtoa_r+0x802>
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	301c      	adds	r0, #28
 800a1a4:	e772      	b.n	800a08c <_dtoa_r+0x7f4>
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dc37      	bgt.n	800a21c <_dtoa_r+0x984>
 800a1ac:	9b06      	ldr	r3, [sp, #24]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	dd34      	ble.n	800a21c <_dtoa_r+0x984>
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	9302      	str	r3, [sp, #8]
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	b96b      	cbnz	r3, 800a1d6 <_dtoa_r+0x93e>
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	2205      	movs	r2, #5
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 fe28 	bl	800ae14 <__multadd>
 800a1c4:	4601      	mov	r1, r0
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	ee18 0a10 	vmov	r0, s16
 800a1cc:	f001 f88c 	bl	800b2e8 <__mcmp>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	f73f adbb 	bgt.w	8009d4c <_dtoa_r+0x4b4>
 800a1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d8:	9d01      	ldr	r5, [sp, #4]
 800a1da:	43db      	mvns	r3, r3
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	f04f 0800 	mov.w	r8, #0
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fdf3 	bl	800add0 <_Bfree>
 800a1ea:	2f00      	cmp	r7, #0
 800a1ec:	f43f aea4 	beq.w	8009f38 <_dtoa_r+0x6a0>
 800a1f0:	f1b8 0f00 	cmp.w	r8, #0
 800a1f4:	d005      	beq.n	800a202 <_dtoa_r+0x96a>
 800a1f6:	45b8      	cmp	r8, r7
 800a1f8:	d003      	beq.n	800a202 <_dtoa_r+0x96a>
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fde7 	bl	800add0 <_Bfree>
 800a202:	4639      	mov	r1, r7
 800a204:	4620      	mov	r0, r4
 800a206:	f000 fde3 	bl	800add0 <_Bfree>
 800a20a:	e695      	b.n	8009f38 <_dtoa_r+0x6a0>
 800a20c:	2600      	movs	r6, #0
 800a20e:	4637      	mov	r7, r6
 800a210:	e7e1      	b.n	800a1d6 <_dtoa_r+0x93e>
 800a212:	9700      	str	r7, [sp, #0]
 800a214:	4637      	mov	r7, r6
 800a216:	e599      	b.n	8009d4c <_dtoa_r+0x4b4>
 800a218:	40240000 	.word	0x40240000
 800a21c:	9b08      	ldr	r3, [sp, #32]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 80ca 	beq.w	800a3b8 <_dtoa_r+0xb20>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	9302      	str	r3, [sp, #8]
 800a228:	2d00      	cmp	r5, #0
 800a22a:	dd05      	ble.n	800a238 <_dtoa_r+0x9a0>
 800a22c:	4639      	mov	r1, r7
 800a22e:	462a      	mov	r2, r5
 800a230:	4620      	mov	r0, r4
 800a232:	f000 ffe9 	bl	800b208 <__lshift>
 800a236:	4607      	mov	r7, r0
 800a238:	f1b8 0f00 	cmp.w	r8, #0
 800a23c:	d05b      	beq.n	800a2f6 <_dtoa_r+0xa5e>
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	4620      	mov	r0, r4
 800a242:	f000 fd85 	bl	800ad50 <_Balloc>
 800a246:	4605      	mov	r5, r0
 800a248:	b928      	cbnz	r0, 800a256 <_dtoa_r+0x9be>
 800a24a:	4b87      	ldr	r3, [pc, #540]	; (800a468 <_dtoa_r+0xbd0>)
 800a24c:	4602      	mov	r2, r0
 800a24e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a252:	f7ff bb3b 	b.w	80098cc <_dtoa_r+0x34>
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	3202      	adds	r2, #2
 800a25a:	0092      	lsls	r2, r2, #2
 800a25c:	f107 010c 	add.w	r1, r7, #12
 800a260:	300c      	adds	r0, #12
 800a262:	f7fd fbb2 	bl	80079ca <memcpy>
 800a266:	2201      	movs	r2, #1
 800a268:	4629      	mov	r1, r5
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 ffcc 	bl	800b208 <__lshift>
 800a270:	9b01      	ldr	r3, [sp, #4]
 800a272:	f103 0901 	add.w	r9, r3, #1
 800a276:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a27a:	4413      	add	r3, r2
 800a27c:	9305      	str	r3, [sp, #20]
 800a27e:	f00a 0301 	and.w	r3, sl, #1
 800a282:	46b8      	mov	r8, r7
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	4607      	mov	r7, r0
 800a288:	4631      	mov	r1, r6
 800a28a:	ee18 0a10 	vmov	r0, s16
 800a28e:	f7ff fa75 	bl	800977c <quorem>
 800a292:	4641      	mov	r1, r8
 800a294:	9002      	str	r0, [sp, #8]
 800a296:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a29a:	ee18 0a10 	vmov	r0, s16
 800a29e:	f001 f823 	bl	800b2e8 <__mcmp>
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	9003      	str	r0, [sp, #12]
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f001 f839 	bl	800b320 <__mdiff>
 800a2ae:	68c2      	ldr	r2, [r0, #12]
 800a2b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	bb02      	cbnz	r2, 800a2fa <_dtoa_r+0xa62>
 800a2b8:	4601      	mov	r1, r0
 800a2ba:	ee18 0a10 	vmov	r0, s16
 800a2be:	f001 f813 	bl	800b2e8 <__mcmp>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	9207      	str	r2, [sp, #28]
 800a2ca:	f000 fd81 	bl	800add0 <_Bfree>
 800a2ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a2d2:	ea43 0102 	orr.w	r1, r3, r2
 800a2d6:	9b04      	ldr	r3, [sp, #16]
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	464d      	mov	r5, r9
 800a2dc:	d10f      	bne.n	800a2fe <_dtoa_r+0xa66>
 800a2de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2e2:	d02a      	beq.n	800a33a <_dtoa_r+0xaa2>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	dd02      	ble.n	800a2f0 <_dtoa_r+0xa58>
 800a2ea:	9b02      	ldr	r3, [sp, #8]
 800a2ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a2f0:	f88b a000 	strb.w	sl, [fp]
 800a2f4:	e775      	b.n	800a1e2 <_dtoa_r+0x94a>
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	e7ba      	b.n	800a270 <_dtoa_r+0x9d8>
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	e7e2      	b.n	800a2c4 <_dtoa_r+0xa2c>
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	db04      	blt.n	800a30e <_dtoa_r+0xa76>
 800a304:	9906      	ldr	r1, [sp, #24]
 800a306:	430b      	orrs	r3, r1
 800a308:	9904      	ldr	r1, [sp, #16]
 800a30a:	430b      	orrs	r3, r1
 800a30c:	d122      	bne.n	800a354 <_dtoa_r+0xabc>
 800a30e:	2a00      	cmp	r2, #0
 800a310:	ddee      	ble.n	800a2f0 <_dtoa_r+0xa58>
 800a312:	ee18 1a10 	vmov	r1, s16
 800a316:	2201      	movs	r2, #1
 800a318:	4620      	mov	r0, r4
 800a31a:	f000 ff75 	bl	800b208 <__lshift>
 800a31e:	4631      	mov	r1, r6
 800a320:	ee08 0a10 	vmov	s16, r0
 800a324:	f000 ffe0 	bl	800b2e8 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dc03      	bgt.n	800a334 <_dtoa_r+0xa9c>
 800a32c:	d1e0      	bne.n	800a2f0 <_dtoa_r+0xa58>
 800a32e:	f01a 0f01 	tst.w	sl, #1
 800a332:	d0dd      	beq.n	800a2f0 <_dtoa_r+0xa58>
 800a334:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a338:	d1d7      	bne.n	800a2ea <_dtoa_r+0xa52>
 800a33a:	2339      	movs	r3, #57	; 0x39
 800a33c:	f88b 3000 	strb.w	r3, [fp]
 800a340:	462b      	mov	r3, r5
 800a342:	461d      	mov	r5, r3
 800a344:	3b01      	subs	r3, #1
 800a346:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a34a:	2a39      	cmp	r2, #57	; 0x39
 800a34c:	d071      	beq.n	800a432 <_dtoa_r+0xb9a>
 800a34e:	3201      	adds	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	e746      	b.n	800a1e2 <_dtoa_r+0x94a>
 800a354:	2a00      	cmp	r2, #0
 800a356:	dd07      	ble.n	800a368 <_dtoa_r+0xad0>
 800a358:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a35c:	d0ed      	beq.n	800a33a <_dtoa_r+0xaa2>
 800a35e:	f10a 0301 	add.w	r3, sl, #1
 800a362:	f88b 3000 	strb.w	r3, [fp]
 800a366:	e73c      	b.n	800a1e2 <_dtoa_r+0x94a>
 800a368:	9b05      	ldr	r3, [sp, #20]
 800a36a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a36e:	4599      	cmp	r9, r3
 800a370:	d047      	beq.n	800a402 <_dtoa_r+0xb6a>
 800a372:	ee18 1a10 	vmov	r1, s16
 800a376:	2300      	movs	r3, #0
 800a378:	220a      	movs	r2, #10
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fd4a 	bl	800ae14 <__multadd>
 800a380:	45b8      	cmp	r8, r7
 800a382:	ee08 0a10 	vmov	s16, r0
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	f04f 020a 	mov.w	r2, #10
 800a38e:	4641      	mov	r1, r8
 800a390:	4620      	mov	r0, r4
 800a392:	d106      	bne.n	800a3a2 <_dtoa_r+0xb0a>
 800a394:	f000 fd3e 	bl	800ae14 <__multadd>
 800a398:	4680      	mov	r8, r0
 800a39a:	4607      	mov	r7, r0
 800a39c:	f109 0901 	add.w	r9, r9, #1
 800a3a0:	e772      	b.n	800a288 <_dtoa_r+0x9f0>
 800a3a2:	f000 fd37 	bl	800ae14 <__multadd>
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	4680      	mov	r8, r0
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	220a      	movs	r2, #10
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fd30 	bl	800ae14 <__multadd>
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	e7f1      	b.n	800a39c <_dtoa_r+0xb04>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	9302      	str	r3, [sp, #8]
 800a3bc:	9d01      	ldr	r5, [sp, #4]
 800a3be:	ee18 0a10 	vmov	r0, s16
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	f7ff f9da 	bl	800977c <quorem>
 800a3c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3cc:	9b01      	ldr	r3, [sp, #4]
 800a3ce:	f805 ab01 	strb.w	sl, [r5], #1
 800a3d2:	1aea      	subs	r2, r5, r3
 800a3d4:	9b02      	ldr	r3, [sp, #8]
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	dd09      	ble.n	800a3ee <_dtoa_r+0xb56>
 800a3da:	ee18 1a10 	vmov	r1, s16
 800a3de:	2300      	movs	r3, #0
 800a3e0:	220a      	movs	r2, #10
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fd16 	bl	800ae14 <__multadd>
 800a3e8:	ee08 0a10 	vmov	s16, r0
 800a3ec:	e7e7      	b.n	800a3be <_dtoa_r+0xb26>
 800a3ee:	9b02      	ldr	r3, [sp, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfc8      	it	gt
 800a3f4:	461d      	movgt	r5, r3
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	bfd8      	it	le
 800a3fa:	2501      	movle	r5, #1
 800a3fc:	441d      	add	r5, r3
 800a3fe:	f04f 0800 	mov.w	r8, #0
 800a402:	ee18 1a10 	vmov	r1, s16
 800a406:	2201      	movs	r2, #1
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fefd 	bl	800b208 <__lshift>
 800a40e:	4631      	mov	r1, r6
 800a410:	ee08 0a10 	vmov	s16, r0
 800a414:	f000 ff68 	bl	800b2e8 <__mcmp>
 800a418:	2800      	cmp	r0, #0
 800a41a:	dc91      	bgt.n	800a340 <_dtoa_r+0xaa8>
 800a41c:	d102      	bne.n	800a424 <_dtoa_r+0xb8c>
 800a41e:	f01a 0f01 	tst.w	sl, #1
 800a422:	d18d      	bne.n	800a340 <_dtoa_r+0xaa8>
 800a424:	462b      	mov	r3, r5
 800a426:	461d      	mov	r5, r3
 800a428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a42c:	2a30      	cmp	r2, #48	; 0x30
 800a42e:	d0fa      	beq.n	800a426 <_dtoa_r+0xb8e>
 800a430:	e6d7      	b.n	800a1e2 <_dtoa_r+0x94a>
 800a432:	9a01      	ldr	r2, [sp, #4]
 800a434:	429a      	cmp	r2, r3
 800a436:	d184      	bne.n	800a342 <_dtoa_r+0xaaa>
 800a438:	9b00      	ldr	r3, [sp, #0]
 800a43a:	3301      	adds	r3, #1
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	2331      	movs	r3, #49	; 0x31
 800a440:	7013      	strb	r3, [r2, #0]
 800a442:	e6ce      	b.n	800a1e2 <_dtoa_r+0x94a>
 800a444:	4b09      	ldr	r3, [pc, #36]	; (800a46c <_dtoa_r+0xbd4>)
 800a446:	f7ff ba95 	b.w	8009974 <_dtoa_r+0xdc>
 800a44a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f47f aa6e 	bne.w	800992e <_dtoa_r+0x96>
 800a452:	4b07      	ldr	r3, [pc, #28]	; (800a470 <_dtoa_r+0xbd8>)
 800a454:	f7ff ba8e 	b.w	8009974 <_dtoa_r+0xdc>
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dcae      	bgt.n	800a3bc <_dtoa_r+0xb24>
 800a45e:	9b06      	ldr	r3, [sp, #24]
 800a460:	2b02      	cmp	r3, #2
 800a462:	f73f aea8 	bgt.w	800a1b6 <_dtoa_r+0x91e>
 800a466:	e7a9      	b.n	800a3bc <_dtoa_r+0xb24>
 800a468:	080280b8 	.word	0x080280b8
 800a46c:	08027ebc 	.word	0x08027ebc
 800a470:	08028039 	.word	0x08028039

0800a474 <__sflush_r>:
 800a474:	898a      	ldrh	r2, [r1, #12]
 800a476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47a:	4605      	mov	r5, r0
 800a47c:	0710      	lsls	r0, r2, #28
 800a47e:	460c      	mov	r4, r1
 800a480:	d458      	bmi.n	800a534 <__sflush_r+0xc0>
 800a482:	684b      	ldr	r3, [r1, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc05      	bgt.n	800a494 <__sflush_r+0x20>
 800a488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	dc02      	bgt.n	800a494 <__sflush_r+0x20>
 800a48e:	2000      	movs	r0, #0
 800a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a496:	2e00      	cmp	r6, #0
 800a498:	d0f9      	beq.n	800a48e <__sflush_r+0x1a>
 800a49a:	2300      	movs	r3, #0
 800a49c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4a0:	682f      	ldr	r7, [r5, #0]
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	d032      	beq.n	800a50c <__sflush_r+0x98>
 800a4a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	075a      	lsls	r2, r3, #29
 800a4ac:	d505      	bpl.n	800a4ba <__sflush_r+0x46>
 800a4ae:	6863      	ldr	r3, [r4, #4]
 800a4b0:	1ac0      	subs	r0, r0, r3
 800a4b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4b4:	b10b      	cbz	r3, 800a4ba <__sflush_r+0x46>
 800a4b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4b8:	1ac0      	subs	r0, r0, r3
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	4602      	mov	r2, r0
 800a4be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b0      	blx	r6
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	d106      	bne.n	800a4da <__sflush_r+0x66>
 800a4cc:	6829      	ldr	r1, [r5, #0]
 800a4ce:	291d      	cmp	r1, #29
 800a4d0:	d82c      	bhi.n	800a52c <__sflush_r+0xb8>
 800a4d2:	4a2a      	ldr	r2, [pc, #168]	; (800a57c <__sflush_r+0x108>)
 800a4d4:	40ca      	lsrs	r2, r1
 800a4d6:	07d6      	lsls	r6, r2, #31
 800a4d8:	d528      	bpl.n	800a52c <__sflush_r+0xb8>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6062      	str	r2, [r4, #4]
 800a4de:	04d9      	lsls	r1, r3, #19
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	6022      	str	r2, [r4, #0]
 800a4e4:	d504      	bpl.n	800a4f0 <__sflush_r+0x7c>
 800a4e6:	1c42      	adds	r2, r0, #1
 800a4e8:	d101      	bne.n	800a4ee <__sflush_r+0x7a>
 800a4ea:	682b      	ldr	r3, [r5, #0]
 800a4ec:	b903      	cbnz	r3, 800a4f0 <__sflush_r+0x7c>
 800a4ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a4f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4f2:	602f      	str	r7, [r5, #0]
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	d0ca      	beq.n	800a48e <__sflush_r+0x1a>
 800a4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4fc:	4299      	cmp	r1, r3
 800a4fe:	d002      	beq.n	800a506 <__sflush_r+0x92>
 800a500:	4628      	mov	r0, r5
 800a502:	f001 f8fd 	bl	800b700 <_free_r>
 800a506:	2000      	movs	r0, #0
 800a508:	6360      	str	r0, [r4, #52]	; 0x34
 800a50a:	e7c1      	b.n	800a490 <__sflush_r+0x1c>
 800a50c:	6a21      	ldr	r1, [r4, #32]
 800a50e:	2301      	movs	r3, #1
 800a510:	4628      	mov	r0, r5
 800a512:	47b0      	blx	r6
 800a514:	1c41      	adds	r1, r0, #1
 800a516:	d1c7      	bne.n	800a4a8 <__sflush_r+0x34>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0c4      	beq.n	800a4a8 <__sflush_r+0x34>
 800a51e:	2b1d      	cmp	r3, #29
 800a520:	d001      	beq.n	800a526 <__sflush_r+0xb2>
 800a522:	2b16      	cmp	r3, #22
 800a524:	d101      	bne.n	800a52a <__sflush_r+0xb6>
 800a526:	602f      	str	r7, [r5, #0]
 800a528:	e7b1      	b.n	800a48e <__sflush_r+0x1a>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	e7ad      	b.n	800a490 <__sflush_r+0x1c>
 800a534:	690f      	ldr	r7, [r1, #16]
 800a536:	2f00      	cmp	r7, #0
 800a538:	d0a9      	beq.n	800a48e <__sflush_r+0x1a>
 800a53a:	0793      	lsls	r3, r2, #30
 800a53c:	680e      	ldr	r6, [r1, #0]
 800a53e:	bf08      	it	eq
 800a540:	694b      	ldreq	r3, [r1, #20]
 800a542:	600f      	str	r7, [r1, #0]
 800a544:	bf18      	it	ne
 800a546:	2300      	movne	r3, #0
 800a548:	eba6 0807 	sub.w	r8, r6, r7
 800a54c:	608b      	str	r3, [r1, #8]
 800a54e:	f1b8 0f00 	cmp.w	r8, #0
 800a552:	dd9c      	ble.n	800a48e <__sflush_r+0x1a>
 800a554:	6a21      	ldr	r1, [r4, #32]
 800a556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a558:	4643      	mov	r3, r8
 800a55a:	463a      	mov	r2, r7
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b0      	blx	r6
 800a560:	2800      	cmp	r0, #0
 800a562:	dc06      	bgt.n	800a572 <__sflush_r+0xfe>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	e78e      	b.n	800a490 <__sflush_r+0x1c>
 800a572:	4407      	add	r7, r0
 800a574:	eba8 0800 	sub.w	r8, r8, r0
 800a578:	e7e9      	b.n	800a54e <__sflush_r+0xda>
 800a57a:	bf00      	nop
 800a57c:	20400001 	.word	0x20400001

0800a580 <_fflush_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	690b      	ldr	r3, [r1, #16]
 800a584:	4605      	mov	r5, r0
 800a586:	460c      	mov	r4, r1
 800a588:	b913      	cbnz	r3, 800a590 <_fflush_r+0x10>
 800a58a:	2500      	movs	r5, #0
 800a58c:	4628      	mov	r0, r5
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	b118      	cbz	r0, 800a59a <_fflush_r+0x1a>
 800a592:	6983      	ldr	r3, [r0, #24]
 800a594:	b90b      	cbnz	r3, 800a59a <_fflush_r+0x1a>
 800a596:	f7fd f953 	bl	8007840 <__sinit>
 800a59a:	4b14      	ldr	r3, [pc, #80]	; (800a5ec <_fflush_r+0x6c>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	d11b      	bne.n	800a5d8 <_fflush_r+0x58>
 800a5a0:	686c      	ldr	r4, [r5, #4]
 800a5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d0ef      	beq.n	800a58a <_fflush_r+0xa>
 800a5aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5ac:	07d0      	lsls	r0, r2, #31
 800a5ae:	d404      	bmi.n	800a5ba <_fflush_r+0x3a>
 800a5b0:	0599      	lsls	r1, r3, #22
 800a5b2:	d402      	bmi.n	800a5ba <_fflush_r+0x3a>
 800a5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5b6:	f7fd fa06 	bl	80079c6 <__retarget_lock_acquire_recursive>
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	4621      	mov	r1, r4
 800a5be:	f7ff ff59 	bl	800a474 <__sflush_r>
 800a5c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5c4:	07da      	lsls	r2, r3, #31
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	d4e0      	bmi.n	800a58c <_fflush_r+0xc>
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	059b      	lsls	r3, r3, #22
 800a5ce:	d4dd      	bmi.n	800a58c <_fflush_r+0xc>
 800a5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d2:	f7fd f9f9 	bl	80079c8 <__retarget_lock_release_recursive>
 800a5d6:	e7d9      	b.n	800a58c <_fflush_r+0xc>
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <_fflush_r+0x70>)
 800a5da:	429c      	cmp	r4, r3
 800a5dc:	d101      	bne.n	800a5e2 <_fflush_r+0x62>
 800a5de:	68ac      	ldr	r4, [r5, #8]
 800a5e0:	e7df      	b.n	800a5a2 <_fflush_r+0x22>
 800a5e2:	4b04      	ldr	r3, [pc, #16]	; (800a5f4 <_fflush_r+0x74>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	bf08      	it	eq
 800a5e8:	68ec      	ldreq	r4, [r5, #12]
 800a5ea:	e7da      	b.n	800a5a2 <_fflush_r+0x22>
 800a5ec:	08027e68 	.word	0x08027e68
 800a5f0:	08027e88 	.word	0x08027e88
 800a5f4:	08027e48 	.word	0x08027e48

0800a5f8 <rshift>:
 800a5f8:	6903      	ldr	r3, [r0, #16]
 800a5fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a602:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a606:	f100 0414 	add.w	r4, r0, #20
 800a60a:	dd45      	ble.n	800a698 <rshift+0xa0>
 800a60c:	f011 011f 	ands.w	r1, r1, #31
 800a610:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a614:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a618:	d10c      	bne.n	800a634 <rshift+0x3c>
 800a61a:	f100 0710 	add.w	r7, r0, #16
 800a61e:	4629      	mov	r1, r5
 800a620:	42b1      	cmp	r1, r6
 800a622:	d334      	bcc.n	800a68e <rshift+0x96>
 800a624:	1a9b      	subs	r3, r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	1eea      	subs	r2, r5, #3
 800a62a:	4296      	cmp	r6, r2
 800a62c:	bf38      	it	cc
 800a62e:	2300      	movcc	r3, #0
 800a630:	4423      	add	r3, r4
 800a632:	e015      	b.n	800a660 <rshift+0x68>
 800a634:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a638:	f1c1 0820 	rsb	r8, r1, #32
 800a63c:	40cf      	lsrs	r7, r1
 800a63e:	f105 0e04 	add.w	lr, r5, #4
 800a642:	46a1      	mov	r9, r4
 800a644:	4576      	cmp	r6, lr
 800a646:	46f4      	mov	ip, lr
 800a648:	d815      	bhi.n	800a676 <rshift+0x7e>
 800a64a:	1a9a      	subs	r2, r3, r2
 800a64c:	0092      	lsls	r2, r2, #2
 800a64e:	3a04      	subs	r2, #4
 800a650:	3501      	adds	r5, #1
 800a652:	42ae      	cmp	r6, r5
 800a654:	bf38      	it	cc
 800a656:	2200      	movcc	r2, #0
 800a658:	18a3      	adds	r3, r4, r2
 800a65a:	50a7      	str	r7, [r4, r2]
 800a65c:	b107      	cbz	r7, 800a660 <rshift+0x68>
 800a65e:	3304      	adds	r3, #4
 800a660:	1b1a      	subs	r2, r3, r4
 800a662:	42a3      	cmp	r3, r4
 800a664:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a668:	bf08      	it	eq
 800a66a:	2300      	moveq	r3, #0
 800a66c:	6102      	str	r2, [r0, #16]
 800a66e:	bf08      	it	eq
 800a670:	6143      	streq	r3, [r0, #20]
 800a672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a676:	f8dc c000 	ldr.w	ip, [ip]
 800a67a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a67e:	ea4c 0707 	orr.w	r7, ip, r7
 800a682:	f849 7b04 	str.w	r7, [r9], #4
 800a686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a68a:	40cf      	lsrs	r7, r1
 800a68c:	e7da      	b.n	800a644 <rshift+0x4c>
 800a68e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a692:	f847 cf04 	str.w	ip, [r7, #4]!
 800a696:	e7c3      	b.n	800a620 <rshift+0x28>
 800a698:	4623      	mov	r3, r4
 800a69a:	e7e1      	b.n	800a660 <rshift+0x68>

0800a69c <__hexdig_fun>:
 800a69c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a6a0:	2b09      	cmp	r3, #9
 800a6a2:	d802      	bhi.n	800a6aa <__hexdig_fun+0xe>
 800a6a4:	3820      	subs	r0, #32
 800a6a6:	b2c0      	uxtb	r0, r0
 800a6a8:	4770      	bx	lr
 800a6aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	d801      	bhi.n	800a6b6 <__hexdig_fun+0x1a>
 800a6b2:	3847      	subs	r0, #71	; 0x47
 800a6b4:	e7f7      	b.n	800a6a6 <__hexdig_fun+0xa>
 800a6b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a6ba:	2b05      	cmp	r3, #5
 800a6bc:	d801      	bhi.n	800a6c2 <__hexdig_fun+0x26>
 800a6be:	3827      	subs	r0, #39	; 0x27
 800a6c0:	e7f1      	b.n	800a6a6 <__hexdig_fun+0xa>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	4770      	bx	lr
	...

0800a6c8 <__gethex>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	ed2d 8b02 	vpush	{d8}
 800a6d0:	b089      	sub	sp, #36	; 0x24
 800a6d2:	ee08 0a10 	vmov	s16, r0
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	4bb4      	ldr	r3, [pc, #720]	; (800a9ac <__gethex+0x2e4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	468b      	mov	fp, r1
 800a6e2:	4690      	mov	r8, r2
 800a6e4:	f7f5 fd94 	bl	8000210 <strlen>
 800a6e8:	9b01      	ldr	r3, [sp, #4]
 800a6ea:	f8db 2000 	ldr.w	r2, [fp]
 800a6ee:	4403      	add	r3, r0
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a6f6:	9305      	str	r3, [sp, #20]
 800a6f8:	1c93      	adds	r3, r2, #2
 800a6fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a6fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a702:	32fe      	adds	r2, #254	; 0xfe
 800a704:	18d1      	adds	r1, r2, r3
 800a706:	461f      	mov	r7, r3
 800a708:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a70c:	9100      	str	r1, [sp, #0]
 800a70e:	2830      	cmp	r0, #48	; 0x30
 800a710:	d0f8      	beq.n	800a704 <__gethex+0x3c>
 800a712:	f7ff ffc3 	bl	800a69c <__hexdig_fun>
 800a716:	4604      	mov	r4, r0
 800a718:	2800      	cmp	r0, #0
 800a71a:	d13a      	bne.n	800a792 <__gethex+0xca>
 800a71c:	9901      	ldr	r1, [sp, #4]
 800a71e:	4652      	mov	r2, sl
 800a720:	4638      	mov	r0, r7
 800a722:	f001 f9b1 	bl	800ba88 <strncmp>
 800a726:	4605      	mov	r5, r0
 800a728:	2800      	cmp	r0, #0
 800a72a:	d168      	bne.n	800a7fe <__gethex+0x136>
 800a72c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a730:	eb07 060a 	add.w	r6, r7, sl
 800a734:	f7ff ffb2 	bl	800a69c <__hexdig_fun>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d062      	beq.n	800a802 <__gethex+0x13a>
 800a73c:	4633      	mov	r3, r6
 800a73e:	7818      	ldrb	r0, [r3, #0]
 800a740:	2830      	cmp	r0, #48	; 0x30
 800a742:	461f      	mov	r7, r3
 800a744:	f103 0301 	add.w	r3, r3, #1
 800a748:	d0f9      	beq.n	800a73e <__gethex+0x76>
 800a74a:	f7ff ffa7 	bl	800a69c <__hexdig_fun>
 800a74e:	2301      	movs	r3, #1
 800a750:	fab0 f480 	clz	r4, r0
 800a754:	0964      	lsrs	r4, r4, #5
 800a756:	4635      	mov	r5, r6
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	463a      	mov	r2, r7
 800a75c:	4616      	mov	r6, r2
 800a75e:	3201      	adds	r2, #1
 800a760:	7830      	ldrb	r0, [r6, #0]
 800a762:	f7ff ff9b 	bl	800a69c <__hexdig_fun>
 800a766:	2800      	cmp	r0, #0
 800a768:	d1f8      	bne.n	800a75c <__gethex+0x94>
 800a76a:	9901      	ldr	r1, [sp, #4]
 800a76c:	4652      	mov	r2, sl
 800a76e:	4630      	mov	r0, r6
 800a770:	f001 f98a 	bl	800ba88 <strncmp>
 800a774:	b980      	cbnz	r0, 800a798 <__gethex+0xd0>
 800a776:	b94d      	cbnz	r5, 800a78c <__gethex+0xc4>
 800a778:	eb06 050a 	add.w	r5, r6, sl
 800a77c:	462a      	mov	r2, r5
 800a77e:	4616      	mov	r6, r2
 800a780:	3201      	adds	r2, #1
 800a782:	7830      	ldrb	r0, [r6, #0]
 800a784:	f7ff ff8a 	bl	800a69c <__hexdig_fun>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1f8      	bne.n	800a77e <__gethex+0xb6>
 800a78c:	1bad      	subs	r5, r5, r6
 800a78e:	00ad      	lsls	r5, r5, #2
 800a790:	e004      	b.n	800a79c <__gethex+0xd4>
 800a792:	2400      	movs	r4, #0
 800a794:	4625      	mov	r5, r4
 800a796:	e7e0      	b.n	800a75a <__gethex+0x92>
 800a798:	2d00      	cmp	r5, #0
 800a79a:	d1f7      	bne.n	800a78c <__gethex+0xc4>
 800a79c:	7833      	ldrb	r3, [r6, #0]
 800a79e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7a2:	2b50      	cmp	r3, #80	; 0x50
 800a7a4:	d13b      	bne.n	800a81e <__gethex+0x156>
 800a7a6:	7873      	ldrb	r3, [r6, #1]
 800a7a8:	2b2b      	cmp	r3, #43	; 0x2b
 800a7aa:	d02c      	beq.n	800a806 <__gethex+0x13e>
 800a7ac:	2b2d      	cmp	r3, #45	; 0x2d
 800a7ae:	d02e      	beq.n	800a80e <__gethex+0x146>
 800a7b0:	1c71      	adds	r1, r6, #1
 800a7b2:	f04f 0900 	mov.w	r9, #0
 800a7b6:	7808      	ldrb	r0, [r1, #0]
 800a7b8:	f7ff ff70 	bl	800a69c <__hexdig_fun>
 800a7bc:	1e43      	subs	r3, r0, #1
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b18      	cmp	r3, #24
 800a7c2:	d82c      	bhi.n	800a81e <__gethex+0x156>
 800a7c4:	f1a0 0210 	sub.w	r2, r0, #16
 800a7c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a7cc:	f7ff ff66 	bl	800a69c <__hexdig_fun>
 800a7d0:	1e43      	subs	r3, r0, #1
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b18      	cmp	r3, #24
 800a7d6:	d91d      	bls.n	800a814 <__gethex+0x14c>
 800a7d8:	f1b9 0f00 	cmp.w	r9, #0
 800a7dc:	d000      	beq.n	800a7e0 <__gethex+0x118>
 800a7de:	4252      	negs	r2, r2
 800a7e0:	4415      	add	r5, r2
 800a7e2:	f8cb 1000 	str.w	r1, [fp]
 800a7e6:	b1e4      	cbz	r4, 800a822 <__gethex+0x15a>
 800a7e8:	9b00      	ldr	r3, [sp, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bf14      	ite	ne
 800a7ee:	2700      	movne	r7, #0
 800a7f0:	2706      	moveq	r7, #6
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	b009      	add	sp, #36	; 0x24
 800a7f6:	ecbd 8b02 	vpop	{d8}
 800a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fe:	463e      	mov	r6, r7
 800a800:	4625      	mov	r5, r4
 800a802:	2401      	movs	r4, #1
 800a804:	e7ca      	b.n	800a79c <__gethex+0xd4>
 800a806:	f04f 0900 	mov.w	r9, #0
 800a80a:	1cb1      	adds	r1, r6, #2
 800a80c:	e7d3      	b.n	800a7b6 <__gethex+0xee>
 800a80e:	f04f 0901 	mov.w	r9, #1
 800a812:	e7fa      	b.n	800a80a <__gethex+0x142>
 800a814:	230a      	movs	r3, #10
 800a816:	fb03 0202 	mla	r2, r3, r2, r0
 800a81a:	3a10      	subs	r2, #16
 800a81c:	e7d4      	b.n	800a7c8 <__gethex+0x100>
 800a81e:	4631      	mov	r1, r6
 800a820:	e7df      	b.n	800a7e2 <__gethex+0x11a>
 800a822:	1bf3      	subs	r3, r6, r7
 800a824:	3b01      	subs	r3, #1
 800a826:	4621      	mov	r1, r4
 800a828:	2b07      	cmp	r3, #7
 800a82a:	dc0b      	bgt.n	800a844 <__gethex+0x17c>
 800a82c:	ee18 0a10 	vmov	r0, s16
 800a830:	f000 fa8e 	bl	800ad50 <_Balloc>
 800a834:	4604      	mov	r4, r0
 800a836:	b940      	cbnz	r0, 800a84a <__gethex+0x182>
 800a838:	4b5d      	ldr	r3, [pc, #372]	; (800a9b0 <__gethex+0x2e8>)
 800a83a:	4602      	mov	r2, r0
 800a83c:	21de      	movs	r1, #222	; 0xde
 800a83e:	485d      	ldr	r0, [pc, #372]	; (800a9b4 <__gethex+0x2ec>)
 800a840:	f001 f944 	bl	800bacc <__assert_func>
 800a844:	3101      	adds	r1, #1
 800a846:	105b      	asrs	r3, r3, #1
 800a848:	e7ee      	b.n	800a828 <__gethex+0x160>
 800a84a:	f100 0914 	add.w	r9, r0, #20
 800a84e:	f04f 0b00 	mov.w	fp, #0
 800a852:	f1ca 0301 	rsb	r3, sl, #1
 800a856:	f8cd 9008 	str.w	r9, [sp, #8]
 800a85a:	f8cd b000 	str.w	fp, [sp]
 800a85e:	9306      	str	r3, [sp, #24]
 800a860:	42b7      	cmp	r7, r6
 800a862:	d340      	bcc.n	800a8e6 <__gethex+0x21e>
 800a864:	9802      	ldr	r0, [sp, #8]
 800a866:	9b00      	ldr	r3, [sp, #0]
 800a868:	f840 3b04 	str.w	r3, [r0], #4
 800a86c:	eba0 0009 	sub.w	r0, r0, r9
 800a870:	1080      	asrs	r0, r0, #2
 800a872:	0146      	lsls	r6, r0, #5
 800a874:	6120      	str	r0, [r4, #16]
 800a876:	4618      	mov	r0, r3
 800a878:	f000 fb5c 	bl	800af34 <__hi0bits>
 800a87c:	1a30      	subs	r0, r6, r0
 800a87e:	f8d8 6000 	ldr.w	r6, [r8]
 800a882:	42b0      	cmp	r0, r6
 800a884:	dd63      	ble.n	800a94e <__gethex+0x286>
 800a886:	1b87      	subs	r7, r0, r6
 800a888:	4639      	mov	r1, r7
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 ff00 	bl	800b690 <__any_on>
 800a890:	4682      	mov	sl, r0
 800a892:	b1a8      	cbz	r0, 800a8c0 <__gethex+0x1f8>
 800a894:	1e7b      	subs	r3, r7, #1
 800a896:	1159      	asrs	r1, r3, #5
 800a898:	f003 021f 	and.w	r2, r3, #31
 800a89c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a8a0:	f04f 0a01 	mov.w	sl, #1
 800a8a4:	fa0a f202 	lsl.w	r2, sl, r2
 800a8a8:	420a      	tst	r2, r1
 800a8aa:	d009      	beq.n	800a8c0 <__gethex+0x1f8>
 800a8ac:	4553      	cmp	r3, sl
 800a8ae:	dd05      	ble.n	800a8bc <__gethex+0x1f4>
 800a8b0:	1eb9      	subs	r1, r7, #2
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 feec 	bl	800b690 <__any_on>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d145      	bne.n	800a948 <__gethex+0x280>
 800a8bc:	f04f 0a02 	mov.w	sl, #2
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f7ff fe98 	bl	800a5f8 <rshift>
 800a8c8:	443d      	add	r5, r7
 800a8ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8ce:	42ab      	cmp	r3, r5
 800a8d0:	da4c      	bge.n	800a96c <__gethex+0x2a4>
 800a8d2:	ee18 0a10 	vmov	r0, s16
 800a8d6:	4621      	mov	r1, r4
 800a8d8:	f000 fa7a 	bl	800add0 <_Bfree>
 800a8dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	27a3      	movs	r7, #163	; 0xa3
 800a8e4:	e785      	b.n	800a7f2 <__gethex+0x12a>
 800a8e6:	1e73      	subs	r3, r6, #1
 800a8e8:	9a05      	ldr	r2, [sp, #20]
 800a8ea:	9303      	str	r3, [sp, #12]
 800a8ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d019      	beq.n	800a928 <__gethex+0x260>
 800a8f4:	f1bb 0f20 	cmp.w	fp, #32
 800a8f8:	d107      	bne.n	800a90a <__gethex+0x242>
 800a8fa:	9b02      	ldr	r3, [sp, #8]
 800a8fc:	9a00      	ldr	r2, [sp, #0]
 800a8fe:	f843 2b04 	str.w	r2, [r3], #4
 800a902:	9302      	str	r3, [sp, #8]
 800a904:	2300      	movs	r3, #0
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	469b      	mov	fp, r3
 800a90a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a90e:	f7ff fec5 	bl	800a69c <__hexdig_fun>
 800a912:	9b00      	ldr	r3, [sp, #0]
 800a914:	f000 000f 	and.w	r0, r0, #15
 800a918:	fa00 f00b 	lsl.w	r0, r0, fp
 800a91c:	4303      	orrs	r3, r0
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	f10b 0b04 	add.w	fp, fp, #4
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	e00d      	b.n	800a944 <__gethex+0x27c>
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	9a06      	ldr	r2, [sp, #24]
 800a92c:	4413      	add	r3, r2
 800a92e:	42bb      	cmp	r3, r7
 800a930:	d3e0      	bcc.n	800a8f4 <__gethex+0x22c>
 800a932:	4618      	mov	r0, r3
 800a934:	9901      	ldr	r1, [sp, #4]
 800a936:	9307      	str	r3, [sp, #28]
 800a938:	4652      	mov	r2, sl
 800a93a:	f001 f8a5 	bl	800ba88 <strncmp>
 800a93e:	9b07      	ldr	r3, [sp, #28]
 800a940:	2800      	cmp	r0, #0
 800a942:	d1d7      	bne.n	800a8f4 <__gethex+0x22c>
 800a944:	461e      	mov	r6, r3
 800a946:	e78b      	b.n	800a860 <__gethex+0x198>
 800a948:	f04f 0a03 	mov.w	sl, #3
 800a94c:	e7b8      	b.n	800a8c0 <__gethex+0x1f8>
 800a94e:	da0a      	bge.n	800a966 <__gethex+0x29e>
 800a950:	1a37      	subs	r7, r6, r0
 800a952:	4621      	mov	r1, r4
 800a954:	ee18 0a10 	vmov	r0, s16
 800a958:	463a      	mov	r2, r7
 800a95a:	f000 fc55 	bl	800b208 <__lshift>
 800a95e:	1bed      	subs	r5, r5, r7
 800a960:	4604      	mov	r4, r0
 800a962:	f100 0914 	add.w	r9, r0, #20
 800a966:	f04f 0a00 	mov.w	sl, #0
 800a96a:	e7ae      	b.n	800a8ca <__gethex+0x202>
 800a96c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a970:	42a8      	cmp	r0, r5
 800a972:	dd72      	ble.n	800aa5a <__gethex+0x392>
 800a974:	1b45      	subs	r5, r0, r5
 800a976:	42ae      	cmp	r6, r5
 800a978:	dc36      	bgt.n	800a9e8 <__gethex+0x320>
 800a97a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d02a      	beq.n	800a9d8 <__gethex+0x310>
 800a982:	2b03      	cmp	r3, #3
 800a984:	d02c      	beq.n	800a9e0 <__gethex+0x318>
 800a986:	2b01      	cmp	r3, #1
 800a988:	d11c      	bne.n	800a9c4 <__gethex+0x2fc>
 800a98a:	42ae      	cmp	r6, r5
 800a98c:	d11a      	bne.n	800a9c4 <__gethex+0x2fc>
 800a98e:	2e01      	cmp	r6, #1
 800a990:	d112      	bne.n	800a9b8 <__gethex+0x2f0>
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	2301      	movs	r3, #1
 800a99c:	6123      	str	r3, [r4, #16]
 800a99e:	f8c9 3000 	str.w	r3, [r9]
 800a9a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9a4:	2762      	movs	r7, #98	; 0x62
 800a9a6:	601c      	str	r4, [r3, #0]
 800a9a8:	e723      	b.n	800a7f2 <__gethex+0x12a>
 800a9aa:	bf00      	nop
 800a9ac:	08028130 	.word	0x08028130
 800a9b0:	080280b8 	.word	0x080280b8
 800a9b4:	080280c9 	.word	0x080280c9
 800a9b8:	1e71      	subs	r1, r6, #1
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fe68 	bl	800b690 <__any_on>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d1e6      	bne.n	800a992 <__gethex+0x2ca>
 800a9c4:	ee18 0a10 	vmov	r0, s16
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	f000 fa01 	bl	800add0 <_Bfree>
 800a9ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	2750      	movs	r7, #80	; 0x50
 800a9d6:	e70c      	b.n	800a7f2 <__gethex+0x12a>
 800a9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1f2      	bne.n	800a9c4 <__gethex+0x2fc>
 800a9de:	e7d8      	b.n	800a992 <__gethex+0x2ca>
 800a9e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1d5      	bne.n	800a992 <__gethex+0x2ca>
 800a9e6:	e7ed      	b.n	800a9c4 <__gethex+0x2fc>
 800a9e8:	1e6f      	subs	r7, r5, #1
 800a9ea:	f1ba 0f00 	cmp.w	sl, #0
 800a9ee:	d131      	bne.n	800aa54 <__gethex+0x38c>
 800a9f0:	b127      	cbz	r7, 800a9fc <__gethex+0x334>
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 fe4b 	bl	800b690 <__any_on>
 800a9fa:	4682      	mov	sl, r0
 800a9fc:	117b      	asrs	r3, r7, #5
 800a9fe:	2101      	movs	r1, #1
 800aa00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa04:	f007 071f 	and.w	r7, r7, #31
 800aa08:	fa01 f707 	lsl.w	r7, r1, r7
 800aa0c:	421f      	tst	r7, r3
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4620      	mov	r0, r4
 800aa12:	bf18      	it	ne
 800aa14:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa18:	1b76      	subs	r6, r6, r5
 800aa1a:	f7ff fded 	bl	800a5f8 <rshift>
 800aa1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa22:	2702      	movs	r7, #2
 800aa24:	f1ba 0f00 	cmp.w	sl, #0
 800aa28:	d048      	beq.n	800aabc <__gethex+0x3f4>
 800aa2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d015      	beq.n	800aa5e <__gethex+0x396>
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d017      	beq.n	800aa66 <__gethex+0x39e>
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d109      	bne.n	800aa4e <__gethex+0x386>
 800aa3a:	f01a 0f02 	tst.w	sl, #2
 800aa3e:	d006      	beq.n	800aa4e <__gethex+0x386>
 800aa40:	f8d9 0000 	ldr.w	r0, [r9]
 800aa44:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa48:	f01a 0f01 	tst.w	sl, #1
 800aa4c:	d10e      	bne.n	800aa6c <__gethex+0x3a4>
 800aa4e:	f047 0710 	orr.w	r7, r7, #16
 800aa52:	e033      	b.n	800aabc <__gethex+0x3f4>
 800aa54:	f04f 0a01 	mov.w	sl, #1
 800aa58:	e7d0      	b.n	800a9fc <__gethex+0x334>
 800aa5a:	2701      	movs	r7, #1
 800aa5c:	e7e2      	b.n	800aa24 <__gethex+0x35c>
 800aa5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa60:	f1c3 0301 	rsb	r3, r3, #1
 800aa64:	9315      	str	r3, [sp, #84]	; 0x54
 800aa66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0f0      	beq.n	800aa4e <__gethex+0x386>
 800aa6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa70:	f104 0314 	add.w	r3, r4, #20
 800aa74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aa78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aa7c:	f04f 0c00 	mov.w	ip, #0
 800aa80:	4618      	mov	r0, r3
 800aa82:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa86:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa8a:	d01c      	beq.n	800aac6 <__gethex+0x3fe>
 800aa8c:	3201      	adds	r2, #1
 800aa8e:	6002      	str	r2, [r0, #0]
 800aa90:	2f02      	cmp	r7, #2
 800aa92:	f104 0314 	add.w	r3, r4, #20
 800aa96:	d13f      	bne.n	800ab18 <__gethex+0x450>
 800aa98:	f8d8 2000 	ldr.w	r2, [r8]
 800aa9c:	3a01      	subs	r2, #1
 800aa9e:	42b2      	cmp	r2, r6
 800aaa0:	d10a      	bne.n	800aab8 <__gethex+0x3f0>
 800aaa2:	1171      	asrs	r1, r6, #5
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaaa:	f006 061f 	and.w	r6, r6, #31
 800aaae:	fa02 f606 	lsl.w	r6, r2, r6
 800aab2:	421e      	tst	r6, r3
 800aab4:	bf18      	it	ne
 800aab6:	4617      	movne	r7, r2
 800aab8:	f047 0720 	orr.w	r7, r7, #32
 800aabc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aabe:	601c      	str	r4, [r3, #0]
 800aac0:	9b04      	ldr	r3, [sp, #16]
 800aac2:	601d      	str	r5, [r3, #0]
 800aac4:	e695      	b.n	800a7f2 <__gethex+0x12a>
 800aac6:	4299      	cmp	r1, r3
 800aac8:	f843 cc04 	str.w	ip, [r3, #-4]
 800aacc:	d8d8      	bhi.n	800aa80 <__gethex+0x3b8>
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	459b      	cmp	fp, r3
 800aad2:	db19      	blt.n	800ab08 <__gethex+0x440>
 800aad4:	6861      	ldr	r1, [r4, #4]
 800aad6:	ee18 0a10 	vmov	r0, s16
 800aada:	3101      	adds	r1, #1
 800aadc:	f000 f938 	bl	800ad50 <_Balloc>
 800aae0:	4681      	mov	r9, r0
 800aae2:	b918      	cbnz	r0, 800aaec <__gethex+0x424>
 800aae4:	4b1a      	ldr	r3, [pc, #104]	; (800ab50 <__gethex+0x488>)
 800aae6:	4602      	mov	r2, r0
 800aae8:	2184      	movs	r1, #132	; 0x84
 800aaea:	e6a8      	b.n	800a83e <__gethex+0x176>
 800aaec:	6922      	ldr	r2, [r4, #16]
 800aaee:	3202      	adds	r2, #2
 800aaf0:	f104 010c 	add.w	r1, r4, #12
 800aaf4:	0092      	lsls	r2, r2, #2
 800aaf6:	300c      	adds	r0, #12
 800aaf8:	f7fc ff67 	bl	80079ca <memcpy>
 800aafc:	4621      	mov	r1, r4
 800aafe:	ee18 0a10 	vmov	r0, s16
 800ab02:	f000 f965 	bl	800add0 <_Bfree>
 800ab06:	464c      	mov	r4, r9
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab10:	6122      	str	r2, [r4, #16]
 800ab12:	2201      	movs	r2, #1
 800ab14:	615a      	str	r2, [r3, #20]
 800ab16:	e7bb      	b.n	800aa90 <__gethex+0x3c8>
 800ab18:	6922      	ldr	r2, [r4, #16]
 800ab1a:	455a      	cmp	r2, fp
 800ab1c:	dd0b      	ble.n	800ab36 <__gethex+0x46e>
 800ab1e:	2101      	movs	r1, #1
 800ab20:	4620      	mov	r0, r4
 800ab22:	f7ff fd69 	bl	800a5f8 <rshift>
 800ab26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab2a:	3501      	adds	r5, #1
 800ab2c:	42ab      	cmp	r3, r5
 800ab2e:	f6ff aed0 	blt.w	800a8d2 <__gethex+0x20a>
 800ab32:	2701      	movs	r7, #1
 800ab34:	e7c0      	b.n	800aab8 <__gethex+0x3f0>
 800ab36:	f016 061f 	ands.w	r6, r6, #31
 800ab3a:	d0fa      	beq.n	800ab32 <__gethex+0x46a>
 800ab3c:	4453      	add	r3, sl
 800ab3e:	f1c6 0620 	rsb	r6, r6, #32
 800ab42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab46:	f000 f9f5 	bl	800af34 <__hi0bits>
 800ab4a:	42b0      	cmp	r0, r6
 800ab4c:	dbe7      	blt.n	800ab1e <__gethex+0x456>
 800ab4e:	e7f0      	b.n	800ab32 <__gethex+0x46a>
 800ab50:	080280b8 	.word	0x080280b8

0800ab54 <L_shift>:
 800ab54:	f1c2 0208 	rsb	r2, r2, #8
 800ab58:	0092      	lsls	r2, r2, #2
 800ab5a:	b570      	push	{r4, r5, r6, lr}
 800ab5c:	f1c2 0620 	rsb	r6, r2, #32
 800ab60:	6843      	ldr	r3, [r0, #4]
 800ab62:	6804      	ldr	r4, [r0, #0]
 800ab64:	fa03 f506 	lsl.w	r5, r3, r6
 800ab68:	432c      	orrs	r4, r5
 800ab6a:	40d3      	lsrs	r3, r2
 800ab6c:	6004      	str	r4, [r0, #0]
 800ab6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab72:	4288      	cmp	r0, r1
 800ab74:	d3f4      	bcc.n	800ab60 <L_shift+0xc>
 800ab76:	bd70      	pop	{r4, r5, r6, pc}

0800ab78 <__match>:
 800ab78:	b530      	push	{r4, r5, lr}
 800ab7a:	6803      	ldr	r3, [r0, #0]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab82:	b914      	cbnz	r4, 800ab8a <__match+0x12>
 800ab84:	6003      	str	r3, [r0, #0]
 800ab86:	2001      	movs	r0, #1
 800ab88:	bd30      	pop	{r4, r5, pc}
 800ab8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ab92:	2d19      	cmp	r5, #25
 800ab94:	bf98      	it	ls
 800ab96:	3220      	addls	r2, #32
 800ab98:	42a2      	cmp	r2, r4
 800ab9a:	d0f0      	beq.n	800ab7e <__match+0x6>
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	e7f3      	b.n	800ab88 <__match+0x10>

0800aba0 <__hexnan>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	680b      	ldr	r3, [r1, #0]
 800aba6:	115e      	asrs	r6, r3, #5
 800aba8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abac:	f013 031f 	ands.w	r3, r3, #31
 800abb0:	b087      	sub	sp, #28
 800abb2:	bf18      	it	ne
 800abb4:	3604      	addne	r6, #4
 800abb6:	2500      	movs	r5, #0
 800abb8:	1f37      	subs	r7, r6, #4
 800abba:	4690      	mov	r8, r2
 800abbc:	6802      	ldr	r2, [r0, #0]
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	4682      	mov	sl, r0
 800abc2:	f846 5c04 	str.w	r5, [r6, #-4]
 800abc6:	46b9      	mov	r9, r7
 800abc8:	463c      	mov	r4, r7
 800abca:	9502      	str	r5, [sp, #8]
 800abcc:	46ab      	mov	fp, r5
 800abce:	7851      	ldrb	r1, [r2, #1]
 800abd0:	1c53      	adds	r3, r2, #1
 800abd2:	9303      	str	r3, [sp, #12]
 800abd4:	b341      	cbz	r1, 800ac28 <__hexnan+0x88>
 800abd6:	4608      	mov	r0, r1
 800abd8:	9205      	str	r2, [sp, #20]
 800abda:	9104      	str	r1, [sp, #16]
 800abdc:	f7ff fd5e 	bl	800a69c <__hexdig_fun>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d14f      	bne.n	800ac84 <__hexnan+0xe4>
 800abe4:	9904      	ldr	r1, [sp, #16]
 800abe6:	9a05      	ldr	r2, [sp, #20]
 800abe8:	2920      	cmp	r1, #32
 800abea:	d818      	bhi.n	800ac1e <__hexnan+0x7e>
 800abec:	9b02      	ldr	r3, [sp, #8]
 800abee:	459b      	cmp	fp, r3
 800abf0:	dd13      	ble.n	800ac1a <__hexnan+0x7a>
 800abf2:	454c      	cmp	r4, r9
 800abf4:	d206      	bcs.n	800ac04 <__hexnan+0x64>
 800abf6:	2d07      	cmp	r5, #7
 800abf8:	dc04      	bgt.n	800ac04 <__hexnan+0x64>
 800abfa:	462a      	mov	r2, r5
 800abfc:	4649      	mov	r1, r9
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7ff ffa8 	bl	800ab54 <L_shift>
 800ac04:	4544      	cmp	r4, r8
 800ac06:	d950      	bls.n	800acaa <__hexnan+0x10a>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ac0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac12:	f8cd b008 	str.w	fp, [sp, #8]
 800ac16:	464c      	mov	r4, r9
 800ac18:	461d      	mov	r5, r3
 800ac1a:	9a03      	ldr	r2, [sp, #12]
 800ac1c:	e7d7      	b.n	800abce <__hexnan+0x2e>
 800ac1e:	2929      	cmp	r1, #41	; 0x29
 800ac20:	d156      	bne.n	800acd0 <__hexnan+0x130>
 800ac22:	3202      	adds	r2, #2
 800ac24:	f8ca 2000 	str.w	r2, [sl]
 800ac28:	f1bb 0f00 	cmp.w	fp, #0
 800ac2c:	d050      	beq.n	800acd0 <__hexnan+0x130>
 800ac2e:	454c      	cmp	r4, r9
 800ac30:	d206      	bcs.n	800ac40 <__hexnan+0xa0>
 800ac32:	2d07      	cmp	r5, #7
 800ac34:	dc04      	bgt.n	800ac40 <__hexnan+0xa0>
 800ac36:	462a      	mov	r2, r5
 800ac38:	4649      	mov	r1, r9
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f7ff ff8a 	bl	800ab54 <L_shift>
 800ac40:	4544      	cmp	r4, r8
 800ac42:	d934      	bls.n	800acae <__hexnan+0x10e>
 800ac44:	f1a8 0204 	sub.w	r2, r8, #4
 800ac48:	4623      	mov	r3, r4
 800ac4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac4e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac52:	429f      	cmp	r7, r3
 800ac54:	d2f9      	bcs.n	800ac4a <__hexnan+0xaa>
 800ac56:	1b3b      	subs	r3, r7, r4
 800ac58:	f023 0303 	bic.w	r3, r3, #3
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	3401      	adds	r4, #1
 800ac60:	3e03      	subs	r6, #3
 800ac62:	42b4      	cmp	r4, r6
 800ac64:	bf88      	it	hi
 800ac66:	2304      	movhi	r3, #4
 800ac68:	4443      	add	r3, r8
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f843 2b04 	str.w	r2, [r3], #4
 800ac70:	429f      	cmp	r7, r3
 800ac72:	d2fb      	bcs.n	800ac6c <__hexnan+0xcc>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	b91b      	cbnz	r3, 800ac80 <__hexnan+0xe0>
 800ac78:	4547      	cmp	r7, r8
 800ac7a:	d127      	bne.n	800accc <__hexnan+0x12c>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	2005      	movs	r0, #5
 800ac82:	e026      	b.n	800acd2 <__hexnan+0x132>
 800ac84:	3501      	adds	r5, #1
 800ac86:	2d08      	cmp	r5, #8
 800ac88:	f10b 0b01 	add.w	fp, fp, #1
 800ac8c:	dd06      	ble.n	800ac9c <__hexnan+0xfc>
 800ac8e:	4544      	cmp	r4, r8
 800ac90:	d9c3      	bls.n	800ac1a <__hexnan+0x7a>
 800ac92:	2300      	movs	r3, #0
 800ac94:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac98:	2501      	movs	r5, #1
 800ac9a:	3c04      	subs	r4, #4
 800ac9c:	6822      	ldr	r2, [r4, #0]
 800ac9e:	f000 000f 	and.w	r0, r0, #15
 800aca2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	e7b7      	b.n	800ac1a <__hexnan+0x7a>
 800acaa:	2508      	movs	r5, #8
 800acac:	e7b5      	b.n	800ac1a <__hexnan+0x7a>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0df      	beq.n	800ac74 <__hexnan+0xd4>
 800acb4:	f04f 32ff 	mov.w	r2, #4294967295
 800acb8:	f1c3 0320 	rsb	r3, r3, #32
 800acbc:	fa22 f303 	lsr.w	r3, r2, r3
 800acc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800acc4:	401a      	ands	r2, r3
 800acc6:	f846 2c04 	str.w	r2, [r6, #-4]
 800acca:	e7d3      	b.n	800ac74 <__hexnan+0xd4>
 800accc:	3f04      	subs	r7, #4
 800acce:	e7d1      	b.n	800ac74 <__hexnan+0xd4>
 800acd0:	2004      	movs	r0, #4
 800acd2:	b007      	add	sp, #28
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acd8 <_localeconv_r>:
 800acd8:	4800      	ldr	r0, [pc, #0]	; (800acdc <_localeconv_r+0x4>)
 800acda:	4770      	bx	lr
 800acdc:	20000168 	.word	0x20000168

0800ace0 <_lseek_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d07      	ldr	r5, [pc, #28]	; (800ad00 <_lseek_r+0x20>)
 800ace4:	4604      	mov	r4, r0
 800ace6:	4608      	mov	r0, r1
 800ace8:	4611      	mov	r1, r2
 800acea:	2200      	movs	r2, #0
 800acec:	602a      	str	r2, [r5, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	f7f7 f808 	bl	8001d04 <_lseek>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_lseek_r+0x1e>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_lseek_r+0x1e>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	20003b98 	.word	0x20003b98

0800ad04 <malloc>:
 800ad04:	4b02      	ldr	r3, [pc, #8]	; (800ad10 <malloc+0xc>)
 800ad06:	4601      	mov	r1, r0
 800ad08:	6818      	ldr	r0, [r3, #0]
 800ad0a:	f7fc be95 	b.w	8007a38 <_malloc_r>
 800ad0e:	bf00      	nop
 800ad10:	20000010 	.word	0x20000010

0800ad14 <__ascii_mbtowc>:
 800ad14:	b082      	sub	sp, #8
 800ad16:	b901      	cbnz	r1, 800ad1a <__ascii_mbtowc+0x6>
 800ad18:	a901      	add	r1, sp, #4
 800ad1a:	b142      	cbz	r2, 800ad2e <__ascii_mbtowc+0x1a>
 800ad1c:	b14b      	cbz	r3, 800ad32 <__ascii_mbtowc+0x1e>
 800ad1e:	7813      	ldrb	r3, [r2, #0]
 800ad20:	600b      	str	r3, [r1, #0]
 800ad22:	7812      	ldrb	r2, [r2, #0]
 800ad24:	1e10      	subs	r0, r2, #0
 800ad26:	bf18      	it	ne
 800ad28:	2001      	movne	r0, #1
 800ad2a:	b002      	add	sp, #8
 800ad2c:	4770      	bx	lr
 800ad2e:	4610      	mov	r0, r2
 800ad30:	e7fb      	b.n	800ad2a <__ascii_mbtowc+0x16>
 800ad32:	f06f 0001 	mvn.w	r0, #1
 800ad36:	e7f8      	b.n	800ad2a <__ascii_mbtowc+0x16>

0800ad38 <__malloc_lock>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__malloc_lock+0x8>)
 800ad3a:	f7fc be44 	b.w	80079c6 <__retarget_lock_acquire_recursive>
 800ad3e:	bf00      	nop
 800ad40:	20003b8c 	.word	0x20003b8c

0800ad44 <__malloc_unlock>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__malloc_unlock+0x8>)
 800ad46:	f7fc be3f 	b.w	80079c8 <__retarget_lock_release_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	20003b8c 	.word	0x20003b8c

0800ad50 <_Balloc>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad54:	4604      	mov	r4, r0
 800ad56:	460d      	mov	r5, r1
 800ad58:	b976      	cbnz	r6, 800ad78 <_Balloc+0x28>
 800ad5a:	2010      	movs	r0, #16
 800ad5c:	f7ff ffd2 	bl	800ad04 <malloc>
 800ad60:	4602      	mov	r2, r0
 800ad62:	6260      	str	r0, [r4, #36]	; 0x24
 800ad64:	b920      	cbnz	r0, 800ad70 <_Balloc+0x20>
 800ad66:	4b18      	ldr	r3, [pc, #96]	; (800adc8 <_Balloc+0x78>)
 800ad68:	4818      	ldr	r0, [pc, #96]	; (800adcc <_Balloc+0x7c>)
 800ad6a:	2166      	movs	r1, #102	; 0x66
 800ad6c:	f000 feae 	bl	800bacc <__assert_func>
 800ad70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad74:	6006      	str	r6, [r0, #0]
 800ad76:	60c6      	str	r6, [r0, #12]
 800ad78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad7a:	68f3      	ldr	r3, [r6, #12]
 800ad7c:	b183      	cbz	r3, 800ada0 <_Balloc+0x50>
 800ad7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad86:	b9b8      	cbnz	r0, 800adb8 <_Balloc+0x68>
 800ad88:	2101      	movs	r1, #1
 800ad8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad8e:	1d72      	adds	r2, r6, #5
 800ad90:	0092      	lsls	r2, r2, #2
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 fc9d 	bl	800b6d2 <_calloc_r>
 800ad98:	b160      	cbz	r0, 800adb4 <_Balloc+0x64>
 800ad9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad9e:	e00e      	b.n	800adbe <_Balloc+0x6e>
 800ada0:	2221      	movs	r2, #33	; 0x21
 800ada2:	2104      	movs	r1, #4
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 fc94 	bl	800b6d2 <_calloc_r>
 800adaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adac:	60f0      	str	r0, [r6, #12]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1e4      	bne.n	800ad7e <_Balloc+0x2e>
 800adb4:	2000      	movs	r0, #0
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	6802      	ldr	r2, [r0, #0]
 800adba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adbe:	2300      	movs	r3, #0
 800adc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adc4:	e7f7      	b.n	800adb6 <_Balloc+0x66>
 800adc6:	bf00      	nop
 800adc8:	08028046 	.word	0x08028046
 800adcc:	08028144 	.word	0x08028144

0800add0 <_Bfree>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800add4:	4605      	mov	r5, r0
 800add6:	460c      	mov	r4, r1
 800add8:	b976      	cbnz	r6, 800adf8 <_Bfree+0x28>
 800adda:	2010      	movs	r0, #16
 800addc:	f7ff ff92 	bl	800ad04 <malloc>
 800ade0:	4602      	mov	r2, r0
 800ade2:	6268      	str	r0, [r5, #36]	; 0x24
 800ade4:	b920      	cbnz	r0, 800adf0 <_Bfree+0x20>
 800ade6:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <_Bfree+0x3c>)
 800ade8:	4809      	ldr	r0, [pc, #36]	; (800ae10 <_Bfree+0x40>)
 800adea:	218a      	movs	r1, #138	; 0x8a
 800adec:	f000 fe6e 	bl	800bacc <__assert_func>
 800adf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adf4:	6006      	str	r6, [r0, #0]
 800adf6:	60c6      	str	r6, [r0, #12]
 800adf8:	b13c      	cbz	r4, 800ae0a <_Bfree+0x3a>
 800adfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800adfc:	6862      	ldr	r2, [r4, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae04:	6021      	str	r1, [r4, #0]
 800ae06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}
 800ae0c:	08028046 	.word	0x08028046
 800ae10:	08028144 	.word	0x08028144

0800ae14 <__multadd>:
 800ae14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae18:	690d      	ldr	r5, [r1, #16]
 800ae1a:	4607      	mov	r7, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	461e      	mov	r6, r3
 800ae20:	f101 0c14 	add.w	ip, r1, #20
 800ae24:	2000      	movs	r0, #0
 800ae26:	f8dc 3000 	ldr.w	r3, [ip]
 800ae2a:	b299      	uxth	r1, r3
 800ae2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ae30:	0c1e      	lsrs	r6, r3, #16
 800ae32:	0c0b      	lsrs	r3, r1, #16
 800ae34:	fb02 3306 	mla	r3, r2, r6, r3
 800ae38:	b289      	uxth	r1, r1
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae40:	4285      	cmp	r5, r0
 800ae42:	f84c 1b04 	str.w	r1, [ip], #4
 800ae46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae4a:	dcec      	bgt.n	800ae26 <__multadd+0x12>
 800ae4c:	b30e      	cbz	r6, 800ae92 <__multadd+0x7e>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	42ab      	cmp	r3, r5
 800ae52:	dc19      	bgt.n	800ae88 <__multadd+0x74>
 800ae54:	6861      	ldr	r1, [r4, #4]
 800ae56:	4638      	mov	r0, r7
 800ae58:	3101      	adds	r1, #1
 800ae5a:	f7ff ff79 	bl	800ad50 <_Balloc>
 800ae5e:	4680      	mov	r8, r0
 800ae60:	b928      	cbnz	r0, 800ae6e <__multadd+0x5a>
 800ae62:	4602      	mov	r2, r0
 800ae64:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <__multadd+0x84>)
 800ae66:	480d      	ldr	r0, [pc, #52]	; (800ae9c <__multadd+0x88>)
 800ae68:	21b5      	movs	r1, #181	; 0xb5
 800ae6a:	f000 fe2f 	bl	800bacc <__assert_func>
 800ae6e:	6922      	ldr	r2, [r4, #16]
 800ae70:	3202      	adds	r2, #2
 800ae72:	f104 010c 	add.w	r1, r4, #12
 800ae76:	0092      	lsls	r2, r2, #2
 800ae78:	300c      	adds	r0, #12
 800ae7a:	f7fc fda6 	bl	80079ca <memcpy>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4638      	mov	r0, r7
 800ae82:	f7ff ffa5 	bl	800add0 <_Bfree>
 800ae86:	4644      	mov	r4, r8
 800ae88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae8c:	3501      	adds	r5, #1
 800ae8e:	615e      	str	r6, [r3, #20]
 800ae90:	6125      	str	r5, [r4, #16]
 800ae92:	4620      	mov	r0, r4
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	080280b8 	.word	0x080280b8
 800ae9c:	08028144 	.word	0x08028144

0800aea0 <__s2b>:
 800aea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea4:	460c      	mov	r4, r1
 800aea6:	4615      	mov	r5, r2
 800aea8:	461f      	mov	r7, r3
 800aeaa:	2209      	movs	r2, #9
 800aeac:	3308      	adds	r3, #8
 800aeae:	4606      	mov	r6, r0
 800aeb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	db09      	blt.n	800aed0 <__s2b+0x30>
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7ff ff47 	bl	800ad50 <_Balloc>
 800aec2:	b940      	cbnz	r0, 800aed6 <__s2b+0x36>
 800aec4:	4602      	mov	r2, r0
 800aec6:	4b19      	ldr	r3, [pc, #100]	; (800af2c <__s2b+0x8c>)
 800aec8:	4819      	ldr	r0, [pc, #100]	; (800af30 <__s2b+0x90>)
 800aeca:	21ce      	movs	r1, #206	; 0xce
 800aecc:	f000 fdfe 	bl	800bacc <__assert_func>
 800aed0:	0052      	lsls	r2, r2, #1
 800aed2:	3101      	adds	r1, #1
 800aed4:	e7f0      	b.n	800aeb8 <__s2b+0x18>
 800aed6:	9b08      	ldr	r3, [sp, #32]
 800aed8:	6143      	str	r3, [r0, #20]
 800aeda:	2d09      	cmp	r5, #9
 800aedc:	f04f 0301 	mov.w	r3, #1
 800aee0:	6103      	str	r3, [r0, #16]
 800aee2:	dd16      	ble.n	800af12 <__s2b+0x72>
 800aee4:	f104 0909 	add.w	r9, r4, #9
 800aee8:	46c8      	mov	r8, r9
 800aeea:	442c      	add	r4, r5
 800aeec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aef0:	4601      	mov	r1, r0
 800aef2:	3b30      	subs	r3, #48	; 0x30
 800aef4:	220a      	movs	r2, #10
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7ff ff8c 	bl	800ae14 <__multadd>
 800aefc:	45a0      	cmp	r8, r4
 800aefe:	d1f5      	bne.n	800aeec <__s2b+0x4c>
 800af00:	f1a5 0408 	sub.w	r4, r5, #8
 800af04:	444c      	add	r4, r9
 800af06:	1b2d      	subs	r5, r5, r4
 800af08:	1963      	adds	r3, r4, r5
 800af0a:	42bb      	cmp	r3, r7
 800af0c:	db04      	blt.n	800af18 <__s2b+0x78>
 800af0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af12:	340a      	adds	r4, #10
 800af14:	2509      	movs	r5, #9
 800af16:	e7f6      	b.n	800af06 <__s2b+0x66>
 800af18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af1c:	4601      	mov	r1, r0
 800af1e:	3b30      	subs	r3, #48	; 0x30
 800af20:	220a      	movs	r2, #10
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ff76 	bl	800ae14 <__multadd>
 800af28:	e7ee      	b.n	800af08 <__s2b+0x68>
 800af2a:	bf00      	nop
 800af2c:	080280b8 	.word	0x080280b8
 800af30:	08028144 	.word	0x08028144

0800af34 <__hi0bits>:
 800af34:	0c03      	lsrs	r3, r0, #16
 800af36:	041b      	lsls	r3, r3, #16
 800af38:	b9d3      	cbnz	r3, 800af70 <__hi0bits+0x3c>
 800af3a:	0400      	lsls	r0, r0, #16
 800af3c:	2310      	movs	r3, #16
 800af3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af42:	bf04      	itt	eq
 800af44:	0200      	lsleq	r0, r0, #8
 800af46:	3308      	addeq	r3, #8
 800af48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af4c:	bf04      	itt	eq
 800af4e:	0100      	lsleq	r0, r0, #4
 800af50:	3304      	addeq	r3, #4
 800af52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af56:	bf04      	itt	eq
 800af58:	0080      	lsleq	r0, r0, #2
 800af5a:	3302      	addeq	r3, #2
 800af5c:	2800      	cmp	r0, #0
 800af5e:	db05      	blt.n	800af6c <__hi0bits+0x38>
 800af60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af64:	f103 0301 	add.w	r3, r3, #1
 800af68:	bf08      	it	eq
 800af6a:	2320      	moveq	r3, #32
 800af6c:	4618      	mov	r0, r3
 800af6e:	4770      	bx	lr
 800af70:	2300      	movs	r3, #0
 800af72:	e7e4      	b.n	800af3e <__hi0bits+0xa>

0800af74 <__lo0bits>:
 800af74:	6803      	ldr	r3, [r0, #0]
 800af76:	f013 0207 	ands.w	r2, r3, #7
 800af7a:	4601      	mov	r1, r0
 800af7c:	d00b      	beq.n	800af96 <__lo0bits+0x22>
 800af7e:	07da      	lsls	r2, r3, #31
 800af80:	d423      	bmi.n	800afca <__lo0bits+0x56>
 800af82:	0798      	lsls	r0, r3, #30
 800af84:	bf49      	itett	mi
 800af86:	085b      	lsrmi	r3, r3, #1
 800af88:	089b      	lsrpl	r3, r3, #2
 800af8a:	2001      	movmi	r0, #1
 800af8c:	600b      	strmi	r3, [r1, #0]
 800af8e:	bf5c      	itt	pl
 800af90:	600b      	strpl	r3, [r1, #0]
 800af92:	2002      	movpl	r0, #2
 800af94:	4770      	bx	lr
 800af96:	b298      	uxth	r0, r3
 800af98:	b9a8      	cbnz	r0, 800afc6 <__lo0bits+0x52>
 800af9a:	0c1b      	lsrs	r3, r3, #16
 800af9c:	2010      	movs	r0, #16
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	b90a      	cbnz	r2, 800afa6 <__lo0bits+0x32>
 800afa2:	3008      	adds	r0, #8
 800afa4:	0a1b      	lsrs	r3, r3, #8
 800afa6:	071a      	lsls	r2, r3, #28
 800afa8:	bf04      	itt	eq
 800afaa:	091b      	lsreq	r3, r3, #4
 800afac:	3004      	addeq	r0, #4
 800afae:	079a      	lsls	r2, r3, #30
 800afb0:	bf04      	itt	eq
 800afb2:	089b      	lsreq	r3, r3, #2
 800afb4:	3002      	addeq	r0, #2
 800afb6:	07da      	lsls	r2, r3, #31
 800afb8:	d403      	bmi.n	800afc2 <__lo0bits+0x4e>
 800afba:	085b      	lsrs	r3, r3, #1
 800afbc:	f100 0001 	add.w	r0, r0, #1
 800afc0:	d005      	beq.n	800afce <__lo0bits+0x5a>
 800afc2:	600b      	str	r3, [r1, #0]
 800afc4:	4770      	bx	lr
 800afc6:	4610      	mov	r0, r2
 800afc8:	e7e9      	b.n	800af9e <__lo0bits+0x2a>
 800afca:	2000      	movs	r0, #0
 800afcc:	4770      	bx	lr
 800afce:	2020      	movs	r0, #32
 800afd0:	4770      	bx	lr
	...

0800afd4 <__i2b>:
 800afd4:	b510      	push	{r4, lr}
 800afd6:	460c      	mov	r4, r1
 800afd8:	2101      	movs	r1, #1
 800afda:	f7ff feb9 	bl	800ad50 <_Balloc>
 800afde:	4602      	mov	r2, r0
 800afe0:	b928      	cbnz	r0, 800afee <__i2b+0x1a>
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <__i2b+0x24>)
 800afe4:	4805      	ldr	r0, [pc, #20]	; (800affc <__i2b+0x28>)
 800afe6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800afea:	f000 fd6f 	bl	800bacc <__assert_func>
 800afee:	2301      	movs	r3, #1
 800aff0:	6144      	str	r4, [r0, #20]
 800aff2:	6103      	str	r3, [r0, #16]
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	bf00      	nop
 800aff8:	080280b8 	.word	0x080280b8
 800affc:	08028144 	.word	0x08028144

0800b000 <__multiply>:
 800b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	4691      	mov	r9, r2
 800b006:	690a      	ldr	r2, [r1, #16]
 800b008:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	bfb8      	it	lt
 800b010:	460b      	movlt	r3, r1
 800b012:	460c      	mov	r4, r1
 800b014:	bfbc      	itt	lt
 800b016:	464c      	movlt	r4, r9
 800b018:	4699      	movlt	r9, r3
 800b01a:	6927      	ldr	r7, [r4, #16]
 800b01c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b020:	68a3      	ldr	r3, [r4, #8]
 800b022:	6861      	ldr	r1, [r4, #4]
 800b024:	eb07 060a 	add.w	r6, r7, sl
 800b028:	42b3      	cmp	r3, r6
 800b02a:	b085      	sub	sp, #20
 800b02c:	bfb8      	it	lt
 800b02e:	3101      	addlt	r1, #1
 800b030:	f7ff fe8e 	bl	800ad50 <_Balloc>
 800b034:	b930      	cbnz	r0, 800b044 <__multiply+0x44>
 800b036:	4602      	mov	r2, r0
 800b038:	4b44      	ldr	r3, [pc, #272]	; (800b14c <__multiply+0x14c>)
 800b03a:	4845      	ldr	r0, [pc, #276]	; (800b150 <__multiply+0x150>)
 800b03c:	f240 115d 	movw	r1, #349	; 0x15d
 800b040:	f000 fd44 	bl	800bacc <__assert_func>
 800b044:	f100 0514 	add.w	r5, r0, #20
 800b048:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b04c:	462b      	mov	r3, r5
 800b04e:	2200      	movs	r2, #0
 800b050:	4543      	cmp	r3, r8
 800b052:	d321      	bcc.n	800b098 <__multiply+0x98>
 800b054:	f104 0314 	add.w	r3, r4, #20
 800b058:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b05c:	f109 0314 	add.w	r3, r9, #20
 800b060:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b064:	9202      	str	r2, [sp, #8]
 800b066:	1b3a      	subs	r2, r7, r4
 800b068:	3a15      	subs	r2, #21
 800b06a:	f022 0203 	bic.w	r2, r2, #3
 800b06e:	3204      	adds	r2, #4
 800b070:	f104 0115 	add.w	r1, r4, #21
 800b074:	428f      	cmp	r7, r1
 800b076:	bf38      	it	cc
 800b078:	2204      	movcc	r2, #4
 800b07a:	9201      	str	r2, [sp, #4]
 800b07c:	9a02      	ldr	r2, [sp, #8]
 800b07e:	9303      	str	r3, [sp, #12]
 800b080:	429a      	cmp	r2, r3
 800b082:	d80c      	bhi.n	800b09e <__multiply+0x9e>
 800b084:	2e00      	cmp	r6, #0
 800b086:	dd03      	ble.n	800b090 <__multiply+0x90>
 800b088:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d05a      	beq.n	800b146 <__multiply+0x146>
 800b090:	6106      	str	r6, [r0, #16]
 800b092:	b005      	add	sp, #20
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	f843 2b04 	str.w	r2, [r3], #4
 800b09c:	e7d8      	b.n	800b050 <__multiply+0x50>
 800b09e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0a2:	f1ba 0f00 	cmp.w	sl, #0
 800b0a6:	d024      	beq.n	800b0f2 <__multiply+0xf2>
 800b0a8:	f104 0e14 	add.w	lr, r4, #20
 800b0ac:	46a9      	mov	r9, r5
 800b0ae:	f04f 0c00 	mov.w	ip, #0
 800b0b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0b6:	f8d9 1000 	ldr.w	r1, [r9]
 800b0ba:	fa1f fb82 	uxth.w	fp, r2
 800b0be:	b289      	uxth	r1, r1
 800b0c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b0cc:	4461      	add	r1, ip
 800b0ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0da:	b289      	uxth	r1, r1
 800b0dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0e0:	4577      	cmp	r7, lr
 800b0e2:	f849 1b04 	str.w	r1, [r9], #4
 800b0e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0ea:	d8e2      	bhi.n	800b0b2 <__multiply+0xb2>
 800b0ec:	9a01      	ldr	r2, [sp, #4]
 800b0ee:	f845 c002 	str.w	ip, [r5, r2]
 800b0f2:	9a03      	ldr	r2, [sp, #12]
 800b0f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	f1b9 0f00 	cmp.w	r9, #0
 800b0fe:	d020      	beq.n	800b142 <__multiply+0x142>
 800b100:	6829      	ldr	r1, [r5, #0]
 800b102:	f104 0c14 	add.w	ip, r4, #20
 800b106:	46ae      	mov	lr, r5
 800b108:	f04f 0a00 	mov.w	sl, #0
 800b10c:	f8bc b000 	ldrh.w	fp, [ip]
 800b110:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b114:	fb09 220b 	mla	r2, r9, fp, r2
 800b118:	4492      	add	sl, r2
 800b11a:	b289      	uxth	r1, r1
 800b11c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b120:	f84e 1b04 	str.w	r1, [lr], #4
 800b124:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b128:	f8be 1000 	ldrh.w	r1, [lr]
 800b12c:	0c12      	lsrs	r2, r2, #16
 800b12e:	fb09 1102 	mla	r1, r9, r2, r1
 800b132:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b136:	4567      	cmp	r7, ip
 800b138:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b13c:	d8e6      	bhi.n	800b10c <__multiply+0x10c>
 800b13e:	9a01      	ldr	r2, [sp, #4]
 800b140:	50a9      	str	r1, [r5, r2]
 800b142:	3504      	adds	r5, #4
 800b144:	e79a      	b.n	800b07c <__multiply+0x7c>
 800b146:	3e01      	subs	r6, #1
 800b148:	e79c      	b.n	800b084 <__multiply+0x84>
 800b14a:	bf00      	nop
 800b14c:	080280b8 	.word	0x080280b8
 800b150:	08028144 	.word	0x08028144

0800b154 <__pow5mult>:
 800b154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b158:	4615      	mov	r5, r2
 800b15a:	f012 0203 	ands.w	r2, r2, #3
 800b15e:	4606      	mov	r6, r0
 800b160:	460f      	mov	r7, r1
 800b162:	d007      	beq.n	800b174 <__pow5mult+0x20>
 800b164:	4c25      	ldr	r4, [pc, #148]	; (800b1fc <__pow5mult+0xa8>)
 800b166:	3a01      	subs	r2, #1
 800b168:	2300      	movs	r3, #0
 800b16a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b16e:	f7ff fe51 	bl	800ae14 <__multadd>
 800b172:	4607      	mov	r7, r0
 800b174:	10ad      	asrs	r5, r5, #2
 800b176:	d03d      	beq.n	800b1f4 <__pow5mult+0xa0>
 800b178:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b17a:	b97c      	cbnz	r4, 800b19c <__pow5mult+0x48>
 800b17c:	2010      	movs	r0, #16
 800b17e:	f7ff fdc1 	bl	800ad04 <malloc>
 800b182:	4602      	mov	r2, r0
 800b184:	6270      	str	r0, [r6, #36]	; 0x24
 800b186:	b928      	cbnz	r0, 800b194 <__pow5mult+0x40>
 800b188:	4b1d      	ldr	r3, [pc, #116]	; (800b200 <__pow5mult+0xac>)
 800b18a:	481e      	ldr	r0, [pc, #120]	; (800b204 <__pow5mult+0xb0>)
 800b18c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b190:	f000 fc9c 	bl	800bacc <__assert_func>
 800b194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b198:	6004      	str	r4, [r0, #0]
 800b19a:	60c4      	str	r4, [r0, #12]
 800b19c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1a4:	b94c      	cbnz	r4, 800b1ba <__pow5mult+0x66>
 800b1a6:	f240 2171 	movw	r1, #625	; 0x271
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7ff ff12 	bl	800afd4 <__i2b>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	6003      	str	r3, [r0, #0]
 800b1ba:	f04f 0900 	mov.w	r9, #0
 800b1be:	07eb      	lsls	r3, r5, #31
 800b1c0:	d50a      	bpl.n	800b1d8 <__pow5mult+0x84>
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff ff1a 	bl	800b000 <__multiply>
 800b1cc:	4639      	mov	r1, r7
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7ff fdfd 	bl	800add0 <_Bfree>
 800b1d6:	4647      	mov	r7, r8
 800b1d8:	106d      	asrs	r5, r5, #1
 800b1da:	d00b      	beq.n	800b1f4 <__pow5mult+0xa0>
 800b1dc:	6820      	ldr	r0, [r4, #0]
 800b1de:	b938      	cbnz	r0, 800b1f0 <__pow5mult+0x9c>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	f7ff ff0b 	bl	800b000 <__multiply>
 800b1ea:	6020      	str	r0, [r4, #0]
 800b1ec:	f8c0 9000 	str.w	r9, [r0]
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	e7e4      	b.n	800b1be <__pow5mult+0x6a>
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1fa:	bf00      	nop
 800b1fc:	08028290 	.word	0x08028290
 800b200:	08028046 	.word	0x08028046
 800b204:	08028144 	.word	0x08028144

0800b208 <__lshift>:
 800b208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b20c:	460c      	mov	r4, r1
 800b20e:	6849      	ldr	r1, [r1, #4]
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	4607      	mov	r7, r0
 800b21a:	4691      	mov	r9, r2
 800b21c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b220:	f108 0601 	add.w	r6, r8, #1
 800b224:	42b3      	cmp	r3, r6
 800b226:	db0b      	blt.n	800b240 <__lshift+0x38>
 800b228:	4638      	mov	r0, r7
 800b22a:	f7ff fd91 	bl	800ad50 <_Balloc>
 800b22e:	4605      	mov	r5, r0
 800b230:	b948      	cbnz	r0, 800b246 <__lshift+0x3e>
 800b232:	4602      	mov	r2, r0
 800b234:	4b2a      	ldr	r3, [pc, #168]	; (800b2e0 <__lshift+0xd8>)
 800b236:	482b      	ldr	r0, [pc, #172]	; (800b2e4 <__lshift+0xdc>)
 800b238:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b23c:	f000 fc46 	bl	800bacc <__assert_func>
 800b240:	3101      	adds	r1, #1
 800b242:	005b      	lsls	r3, r3, #1
 800b244:	e7ee      	b.n	800b224 <__lshift+0x1c>
 800b246:	2300      	movs	r3, #0
 800b248:	f100 0114 	add.w	r1, r0, #20
 800b24c:	f100 0210 	add.w	r2, r0, #16
 800b250:	4618      	mov	r0, r3
 800b252:	4553      	cmp	r3, sl
 800b254:	db37      	blt.n	800b2c6 <__lshift+0xbe>
 800b256:	6920      	ldr	r0, [r4, #16]
 800b258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b25c:	f104 0314 	add.w	r3, r4, #20
 800b260:	f019 091f 	ands.w	r9, r9, #31
 800b264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b268:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b26c:	d02f      	beq.n	800b2ce <__lshift+0xc6>
 800b26e:	f1c9 0e20 	rsb	lr, r9, #32
 800b272:	468a      	mov	sl, r1
 800b274:	f04f 0c00 	mov.w	ip, #0
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	fa02 f209 	lsl.w	r2, r2, r9
 800b27e:	ea42 020c 	orr.w	r2, r2, ip
 800b282:	f84a 2b04 	str.w	r2, [sl], #4
 800b286:	f853 2b04 	ldr.w	r2, [r3], #4
 800b28a:	4298      	cmp	r0, r3
 800b28c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b290:	d8f2      	bhi.n	800b278 <__lshift+0x70>
 800b292:	1b03      	subs	r3, r0, r4
 800b294:	3b15      	subs	r3, #21
 800b296:	f023 0303 	bic.w	r3, r3, #3
 800b29a:	3304      	adds	r3, #4
 800b29c:	f104 0215 	add.w	r2, r4, #21
 800b2a0:	4290      	cmp	r0, r2
 800b2a2:	bf38      	it	cc
 800b2a4:	2304      	movcc	r3, #4
 800b2a6:	f841 c003 	str.w	ip, [r1, r3]
 800b2aa:	f1bc 0f00 	cmp.w	ip, #0
 800b2ae:	d001      	beq.n	800b2b4 <__lshift+0xac>
 800b2b0:	f108 0602 	add.w	r6, r8, #2
 800b2b4:	3e01      	subs	r6, #1
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	612e      	str	r6, [r5, #16]
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	f7ff fd88 	bl	800add0 <_Bfree>
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	e7c1      	b.n	800b252 <__lshift+0x4a>
 800b2ce:	3904      	subs	r1, #4
 800b2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2d8:	4298      	cmp	r0, r3
 800b2da:	d8f9      	bhi.n	800b2d0 <__lshift+0xc8>
 800b2dc:	e7ea      	b.n	800b2b4 <__lshift+0xac>
 800b2de:	bf00      	nop
 800b2e0:	080280b8 	.word	0x080280b8
 800b2e4:	08028144 	.word	0x08028144

0800b2e8 <__mcmp>:
 800b2e8:	b530      	push	{r4, r5, lr}
 800b2ea:	6902      	ldr	r2, [r0, #16]
 800b2ec:	690c      	ldr	r4, [r1, #16]
 800b2ee:	1b12      	subs	r2, r2, r4
 800b2f0:	d10e      	bne.n	800b310 <__mcmp+0x28>
 800b2f2:	f100 0314 	add.w	r3, r0, #20
 800b2f6:	3114      	adds	r1, #20
 800b2f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b300:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b304:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b308:	42a5      	cmp	r5, r4
 800b30a:	d003      	beq.n	800b314 <__mcmp+0x2c>
 800b30c:	d305      	bcc.n	800b31a <__mcmp+0x32>
 800b30e:	2201      	movs	r2, #1
 800b310:	4610      	mov	r0, r2
 800b312:	bd30      	pop	{r4, r5, pc}
 800b314:	4283      	cmp	r3, r0
 800b316:	d3f3      	bcc.n	800b300 <__mcmp+0x18>
 800b318:	e7fa      	b.n	800b310 <__mcmp+0x28>
 800b31a:	f04f 32ff 	mov.w	r2, #4294967295
 800b31e:	e7f7      	b.n	800b310 <__mcmp+0x28>

0800b320 <__mdiff>:
 800b320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	460c      	mov	r4, r1
 800b326:	4606      	mov	r6, r0
 800b328:	4611      	mov	r1, r2
 800b32a:	4620      	mov	r0, r4
 800b32c:	4690      	mov	r8, r2
 800b32e:	f7ff ffdb 	bl	800b2e8 <__mcmp>
 800b332:	1e05      	subs	r5, r0, #0
 800b334:	d110      	bne.n	800b358 <__mdiff+0x38>
 800b336:	4629      	mov	r1, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff fd09 	bl	800ad50 <_Balloc>
 800b33e:	b930      	cbnz	r0, 800b34e <__mdiff+0x2e>
 800b340:	4b3a      	ldr	r3, [pc, #232]	; (800b42c <__mdiff+0x10c>)
 800b342:	4602      	mov	r2, r0
 800b344:	f240 2132 	movw	r1, #562	; 0x232
 800b348:	4839      	ldr	r0, [pc, #228]	; (800b430 <__mdiff+0x110>)
 800b34a:	f000 fbbf 	bl	800bacc <__assert_func>
 800b34e:	2301      	movs	r3, #1
 800b350:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b358:	bfa4      	itt	ge
 800b35a:	4643      	movge	r3, r8
 800b35c:	46a0      	movge	r8, r4
 800b35e:	4630      	mov	r0, r6
 800b360:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b364:	bfa6      	itte	ge
 800b366:	461c      	movge	r4, r3
 800b368:	2500      	movge	r5, #0
 800b36a:	2501      	movlt	r5, #1
 800b36c:	f7ff fcf0 	bl	800ad50 <_Balloc>
 800b370:	b920      	cbnz	r0, 800b37c <__mdiff+0x5c>
 800b372:	4b2e      	ldr	r3, [pc, #184]	; (800b42c <__mdiff+0x10c>)
 800b374:	4602      	mov	r2, r0
 800b376:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b37a:	e7e5      	b.n	800b348 <__mdiff+0x28>
 800b37c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b380:	6926      	ldr	r6, [r4, #16]
 800b382:	60c5      	str	r5, [r0, #12]
 800b384:	f104 0914 	add.w	r9, r4, #20
 800b388:	f108 0514 	add.w	r5, r8, #20
 800b38c:	f100 0e14 	add.w	lr, r0, #20
 800b390:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b394:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b398:	f108 0210 	add.w	r2, r8, #16
 800b39c:	46f2      	mov	sl, lr
 800b39e:	2100      	movs	r1, #0
 800b3a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3a8:	fa1f f883 	uxth.w	r8, r3
 800b3ac:	fa11 f18b 	uxtah	r1, r1, fp
 800b3b0:	0c1b      	lsrs	r3, r3, #16
 800b3b2:	eba1 0808 	sub.w	r8, r1, r8
 800b3b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3be:	fa1f f888 	uxth.w	r8, r8
 800b3c2:	1419      	asrs	r1, r3, #16
 800b3c4:	454e      	cmp	r6, r9
 800b3c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b3ce:	d8e7      	bhi.n	800b3a0 <__mdiff+0x80>
 800b3d0:	1b33      	subs	r3, r6, r4
 800b3d2:	3b15      	subs	r3, #21
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	3304      	adds	r3, #4
 800b3da:	3415      	adds	r4, #21
 800b3dc:	42a6      	cmp	r6, r4
 800b3de:	bf38      	it	cc
 800b3e0:	2304      	movcc	r3, #4
 800b3e2:	441d      	add	r5, r3
 800b3e4:	4473      	add	r3, lr
 800b3e6:	469e      	mov	lr, r3
 800b3e8:	462e      	mov	r6, r5
 800b3ea:	4566      	cmp	r6, ip
 800b3ec:	d30e      	bcc.n	800b40c <__mdiff+0xec>
 800b3ee:	f10c 0203 	add.w	r2, ip, #3
 800b3f2:	1b52      	subs	r2, r2, r5
 800b3f4:	f022 0203 	bic.w	r2, r2, #3
 800b3f8:	3d03      	subs	r5, #3
 800b3fa:	45ac      	cmp	ip, r5
 800b3fc:	bf38      	it	cc
 800b3fe:	2200      	movcc	r2, #0
 800b400:	441a      	add	r2, r3
 800b402:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b406:	b17b      	cbz	r3, 800b428 <__mdiff+0x108>
 800b408:	6107      	str	r7, [r0, #16]
 800b40a:	e7a3      	b.n	800b354 <__mdiff+0x34>
 800b40c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b410:	fa11 f288 	uxtah	r2, r1, r8
 800b414:	1414      	asrs	r4, r2, #16
 800b416:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b41a:	b292      	uxth	r2, r2
 800b41c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b420:	f84e 2b04 	str.w	r2, [lr], #4
 800b424:	1421      	asrs	r1, r4, #16
 800b426:	e7e0      	b.n	800b3ea <__mdiff+0xca>
 800b428:	3f01      	subs	r7, #1
 800b42a:	e7ea      	b.n	800b402 <__mdiff+0xe2>
 800b42c:	080280b8 	.word	0x080280b8
 800b430:	08028144 	.word	0x08028144

0800b434 <__ulp>:
 800b434:	b082      	sub	sp, #8
 800b436:	ed8d 0b00 	vstr	d0, [sp]
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	4912      	ldr	r1, [pc, #72]	; (800b488 <__ulp+0x54>)
 800b43e:	4019      	ands	r1, r3
 800b440:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b444:	2900      	cmp	r1, #0
 800b446:	dd05      	ble.n	800b454 <__ulp+0x20>
 800b448:	2200      	movs	r2, #0
 800b44a:	460b      	mov	r3, r1
 800b44c:	ec43 2b10 	vmov	d0, r2, r3
 800b450:	b002      	add	sp, #8
 800b452:	4770      	bx	lr
 800b454:	4249      	negs	r1, r1
 800b456:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b45a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	da04      	bge.n	800b472 <__ulp+0x3e>
 800b468:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b46c:	fa41 f300 	asr.w	r3, r1, r0
 800b470:	e7ec      	b.n	800b44c <__ulp+0x18>
 800b472:	f1a0 0114 	sub.w	r1, r0, #20
 800b476:	291e      	cmp	r1, #30
 800b478:	bfda      	itte	le
 800b47a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b47e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b482:	2101      	movgt	r1, #1
 800b484:	460a      	mov	r2, r1
 800b486:	e7e1      	b.n	800b44c <__ulp+0x18>
 800b488:	7ff00000 	.word	0x7ff00000

0800b48c <__b2d>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	6905      	ldr	r5, [r0, #16]
 800b490:	f100 0714 	add.w	r7, r0, #20
 800b494:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b498:	1f2e      	subs	r6, r5, #4
 800b49a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f7ff fd48 	bl	800af34 <__hi0bits>
 800b4a4:	f1c0 0320 	rsb	r3, r0, #32
 800b4a8:	280a      	cmp	r0, #10
 800b4aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b528 <__b2d+0x9c>
 800b4ae:	600b      	str	r3, [r1, #0]
 800b4b0:	dc14      	bgt.n	800b4dc <__b2d+0x50>
 800b4b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b4b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b4ba:	42b7      	cmp	r7, r6
 800b4bc:	ea41 030c 	orr.w	r3, r1, ip
 800b4c0:	bf34      	ite	cc
 800b4c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4c6:	2100      	movcs	r1, #0
 800b4c8:	3015      	adds	r0, #21
 800b4ca:	fa04 f000 	lsl.w	r0, r4, r0
 800b4ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800b4d2:	ea40 0201 	orr.w	r2, r0, r1
 800b4d6:	ec43 2b10 	vmov	d0, r2, r3
 800b4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4dc:	42b7      	cmp	r7, r6
 800b4de:	bf3a      	itte	cc
 800b4e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4e8:	2100      	movcs	r1, #0
 800b4ea:	380b      	subs	r0, #11
 800b4ec:	d017      	beq.n	800b51e <__b2d+0x92>
 800b4ee:	f1c0 0c20 	rsb	ip, r0, #32
 800b4f2:	fa04 f500 	lsl.w	r5, r4, r0
 800b4f6:	42be      	cmp	r6, r7
 800b4f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b4fc:	ea45 0504 	orr.w	r5, r5, r4
 800b500:	bf8c      	ite	hi
 800b502:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b506:	2400      	movls	r4, #0
 800b508:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b50c:	fa01 f000 	lsl.w	r0, r1, r0
 800b510:	fa24 f40c 	lsr.w	r4, r4, ip
 800b514:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b518:	ea40 0204 	orr.w	r2, r0, r4
 800b51c:	e7db      	b.n	800b4d6 <__b2d+0x4a>
 800b51e:	ea44 030c 	orr.w	r3, r4, ip
 800b522:	460a      	mov	r2, r1
 800b524:	e7d7      	b.n	800b4d6 <__b2d+0x4a>
 800b526:	bf00      	nop
 800b528:	3ff00000 	.word	0x3ff00000

0800b52c <__d2b>:
 800b52c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b530:	4689      	mov	r9, r1
 800b532:	2101      	movs	r1, #1
 800b534:	ec57 6b10 	vmov	r6, r7, d0
 800b538:	4690      	mov	r8, r2
 800b53a:	f7ff fc09 	bl	800ad50 <_Balloc>
 800b53e:	4604      	mov	r4, r0
 800b540:	b930      	cbnz	r0, 800b550 <__d2b+0x24>
 800b542:	4602      	mov	r2, r0
 800b544:	4b25      	ldr	r3, [pc, #148]	; (800b5dc <__d2b+0xb0>)
 800b546:	4826      	ldr	r0, [pc, #152]	; (800b5e0 <__d2b+0xb4>)
 800b548:	f240 310a 	movw	r1, #778	; 0x30a
 800b54c:	f000 fabe 	bl	800bacc <__assert_func>
 800b550:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b554:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b558:	bb35      	cbnz	r5, 800b5a8 <__d2b+0x7c>
 800b55a:	2e00      	cmp	r6, #0
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	d028      	beq.n	800b5b2 <__d2b+0x86>
 800b560:	4668      	mov	r0, sp
 800b562:	9600      	str	r6, [sp, #0]
 800b564:	f7ff fd06 	bl	800af74 <__lo0bits>
 800b568:	9900      	ldr	r1, [sp, #0]
 800b56a:	b300      	cbz	r0, 800b5ae <__d2b+0x82>
 800b56c:	9a01      	ldr	r2, [sp, #4]
 800b56e:	f1c0 0320 	rsb	r3, r0, #32
 800b572:	fa02 f303 	lsl.w	r3, r2, r3
 800b576:	430b      	orrs	r3, r1
 800b578:	40c2      	lsrs	r2, r0
 800b57a:	6163      	str	r3, [r4, #20]
 800b57c:	9201      	str	r2, [sp, #4]
 800b57e:	9b01      	ldr	r3, [sp, #4]
 800b580:	61a3      	str	r3, [r4, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	bf14      	ite	ne
 800b586:	2202      	movne	r2, #2
 800b588:	2201      	moveq	r2, #1
 800b58a:	6122      	str	r2, [r4, #16]
 800b58c:	b1d5      	cbz	r5, 800b5c4 <__d2b+0x98>
 800b58e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b592:	4405      	add	r5, r0
 800b594:	f8c9 5000 	str.w	r5, [r9]
 800b598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b59c:	f8c8 0000 	str.w	r0, [r8]
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	b003      	add	sp, #12
 800b5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5ac:	e7d5      	b.n	800b55a <__d2b+0x2e>
 800b5ae:	6161      	str	r1, [r4, #20]
 800b5b0:	e7e5      	b.n	800b57e <__d2b+0x52>
 800b5b2:	a801      	add	r0, sp, #4
 800b5b4:	f7ff fcde 	bl	800af74 <__lo0bits>
 800b5b8:	9b01      	ldr	r3, [sp, #4]
 800b5ba:	6163      	str	r3, [r4, #20]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	6122      	str	r2, [r4, #16]
 800b5c0:	3020      	adds	r0, #32
 800b5c2:	e7e3      	b.n	800b58c <__d2b+0x60>
 800b5c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5cc:	f8c9 0000 	str.w	r0, [r9]
 800b5d0:	6918      	ldr	r0, [r3, #16]
 800b5d2:	f7ff fcaf 	bl	800af34 <__hi0bits>
 800b5d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5da:	e7df      	b.n	800b59c <__d2b+0x70>
 800b5dc:	080280b8 	.word	0x080280b8
 800b5e0:	08028144 	.word	0x08028144

0800b5e4 <__ratio>:
 800b5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	4688      	mov	r8, r1
 800b5ea:	4669      	mov	r1, sp
 800b5ec:	4681      	mov	r9, r0
 800b5ee:	f7ff ff4d 	bl	800b48c <__b2d>
 800b5f2:	a901      	add	r1, sp, #4
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	ec55 4b10 	vmov	r4, r5, d0
 800b5fa:	f7ff ff47 	bl	800b48c <__b2d>
 800b5fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b602:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b606:	eba3 0c02 	sub.w	ip, r3, r2
 800b60a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b60e:	1a9b      	subs	r3, r3, r2
 800b610:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b614:	ec51 0b10 	vmov	r0, r1, d0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	bfd6      	itet	le
 800b61c:	460a      	movle	r2, r1
 800b61e:	462a      	movgt	r2, r5
 800b620:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b624:	468b      	mov	fp, r1
 800b626:	462f      	mov	r7, r5
 800b628:	bfd4      	ite	le
 800b62a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b62e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b632:	4620      	mov	r0, r4
 800b634:	ee10 2a10 	vmov	r2, s0
 800b638:	465b      	mov	r3, fp
 800b63a:	4639      	mov	r1, r7
 800b63c:	f7f5 f926 	bl	800088c <__aeabi_ddiv>
 800b640:	ec41 0b10 	vmov	d0, r0, r1
 800b644:	b003      	add	sp, #12
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b64a <__copybits>:
 800b64a:	3901      	subs	r1, #1
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	1149      	asrs	r1, r1, #5
 800b650:	6914      	ldr	r4, [r2, #16]
 800b652:	3101      	adds	r1, #1
 800b654:	f102 0314 	add.w	r3, r2, #20
 800b658:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b65c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b660:	1f05      	subs	r5, r0, #4
 800b662:	42a3      	cmp	r3, r4
 800b664:	d30c      	bcc.n	800b680 <__copybits+0x36>
 800b666:	1aa3      	subs	r3, r4, r2
 800b668:	3b11      	subs	r3, #17
 800b66a:	f023 0303 	bic.w	r3, r3, #3
 800b66e:	3211      	adds	r2, #17
 800b670:	42a2      	cmp	r2, r4
 800b672:	bf88      	it	hi
 800b674:	2300      	movhi	r3, #0
 800b676:	4418      	add	r0, r3
 800b678:	2300      	movs	r3, #0
 800b67a:	4288      	cmp	r0, r1
 800b67c:	d305      	bcc.n	800b68a <__copybits+0x40>
 800b67e:	bd70      	pop	{r4, r5, r6, pc}
 800b680:	f853 6b04 	ldr.w	r6, [r3], #4
 800b684:	f845 6f04 	str.w	r6, [r5, #4]!
 800b688:	e7eb      	b.n	800b662 <__copybits+0x18>
 800b68a:	f840 3b04 	str.w	r3, [r0], #4
 800b68e:	e7f4      	b.n	800b67a <__copybits+0x30>

0800b690 <__any_on>:
 800b690:	f100 0214 	add.w	r2, r0, #20
 800b694:	6900      	ldr	r0, [r0, #16]
 800b696:	114b      	asrs	r3, r1, #5
 800b698:	4298      	cmp	r0, r3
 800b69a:	b510      	push	{r4, lr}
 800b69c:	db11      	blt.n	800b6c2 <__any_on+0x32>
 800b69e:	dd0a      	ble.n	800b6b6 <__any_on+0x26>
 800b6a0:	f011 011f 	ands.w	r1, r1, #31
 800b6a4:	d007      	beq.n	800b6b6 <__any_on+0x26>
 800b6a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6aa:	fa24 f001 	lsr.w	r0, r4, r1
 800b6ae:	fa00 f101 	lsl.w	r1, r0, r1
 800b6b2:	428c      	cmp	r4, r1
 800b6b4:	d10b      	bne.n	800b6ce <__any_on+0x3e>
 800b6b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d803      	bhi.n	800b6c6 <__any_on+0x36>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	e7f7      	b.n	800b6b6 <__any_on+0x26>
 800b6c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6ca:	2900      	cmp	r1, #0
 800b6cc:	d0f5      	beq.n	800b6ba <__any_on+0x2a>
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	e7f6      	b.n	800b6c0 <__any_on+0x30>

0800b6d2 <_calloc_r>:
 800b6d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6d4:	fba1 2402 	umull	r2, r4, r1, r2
 800b6d8:	b94c      	cbnz	r4, 800b6ee <_calloc_r+0x1c>
 800b6da:	4611      	mov	r1, r2
 800b6dc:	9201      	str	r2, [sp, #4]
 800b6de:	f7fc f9ab 	bl	8007a38 <_malloc_r>
 800b6e2:	9a01      	ldr	r2, [sp, #4]
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	b930      	cbnz	r0, 800b6f6 <_calloc_r+0x24>
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	b003      	add	sp, #12
 800b6ec:	bd30      	pop	{r4, r5, pc}
 800b6ee:	220c      	movs	r2, #12
 800b6f0:	6002      	str	r2, [r0, #0]
 800b6f2:	2500      	movs	r5, #0
 800b6f4:	e7f8      	b.n	800b6e8 <_calloc_r+0x16>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	f7fc f975 	bl	80079e6 <memset>
 800b6fc:	e7f4      	b.n	800b6e8 <_calloc_r+0x16>
	...

0800b700 <_free_r>:
 800b700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b702:	2900      	cmp	r1, #0
 800b704:	d044      	beq.n	800b790 <_free_r+0x90>
 800b706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b70a:	9001      	str	r0, [sp, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f1a1 0404 	sub.w	r4, r1, #4
 800b712:	bfb8      	it	lt
 800b714:	18e4      	addlt	r4, r4, r3
 800b716:	f7ff fb0f 	bl	800ad38 <__malloc_lock>
 800b71a:	4a1e      	ldr	r2, [pc, #120]	; (800b794 <_free_r+0x94>)
 800b71c:	9801      	ldr	r0, [sp, #4]
 800b71e:	6813      	ldr	r3, [r2, #0]
 800b720:	b933      	cbnz	r3, 800b730 <_free_r+0x30>
 800b722:	6063      	str	r3, [r4, #4]
 800b724:	6014      	str	r4, [r2, #0]
 800b726:	b003      	add	sp, #12
 800b728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b72c:	f7ff bb0a 	b.w	800ad44 <__malloc_unlock>
 800b730:	42a3      	cmp	r3, r4
 800b732:	d908      	bls.n	800b746 <_free_r+0x46>
 800b734:	6825      	ldr	r5, [r4, #0]
 800b736:	1961      	adds	r1, r4, r5
 800b738:	428b      	cmp	r3, r1
 800b73a:	bf01      	itttt	eq
 800b73c:	6819      	ldreq	r1, [r3, #0]
 800b73e:	685b      	ldreq	r3, [r3, #4]
 800b740:	1949      	addeq	r1, r1, r5
 800b742:	6021      	streq	r1, [r4, #0]
 800b744:	e7ed      	b.n	800b722 <_free_r+0x22>
 800b746:	461a      	mov	r2, r3
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	b10b      	cbz	r3, 800b750 <_free_r+0x50>
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	d9fa      	bls.n	800b746 <_free_r+0x46>
 800b750:	6811      	ldr	r1, [r2, #0]
 800b752:	1855      	adds	r5, r2, r1
 800b754:	42a5      	cmp	r5, r4
 800b756:	d10b      	bne.n	800b770 <_free_r+0x70>
 800b758:	6824      	ldr	r4, [r4, #0]
 800b75a:	4421      	add	r1, r4
 800b75c:	1854      	adds	r4, r2, r1
 800b75e:	42a3      	cmp	r3, r4
 800b760:	6011      	str	r1, [r2, #0]
 800b762:	d1e0      	bne.n	800b726 <_free_r+0x26>
 800b764:	681c      	ldr	r4, [r3, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	6053      	str	r3, [r2, #4]
 800b76a:	4421      	add	r1, r4
 800b76c:	6011      	str	r1, [r2, #0]
 800b76e:	e7da      	b.n	800b726 <_free_r+0x26>
 800b770:	d902      	bls.n	800b778 <_free_r+0x78>
 800b772:	230c      	movs	r3, #12
 800b774:	6003      	str	r3, [r0, #0]
 800b776:	e7d6      	b.n	800b726 <_free_r+0x26>
 800b778:	6825      	ldr	r5, [r4, #0]
 800b77a:	1961      	adds	r1, r4, r5
 800b77c:	428b      	cmp	r3, r1
 800b77e:	bf04      	itt	eq
 800b780:	6819      	ldreq	r1, [r3, #0]
 800b782:	685b      	ldreq	r3, [r3, #4]
 800b784:	6063      	str	r3, [r4, #4]
 800b786:	bf04      	itt	eq
 800b788:	1949      	addeq	r1, r1, r5
 800b78a:	6021      	streq	r1, [r4, #0]
 800b78c:	6054      	str	r4, [r2, #4]
 800b78e:	e7ca      	b.n	800b726 <_free_r+0x26>
 800b790:	b003      	add	sp, #12
 800b792:	bd30      	pop	{r4, r5, pc}
 800b794:	20003b90 	.word	0x20003b90

0800b798 <__ssputs_r>:
 800b798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b79c:	688e      	ldr	r6, [r1, #8]
 800b79e:	429e      	cmp	r6, r3
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	4690      	mov	r8, r2
 800b7a6:	461f      	mov	r7, r3
 800b7a8:	d838      	bhi.n	800b81c <__ssputs_r+0x84>
 800b7aa:	898a      	ldrh	r2, [r1, #12]
 800b7ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7b0:	d032      	beq.n	800b818 <__ssputs_r+0x80>
 800b7b2:	6825      	ldr	r5, [r4, #0]
 800b7b4:	6909      	ldr	r1, [r1, #16]
 800b7b6:	eba5 0901 	sub.w	r9, r5, r1
 800b7ba:	6965      	ldr	r5, [r4, #20]
 800b7bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	444b      	add	r3, r9
 800b7c8:	106d      	asrs	r5, r5, #1
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	bf38      	it	cc
 800b7ce:	461d      	movcc	r5, r3
 800b7d0:	0553      	lsls	r3, r2, #21
 800b7d2:	d531      	bpl.n	800b838 <__ssputs_r+0xa0>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f7fc f92f 	bl	8007a38 <_malloc_r>
 800b7da:	4606      	mov	r6, r0
 800b7dc:	b950      	cbnz	r0, 800b7f4 <__ssputs_r+0x5c>
 800b7de:	230c      	movs	r3, #12
 800b7e0:	f8ca 3000 	str.w	r3, [sl]
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f4:	6921      	ldr	r1, [r4, #16]
 800b7f6:	464a      	mov	r2, r9
 800b7f8:	f7fc f8e7 	bl	80079ca <memcpy>
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b806:	81a3      	strh	r3, [r4, #12]
 800b808:	6126      	str	r6, [r4, #16]
 800b80a:	6165      	str	r5, [r4, #20]
 800b80c:	444e      	add	r6, r9
 800b80e:	eba5 0509 	sub.w	r5, r5, r9
 800b812:	6026      	str	r6, [r4, #0]
 800b814:	60a5      	str	r5, [r4, #8]
 800b816:	463e      	mov	r6, r7
 800b818:	42be      	cmp	r6, r7
 800b81a:	d900      	bls.n	800b81e <__ssputs_r+0x86>
 800b81c:	463e      	mov	r6, r7
 800b81e:	6820      	ldr	r0, [r4, #0]
 800b820:	4632      	mov	r2, r6
 800b822:	4641      	mov	r1, r8
 800b824:	f000 f982 	bl	800bb2c <memmove>
 800b828:	68a3      	ldr	r3, [r4, #8]
 800b82a:	1b9b      	subs	r3, r3, r6
 800b82c:	60a3      	str	r3, [r4, #8]
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	4433      	add	r3, r6
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	2000      	movs	r0, #0
 800b836:	e7db      	b.n	800b7f0 <__ssputs_r+0x58>
 800b838:	462a      	mov	r2, r5
 800b83a:	f000 f991 	bl	800bb60 <_realloc_r>
 800b83e:	4606      	mov	r6, r0
 800b840:	2800      	cmp	r0, #0
 800b842:	d1e1      	bne.n	800b808 <__ssputs_r+0x70>
 800b844:	6921      	ldr	r1, [r4, #16]
 800b846:	4650      	mov	r0, sl
 800b848:	f7ff ff5a 	bl	800b700 <_free_r>
 800b84c:	e7c7      	b.n	800b7de <__ssputs_r+0x46>
	...

0800b850 <_svfiprintf_r>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	4698      	mov	r8, r3
 800b856:	898b      	ldrh	r3, [r1, #12]
 800b858:	061b      	lsls	r3, r3, #24
 800b85a:	b09d      	sub	sp, #116	; 0x74
 800b85c:	4607      	mov	r7, r0
 800b85e:	460d      	mov	r5, r1
 800b860:	4614      	mov	r4, r2
 800b862:	d50e      	bpl.n	800b882 <_svfiprintf_r+0x32>
 800b864:	690b      	ldr	r3, [r1, #16]
 800b866:	b963      	cbnz	r3, 800b882 <_svfiprintf_r+0x32>
 800b868:	2140      	movs	r1, #64	; 0x40
 800b86a:	f7fc f8e5 	bl	8007a38 <_malloc_r>
 800b86e:	6028      	str	r0, [r5, #0]
 800b870:	6128      	str	r0, [r5, #16]
 800b872:	b920      	cbnz	r0, 800b87e <_svfiprintf_r+0x2e>
 800b874:	230c      	movs	r3, #12
 800b876:	603b      	str	r3, [r7, #0]
 800b878:	f04f 30ff 	mov.w	r0, #4294967295
 800b87c:	e0d1      	b.n	800ba22 <_svfiprintf_r+0x1d2>
 800b87e:	2340      	movs	r3, #64	; 0x40
 800b880:	616b      	str	r3, [r5, #20]
 800b882:	2300      	movs	r3, #0
 800b884:	9309      	str	r3, [sp, #36]	; 0x24
 800b886:	2320      	movs	r3, #32
 800b888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b88c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b890:	2330      	movs	r3, #48	; 0x30
 800b892:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba3c <_svfiprintf_r+0x1ec>
 800b896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b89a:	f04f 0901 	mov.w	r9, #1
 800b89e:	4623      	mov	r3, r4
 800b8a0:	469a      	mov	sl, r3
 800b8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a6:	b10a      	cbz	r2, 800b8ac <_svfiprintf_r+0x5c>
 800b8a8:	2a25      	cmp	r2, #37	; 0x25
 800b8aa:	d1f9      	bne.n	800b8a0 <_svfiprintf_r+0x50>
 800b8ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b8b0:	d00b      	beq.n	800b8ca <_svfiprintf_r+0x7a>
 800b8b2:	465b      	mov	r3, fp
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff ff6d 	bl	800b798 <__ssputs_r>
 800b8be:	3001      	adds	r0, #1
 800b8c0:	f000 80aa 	beq.w	800ba18 <_svfiprintf_r+0x1c8>
 800b8c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8c6:	445a      	add	r2, fp
 800b8c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 80a2 	beq.w	800ba18 <_svfiprintf_r+0x1c8>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8de:	f10a 0a01 	add.w	sl, sl, #1
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	9307      	str	r3, [sp, #28]
 800b8e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b8ec:	4654      	mov	r4, sl
 800b8ee:	2205      	movs	r2, #5
 800b8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f4:	4851      	ldr	r0, [pc, #324]	; (800ba3c <_svfiprintf_r+0x1ec>)
 800b8f6:	f7f4 fc93 	bl	8000220 <memchr>
 800b8fa:	9a04      	ldr	r2, [sp, #16]
 800b8fc:	b9d8      	cbnz	r0, 800b936 <_svfiprintf_r+0xe6>
 800b8fe:	06d0      	lsls	r0, r2, #27
 800b900:	bf44      	itt	mi
 800b902:	2320      	movmi	r3, #32
 800b904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b908:	0711      	lsls	r1, r2, #28
 800b90a:	bf44      	itt	mi
 800b90c:	232b      	movmi	r3, #43	; 0x2b
 800b90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b912:	f89a 3000 	ldrb.w	r3, [sl]
 800b916:	2b2a      	cmp	r3, #42	; 0x2a
 800b918:	d015      	beq.n	800b946 <_svfiprintf_r+0xf6>
 800b91a:	9a07      	ldr	r2, [sp, #28]
 800b91c:	4654      	mov	r4, sl
 800b91e:	2000      	movs	r0, #0
 800b920:	f04f 0c0a 	mov.w	ip, #10
 800b924:	4621      	mov	r1, r4
 800b926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b92a:	3b30      	subs	r3, #48	; 0x30
 800b92c:	2b09      	cmp	r3, #9
 800b92e:	d94e      	bls.n	800b9ce <_svfiprintf_r+0x17e>
 800b930:	b1b0      	cbz	r0, 800b960 <_svfiprintf_r+0x110>
 800b932:	9207      	str	r2, [sp, #28]
 800b934:	e014      	b.n	800b960 <_svfiprintf_r+0x110>
 800b936:	eba0 0308 	sub.w	r3, r0, r8
 800b93a:	fa09 f303 	lsl.w	r3, r9, r3
 800b93e:	4313      	orrs	r3, r2
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	46a2      	mov	sl, r4
 800b944:	e7d2      	b.n	800b8ec <_svfiprintf_r+0x9c>
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	1d19      	adds	r1, r3, #4
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	9103      	str	r1, [sp, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bfbb      	ittet	lt
 800b952:	425b      	neglt	r3, r3
 800b954:	f042 0202 	orrlt.w	r2, r2, #2
 800b958:	9307      	strge	r3, [sp, #28]
 800b95a:	9307      	strlt	r3, [sp, #28]
 800b95c:	bfb8      	it	lt
 800b95e:	9204      	strlt	r2, [sp, #16]
 800b960:	7823      	ldrb	r3, [r4, #0]
 800b962:	2b2e      	cmp	r3, #46	; 0x2e
 800b964:	d10c      	bne.n	800b980 <_svfiprintf_r+0x130>
 800b966:	7863      	ldrb	r3, [r4, #1]
 800b968:	2b2a      	cmp	r3, #42	; 0x2a
 800b96a:	d135      	bne.n	800b9d8 <_svfiprintf_r+0x188>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	1d1a      	adds	r2, r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	9203      	str	r2, [sp, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	bfb8      	it	lt
 800b978:	f04f 33ff 	movlt.w	r3, #4294967295
 800b97c:	3402      	adds	r4, #2
 800b97e:	9305      	str	r3, [sp, #20]
 800b980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba4c <_svfiprintf_r+0x1fc>
 800b984:	7821      	ldrb	r1, [r4, #0]
 800b986:	2203      	movs	r2, #3
 800b988:	4650      	mov	r0, sl
 800b98a:	f7f4 fc49 	bl	8000220 <memchr>
 800b98e:	b140      	cbz	r0, 800b9a2 <_svfiprintf_r+0x152>
 800b990:	2340      	movs	r3, #64	; 0x40
 800b992:	eba0 000a 	sub.w	r0, r0, sl
 800b996:	fa03 f000 	lsl.w	r0, r3, r0
 800b99a:	9b04      	ldr	r3, [sp, #16]
 800b99c:	4303      	orrs	r3, r0
 800b99e:	3401      	adds	r4, #1
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a6:	4826      	ldr	r0, [pc, #152]	; (800ba40 <_svfiprintf_r+0x1f0>)
 800b9a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ac:	2206      	movs	r2, #6
 800b9ae:	f7f4 fc37 	bl	8000220 <memchr>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d038      	beq.n	800ba28 <_svfiprintf_r+0x1d8>
 800b9b6:	4b23      	ldr	r3, [pc, #140]	; (800ba44 <_svfiprintf_r+0x1f4>)
 800b9b8:	bb1b      	cbnz	r3, 800ba02 <_svfiprintf_r+0x1b2>
 800b9ba:	9b03      	ldr	r3, [sp, #12]
 800b9bc:	3307      	adds	r3, #7
 800b9be:	f023 0307 	bic.w	r3, r3, #7
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	9303      	str	r3, [sp, #12]
 800b9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c8:	4433      	add	r3, r6
 800b9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b9cc:	e767      	b.n	800b89e <_svfiprintf_r+0x4e>
 800b9ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	e7a5      	b.n	800b924 <_svfiprintf_r+0xd4>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	3401      	adds	r4, #1
 800b9dc:	9305      	str	r3, [sp, #20]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	f04f 0c0a 	mov.w	ip, #10
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9ea:	3a30      	subs	r2, #48	; 0x30
 800b9ec:	2a09      	cmp	r2, #9
 800b9ee:	d903      	bls.n	800b9f8 <_svfiprintf_r+0x1a8>
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d0c5      	beq.n	800b980 <_svfiprintf_r+0x130>
 800b9f4:	9105      	str	r1, [sp, #20]
 800b9f6:	e7c3      	b.n	800b980 <_svfiprintf_r+0x130>
 800b9f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e7f0      	b.n	800b9e4 <_svfiprintf_r+0x194>
 800ba02:	ab03      	add	r3, sp, #12
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	462a      	mov	r2, r5
 800ba08:	4b0f      	ldr	r3, [pc, #60]	; (800ba48 <_svfiprintf_r+0x1f8>)
 800ba0a:	a904      	add	r1, sp, #16
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7fc f927 	bl	8007c60 <_printf_float>
 800ba12:	1c42      	adds	r2, r0, #1
 800ba14:	4606      	mov	r6, r0
 800ba16:	d1d6      	bne.n	800b9c6 <_svfiprintf_r+0x176>
 800ba18:	89ab      	ldrh	r3, [r5, #12]
 800ba1a:	065b      	lsls	r3, r3, #25
 800ba1c:	f53f af2c 	bmi.w	800b878 <_svfiprintf_r+0x28>
 800ba20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba22:	b01d      	add	sp, #116	; 0x74
 800ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba28:	ab03      	add	r3, sp, #12
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	462a      	mov	r2, r5
 800ba2e:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <_svfiprintf_r+0x1f8>)
 800ba30:	a904      	add	r1, sp, #16
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7fc fbb8 	bl	80081a8 <_printf_i>
 800ba38:	e7eb      	b.n	800ba12 <_svfiprintf_r+0x1c2>
 800ba3a:	bf00      	nop
 800ba3c:	0802829c 	.word	0x0802829c
 800ba40:	080282a6 	.word	0x080282a6
 800ba44:	08007c61 	.word	0x08007c61
 800ba48:	0800b799 	.word	0x0800b799
 800ba4c:	080282a2 	.word	0x080282a2

0800ba50 <_read_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	; (800ba70 <_read_r+0x20>)
 800ba54:	4604      	mov	r4, r0
 800ba56:	4608      	mov	r0, r1
 800ba58:	4611      	mov	r1, r2
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	602a      	str	r2, [r5, #0]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	f7f6 f8f0 	bl	8001c44 <_read>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d102      	bne.n	800ba6e <_read_r+0x1e>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	b103      	cbz	r3, 800ba6e <_read_r+0x1e>
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	20003b98 	.word	0x20003b98
 800ba74:	00000000 	.word	0x00000000

0800ba78 <nan>:
 800ba78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba80 <nan+0x8>
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	00000000 	.word	0x00000000
 800ba84:	7ff80000 	.word	0x7ff80000

0800ba88 <strncmp>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	b17a      	cbz	r2, 800baac <strncmp+0x24>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	3901      	subs	r1, #1
 800ba90:	1884      	adds	r4, r0, r2
 800ba92:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba9a:	4290      	cmp	r0, r2
 800ba9c:	d101      	bne.n	800baa2 <strncmp+0x1a>
 800ba9e:	42a3      	cmp	r3, r4
 800baa0:	d101      	bne.n	800baa6 <strncmp+0x1e>
 800baa2:	1a80      	subs	r0, r0, r2
 800baa4:	bd10      	pop	{r4, pc}
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d1f3      	bne.n	800ba92 <strncmp+0xa>
 800baaa:	e7fa      	b.n	800baa2 <strncmp+0x1a>
 800baac:	4610      	mov	r0, r2
 800baae:	e7f9      	b.n	800baa4 <strncmp+0x1c>

0800bab0 <__ascii_wctomb>:
 800bab0:	b149      	cbz	r1, 800bac6 <__ascii_wctomb+0x16>
 800bab2:	2aff      	cmp	r2, #255	; 0xff
 800bab4:	bf85      	ittet	hi
 800bab6:	238a      	movhi	r3, #138	; 0x8a
 800bab8:	6003      	strhi	r3, [r0, #0]
 800baba:	700a      	strbls	r2, [r1, #0]
 800babc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bac0:	bf98      	it	ls
 800bac2:	2001      	movls	r0, #1
 800bac4:	4770      	bx	lr
 800bac6:	4608      	mov	r0, r1
 800bac8:	4770      	bx	lr
	...

0800bacc <__assert_func>:
 800bacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bace:	4614      	mov	r4, r2
 800bad0:	461a      	mov	r2, r3
 800bad2:	4b09      	ldr	r3, [pc, #36]	; (800baf8 <__assert_func+0x2c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4605      	mov	r5, r0
 800bad8:	68d8      	ldr	r0, [r3, #12]
 800bada:	b14c      	cbz	r4, 800baf0 <__assert_func+0x24>
 800badc:	4b07      	ldr	r3, [pc, #28]	; (800bafc <__assert_func+0x30>)
 800bade:	9100      	str	r1, [sp, #0]
 800bae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bae4:	4906      	ldr	r1, [pc, #24]	; (800bb00 <__assert_func+0x34>)
 800bae6:	462b      	mov	r3, r5
 800bae8:	f000 f80e 	bl	800bb08 <fiprintf>
 800baec:	f000 fa80 	bl	800bff0 <abort>
 800baf0:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <__assert_func+0x38>)
 800baf2:	461c      	mov	r4, r3
 800baf4:	e7f3      	b.n	800bade <__assert_func+0x12>
 800baf6:	bf00      	nop
 800baf8:	20000010 	.word	0x20000010
 800bafc:	080282ad 	.word	0x080282ad
 800bb00:	080282ba 	.word	0x080282ba
 800bb04:	080282e8 	.word	0x080282e8

0800bb08 <fiprintf>:
 800bb08:	b40e      	push	{r1, r2, r3}
 800bb0a:	b503      	push	{r0, r1, lr}
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	ab03      	add	r3, sp, #12
 800bb10:	4805      	ldr	r0, [pc, #20]	; (800bb28 <fiprintf+0x20>)
 800bb12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb16:	6800      	ldr	r0, [r0, #0]
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	f000 f879 	bl	800bc10 <_vfiprintf_r>
 800bb1e:	b002      	add	sp, #8
 800bb20:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb24:	b003      	add	sp, #12
 800bb26:	4770      	bx	lr
 800bb28:	20000010 	.word	0x20000010

0800bb2c <memmove>:
 800bb2c:	4288      	cmp	r0, r1
 800bb2e:	b510      	push	{r4, lr}
 800bb30:	eb01 0402 	add.w	r4, r1, r2
 800bb34:	d902      	bls.n	800bb3c <memmove+0x10>
 800bb36:	4284      	cmp	r4, r0
 800bb38:	4623      	mov	r3, r4
 800bb3a:	d807      	bhi.n	800bb4c <memmove+0x20>
 800bb3c:	1e43      	subs	r3, r0, #1
 800bb3e:	42a1      	cmp	r1, r4
 800bb40:	d008      	beq.n	800bb54 <memmove+0x28>
 800bb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb4a:	e7f8      	b.n	800bb3e <memmove+0x12>
 800bb4c:	4402      	add	r2, r0
 800bb4e:	4601      	mov	r1, r0
 800bb50:	428a      	cmp	r2, r1
 800bb52:	d100      	bne.n	800bb56 <memmove+0x2a>
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb5e:	e7f7      	b.n	800bb50 <memmove+0x24>

0800bb60 <_realloc_r>:
 800bb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb64:	4680      	mov	r8, r0
 800bb66:	4614      	mov	r4, r2
 800bb68:	460e      	mov	r6, r1
 800bb6a:	b921      	cbnz	r1, 800bb76 <_realloc_r+0x16>
 800bb6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb70:	4611      	mov	r1, r2
 800bb72:	f7fb bf61 	b.w	8007a38 <_malloc_r>
 800bb76:	b92a      	cbnz	r2, 800bb84 <_realloc_r+0x24>
 800bb78:	f7ff fdc2 	bl	800b700 <_free_r>
 800bb7c:	4625      	mov	r5, r4
 800bb7e:	4628      	mov	r0, r5
 800bb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb84:	f000 faa0 	bl	800c0c8 <_malloc_usable_size_r>
 800bb88:	4284      	cmp	r4, r0
 800bb8a:	4607      	mov	r7, r0
 800bb8c:	d802      	bhi.n	800bb94 <_realloc_r+0x34>
 800bb8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb92:	d812      	bhi.n	800bbba <_realloc_r+0x5a>
 800bb94:	4621      	mov	r1, r4
 800bb96:	4640      	mov	r0, r8
 800bb98:	f7fb ff4e 	bl	8007a38 <_malloc_r>
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0ed      	beq.n	800bb7e <_realloc_r+0x1e>
 800bba2:	42bc      	cmp	r4, r7
 800bba4:	4622      	mov	r2, r4
 800bba6:	4631      	mov	r1, r6
 800bba8:	bf28      	it	cs
 800bbaa:	463a      	movcs	r2, r7
 800bbac:	f7fb ff0d 	bl	80079ca <memcpy>
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	f7ff fda4 	bl	800b700 <_free_r>
 800bbb8:	e7e1      	b.n	800bb7e <_realloc_r+0x1e>
 800bbba:	4635      	mov	r5, r6
 800bbbc:	e7df      	b.n	800bb7e <_realloc_r+0x1e>

0800bbbe <__sfputc_r>:
 800bbbe:	6893      	ldr	r3, [r2, #8]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	b410      	push	{r4}
 800bbc6:	6093      	str	r3, [r2, #8]
 800bbc8:	da08      	bge.n	800bbdc <__sfputc_r+0x1e>
 800bbca:	6994      	ldr	r4, [r2, #24]
 800bbcc:	42a3      	cmp	r3, r4
 800bbce:	db01      	blt.n	800bbd4 <__sfputc_r+0x16>
 800bbd0:	290a      	cmp	r1, #10
 800bbd2:	d103      	bne.n	800bbdc <__sfputc_r+0x1e>
 800bbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd8:	f000 b94a 	b.w	800be70 <__swbuf_r>
 800bbdc:	6813      	ldr	r3, [r2, #0]
 800bbde:	1c58      	adds	r0, r3, #1
 800bbe0:	6010      	str	r0, [r2, #0]
 800bbe2:	7019      	strb	r1, [r3, #0]
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <__sfputs_r>:
 800bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbee:	4606      	mov	r6, r0
 800bbf0:	460f      	mov	r7, r1
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	18d5      	adds	r5, r2, r3
 800bbf6:	42ac      	cmp	r4, r5
 800bbf8:	d101      	bne.n	800bbfe <__sfputs_r+0x12>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e007      	b.n	800bc0e <__sfputs_r+0x22>
 800bbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc02:	463a      	mov	r2, r7
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7ff ffda 	bl	800bbbe <__sfputc_r>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	d1f3      	bne.n	800bbf6 <__sfputs_r+0xa>
 800bc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc10 <_vfiprintf_r>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	460d      	mov	r5, r1
 800bc16:	b09d      	sub	sp, #116	; 0x74
 800bc18:	4614      	mov	r4, r2
 800bc1a:	4698      	mov	r8, r3
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	b118      	cbz	r0, 800bc28 <_vfiprintf_r+0x18>
 800bc20:	6983      	ldr	r3, [r0, #24]
 800bc22:	b90b      	cbnz	r3, 800bc28 <_vfiprintf_r+0x18>
 800bc24:	f7fb fe0c 	bl	8007840 <__sinit>
 800bc28:	4b89      	ldr	r3, [pc, #548]	; (800be50 <_vfiprintf_r+0x240>)
 800bc2a:	429d      	cmp	r5, r3
 800bc2c:	d11b      	bne.n	800bc66 <_vfiprintf_r+0x56>
 800bc2e:	6875      	ldr	r5, [r6, #4]
 800bc30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc32:	07d9      	lsls	r1, r3, #31
 800bc34:	d405      	bmi.n	800bc42 <_vfiprintf_r+0x32>
 800bc36:	89ab      	ldrh	r3, [r5, #12]
 800bc38:	059a      	lsls	r2, r3, #22
 800bc3a:	d402      	bmi.n	800bc42 <_vfiprintf_r+0x32>
 800bc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc3e:	f7fb fec2 	bl	80079c6 <__retarget_lock_acquire_recursive>
 800bc42:	89ab      	ldrh	r3, [r5, #12]
 800bc44:	071b      	lsls	r3, r3, #28
 800bc46:	d501      	bpl.n	800bc4c <_vfiprintf_r+0x3c>
 800bc48:	692b      	ldr	r3, [r5, #16]
 800bc4a:	b9eb      	cbnz	r3, 800bc88 <_vfiprintf_r+0x78>
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4630      	mov	r0, r6
 800bc50:	f000 f960 	bl	800bf14 <__swsetup_r>
 800bc54:	b1c0      	cbz	r0, 800bc88 <_vfiprintf_r+0x78>
 800bc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc58:	07dc      	lsls	r4, r3, #31
 800bc5a:	d50e      	bpl.n	800bc7a <_vfiprintf_r+0x6a>
 800bc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc60:	b01d      	add	sp, #116	; 0x74
 800bc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc66:	4b7b      	ldr	r3, [pc, #492]	; (800be54 <_vfiprintf_r+0x244>)
 800bc68:	429d      	cmp	r5, r3
 800bc6a:	d101      	bne.n	800bc70 <_vfiprintf_r+0x60>
 800bc6c:	68b5      	ldr	r5, [r6, #8]
 800bc6e:	e7df      	b.n	800bc30 <_vfiprintf_r+0x20>
 800bc70:	4b79      	ldr	r3, [pc, #484]	; (800be58 <_vfiprintf_r+0x248>)
 800bc72:	429d      	cmp	r5, r3
 800bc74:	bf08      	it	eq
 800bc76:	68f5      	ldreq	r5, [r6, #12]
 800bc78:	e7da      	b.n	800bc30 <_vfiprintf_r+0x20>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	0598      	lsls	r0, r3, #22
 800bc7e:	d4ed      	bmi.n	800bc5c <_vfiprintf_r+0x4c>
 800bc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc82:	f7fb fea1 	bl	80079c8 <__retarget_lock_release_recursive>
 800bc86:	e7e9      	b.n	800bc5c <_vfiprintf_r+0x4c>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8c:	2320      	movs	r3, #32
 800bc8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc92:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc96:	2330      	movs	r3, #48	; 0x30
 800bc98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be5c <_vfiprintf_r+0x24c>
 800bc9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca0:	f04f 0901 	mov.w	r9, #1
 800bca4:	4623      	mov	r3, r4
 800bca6:	469a      	mov	sl, r3
 800bca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcac:	b10a      	cbz	r2, 800bcb2 <_vfiprintf_r+0xa2>
 800bcae:	2a25      	cmp	r2, #37	; 0x25
 800bcb0:	d1f9      	bne.n	800bca6 <_vfiprintf_r+0x96>
 800bcb2:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb6:	d00b      	beq.n	800bcd0 <_vfiprintf_r+0xc0>
 800bcb8:	465b      	mov	r3, fp
 800bcba:	4622      	mov	r2, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7ff ff94 	bl	800bbec <__sfputs_r>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f000 80aa 	beq.w	800be1e <_vfiprintf_r+0x20e>
 800bcca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bccc:	445a      	add	r2, fp
 800bcce:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 80a2 	beq.w	800be1e <_vfiprintf_r+0x20e>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce4:	f10a 0a01 	add.w	sl, sl, #1
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	9307      	str	r3, [sp, #28]
 800bcec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf0:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf2:	4654      	mov	r4, sl
 800bcf4:	2205      	movs	r2, #5
 800bcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfa:	4858      	ldr	r0, [pc, #352]	; (800be5c <_vfiprintf_r+0x24c>)
 800bcfc:	f7f4 fa90 	bl	8000220 <memchr>
 800bd00:	9a04      	ldr	r2, [sp, #16]
 800bd02:	b9d8      	cbnz	r0, 800bd3c <_vfiprintf_r+0x12c>
 800bd04:	06d1      	lsls	r1, r2, #27
 800bd06:	bf44      	itt	mi
 800bd08:	2320      	movmi	r3, #32
 800bd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0e:	0713      	lsls	r3, r2, #28
 800bd10:	bf44      	itt	mi
 800bd12:	232b      	movmi	r3, #43	; 0x2b
 800bd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd18:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd1e:	d015      	beq.n	800bd4c <_vfiprintf_r+0x13c>
 800bd20:	9a07      	ldr	r2, [sp, #28]
 800bd22:	4654      	mov	r4, sl
 800bd24:	2000      	movs	r0, #0
 800bd26:	f04f 0c0a 	mov.w	ip, #10
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd30:	3b30      	subs	r3, #48	; 0x30
 800bd32:	2b09      	cmp	r3, #9
 800bd34:	d94e      	bls.n	800bdd4 <_vfiprintf_r+0x1c4>
 800bd36:	b1b0      	cbz	r0, 800bd66 <_vfiprintf_r+0x156>
 800bd38:	9207      	str	r2, [sp, #28]
 800bd3a:	e014      	b.n	800bd66 <_vfiprintf_r+0x156>
 800bd3c:	eba0 0308 	sub.w	r3, r0, r8
 800bd40:	fa09 f303 	lsl.w	r3, r9, r3
 800bd44:	4313      	orrs	r3, r2
 800bd46:	9304      	str	r3, [sp, #16]
 800bd48:	46a2      	mov	sl, r4
 800bd4a:	e7d2      	b.n	800bcf2 <_vfiprintf_r+0xe2>
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	1d19      	adds	r1, r3, #4
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	9103      	str	r1, [sp, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	bfbb      	ittet	lt
 800bd58:	425b      	neglt	r3, r3
 800bd5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5e:	9307      	strge	r3, [sp, #28]
 800bd60:	9307      	strlt	r3, [sp, #28]
 800bd62:	bfb8      	it	lt
 800bd64:	9204      	strlt	r2, [sp, #16]
 800bd66:	7823      	ldrb	r3, [r4, #0]
 800bd68:	2b2e      	cmp	r3, #46	; 0x2e
 800bd6a:	d10c      	bne.n	800bd86 <_vfiprintf_r+0x176>
 800bd6c:	7863      	ldrb	r3, [r4, #1]
 800bd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd70:	d135      	bne.n	800bdde <_vfiprintf_r+0x1ce>
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	1d1a      	adds	r2, r3, #4
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	9203      	str	r2, [sp, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	bfb8      	it	lt
 800bd7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd82:	3402      	adds	r4, #2
 800bd84:	9305      	str	r3, [sp, #20]
 800bd86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be6c <_vfiprintf_r+0x25c>
 800bd8a:	7821      	ldrb	r1, [r4, #0]
 800bd8c:	2203      	movs	r2, #3
 800bd8e:	4650      	mov	r0, sl
 800bd90:	f7f4 fa46 	bl	8000220 <memchr>
 800bd94:	b140      	cbz	r0, 800bda8 <_vfiprintf_r+0x198>
 800bd96:	2340      	movs	r3, #64	; 0x40
 800bd98:	eba0 000a 	sub.w	r0, r0, sl
 800bd9c:	fa03 f000 	lsl.w	r0, r3, r0
 800bda0:	9b04      	ldr	r3, [sp, #16]
 800bda2:	4303      	orrs	r3, r0
 800bda4:	3401      	adds	r4, #1
 800bda6:	9304      	str	r3, [sp, #16]
 800bda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdac:	482c      	ldr	r0, [pc, #176]	; (800be60 <_vfiprintf_r+0x250>)
 800bdae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb2:	2206      	movs	r2, #6
 800bdb4:	f7f4 fa34 	bl	8000220 <memchr>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d03f      	beq.n	800be3c <_vfiprintf_r+0x22c>
 800bdbc:	4b29      	ldr	r3, [pc, #164]	; (800be64 <_vfiprintf_r+0x254>)
 800bdbe:	bb1b      	cbnz	r3, 800be08 <_vfiprintf_r+0x1f8>
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	3307      	adds	r3, #7
 800bdc4:	f023 0307 	bic.w	r3, r3, #7
 800bdc8:	3308      	adds	r3, #8
 800bdca:	9303      	str	r3, [sp, #12]
 800bdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdce:	443b      	add	r3, r7
 800bdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd2:	e767      	b.n	800bca4 <_vfiprintf_r+0x94>
 800bdd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd8:	460c      	mov	r4, r1
 800bdda:	2001      	movs	r0, #1
 800bddc:	e7a5      	b.n	800bd2a <_vfiprintf_r+0x11a>
 800bdde:	2300      	movs	r3, #0
 800bde0:	3401      	adds	r4, #1
 800bde2:	9305      	str	r3, [sp, #20]
 800bde4:	4619      	mov	r1, r3
 800bde6:	f04f 0c0a 	mov.w	ip, #10
 800bdea:	4620      	mov	r0, r4
 800bdec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf0:	3a30      	subs	r2, #48	; 0x30
 800bdf2:	2a09      	cmp	r2, #9
 800bdf4:	d903      	bls.n	800bdfe <_vfiprintf_r+0x1ee>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0c5      	beq.n	800bd86 <_vfiprintf_r+0x176>
 800bdfa:	9105      	str	r1, [sp, #20]
 800bdfc:	e7c3      	b.n	800bd86 <_vfiprintf_r+0x176>
 800bdfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800be02:	4604      	mov	r4, r0
 800be04:	2301      	movs	r3, #1
 800be06:	e7f0      	b.n	800bdea <_vfiprintf_r+0x1da>
 800be08:	ab03      	add	r3, sp, #12
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	462a      	mov	r2, r5
 800be0e:	4b16      	ldr	r3, [pc, #88]	; (800be68 <_vfiprintf_r+0x258>)
 800be10:	a904      	add	r1, sp, #16
 800be12:	4630      	mov	r0, r6
 800be14:	f7fb ff24 	bl	8007c60 <_printf_float>
 800be18:	4607      	mov	r7, r0
 800be1a:	1c78      	adds	r0, r7, #1
 800be1c:	d1d6      	bne.n	800bdcc <_vfiprintf_r+0x1bc>
 800be1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be20:	07d9      	lsls	r1, r3, #31
 800be22:	d405      	bmi.n	800be30 <_vfiprintf_r+0x220>
 800be24:	89ab      	ldrh	r3, [r5, #12]
 800be26:	059a      	lsls	r2, r3, #22
 800be28:	d402      	bmi.n	800be30 <_vfiprintf_r+0x220>
 800be2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be2c:	f7fb fdcc 	bl	80079c8 <__retarget_lock_release_recursive>
 800be30:	89ab      	ldrh	r3, [r5, #12]
 800be32:	065b      	lsls	r3, r3, #25
 800be34:	f53f af12 	bmi.w	800bc5c <_vfiprintf_r+0x4c>
 800be38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be3a:	e711      	b.n	800bc60 <_vfiprintf_r+0x50>
 800be3c:	ab03      	add	r3, sp, #12
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	462a      	mov	r2, r5
 800be42:	4b09      	ldr	r3, [pc, #36]	; (800be68 <_vfiprintf_r+0x258>)
 800be44:	a904      	add	r1, sp, #16
 800be46:	4630      	mov	r0, r6
 800be48:	f7fc f9ae 	bl	80081a8 <_printf_i>
 800be4c:	e7e4      	b.n	800be18 <_vfiprintf_r+0x208>
 800be4e:	bf00      	nop
 800be50:	08027e68 	.word	0x08027e68
 800be54:	08027e88 	.word	0x08027e88
 800be58:	08027e48 	.word	0x08027e48
 800be5c:	0802829c 	.word	0x0802829c
 800be60:	080282a6 	.word	0x080282a6
 800be64:	08007c61 	.word	0x08007c61
 800be68:	0800bbed 	.word	0x0800bbed
 800be6c:	080282a2 	.word	0x080282a2

0800be70 <__swbuf_r>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	460e      	mov	r6, r1
 800be74:	4614      	mov	r4, r2
 800be76:	4605      	mov	r5, r0
 800be78:	b118      	cbz	r0, 800be82 <__swbuf_r+0x12>
 800be7a:	6983      	ldr	r3, [r0, #24]
 800be7c:	b90b      	cbnz	r3, 800be82 <__swbuf_r+0x12>
 800be7e:	f7fb fcdf 	bl	8007840 <__sinit>
 800be82:	4b21      	ldr	r3, [pc, #132]	; (800bf08 <__swbuf_r+0x98>)
 800be84:	429c      	cmp	r4, r3
 800be86:	d12b      	bne.n	800bee0 <__swbuf_r+0x70>
 800be88:	686c      	ldr	r4, [r5, #4]
 800be8a:	69a3      	ldr	r3, [r4, #24]
 800be8c:	60a3      	str	r3, [r4, #8]
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	071a      	lsls	r2, r3, #28
 800be92:	d52f      	bpl.n	800bef4 <__swbuf_r+0x84>
 800be94:	6923      	ldr	r3, [r4, #16]
 800be96:	b36b      	cbz	r3, 800bef4 <__swbuf_r+0x84>
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	6820      	ldr	r0, [r4, #0]
 800be9c:	1ac0      	subs	r0, r0, r3
 800be9e:	6963      	ldr	r3, [r4, #20]
 800bea0:	b2f6      	uxtb	r6, r6
 800bea2:	4283      	cmp	r3, r0
 800bea4:	4637      	mov	r7, r6
 800bea6:	dc04      	bgt.n	800beb2 <__swbuf_r+0x42>
 800bea8:	4621      	mov	r1, r4
 800beaa:	4628      	mov	r0, r5
 800beac:	f7fe fb68 	bl	800a580 <_fflush_r>
 800beb0:	bb30      	cbnz	r0, 800bf00 <__swbuf_r+0x90>
 800beb2:	68a3      	ldr	r3, [r4, #8]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	60a3      	str	r3, [r4, #8]
 800beb8:	6823      	ldr	r3, [r4, #0]
 800beba:	1c5a      	adds	r2, r3, #1
 800bebc:	6022      	str	r2, [r4, #0]
 800bebe:	701e      	strb	r6, [r3, #0]
 800bec0:	6963      	ldr	r3, [r4, #20]
 800bec2:	3001      	adds	r0, #1
 800bec4:	4283      	cmp	r3, r0
 800bec6:	d004      	beq.n	800bed2 <__swbuf_r+0x62>
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	07db      	lsls	r3, r3, #31
 800becc:	d506      	bpl.n	800bedc <__swbuf_r+0x6c>
 800bece:	2e0a      	cmp	r6, #10
 800bed0:	d104      	bne.n	800bedc <__swbuf_r+0x6c>
 800bed2:	4621      	mov	r1, r4
 800bed4:	4628      	mov	r0, r5
 800bed6:	f7fe fb53 	bl	800a580 <_fflush_r>
 800beda:	b988      	cbnz	r0, 800bf00 <__swbuf_r+0x90>
 800bedc:	4638      	mov	r0, r7
 800bede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <__swbuf_r+0x9c>)
 800bee2:	429c      	cmp	r4, r3
 800bee4:	d101      	bne.n	800beea <__swbuf_r+0x7a>
 800bee6:	68ac      	ldr	r4, [r5, #8]
 800bee8:	e7cf      	b.n	800be8a <__swbuf_r+0x1a>
 800beea:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <__swbuf_r+0xa0>)
 800beec:	429c      	cmp	r4, r3
 800beee:	bf08      	it	eq
 800bef0:	68ec      	ldreq	r4, [r5, #12]
 800bef2:	e7ca      	b.n	800be8a <__swbuf_r+0x1a>
 800bef4:	4621      	mov	r1, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	f000 f80c 	bl	800bf14 <__swsetup_r>
 800befc:	2800      	cmp	r0, #0
 800befe:	d0cb      	beq.n	800be98 <__swbuf_r+0x28>
 800bf00:	f04f 37ff 	mov.w	r7, #4294967295
 800bf04:	e7ea      	b.n	800bedc <__swbuf_r+0x6c>
 800bf06:	bf00      	nop
 800bf08:	08027e68 	.word	0x08027e68
 800bf0c:	08027e88 	.word	0x08027e88
 800bf10:	08027e48 	.word	0x08027e48

0800bf14 <__swsetup_r>:
 800bf14:	4b32      	ldr	r3, [pc, #200]	; (800bfe0 <__swsetup_r+0xcc>)
 800bf16:	b570      	push	{r4, r5, r6, lr}
 800bf18:	681d      	ldr	r5, [r3, #0]
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	b125      	cbz	r5, 800bf2a <__swsetup_r+0x16>
 800bf20:	69ab      	ldr	r3, [r5, #24]
 800bf22:	b913      	cbnz	r3, 800bf2a <__swsetup_r+0x16>
 800bf24:	4628      	mov	r0, r5
 800bf26:	f7fb fc8b 	bl	8007840 <__sinit>
 800bf2a:	4b2e      	ldr	r3, [pc, #184]	; (800bfe4 <__swsetup_r+0xd0>)
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	d10f      	bne.n	800bf50 <__swsetup_r+0x3c>
 800bf30:	686c      	ldr	r4, [r5, #4]
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf38:	0719      	lsls	r1, r3, #28
 800bf3a:	d42c      	bmi.n	800bf96 <__swsetup_r+0x82>
 800bf3c:	06dd      	lsls	r5, r3, #27
 800bf3e:	d411      	bmi.n	800bf64 <__swsetup_r+0x50>
 800bf40:	2309      	movs	r3, #9
 800bf42:	6033      	str	r3, [r6, #0]
 800bf44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf48:	81a3      	strh	r3, [r4, #12]
 800bf4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4e:	e03e      	b.n	800bfce <__swsetup_r+0xba>
 800bf50:	4b25      	ldr	r3, [pc, #148]	; (800bfe8 <__swsetup_r+0xd4>)
 800bf52:	429c      	cmp	r4, r3
 800bf54:	d101      	bne.n	800bf5a <__swsetup_r+0x46>
 800bf56:	68ac      	ldr	r4, [r5, #8]
 800bf58:	e7eb      	b.n	800bf32 <__swsetup_r+0x1e>
 800bf5a:	4b24      	ldr	r3, [pc, #144]	; (800bfec <__swsetup_r+0xd8>)
 800bf5c:	429c      	cmp	r4, r3
 800bf5e:	bf08      	it	eq
 800bf60:	68ec      	ldreq	r4, [r5, #12]
 800bf62:	e7e6      	b.n	800bf32 <__swsetup_r+0x1e>
 800bf64:	0758      	lsls	r0, r3, #29
 800bf66:	d512      	bpl.n	800bf8e <__swsetup_r+0x7a>
 800bf68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf6a:	b141      	cbz	r1, 800bf7e <__swsetup_r+0x6a>
 800bf6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf70:	4299      	cmp	r1, r3
 800bf72:	d002      	beq.n	800bf7a <__swsetup_r+0x66>
 800bf74:	4630      	mov	r0, r6
 800bf76:	f7ff fbc3 	bl	800b700 <_free_r>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf84:	81a3      	strh	r3, [r4, #12]
 800bf86:	2300      	movs	r3, #0
 800bf88:	6063      	str	r3, [r4, #4]
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	f043 0308 	orr.w	r3, r3, #8
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	6923      	ldr	r3, [r4, #16]
 800bf98:	b94b      	cbnz	r3, 800bfae <__swsetup_r+0x9a>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfa4:	d003      	beq.n	800bfae <__swsetup_r+0x9a>
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f000 f84d 	bl	800c048 <__smakebuf_r>
 800bfae:	89a0      	ldrh	r0, [r4, #12]
 800bfb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfb4:	f010 0301 	ands.w	r3, r0, #1
 800bfb8:	d00a      	beq.n	800bfd0 <__swsetup_r+0xbc>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60a3      	str	r3, [r4, #8]
 800bfbe:	6963      	ldr	r3, [r4, #20]
 800bfc0:	425b      	negs	r3, r3
 800bfc2:	61a3      	str	r3, [r4, #24]
 800bfc4:	6923      	ldr	r3, [r4, #16]
 800bfc6:	b943      	cbnz	r3, 800bfda <__swsetup_r+0xc6>
 800bfc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfcc:	d1ba      	bne.n	800bf44 <__swsetup_r+0x30>
 800bfce:	bd70      	pop	{r4, r5, r6, pc}
 800bfd0:	0781      	lsls	r1, r0, #30
 800bfd2:	bf58      	it	pl
 800bfd4:	6963      	ldrpl	r3, [r4, #20]
 800bfd6:	60a3      	str	r3, [r4, #8]
 800bfd8:	e7f4      	b.n	800bfc4 <__swsetup_r+0xb0>
 800bfda:	2000      	movs	r0, #0
 800bfdc:	e7f7      	b.n	800bfce <__swsetup_r+0xba>
 800bfde:	bf00      	nop
 800bfe0:	20000010 	.word	0x20000010
 800bfe4:	08027e68 	.word	0x08027e68
 800bfe8:	08027e88 	.word	0x08027e88
 800bfec:	08027e48 	.word	0x08027e48

0800bff0 <abort>:
 800bff0:	b508      	push	{r3, lr}
 800bff2:	2006      	movs	r0, #6
 800bff4:	f000 f898 	bl	800c128 <raise>
 800bff8:	2001      	movs	r0, #1
 800bffa:	f7f5 fe19 	bl	8001c30 <_exit>

0800bffe <__swhatbuf_r>:
 800bffe:	b570      	push	{r4, r5, r6, lr}
 800c000:	460e      	mov	r6, r1
 800c002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c006:	2900      	cmp	r1, #0
 800c008:	b096      	sub	sp, #88	; 0x58
 800c00a:	4614      	mov	r4, r2
 800c00c:	461d      	mov	r5, r3
 800c00e:	da08      	bge.n	800c022 <__swhatbuf_r+0x24>
 800c010:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	602a      	str	r2, [r5, #0]
 800c018:	061a      	lsls	r2, r3, #24
 800c01a:	d410      	bmi.n	800c03e <__swhatbuf_r+0x40>
 800c01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c020:	e00e      	b.n	800c040 <__swhatbuf_r+0x42>
 800c022:	466a      	mov	r2, sp
 800c024:	f000 f89c 	bl	800c160 <_fstat_r>
 800c028:	2800      	cmp	r0, #0
 800c02a:	dbf1      	blt.n	800c010 <__swhatbuf_r+0x12>
 800c02c:	9a01      	ldr	r2, [sp, #4]
 800c02e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c032:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c036:	425a      	negs	r2, r3
 800c038:	415a      	adcs	r2, r3
 800c03a:	602a      	str	r2, [r5, #0]
 800c03c:	e7ee      	b.n	800c01c <__swhatbuf_r+0x1e>
 800c03e:	2340      	movs	r3, #64	; 0x40
 800c040:	2000      	movs	r0, #0
 800c042:	6023      	str	r3, [r4, #0]
 800c044:	b016      	add	sp, #88	; 0x58
 800c046:	bd70      	pop	{r4, r5, r6, pc}

0800c048 <__smakebuf_r>:
 800c048:	898b      	ldrh	r3, [r1, #12]
 800c04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c04c:	079d      	lsls	r5, r3, #30
 800c04e:	4606      	mov	r6, r0
 800c050:	460c      	mov	r4, r1
 800c052:	d507      	bpl.n	800c064 <__smakebuf_r+0x1c>
 800c054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	6123      	str	r3, [r4, #16]
 800c05c:	2301      	movs	r3, #1
 800c05e:	6163      	str	r3, [r4, #20]
 800c060:	b002      	add	sp, #8
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	ab01      	add	r3, sp, #4
 800c066:	466a      	mov	r2, sp
 800c068:	f7ff ffc9 	bl	800bffe <__swhatbuf_r>
 800c06c:	9900      	ldr	r1, [sp, #0]
 800c06e:	4605      	mov	r5, r0
 800c070:	4630      	mov	r0, r6
 800c072:	f7fb fce1 	bl	8007a38 <_malloc_r>
 800c076:	b948      	cbnz	r0, 800c08c <__smakebuf_r+0x44>
 800c078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c07c:	059a      	lsls	r2, r3, #22
 800c07e:	d4ef      	bmi.n	800c060 <__smakebuf_r+0x18>
 800c080:	f023 0303 	bic.w	r3, r3, #3
 800c084:	f043 0302 	orr.w	r3, r3, #2
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	e7e3      	b.n	800c054 <__smakebuf_r+0xc>
 800c08c:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <__smakebuf_r+0x7c>)
 800c08e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	6020      	str	r0, [r4, #0]
 800c094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	6163      	str	r3, [r4, #20]
 800c09e:	9b01      	ldr	r3, [sp, #4]
 800c0a0:	6120      	str	r0, [r4, #16]
 800c0a2:	b15b      	cbz	r3, 800c0bc <__smakebuf_r+0x74>
 800c0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f000 f86b 	bl	800c184 <_isatty_r>
 800c0ae:	b128      	cbz	r0, 800c0bc <__smakebuf_r+0x74>
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	f023 0303 	bic.w	r3, r3, #3
 800c0b6:	f043 0301 	orr.w	r3, r3, #1
 800c0ba:	81a3      	strh	r3, [r4, #12]
 800c0bc:	89a0      	ldrh	r0, [r4, #12]
 800c0be:	4305      	orrs	r5, r0
 800c0c0:	81a5      	strh	r5, [r4, #12]
 800c0c2:	e7cd      	b.n	800c060 <__smakebuf_r+0x18>
 800c0c4:	080077d9 	.word	0x080077d9

0800c0c8 <_malloc_usable_size_r>:
 800c0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0cc:	1f18      	subs	r0, r3, #4
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	bfbc      	itt	lt
 800c0d2:	580b      	ldrlt	r3, [r1, r0]
 800c0d4:	18c0      	addlt	r0, r0, r3
 800c0d6:	4770      	bx	lr

0800c0d8 <_raise_r>:
 800c0d8:	291f      	cmp	r1, #31
 800c0da:	b538      	push	{r3, r4, r5, lr}
 800c0dc:	4604      	mov	r4, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	d904      	bls.n	800c0ec <_raise_r+0x14>
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0ee:	b112      	cbz	r2, 800c0f6 <_raise_r+0x1e>
 800c0f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0f4:	b94b      	cbnz	r3, 800c10a <_raise_r+0x32>
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 f830 	bl	800c15c <_getpid_r>
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	4601      	mov	r1, r0
 800c100:	4620      	mov	r0, r4
 800c102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c106:	f000 b817 	b.w	800c138 <_kill_r>
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d00a      	beq.n	800c124 <_raise_r+0x4c>
 800c10e:	1c59      	adds	r1, r3, #1
 800c110:	d103      	bne.n	800c11a <_raise_r+0x42>
 800c112:	2316      	movs	r3, #22
 800c114:	6003      	str	r3, [r0, #0]
 800c116:	2001      	movs	r0, #1
 800c118:	e7e7      	b.n	800c0ea <_raise_r+0x12>
 800c11a:	2400      	movs	r4, #0
 800c11c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c120:	4628      	mov	r0, r5
 800c122:	4798      	blx	r3
 800c124:	2000      	movs	r0, #0
 800c126:	e7e0      	b.n	800c0ea <_raise_r+0x12>

0800c128 <raise>:
 800c128:	4b02      	ldr	r3, [pc, #8]	; (800c134 <raise+0xc>)
 800c12a:	4601      	mov	r1, r0
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	f7ff bfd3 	b.w	800c0d8 <_raise_r>
 800c132:	bf00      	nop
 800c134:	20000010 	.word	0x20000010

0800c138 <_kill_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	; (800c158 <_kill_r+0x20>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	4611      	mov	r1, r2
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	f7f5 fd63 	bl	8001c10 <_kill>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d102      	bne.n	800c154 <_kill_r+0x1c>
 800c14e:	682b      	ldr	r3, [r5, #0]
 800c150:	b103      	cbz	r3, 800c154 <_kill_r+0x1c>
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	bd38      	pop	{r3, r4, r5, pc}
 800c156:	bf00      	nop
 800c158:	20003b98 	.word	0x20003b98

0800c15c <_getpid_r>:
 800c15c:	f7f5 bd50 	b.w	8001c00 <_getpid>

0800c160 <_fstat_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4d07      	ldr	r5, [pc, #28]	; (800c180 <_fstat_r+0x20>)
 800c164:	2300      	movs	r3, #0
 800c166:	4604      	mov	r4, r0
 800c168:	4608      	mov	r0, r1
 800c16a:	4611      	mov	r1, r2
 800c16c:	602b      	str	r3, [r5, #0]
 800c16e:	f7f5 fdae 	bl	8001cce <_fstat>
 800c172:	1c43      	adds	r3, r0, #1
 800c174:	d102      	bne.n	800c17c <_fstat_r+0x1c>
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	b103      	cbz	r3, 800c17c <_fstat_r+0x1c>
 800c17a:	6023      	str	r3, [r4, #0]
 800c17c:	bd38      	pop	{r3, r4, r5, pc}
 800c17e:	bf00      	nop
 800c180:	20003b98 	.word	0x20003b98

0800c184 <_isatty_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	; (800c1a0 <_isatty_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7f5 fdad 	bl	8001cee <_isatty>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_isatty_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_isatty_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	20003b98 	.word	0x20003b98

0800c1a4 <_init>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_fini>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr
